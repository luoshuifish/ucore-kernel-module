cscope 15 $HOME/Documents/Coursework/12_spring/os/ucore-x64-smp/ucore/src               0001519331
	@bootloader/arch/i386/asm.h

1 #i‚de‡
__BOOT_ASM_H__


2 
	#__BOOT_ASM_H__


	)

7 
	#SEG_NULLASM
 \

8 .
w‹d
 0, 0; \

9 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

18 
	#STA_X
 0x8

19 
	#STA_E
 0x4

20 
	#STA_C
 0x4

21 
	#STA_W
 0x2

22 
	#STA_R
 0x2

23 
	#STA_A
 0x1

24 

	)

	@bootloader/arch/i386/bootmain.c

1 
	~<ty≥s.h
>

2 
	~<x86.h
>

3 
	~<ñf.h
>

33 
	#SECTSIZE
 512

	)

34 
	#ELFHDR
 ((
ñfhdr
 *)0x10000)

35 

	)

38 
	$waôdisk
() {

39 (
	`öb
(0x1F7) & 0xC0) != 0x40)

41 
	}
}

45 
	$ªad£˘
(*
d°
, 
uöt32_t
 
£˙o
) {

47 
	`waôdisk
();

49 
	`outb
(0x1F2, 1);

50 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

51 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

52 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

53 
	`outb
(0x1F6, ((
£˙o
 >> 24) & 0xF) | 0xE0);

54 
	`outb
(0x1F7, 0x20);

57 
	`waôdisk
();

60 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
 / 4);

61 
	}
}

68 
	$ªad£g
(
uöçå_t
 
va
, 
uöt32_t
 
cou¡
, uöt32_à
off£t
) {

69 
uöçå_t
 
íd_va
 = 
va
 + 
cou¡
;

72 
va
 -
off£t
 % 
SECTSIZE
;

75 
uöt32_t
 
£˙o
 = (
off£t
 / 
SECTSIZE
) + 1;

80 ; 
va
 < 
íd_va
; v®+
SECTSIZE
, 
£˙o
 ++) {

81 
	`ªad£˘
((*)
va
, 
£˙o
);

83 
	}
}

87 
	$boŸmaö
() {

89 
	`ªad£g
((
uöçå_t
)
ELFHDR
, 
SECTSIZE
 * 8, 0);

92 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
) {

93 
bad
;

96 
¥oghdr
 *
ph
, *
ïh
;

99 
ph
 = (
¥oghdr
 *)((
uöçå_t
)
ELFHDR
 + ELFHDR->
e_phoff
);

100 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

101 ; 
ph
 < 
ïh
;Öh ++) {

102 
	`ªad£g
(
ph
->
p_va
 & 0xFFFFFF,Öh->
p_memsz
,Öh->
p_off£t
);

107 (((*)())(
ELFHDR
->
e_íåy
 & 0xFFFFFF))();

109 
bad
:

110 
	`outw
(0x8A00, 0x8A00);

111 
	`outw
(0x8A00, 0x8E00);

115 
	}
}

	@bootloader/arch/i386/x86.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<ty≥s.h
>

6 
	#do_div
(
n
, 
ba£
) ({ \

7 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

8 
__ba£
 = (
ba£
); \

9 
	`asm
("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

10 
__uµî
 = 
__high
; \

11 i‡(
__high
 != 0) { \

12 
__uµî
 = 
__high
 % 
__ba£
; \

13 
__high
 = __high / 
__ba£
; \

15 
	`asm
("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

16 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

17 
	`asm
("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

18 
__mod
; \

19 })

	)

21 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
uöt32_t
 
	$ªad_dr
(
ªgnum
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
	$wrôe_dr
(
ªgnum
, 
uöt32_t
 
vÆue
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
	sp£udodesc
 {

33 
uöt16_t
 
pd_lim
;

34 
uöçå_t
 
pd_ba£
;

35 } 
	`__©åibuã__
 ((
∑cked
));

37 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

42 
ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

43 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

44 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

45 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
uöçå_t
 
	$r¸1
(Ë
	`__©åibuã__
((
Æways_ölöe
));

47 
ölöe
 
uöçå_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

48 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

49 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

51 
ölöe
 
uöt8_t


52 
	$öb
(
uöt16_t
 
p‹t
) {

53 
uöt8_t
 
d©a
;

54 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
));

55  
d©a
;

56 
	}
}

58 
ölöe
 

59 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

60 
asm
 volatile (

63 : "=D" (
addr
), "=c" (
˙t
)

64 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

66 
	}
}

68 
ölöe
 

69 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

70 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
));

71 
	}
}

73 
ölöe
 

74 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

75 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
));

76 
	}
}

78 
ölöe
 

79 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
) {

80 
asm
 volatile (

83 : "=S" (
addr
), "=c" (
˙t
)

84 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

86 
	}
}

88 
ölöe
 
uöt32_t


89 
	$ªad_ebp
() {

90 
uöt32_t
 
ebp
;

91 
asm
 vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
ebp
));

92  
ebp
;

93 
	}
}

95 
ölöe
 

96 
	$bªakpoöt
() {

97 
asm
 volatile ("int $3");

98 
	}
}

100 
ölöe
 
uöt32_t


101 
	$ªad_dr
(
ªgnum
) {

102 
uöt32_t
 
vÆue
 = 0;

103 
ªgnum
) {

104 0: 
asm
 vﬁ©ûê("mov»%%db0, %0" : "Ù" (
vÆue
)); ;

105 1: 
asm
 vﬁ©ûê("mov»%%db1, %0" : "Ù" (
vÆue
)); ;

106 2: 
asm
 vﬁ©ûê("mov»%%db2, %0" : "Ù" (
vÆue
)); ;

107 3: 
asm
 vﬁ©ûê("mov»%%db3, %0" : "Ù" (
vÆue
)); ;

108 6: 
asm
 vﬁ©ûê("mov»%%db6, %0" : "Ù" (
vÆue
)); ;

109 7: 
asm
 vﬁ©ûê("mov»%%db7, %0" : "Ù" (
vÆue
)); ;

111  
vÆue
;

112 
	}
}

115 
	$wrôe_dr
(
ªgnum
, 
uöt32_t
 
vÆue
) {

116 
ªgnum
) {

117 0: 
asm
 vﬁ©ûê("mov»%0, %%db0" :: "r" (
vÆue
)); ;

118 1: 
asm
 vﬁ©ûê("mov»%0, %%db1" :: "r" (
vÆue
)); ;

119 2: 
asm
 vﬁ©ûê("mov»%0, %%db2" :: "r" (
vÆue
)); ;

120 3: 
asm
 vﬁ©ûê("mov»%0, %%db3" :: "r" (
vÆue
)); ;

121 6: 
asm
 vﬁ©ûê("mov»%0, %%db6" :: "r" (
vÆue
)); ;

122 7: 
asm
 vﬁ©ûê("mov»%0, %%db7" :: "r" (
vÆue
)); ;

124 
	}
}

126 
ölöe
 

127 
	$lidt
(
p£udodesc
 *
pd
) {

128 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
));

129 
	}
}

131 
ölöe
 

132 
	$°i
() {

133 
asm
 volatile ("sti");

134 
	}
}

136 
ölöe
 

137 
	$˛i
() {

138 
asm
 volatile ("cli");

139 
	}
}

141 
ölöe
 

142 
	$…r
(
uöt16_t
 
£l
) {

143 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
));

144 
	}
}

146 
ölöe
 
uöt32_t


147 
	$ªad_eÊags
() {

148 
uöt32_t
 
eÊags
;

149 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

150  
eÊags
;

151 
	}
}

153 
ölöe
 

154 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
) {

155 
asm
 vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
eÊags
));

156 
	}
}

158 
ölöe
 

159 
	$l¸0
(
uöçå_t
 
¸0
) {

160 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
));

161 
	}
}

163 
ölöe
 

164 
	$l¸3
(
uöçå_t
 
¸3
) {

165 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
));

166 
	}
}

168 
ölöe
 
uöçå_t


169 
	$r¸0
() {

170 
uöçå_t
 
¸0
;

171 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
));

172  
¸0
;

173 
	}
}

175 
ölöe
 
uöçå_t


176 
	$r¸1
() {

177 
uöçå_t
 
¸1
;

178 
asm
 vﬁ©ûê("mov %%¸1, %0" : "Ù" (
¸1
));

179  
¸1
;

180 
	}
}

182 
ölöe
 
uöçå_t


183 
	$r¸2
() {

184 
uöçå_t
 
¸2
;

185 
asm
 vﬁ©ûê("mov %%¸2, %0" : "Ù" (
¸2
));

186  
¸2
;

187 
	}
}

189 
ölöe
 
uöçå_t


190 
	$r¸3
() {

191 
uöçå_t
 
¸3
;

192 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
));

193  
¸3
;

194 
	}
}

196 
ölöe
 

197 
	$övÕg
(*
addr
) {

198 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

199 
	}
}

201 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

202 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

203 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

204 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

205 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

207 #i‚de‡
__HAVE_ARCH_STRCMP


208 
	#__HAVE_ARCH_STRCMP


	)

209 
ölöe
 

210 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

211 
d0
, 
d1
, 
ªt
;

212 
asm
 volatile (

223 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

224 : "1" (
s1
), "2" (
s2
)

226  
ªt
;

227 
	}
}

231 #i‚de‡
__HAVE_ARCH_STRCPY


232 
	#__HAVE_ARCH_STRCPY


	)

233 
ölöe
 *

234 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

235 
d0
, 
d1
, 
d2
;

236 
asm
 volatile (

241 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

242 : "0" (
§c
), "1" (
d°
) : "memory");

243  
d°
;

244 
	}
}

247 #i‚de‡
__HAVE_ARCH_MEMSET


248 
	#__HAVE_ARCH_MEMSET


	)

249 
ölöe
 *

250 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

251 
d0
, 
d1
;

252 
asm
 volatile (

254 : "=&c" (
d0
), "=&D" (
d1
)

255 : "0" (
n
), "a" (
c
), "1" (
s
)

257  
s
;

258 
	}
}

261 #i‚de‡
__HAVE_ARCH_MEMMOVE


262 
	#__HAVE_ARCH_MEMMOVE


	)

263 
ölöe
 *

264 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

265 i‡(
d°
 < 
§c
) {

266  
	`__mem˝y
(
d°
, 
§c
, 
n
);

268 
d0
, 
d1
, 
d2
;

269 
asm
 volatile (

273 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

274 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

276  
d°
;

277 
	}
}

280 #i‚de‡
__HAVE_ARCH_MEMCPY


281 
	#__HAVE_ARCH_MEMCPY


	)

282 
ölöe
 *

283 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

284 
d0
, 
d1
, 
d2
;

285 
asm
 volatile (

292 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

293 : "0" (
n
 / 4), "g" (n), "1" (
d°
), "2" (
§c
)

295  
d°
;

296 
	}
}

	@bootloader/arch/or32/board.h

1 #i‚de‡
__ARCH_OR32_DRIVERS_BOARD_H__


2 
	#__ARCH_OR32_DRIVERS_BOARD_H__


	)

7 #ifde‡
BOARD


8 
	#UART_BAUD_RATE
 9600

	)

10 
	#UART_BAUD_RATE
 115200

	)

12 
	#UART_PHYSICAL_BASE
 0x50000000

	)

13 
	#UART_IRQ
 2

	)

16 
	#IN_CLK
 50000000

17 #ifde‡
BOARD


	)

18 
	#TIMER_FREQ
 0x400000

	)

20 
	#TIMER_FREQ
 0x40000

	)

24 #ifde‡
BOARD


25 
	#RAM_SIZE
 0x4000000

26 #ñ£

	)

27 
	#RAM_SIZE
 0x200000

29 

	)

30 
	#DISK_FS_BASE
 0x800000

	)

31 
	#DISK_FS_SIZE
 0x400000

	)

32 
	#SWAP_FS_BASE
 0xc00000

	)

33 
	#SWAP_FS_SIZE
 0x400000

	)

35 
	#GPIO_PHYSICAL_BASE
 0x20000000

	)

36 
	#SPI_PHYSICAL_BASE
 0x70000000

	)

	@bootloader/arch/or32/bootmain.c

7 
	~<ñf.h
>

8 
	~<bﬂrd.h
>

9 
	~<gpio.h
>

10 
	~<•i.h
>

11 
	~<‹32.h
>

19 
_ªadblock
 (*
d°
, 
uöt32_t
 
blkno
);

21 
	$boŸmaö
 (
∑πôi⁄_öfo_íåy
 *
íåõs
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

31 
	$ªad£g
 (
uöçå_t
 
∑
, 
uöt32_t
 
cou¡
, uöt32_à
°¨t
, uöt32_à
off£t
)

33 
uöçå_t
 
íd_∑
 = 
∑
 + 
cou¡
;

36 
∑
 -
off£t
 % 
BLOCK_SIZE
;

39 
uöt32_t
 
blkno
 = (
off£t
 / 
BLOCK_SIZE
Ë+ 
°¨t
;

41 ; 
∑
 < 
íd_∑
;Ö®+
BLOCK_SIZE
, 
blkno
 ++)

42 
	`_ªadblock
 ((*)
∑
, 
blkno
);

43 
	}
}

46 
	$boŸmaö
 (
∑πôi⁄_öfo_íåy
 *
íåõs
)

48 
îr
;

51 
i
;

52 
i
 = 0; i < 4; i++, 
íåõs
 ++) {

53 i‡(
íåõs
->
Êag
 & 
PARTITION_ENTRY_FLAG_BOOTABLE
)

58 
uöt8_t
 
__hdr_buf
[512];

59 
ñfhdr
 *
ñf_hdr
 = (ñfhd∏*)&
__hdr_buf
;

60 
uöt32_t
 
°¨t_blk
 = 
íåõs
->
°¨t
;

61 
	`_ªadblock
 (
ñf_hdr
, 
°¨t_blk
);

64 i‡(
ñf_hdr
->
e_magic
 !
ELF_MAGIC
) {

65 
Áû
;

68 
¥oghdr
 *
ph
, *
ïh
;

71 
ph
 = (
¥oghdr
 *)((
uöçå_t
)
ñf_hdr
 +Élf_hdr->
e_phoff
);

72 
ïh
 = 
ph
 + 
ñf_hdr
->
e_phnum
;

73 ; 
ph
 < 
ïh
;Öh ++) {

74 
	`ªad£g
(
ph
->
p_∑
,Öh->
p_memsz
, 
°¨t_blk
,Öh->
p_off£t
);

79 (((*)())(
ñf_hdr
->
e_íåy
))();

81 
Áû
:

82 
	`REG32
(
GPIO_PHYSICAL_BASE
 + 
GPIO_OUTPUT
) = 0xdead;

84 
	}
}

	@bootloader/arch/or32/gpio.h

1 #i‚de‡
__ARCH_OR32_DRIVERS_GPIO_H__


2 
	#__ARCH_OR32_DRIVERS_GPIO_H__


	)

4 
	~<bﬂrd.h
>

6 
	#GPIO_BASE
 (0xf0000000 + (
GPIO_PHYSICAL_BASE
 >> 4))

	)

8 
	#GPIO_INPUT
 0x0

	)

9 
	#GPIO_OUTPUT
 0x4

	)

	@bootloader/arch/or32/or32.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_H__


	)

4 
	~<ty≥s.h
>

5 
	~<‹32/•r_defs.h
>

7 
	#NR_GPRS
 32

	)

9 
	#REG8
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

10 
	#REG16
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

11 
	#REG32
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

17 
uöt32_t
 
__div64_32
(
uöt64_t
 *
dividíd
, uöt32_à
divis‹
);

22 
	#do_div
(
n
,
ba£
) ({ \

23 
uöt32_t
 
__ba£
 = (
ba£
); \

24 
uöt32_t
 
__ªm
; \

25 ()(((
	`ty≥of
((
n
)Ë*)0Ë=((
uöt64_t
 *)0)); \

26 i‡((((
n
) >> 32) == 0)) { \

27 
__ªm
 = (
uöt32_t
)(
n
Ë% 
__ba£
; \

28 (
n
Ë(
uöt32_t
)“Ë/ 
__ba£
; \

30 
__ªm
 = 
	`__div64_32
(&(
n
), 
__ba£
); \

31 
__ªm
; \

32 })

	)

38 
ölöe
 
uöt32_t
 
	$mf•r
 (
uöt16_t
 
addr
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

39 
ölöe
 
	$mt•r
 (
uöt16_t
 
addr
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

41 
ölöe
 
uöt32_t


42 
	$mf•r
 (
uöt16_t
 
addr
)

44 
uöt32_t
 
ªt
;

45 
asm
 vﬁ©ûê("l.mf•∏%0, %1, 0" : "Ù" (
ªt
Ë: "r" (
addr
));

46  
ªt
;

47 
	}
}

49 
ölöe
 

50 
	$mt•r
 (
uöt16_t
 
addr
, 
uöt32_t
 
d©a
)

52 
asm
 vﬁ©ûê("l.mt•∏%0, %1, 0" :: "r" (
addr
), "r" (
d©a
));

53 
	}
}

55 
ölöe
 
	$íabÀ_öãºu±
 (Ë
	`__©åibuã__
 ((
Æways_ölöe
));

57 
ölöe
 

58 
	$íabÀ_öãºu±
 ()

64 
	`mt•r
 (
SPR_SR
, 
	`mf•r
 (SPR_SRË| 
SPR_SR_IEE
);

65 
	}
}

	@bootloader/arch/or32/or32/or32_func.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_OR32_FUNC_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_OR32_FUNC_H__


	)

4 
	~<‹32/•r_defs.h
>

5 
	~<memœyout.h
>

7 #ifde‡
__ASSEMBLER__


9 .
ma¸o
 
lﬂd32i
 
ªg
 const

10 
	gl
.
	gmovhi
 \
	gªg
,
hi
(\const)

11 
	gl
.
	g‹i
 \
	gªg
,\ªg,
lo
(\const)

12 .
	gídm


14 
	#SR_ENABLE_BITS
(
mask
, 
t1
, 
t2
) \

15 
l
.
mf•r
 
t2
, 
r0
, 
SPR_SR
 ;\

16 
lﬂd32i
 
t1
, (
mask
) ;\

17 
l
.
‹
 
t2
,Å2, 
t1
 ;\

18 
l
.
mt•r
 
r0
, 
t2
, 
SPR_SR


	)

20 
	#SR_DISABLE_BITS
(
mask
, 
t1
, 
t2
) \

21 
l
.
mf•r
 
t2
, 
r0
, 
SPR_SR
 ;\

22 
lﬂd32i
 
t1
, (~
mask
) ;\

23 
l
.
™d
 
t2
,Å2, 
t1
 ;\

24 
l
.
mt•r
 
r0
, 
t2
, 
SPR_SR


	)

26 
	#ENABLE_INTERRUPTS
(
t1
, 
t2
) \

27 
	`SR_ENABLE_BITS
((
SPR_SR_IEE
 | 
SPR_SR_TEE
), 
t1
, 
t2
)

	)

29 
	#DISABLE_INTERRUPTS
(
t1
, 
t2
) \

30 
	`SR_DISABLE_BITS
((
SPR_SR_IEE
 | 
SPR_SR_TEE
), 
t1
, 
t2
)

	)

32 
	#ENABLE_MMU
(
t1
, 
t2
) \

33 
	`SR_ENABLE_BITS
((
SPR_SR_IME
 | 
SPR_SR_DME
), 
t1
, 
t2
)

	)

38 
	#t›hys
(
t1
, 
t2
) \

39 
lﬂd32i
 
t1
, -
KERNBASE
 ;\

40 
l
.
add
 
t1
,Å1, 
t2


	)

45 
	#tovút
(
t1
, 
t2
) \

46 
lﬂd32i
 
t1
, 
KERNBASE
 ;\

47 
l
.
add
 
t1
,Å1, 
t2


	)

	@bootloader/arch/or32/or32/spr_defs.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_SPR_DEFS_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_SPR_DEFS_H__


	)

4 
	#MAX_GRPS
 (32)

	)

5 
	#MAX_SPRS_PER_GRP_BITS
 (11)

	)

6 
	#MAX_SPRS_PER_GRP
 (1 << 
MAX_SPRS_PER_GRP_BITS
)

	)

7 
	#MAX_SPRS
 (0x10000)

	)

10 
	#SPRGROUP_SYS
 (0<< 
MAX_SPRS_PER_GRP_BITS
)

	)

11 
	#SPRGROUP_DMMU
 (1<< 
MAX_SPRS_PER_GRP_BITS
)

	)

12 
	#SPRGROUP_IMMU
 (2<< 
MAX_SPRS_PER_GRP_BITS
)

	)

13 
	#SPRGROUP_DC
 (3<< 
MAX_SPRS_PER_GRP_BITS
)

	)

14 
	#SPRGROUP_IC
 (4<< 
MAX_SPRS_PER_GRP_BITS
)

	)

15 
	#SPRGROUP_MAC
 (5<< 
MAX_SPRS_PER_GRP_BITS
)

	)

16 
	#SPRGROUP_D
 (6<< 
MAX_SPRS_PER_GRP_BITS
)

	)

17 
	#SPRGROUP_PC
 (7<< 
MAX_SPRS_PER_GRP_BITS
)

	)

18 
	#SPRGROUP_PM
 (8<< 
MAX_SPRS_PER_GRP_BITS
)

	)

19 
	#SPRGROUP_PIC
 (9<< 
MAX_SPRS_PER_GRP_BITS
)

	)

20 
	#SPRGROUP_TT
 (10<< 
MAX_SPRS_PER_GRP_BITS
)

	)

23 
	#SPR_VR
 (
SPRGROUP_SYS
 + 0)

	)

24 
	#SPR_UPR
 (
SPRGROUP_SYS
 + 1)

	)

25 
	#SPR_CPUCFGR
 (
SPRGROUP_SYS
 + 2)

	)

26 
	#SPR_DMMUCFGR
 (
SPRGROUP_SYS
 + 3)

	)

27 
	#SPR_IMMUCFGR
 (
SPRGROUP_SYS
 + 4)

	)

28 
	#SPR_DCCFGR
 (
SPRGROUP_SYS
 + 5)

	)

29 
	#SPR_ICCFGR
 (
SPRGROUP_SYS
 + 6)

	)

30 
	#SPR_DCFGR
 (
SPRGROUP_SYS
 + 7)

	)

31 
	#SPR_PCCFGR
 (
SPRGROUP_SYS
 + 8)

	)

32 
	#SPR_NPC
 (
SPRGROUP_SYS
 + 16Ë

	)

33 
	#SPR_SR
 (
SPRGROUP_SYS
 + 17Ë

	)

34 
	#SPR_PPC
 (
SPRGROUP_SYS
 + 18Ë

	)

35 
	#SPR_EPCR_BASE
 (
SPRGROUP_SYS
 + 32Ë

	)

36 
	#SPR_EPCR_LAST
 (
SPRGROUP_SYS
 + 47Ë

	)

37 
	#SPR_EEAR_BASE
 (
SPRGROUP_SYS
 + 48)

	)

38 
	#SPR_EEAR_LAST
 (
SPRGROUP_SYS
 + 63)

	)

39 
	#SPR_ESR_BASE
 (
SPRGROUP_SYS
 + 64)

	)

40 
	#SPR_ESR_LAST
 (
SPRGROUP_SYS
 + 79)

	)

44 
	#SPR_DMMUCR
 (
SPRGROUP_DMMU
 + 0)

	)

45 
	#SPR_DTLBMR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x400 + (WAYË* 0x200)

	)

46 
	#SPR_DTLBMR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x47‡+ (WAYË* 0x200)

	)

47 
	#SPR_DTLBTR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x600 + (WAYË* 0x200)

	)

48 
	#SPR_DTLBTR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x67‡+ (WAYË* 0x200)

	)

51 
	#SPR_IMMUCR
 (
SPRGROUP_IMMU
 + 0)

	)

52 
	#SPR_ITLBMR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x400 + (WAYË* 0x200)

	)

53 
	#SPR_ITLBMR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x47‡+ (WAYË* 0x200)

	)

54 
	#SPR_ITLBTR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x600 + (WAYË* 0x200)

	)

55 
	#SPR_ITLBTR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x67‡+ (WAYË* 0x200)

	)

59 
	#SPR_DMMUCR
 (
SPRGROUP_DMMU
 + 0)

	)

60 
	#SPR_DTLBMR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x200 + (WAYË* 0x100)

	)

61 
	#SPR_DTLBMR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x23‡+ (WAYË* 0x100)

	)

62 
	#SPR_DTLBTR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x280 + (WAYË* 0x100)

	)

63 
	#SPR_DTLBTR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x2b‡+ (WAYË* 0x100)

	)

66 
	#SPR_IMMUCR
 (
SPRGROUP_IMMU
 + 0)

	)

67 
	#SPR_ITLBMR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x200 + (WAYË* 0x100)

	)

68 
	#SPR_ITLBMR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x23‡+ (WAYË* 0x100)

	)

69 
	#SPR_ITLBTR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x280 + (WAYË* 0x100)

	)

70 
	#SPR_ITLBTR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x2b‡+ (WAYË* 0x100)

	)

74 
	#SPR_DCCR
 (
SPRGROUP_DC
 + 0)

	)

75 
	#SPR_DCBPR
 (
SPRGROUP_DC
 + 1)

	)

76 
	#SPR_DCBFR
 (
SPRGROUP_DC
 + 2)

	)

77 
	#SPR_DCBIR
 (
SPRGROUP_DC
 + 3)

	)

78 
	#SPR_DCBWR
 (
SPRGROUP_DC
 + 4)

	)

79 
	#SPR_DCBLR
 (
SPRGROUP_DC
 + 5)

	)

80 
	#SPR_DCR_BASE
(
WAY
Ë(
SPRGROUP_DC
 + 0x200 + (WAYË* 0x200)

	)

81 
	#SPR_DCR_LAST
(
WAY
Ë(
SPRGROUP_DC
 + 0x3f‡+ (WAYË* 0x200)

	)

84 
	#SPR_ICCR
 (
SPRGROUP_IC
 + 0)

	)

85 
	#SPR_ICBPR
 (
SPRGROUP_IC
 + 1)

	)

86 
	#SPR_ICBIR
 (
SPRGROUP_IC
 + 2)

	)

87 
	#SPR_ICBLR
 (
SPRGROUP_IC
 + 3)

	)

88 
	#SPR_ICR_BASE
(
WAY
Ë(
SPRGROUP_IC
 + 0x200 + (WAYË* 0x200)

	)

89 
	#SPR_ICR_LAST
(
WAY
Ë(
SPRGROUP_IC
 + 0x3f‡+ (WAYË* 0x200)

	)

92 
	#SPR_MACLO
 (
SPRGROUP_MAC
 + 1)

	)

93 
	#SPR_MACHI
 (
SPRGROUP_MAC
 + 2)

	)

96 
	#SPR_DVR
(
N
Ë(
SPRGROUP_D
 + (N))

	)

97 
	#SPR_DCR
(
N
Ë(
SPRGROUP_D
 + 8 + (N))

	)

98 
	#SPR_DMR1
 (
SPRGROUP_D
 + 16)

	)

99 
	#SPR_DMR2
 (
SPRGROUP_D
 + 17)

	)

100 
	#SPR_DWCR0
 (
SPRGROUP_D
 + 18)

	)

101 
	#SPR_DWCR1
 (
SPRGROUP_D
 + 19)

	)

102 
	#SPR_DSR
 (
SPRGROUP_D
 + 20)

	)

103 
	#SPR_DRR
 (
SPRGROUP_D
 + 21)

	)

106 
	#SPR_PCCR
(
N
Ë(
SPRGROUP_PC
 + (N))

	)

107 
	#SPR_PCMR
(
N
Ë(
SPRGROUP_PC
 + 8 + (N))

	)

110 
	#SPR_PMR
 (
SPRGROUP_PM
 + 0)

	)

113 
	#SPR_PICMR
 (
SPRGROUP_PIC
 + 0)

	)

114 
	#SPR_PICPR
 (
SPRGROUP_PIC
 + 1)

	)

115 
	#SPR_PICSR
 (
SPRGROUP_PIC
 + 2)

	)

118 
	#SPR_TTMR
 (
SPRGROUP_TT
 + 0)

	)

119 
	#SPR_TTCR
 (
SPRGROUP_TT
 + 1)

	)

125 
	#SPR_VR_VER
 0xffff0000

	)

126 
	#SPR_VR_REV
 0x0000003‡

	)

132 
	#SPR_UPR_UP
 0x00000001

	)

133 
	#SPR_UPR_DCP
 0x00000002

	)

134 
	#SPR_UPR_ICP
 0x00000004

	)

135 
	#SPR_UPR_DMP
 0x00000008

	)

136 
	#SPR_UPR_IMP
 0x00000010

	)

137 
	#SPR_UPR_OB32P
 0x00000020

	)

138 
	#SPR_UPR_OB64P
 0x00000040

	)

139 
	#SPR_UPR_OF32P
 0x00000080

	)

140 
	#SPR_UPR_OF64P
 0x00000100

	)

141 
	#SPR_UPR_OV32P
 0x00000200

	)

142 
	#SPR_UPR_OV64P
 0x00000400

	)

143 
	#SPR_UPR_DUP
 0x00000800

	)

144 
	#SPR_UPR_PCUP
 0x00001000

	)

145 
	#SPR_UPR_PMP
 0x00002000

	)

146 
	#SPR_UPR_PICP
 0x00004000

	)

147 
	#SPR_UPR_TTP
 0x00008000

	)

148 
	#SPR_UPR_SRP
 0x00010000

	)

149 
	#SPR_UPR_RES
 0x00„0000

	)

150 
	#SPR_UPR_CUST
 0xff000000

	)

156 
	#SPR_SR_CID
 0xf0000000

	)

157 
	#SPR_SR_FO
 0x00008000

	)

158 
	#SPR_SR_EPH
 0x00004000

	)

159 
	#SPR_SR_DSX
 0x00002000

	)

160 
	#SPR_SR_OVE
 0x00001000

	)

161 
	#SPR_SR_OV
 0x00000800

	)

162 
	#SPR_SR_CY
 0x00000400

	)

163 
	#SPR_SR_F
 0x00000200

	)

164 
	#SPR_SR_CE
 0x00000100

	)

165 
	#SPR_SR_LEE
 0x00000080

	)

166 
	#SPR_SR_IME
 0x00000040

	)

167 
	#SPR_SR_DME
 0x00000020

	)

168 
	#SPR_SR_ICE
 0x00000010

	)

169 
	#SPR_SR_DCE
 0x00000008

	)

170 
	#SPR_SR_IEE
 0x00000004

	)

171 
	#SPR_SR_TEE
 0x00000002

	)

172 
	#SPR_SR_SM
 0x00000001

	)

178 
	#SPR_DMMUCR_P2S
 0x0000003ê

	)

179 
	#SPR_DMMUCR_P1S
 0x000007c0

	)

180 
	#SPR_DMMUCR_VADDR_WIDTH
 0x0000f800

	)

181 
	#SPR_DMMUCR_PADDR_WIDTH
 0x000f0000

	)

187 
	#SPR_IMMUCR_P2S
 0x0000003ê

	)

188 
	#SPR_IMMUCR_P1S
 0x000007c0

	)

189 
	#SPR_IMMUCR_VADDR_WIDTH
 0x0000f800

	)

190 
	#SPR_IMMUCR_PADDR_WIDTH
 0x000f0000

	)

196 
	#SPR_DTLBMR_V
 0x00000001

	)

197 
	#SPR_DTLBMR_PL1
 0x00000002

	)

198 
	#SPR_DTLBMR_CID
 0x0000003¯

	)

199 
	#SPR_DTLBMR_LRU
 0x000000c0

	)

200 
	#SPR_DTLBMR_VPN
 0xfffff000

	)

206 
	#SPR_DTLBTR_CC
 0x00000001

	)

207 
	#SPR_DTLBTR_CI
 0x00000002

	)

208 
	#SPR_DTLBTR_WBC
 0x00000004

	)

209 
	#SPR_DTLBTR_WOM
 0x00000008

	)

210 
	#SPR_DTLBTR_A
 0x00000010

	)

211 
	#SPR_DTLBTR_D
 0x00000020

	)

212 
	#SPR_DTLBTR_URE
 0x00000040

	)

213 
	#SPR_DTLBTR_UWE
 0x00000080

	)

214 
	#SPR_DTLBTR_SRE
 0x00000100

	)

215 
	#SPR_DTLBTR_SWE
 0x00000200

	)

216 
	#SPR_DTLBTR_PPN
 0xfffff000

	)

222 
	#SPR_ITLBMR_V
 0x00000001

	)

223 
	#SPR_ITLBMR_PL1
 0x00000002

	)

224 
	#SPR_ITLBMR_CID
 0x0000003¯

	)

225 
	#SPR_ITLBMR_LRU
 0x000000c0

	)

226 
	#SPR_ITLBMR_VPN
 0xfffff000

	)

232 
	#SPR_ITLBTR_CC
 0x00000001

	)

233 
	#SPR_ITLBTR_CI
 0x00000002

	)

234 
	#SPR_ITLBTR_WBC
 0x00000004

	)

235 
	#SPR_ITLBTR_WOM
 0x00000008

	)

236 
	#SPR_ITLBTR_A
 0x00000010

	)

237 
	#SPR_ITLBTR_D
 0x00000020

	)

238 
	#SPR_ITLBTR_SXE
 0x00000040

	)

239 
	#SPR_ITLBTR_UXE
 0x00000080

	)

240 
	#SPR_ITLBTR_PPN
 0xfffff000

	)

246 
	#SPR_DCCR_EW
 0x000000f‡

	)

252 
	#SPR_ICCR_EW
 0x000000f‡

	)

258 
	#SPR_DCR_DP
 0x00000001

	)

259 
	#SPR_DCR_CC
 0x0000000ê

	)

260 
	#SPR_DCR_SC
 0x00000010

	)

261 
	#SPR_DCR_CT
 0x000000e0

	)

264 
	#SPR_DCR_CC_MASKED
 0x00000000

	)

265 
	#SPR_DCR_CC_EQUAL
 0x00000001

	)

266 
	#SPR_DCR_CC_LESS
 0x00000002

	)

267 
	#SPR_DCR_CC_LESSE
 0x00000003

	)

268 
	#SPR_DCR_CC_GREAT
 0x00000004

	)

269 
	#SPR_DCR_CC_GREATE
 0x00000005

	)

270 
	#SPR_DCR_CC_NEQUAL
 0x00000006

	)

273 
	#SPR_DCR_CT_DISABLED
 0x00000000

	)

274 
	#SPR_DCR_CT_IFEA
 0x00000020

	)

275 
	#SPR_DCR_CT_LEA
 0x00000040

	)

276 
	#SPR_DCR_CT_SEA
 0x00000060

	)

277 
	#SPR_DCR_CT_LD
 0x00000080

	)

278 
	#SPR_DCR_CT_SD
 0x000000a0

	)

279 
	#SPR_DCR_CT_LSEA
 0x000000c0

	)

285 
	#SPR_DMR1_CW0
 0x00000003

	)

286 
	#SPR_DMR1_CW1
 0x0000000¯

	)

287 
	#SPR_DMR1_CW2
 0x00000030

	)

288 
	#SPR_DMR1_CW3
 0x000000c0

	)

289 
	#SPR_DMR1_CW4
 0x00000300

	)

290 
	#SPR_DMR1_CW5
 0x00000c00

	)

291 
	#SPR_DMR1_CW6
 0x00003000

	)

292 
	#SPR_DMR1_CW7
 0x0000c000

	)

293 
	#SPR_DMR1_CW8
 0x00030000

	)

294 
	#SPR_DMR1_CW9
 0x000c0000

	)

295 
	#SPR_DMR1_CW10
 0x00300000

	)

296 
	#SPR_DMR1_ST
 0x00400000

	)

297 
	#SPR_DMR1_BT
 0x00800000

	)

298 
	#SPR_DMR1_DXFW
 0x01000000

	)

304 
	#SPR_DMR2_WCE0
 0x00000001

	)

305 
	#SPR_DMR2_WCE1
 0x00000002

	)

306 
	#SPR_DMR2_AWTC
 0x00001ff¯

	)

307 
	#SPR_DMR2_WGB
 0x00f„000

	)

313 
	#SPR_DWCR_COUNT
 0x0000fff‡

	)

314 
	#SPR_DWCR_MATCH
 0xffff0000

	)

320 
	#SPR_DSR_RSTE
 0x00000001

	)

321 
	#SPR_DSR_BUSEE
 0x00000002

	)

322 
	#SPR_DSR_DPFE
 0x00000004

	)

323 
	#SPR_DSR_IPFE
 0x00000008

	)

324 
	#SPR_DSR_TTE
 0x00000010

	)

325 
	#SPR_DSR_AE
 0x00000020

	)

326 
	#SPR_DSR_IIE
 0x00000040

	)

327 
	#SPR_DSR_IE
 0x00000080

	)

328 
	#SPR_DSR_DME
 0x00000100

	)

329 
	#SPR_DSR_IME
 0x00000200

	)

330 
	#SPR_DSR_RE
 0x00000400

	)

331 
	#SPR_DSR_SCE
 0x00000800

	)

332 
	#SPR_DSR_SSE
 0x00001000

	)

333 
	#SPR_DSR_TE
 0x00002000

	)

339 
	#SPR_DRR_RSTE
 0x00000001

	)

340 
	#SPR_DRR_BUSEE
 0x00000002

	)

341 
	#SPR_DRR_DPFE
 0x00000004

	)

342 
	#SPR_DRR_IPFE
 0x00000008

	)

343 
	#SPR_DRR_TTE
 0x00000010

	)

344 
	#SPR_DRR_AE
 0x00000020

	)

345 
	#SPR_DRR_IIE
 0x00000040

	)

346 
	#SPR_DRR_IE
 0x00000080

	)

347 
	#SPR_DRR_DME
 0x00000100

	)

348 
	#SPR_DRR_IME
 0x00000200

	)

349 
	#SPR_DRR_RE
 0x00000400

	)

350 
	#SPR_DRR_SCE
 0x00000800

	)

351 
	#SPR_DRR_TE
 0x00001000

	)

357 
	#SPR_PCMR_CP
 0x00000001

	)

358 
	#SPR_PCMR_UMRA
 0x00000002

	)

359 
	#SPR_PCMR_CISM
 0x00000004

	)

360 
	#SPR_PCMR_CIUM
 0x00000008

	)

361 
	#SPR_PCMR_LA
 0x00000010

	)

362 
	#SPR_PCMR_SA
 0x00000020

	)

363 
	#SPR_PCMR_IF
 0x00000040

	)

364 
	#SPR_PCMR_DCM
 0x00000080

	)

365 
	#SPR_PCMR_ICM
 0x00000100

	)

366 
	#SPR_PCMR_IFS
 0x00000200

	)

367 
	#SPR_PCMR_LSUS
 0x00000400

	)

368 
	#SPR_PCMR_BS
 0x00000800

	)

369 
	#SPR_PCMR_DTLBM
 0x00001000

	)

370 
	#SPR_PCMR_ITLBM
 0x00002000

	)

371 
	#SPR_PCMR_DDS
 0x00004000

	)

372 
	#SPR_PCMR_WPE
 0x03ff8000

	)

378 
	#SPR_PMR_SDF
 0x0000000‡

	)

379 
	#SPR_PMR_DME
 0x00000010

	)

380 
	#SPR_PMR_SME
 0x00000020

	)

381 
	#SPR_PMR_DCGE
 0x00000040

	)

382 
	#SPR_PMR_SUME
 0x00000080

	)

388 
	#SPR_PICMR_IUM
 0xfffffff¯

	)

394 
	#SPR_PICPR_IPRIO
 0xfffffff¯

	)

400 
	#SPR_PICSR_IS
 0xfffffff‡

	)

406 
	#SPR_TTCR_PERIOD
 0x0ffffff‡

	)

407 
	#SPR_TTMR_PERIOD
 
SPR_TTCR_PERIOD


	)

408 
	#SPR_TTMR_IP
 0x10000000

	)

409 
	#SPR_TTMR_IE
 0x20000000

	)

410 
	#SPR_TTMR_RT
 0x40000000

	)

411 
	#SPR_TTMR_SR
 0x80000000

	)

412 
	#SPR_TTMR_CR
 0xc0000000

	)

413 
	#SPR_TTMR_M
 0xc0000000

	)

419 
	#NOP_NOP
 0x0000

	)

420 
	#NOP_EXIT
 0x0001

	)

421 
	#NOP_REPORT
 0x0002

	)

422 
	#NOP_PRINTF
 0x0003

	)

423 
	#NOP_REPORT_FIRST
 0x0400

	)

424 
	#NOP_REPORT_LAST
 0x03f‡

	)

	@bootloader/arch/or32/spi.h

1 #i‚de‡
__ARCH_OR32_DRIVERS_SPI_H__


2 
	#__ARCH_OR32_DRIVERS_SPI_H__


	)

4 
	~<bﬂrd.h
>

6 #i‚de‡
__ASSEMBLER__


7 
	~<ty≥s.h
>

9 
	#SPI_BASE
 (0xf0000000 + (
SPI_PHYSICAL_BASE
 >> 4))

	)

10 
	#BLOCK_SIZE
 512

	)

12 
	s∑πôi⁄_öfo_íåy


14 
uöt8_t
 
	mÊag
;

15 
uöt8_t
 
	m∑ddög1
;

16 
uöt32_t
 
	m°¨t
;

17 
uöt32_t
 
	msize
;

18 
uöt32_t
 
	m∑ddög2
;

19 
uöt16_t
 
	m∑ddög3
;

20 } 
__©åibuã__
((
∑cked
));

22 
	#PARTITION_ENTRY_FLAG_BOOTABLE
 0x80

	)

23 
	#PARTITION_ENTRY_FLAG_VALID
 0x1

	)

25 
	#MAX_PARTITION_NUM
 4

	)

32 
	#SPI_MASTER_VERSION_REG
 0x0

	)

33 
	#SPI_MASTER_CONTROL_REG
 0x1

	)

34 
	#SPI_TRANS_TYPE_REG
 0x2

	)

35 
	#SPI_TRANS_CTRL_REG
 0x3

	)

36 
	#SPI_TRANS_STS_REG
 0x4

	)

37 
	#SPI_TRANS_ERROR_REG
 0x5

	)

38 
	#SPI_DIRECT_ACCESS_DATA_REG
 0x6

	)

39 
	#SPI_SD_ADDR_7_0_REG
 0x7

	)

40 
	#SPI_SD_ADDR_15_8_REG
 0x8

	)

41 
	#SPI_SD_ADDR_23_16_REG
 0x9

	)

42 
	#SPI_SD_ADDR_31_24_REG
 0xa

	)

43 
	#SPI_CLK_DEL_REG
 0xb

	)

44 
	#SPI_RX_FIFO_DATA_REG
 0x10

	)

45 
	#SPI_RX_FIFO_DATA_COUNT_MSB
 0x12

	)

46 
	#SPI_RX_FIFO_DATA_COUNT_LSB
 0x13

	)

47 
	#SPI_RX_FIFO_CONTROL_REG
 0x14

	)

48 
	#SPI_TX_FIFO_DATA_REG
 0x20

	)

49 
	#SPI_TX_FIFO_CONTROL_REG
 0x24

	)

54 
	#SPI_VERSION_NUM_MAJOR_MASK
 0xf0

	)

55 
	#SPI_VERSION_NUM_MINOR_MASK
 0x0f

	)

60 
	#SPI_RST
 0x1

	)

65 
	#SPI_DIRECT_ACCESS
 0

	)

66 
	#SPI_INIT_SD
 1

	)

67 
	#SPI_RW_READ_SD_BLOCK
 2

	)

68 
	#SPI_RW_WRITE_SD_BLOCK
 3

	)

73 
	#SPI_TRANS_START
 1

	)

78 
	#SPI_TRANS_BUSY
 1

	)

83 
	#SPI_SD_INIT_ERROR
 0x3

	)

84 
	#SPI_SD_READ_ERROR
 0xc

	)

85 
	#SPI_SD_WRITE_ERROR
 0x30

	)

87 
	#SPI_NO_ERROR
 0

	)

88 
	#SPI_INIT_CMD0_ERROR
 0x1

	)

89 
	#SPI_INIT_CMD1_ERROR
 0x2

	)

90 
	#SPI_READ_CMD_ERROR
 0x4

	)

91 
	#SPI_READ_TOKEN_ERROR
 0x8

	)

92 
	#SPI_WRITE_CMD_ERROR
 0x10

	)

93 
	#SPI_WRITE_DATA_ERROR
 0x20

	)

94 
	#SPI_WRITE_BUSY_ERROR
 0x30

	)

	@bootloader/arch/um/boot.h

1 #i‚de‡
__ARCH_UM_BOOT_BOOT_H__


2 
	#__ARCH_UM_BOOT_BOOT_H__


	)

4 
__boŸ_°¨t
[];

5 
__boŸ_íåy
 ();

7 
	#__∑
(
addr
Ë(*)(()◊ddrË- ()
__boŸ_°¨t
 + 
BOOT_CODE
)

	)

9 
	#ROUNDUP_PAGE
(
addr
) \

10 ((
addr
 + (
PGSIZE
-1)Ë& ~(PGSIZE-1))

	)

13 
	sãmp_°ack


15 
	maddr
;

16 
	mÀngth
;

17 
	m¥Ÿ
;

18 
	mÊags
;

19 
	mfd
;

20 
	moff£t
;

	@bootloader/arch/um/bootloader.c

1 
	~<sys/mm™.h
>

2 
	~<sys/°©.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<f˙é.h
>

7 
	~<°rög.h
>

8 
	~<ñf.h
>

9 
	~<gë›t.h
>

11 
	#SECTSIZE
 512

12 
	#PAGE_NSECT
 (
PGSIZE
 / 
SECTSIZE
)

13 

	)

15 
	#__BOOT__


	)

16 
	~<glue_memœyout.h
>

17 #unde‡
__BOOT__


18 
	~<boŸ.h
>

20 
›ti⁄
 
	gl⁄g›ts
[] = {

21 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

22 {"sw≠", 
ªquúed_¨gumít
, 
NULL
, 's'},

23 {"disk", 
ªquúed_¨gumít
, 
NULL
, 'd'},

24 {"kî√l", 
ªquúed_¨gumít
, 
NULL
, 'k'},

25 {"memsize", 
ªquúed_¨gumít
, 
NULL
, 'm'},

26 {"debug", 
no_¨gumít
, 
NULL
, 'x'},

30 
	gmemsize
 = 0x4000000;

37 
	$¸óã_mem_fûe
 (
size
)

39 
ãm≤ame
[] = "/tmp/vpmXXXXXX";

40 
fd
;

42 
fd
 = 
	`mk°emp
 (
ãm≤ame
);

43 i‡(
fd
 < 0) {

44 
	`≥º‹
 ("createÅemp file failed.\n");

45 
	`_exô
 (1);

47 i‡(
	`u∆ök
 (
ãm≤ame
) < 0) {

48 
	`≥º‹
 ("unlink failed\n");

49 
	`_exô
 (1);

53 
	`¥ötf
 ("mem‹y size: 0x%08x\n", 
size
);

54 i‡(
	`l£ek
 (
fd
, 
size
 - 1, 
SEEK_SET
) < 0) {

55 
	`≥º‹
 ("lseek failed\n");

56 
	`_exô
 (1);

58 
zîo
 = 0;

59 i‡(
	`wrôe
 (
fd
, &
zîo
, 1) < 0) {

60 
	`≥º‹
 ("write failed\n");

61 
	`_exô
 (1);

65 i‡(
	`fchmod
 (
fd
, 0777) < 0) {

66 
	`≥º‹
 ("fchmod failed\n");

67 
	`_exô
 (1);

69 
	`f˙é
 (
fd
, 
F_SETFD
, 
FD_CLOEXEC
);

71  
fd
;

72 
	}
}

81 
	$ªad_kî√l
 (
kî√l_fd
, 
vpm_off£t
)

83 
Elf32_Ehdr
 
hódî
;

84 
	`ªad
 (
kî√l_fd
, &
hódî
,  (
Elf32_Ehdr
));

85 * 
magic
 = (*)(&(
hódî
.
e_idít
));

86 i‡(*
magic
 != 0x464c457f) {

87 
	`¥ötf
 ("InvalidÉlf file.\n");

88 
	`_exô
 (1);

90 
Elf32_Phdr
 
ph
;

91 
ph_off£t
 = 
hódî
.
e_phoff
, 
i
;

92 
i
 = 0; i < 
hódî
.
e_phnum
; i++, 
ph_off£t
 + (
Elf32_Phdr
)) {

94 
	`l£ek
 (
kî√l_fd
, 
ph_off£t
, 
SEEK_SET
);

95 
	`ªad
 (
kî√l_fd
, &
ph
,  (
Elf32_Phdr
));

97 i‡(
ph
.
p_memsz
 > 0) {

98 
	`l£ek
 (
kî√l_fd
, 
ph
.
p_off£t
, 
SEEK_SET
);

99 
	`ªad
 (
kî√l_fd
, (*)(
ph
.
p_vaddr
 + 
vpm_off£t
),Öh.
p_fûesz
);

102 
	}
}

111 
	$e820_öô
 (
kî√l_fd
)

113 
Elf32_Ehdr
 
hódî
;

114 
	`l£ek
 (
kî√l_fd
, 0, 
SEEK_SET
);

115 
	`ªad
 (
kî√l_fd
, &
hódî
,  (
Elf32_Ehdr
));

116 
Elf32_Phdr
 
ph
;

123 
ph_off£t
 = 
hódî
.
e_phoff
, 
i
, 
n
 = 0;

124 
kî√l_íd
 = 0;

126 
e820m≠
.
m≠
[
n
].
addr
 = 
KERNBASE
;

127 
e820m≠
.
m≠
[
n
].
size
 = 
RESERVED_SIZE
;

128 
e820m≠
.
m≠
[
n
].
ty≥
 = 
E820_ARR
;

129 
n
++;

131 
i
 = 0; i < 
hódî
.
e_phnum
; i++, 
ph_off£t
 + (
Elf32_Phdr
)) {

133 
	`l£ek
 (
kî√l_fd
, 
ph_off£t
, 
SEEK_SET
);

134 
	`ªad
 (
kî√l_fd
, &
ph
,  (
Elf32_Phdr
));

135 i‡(
ph
.
p_memsz
 > 0) {

136 
e820m≠
.
m≠
[
n
].
addr
 = 
ph
.
p_∑ddr
;

137 
e820m≠
.
m≠
[
n
].
size
 = 
	`ROUNDUP_PAGE
(
ph
.
p_memsz
);

138 
e820m≠
.
m≠
[
n
].
ty≥
 = 
E820_ARR
;

139 i‡(
	`ROUNDUP_PAGE
(
ph
.
p_∑ddr
 +Öh.
p_memsz
Ë> 
kî√l_íd
)

140 
kî√l_íd
 = 
	`ROUNDUP_PAGE
(
ph
.
p_∑ddr
 +Öh.
p_memsz
);

141 
n
++;

145 
e820m≠
.
m≠
[
n
].
addr
 = 
kî√l_íd
;

146 
e820m≠
.
m≠
[
n
].
size
 = 
memsize
 - 
kî√l_íd
 + 
KERNBASE
;

147 
e820m≠
.
m≠
[
n
].
ty≥
 = 
E820_ARM
;

148 
e820m≠
.
ƒ_m≠
 = 
n
+1;

150 
	`¥ötf
 ("============ memory map ============\n");

151 
i
 = 0; i < 
e820m≠
.
ƒ_m≠
; i++) {

152 
	`¥ötf
 ("[%d]:áddr = 0x%x size = 0x%x\n",

153 
i
, ()
e820m≠
.
m≠
[i].
addr
, (Î820m≠.m≠[i].
size
);

155 
	`¥ötf
 ("========== memory mapÉnd ==========\n");

156 
	}
}

158 
ãmp_°ack
* 
	g°k
;

164 
	$°k_öô
 (
brk_íd
, 
fd
)

166 
°k
 = (*)(
RESERVED_END
 -  (
ãmp_°ack
));

167 
°k
->
addr
 = 
RESERVED_END
;

168 
°k
->
Àngth
 = 
memsize
 - 
RESERVED_SIZE
;

169 
°k
->
¥Ÿ
 = 
PROT_READ
|
PROT_WRITE
|
PROT_EXEC
;

170 
°k
->
Êags
 = 
MAP_SHARED
;

171 
°k
->
fd
 = fd;

172 
°k
->
off£t
 = 
RESERVED_SIZE
;

173 
	}
}

177 
	$∑r£_›ts
 (
¨gc
, * 
¨gv
[])

179 
göfo
->
disk_fd
 = göfo->
sw≠_fd
 = -1;

180 
göfo
->
°©us
 = 
STATUS_RUN
;

182 
c
;

183 
tmp
;

184 
°©
 
buf
;

186 
›töd
 = 1;

187 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, ":sdx:", 
l⁄g›ts
, 0)) != -1) {

188 
c
) {

190 
tmp
 = 
	`›í
 (
›èrg
, 
O_RDWR
);

191 i‡(
tmp
 < 0) {

192 
	`¥ötf
 ("sw≠ fûê%†nŸ found!\n", 
›èrg
);

193 
	`_exô
 (1);

195 i‡(
	`f°©
 (
tmp
, &
buf
) < 0) {

196 
	`¥ötf
 ("cannot get swap file status!\n");

197 
	`_exô
 (1);

199 
göfo
->
sw≠_fd
 = 
tmp
;

200 
göfo
->
sw≠_size
 = ()(
buf
.
°_size
 / 
SECTSIZE
);

203 
tmp
 = 
	`›í
 (
›èrg
, 
O_RDWR
);

204 i‡(
tmp
 < 0) {

205 
	`¥ötf
 ("disk fûê%†nŸ found!\n", 
›èrg
);

206 
	`_exô
 (1);

208 i‡(
	`f°©
 (
tmp
, &
buf
) < 0) {

209 
	`¥ötf
 ("cannot get disk file status!\n");

210 
	`_exô
 (1);

212 
göfo
->
disk_fd
 = 
tmp
;

213 
göfo
->
disk_size
 = ()(
buf
.
°_size
 / 
SECTSIZE
);

216 
göfo
->
°©us
 = 
STATUS_DEBUG
;

223 
	}
}

227 
	$maö
 (
¨gc
, * 
¨gv
[])

229 
fd
, 
kî√l_fd
 = -1;

232 
c
, *
unô
;

233 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, ":skmdx:", 
l⁄g›ts
, 0)) != -1) {

234 
c
) {

236 
	`¥ötf
 (" -d <path>, --disk=<path> specifyÇormal disk\n"

244 i‡((
kî√l_fd
 = 
	`›í
 (
›èrg
, 
O_RDONLY
)) < 0)

248 
memsize
 = 
	`°πﬁ
 (
›èrg
, &
unô
, 10);

249 i‡(*
unô
 == 'K' || *unit == 'k')

250 
memsize
 <<= 10;

251 i‡(*
unô
 == 'M' || *unit == 'm')

252 
memsize
 <<= 20;

259 i‡(
kî√l_fd
 < 0) {

260 
	`¥ötf
 ("No kernel file specified.\n");

264 
°©
 
buf
;

265 
	`f°©
 (
kî√l_fd
, &
buf
);

267 
fd
 = 
	`¸óã_mem_fûe
 (
memsize
);

270 
brk_íd
 = ()
	`sbrk
 (0);

271 
	`mm≠
 ((*)
brk_íd
, 
memsize
, 
PROT_READ
|
PROT_WRITE
|
PROT_EXEC
, 
MAP_SHARED
, 
fd
, 0);

273 
	`ªad_kî√l
 (
kî√l_fd
, 
brk_íd
 - 
KERNBASE
);

276 
	`mm≠
 ((*)
KERNBASE
, 
RESERVED_SIZE
, 
PROT_READ
|
PROT_WRITE
|
PROT_EXEC
, 
MAP_SHARED
, 
fd
, 0);

279 
göfo
->
mem_fd
 = 
fd
;

280 
	`e820_öô
 (
kî√l_fd
);

281 
	`∑r£_›ts
 (
¨gc
, 
¨gv
);

284 
	`mem˝y
 ((*)(
BOOT_CODE
), (*)&
__boŸ_°¨t
, 
PGSIZE
);

285 
	`°k_öô
 (
brk_íd
, 
fd
);

287 (*
boŸ_°¨t
) ();

288 
boŸ_°¨t
 = 
	`__∑
 (
__boŸ_íåy
);

289 
	`boŸ_°¨t
 ();

292 
	}
}

298 
__©åibuã__
 ((
__£˘i⁄__
 (".__boot")))

299 
	$boŸ_maö
 ()

301 
Elf32_Ehdr
* 
hódî
 = (Elf32_Ehdr*)
RESERVED_END
;

303 (((*)())(
hódî
->
e_íåy
))();

305 
	`asm
 ("movl $1, %eax; movl $0, %ebx; int $0x80;");

306 
	}
}

	@bootloader/arch/x86_64/asm.h

1 #i‚de‡
__BOOT_ASM_H__


2 
	#__BOOT_ASM_H__


	)

7 
	#SEG_NULLASM
 \

8 .
w‹d
 0, 0; \

9 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

18 
	#STA_X
 0x8

19 
	#STA_E
 0x4

20 
	#STA_C
 0x4

21 
	#STA_W
 0x2

22 
	#STA_R
 0x2

23 
	#STA_A
 0x1

24 

	)

	@bootloader/arch/x86_64/bootmain.c

1 
	~<ty≥s.h
>

2 
	~<x86.h
>

3 
	~<ñf.h
>

33 
	#SECTSIZE
 512

	)

34 
	#ELFHDR
 ((
ñfhdr
 *)0x10000)

35 

	)

38 
	$waôdisk
() {

39 (
	`öb
(0x1F7) & 0xC0) != 0x40)

41 
	}
}

45 
	$ªad£˘
(*
d°
, 
uöt32_t
 
£˙o
) {

47 
	`waôdisk
();

49 
	`outb
(0x1F2, 1);

50 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

51 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

52 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

53 
	`outb
(0x1F6, ((
£˙o
 >> 24) & 0xF) | 0xE0);

54 
	`outb
(0x1F7, 0x20);

57 
	`waôdisk
();

60 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
 / 4);

61 
	}
}

68 
	$ªad£g
(
uöçå_t
 
∑
, 
uöt32_t
 
cou¡
, uöt32_à
off£t
) {

69 
uöçå_t
 
íd_∑
 = 
∑
 + 
cou¡
;

72 
∑
 -
off£t
 % 
SECTSIZE
;

75 
uöt32_t
 
£˙o
 = (
off£t
 / 
SECTSIZE
Ë+ 
KERN_START_SECT
;

80 ; 
∑
 < 
íd_∑
;Ö®+
SECTSIZE
, 
£˙o
 ++) {

81 
	`ªad£˘
((*)
∑
, 
£˙o
);

83 
	}
}

87 
	$boŸmaö
() {

89 
	`ªad£g
((
uöçå_t
)
ELFHDR
, 
SECTSIZE
 * 8, 0);

92 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
) {

93 
bad
;

96 
¥oghdr
 *
ph
, *
ïh
;

99 
ph
 = (
¥oghdr
 *)((
uöçå_t
)
ELFHDR
 + (
size_t
)ELFHDR->
e_phoff
);

100 
ïh
 = 
ph
 + (
size_t
)
ELFHDR
->
e_phnum
;

101 ; 
ph
 < 
ïh
;Öh ++) {

102 
	`ªad£g
(
ph
->
p_∑
,Öh->
p_memsz
,Öh->
p_off£t
);

107 (((*)())((
uöçå_t
)
ELFHDR
->
e_íåy
))();

109 
bad
:

110 
	`outw
(0x8A00, 0x8A00);

111 
	`outw
(0x8A00, 0x8E00);

115 
	}
}

	@bootloader/arch/x86_64/x86.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<ty≥s.h
>

6 
ölöe
 

7 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

9 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

10 
asm
 volatile("cpuid"

11 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

12 : "a" (
öfo
));

13 i‡(
óxp
)

14 *
óxp
 = 
óx
;

15 i‡(
ebxp
)

16 *
ebxp
 = 
ebx
;

17 i‡(
ecxp
)

18 *
ecxp
 = 
ecx
;

19 i‡(
edxp
)

20 *
edxp
 = 
edx
;

21 
	}
}

23 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" ::: "mem‹y")

	)

25 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
	sp£udodesc
 {

32 
uöt16_t
 
pd_lim
;

33 
uöçå_t
 
pd_ba£
;

34 } 
	`__©åibuã__
 ((
∑cked
));

36 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

37 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

42 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

43 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

44 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
uöt8_t


47 
	$öb
(
uöt16_t
 
p‹t
) {

48 
uöt8_t
 
d©a
;

49 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
) : "memory");

50  
d©a
;

51 
	}
}

53 
ölöe
 

54 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

55 
asm
 volatile (

58 : "=D" (
addr
), "=c" (
˙t
)

59 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

61 
	}
}

63 
ölöe
 

64 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

65 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

66 
	}
}

68 
ölöe
 

69 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

70 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

71 
	}
}

73 
ölöe
 

74 
	$lidt
(
p£udodesc
 *
pd
) {

75 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
) : "memory");

76 
	}
}

78 
ölöe
 

79 
	$°i
() {

80 
asm
 volatile ("sti");

81 
	}
}

83 
ölöe
 

84 
	$˛i
() {

85 
asm
 volatile ("cli" ::: "memory", "cc");

86 
	}
}

88 
ölöe
 

89 
	$…r
(
uöt16_t
 
£l
) {

90 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
) : "memory");

91 
	}
}

93 
ölöe
 

94 
	$l¸0
(
uöçå_t
 
¸0
) {

95 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
) : "memory");

96 
	}
}

98 
ölöe
 

99 
	$l¸3
(
uöçå_t
 
¸3
) {

100 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
) : "memory");

101 
	}
}

103 
ölöe
 
uöçå_t


104 
	$r¸0
() {

105 
uöçå_t
 
¸0
;

106 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
) :: "memory");

107  
¸0
;

108 
	}
}

110 
ölöe
 
uöçå_t


111 
	$r¸3
() {

112 
uöçå_t
 
¸3
;

113 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
) :: "memory");

114  
¸3
;

115 
	}
}

117 
ölöe
 

118 
	$övÕg
(*
addr
) {

119 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

120 
	}
}

122 #ifde‡
__UCORE_64__


124 
	#do_div
(
n
, 
ba£
) ({ \

125 
uöt64_t
 
__mod
, 
__ba£
 = (uöt64_t)
ba£
; \

126 
__mod
 = ((
uöt64_t
)(
n
)Ë% 
__ba£
; \

127 (
n
Ë((
uöt64_t
)“)Ë/ 
__ba£
; \

128 
__mod
; \

129 })

	)

131 
ölöe
 
uöt64_t
 
	$ªad_rbp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

132 
ölöe
 
uöt64_t
 
	$ªad_rÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

133 
ölöe
 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

135 
ölöe
 
uöt64_t


136 
	$ªad_rbp
() {

137 
uöt64_t
 
rbp
;

138 
asm
 vﬁ©ûê("movq %%rbp, %0" : "Ù" (
rbp
));

139  
rbp
;

140 
	}
}

142 
ölöe
 
uöt64_t


143 
	$ªad_rÊags
() {

144 
uöt64_t
 
rÊags
;

145 
asm
 vﬁ©ûê("pushfq;Ö›q %0" : "Ù" (
rÊags
));

146  
rÊags
;

147 
	}
}

149 
ölöe
 

150 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
) {

151 
asm
 vﬁ©ûê("pushq %0;Ö›fq" :: "r" (
rÊags
));

152 
	}
}

156 
	#do_div
(
n
, 
ba£
) ({ \

157 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

158 
__ba£
 = (
ba£
); \

159 
	`asm
 ("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

160 
__uµî
 = 
__high
; \

161 i‡(
__high
 != 0) { \

162 
__uµî
 = 
__high
 % 
__ba£
; \

163 
__high
 = __high / 
__ba£
; \

165 
	`asm
 ("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

166 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

167 
	`asm
 ("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

168 
__mod
; \

169 })

	)

171 
ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

172 
ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

173 
ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

175 
ölöe
 
uöt32_t


176 
	$ªad_ebp
() {

177 
uöt32_t
 
ebp
;

178 
asm
 vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
ebp
));

179  
ebp
;

180 
	}
}

182 
ölöe
 
uöt32_t


183 
	$ªad_eÊags
() {

184 
uöt32_t
 
eÊags
;

185 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

186  
eÊags
;

187 
	}
}

189 
ölöe
 

190 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
) {

191 
asm
 vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
eÊags
));

192 
	}
}

196 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

197 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

198 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

199 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

200 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

202 #i‚de‡
__HAVE_ARCH_STRCMP


203 
	#__HAVE_ARCH_STRCMP


	)

204 
ölöe
 

205 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

206 
d0
, 
d1
, 
ªt
;

207 
asm
 volatile (

218 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

219 : "1" (
s1
), "2" (
s2
)

221  
ªt
;

222 
	}
}

226 #i‚de‡
__HAVE_ARCH_STRCPY


227 
	#__HAVE_ARCH_STRCPY


	)

228 
ölöe
 *

229 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

230 
d0
, 
d1
, 
d2
;

231 
asm
 volatile (

236 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

237 : "0" (
§c
), "1" (
d°
) : "memory");

238  
d°
;

239 
	}
}

242 #i‚de‡
__HAVE_ARCH_MEMSET


243 
	#__HAVE_ARCH_MEMSET


	)

244 
ölöe
 *

245 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

246 
d0
, 
d1
;

247 
asm
 volatile (

249 : "=&c" (
d0
), "=&D" (
d1
)

250 : "0" (
n
), "a" (
c
), "1" (
s
)

252  
s
;

253 
	}
}

256 #i‚de‡
__HAVE_ARCH_MEMMOVE


257 
	#__HAVE_ARCH_MEMMOVE


	)

258 
ölöe
 *

259 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

260 i‡(
d°
 < 
§c
) {

261  
	`__mem˝y
(
d°
, 
§c
, 
n
);

263 
d0
, 
d1
, 
d2
;

264 
asm
 volatile (

268 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

269 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

271  
d°
;

272 
	}
}

275 #i‚de‡
__HAVE_ARCH_MEMCPY


276 
	#__HAVE_ARCH_MEMCPY


	)

277 
ölöe
 *

278 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

279 
d0
, 
d1
, 
d2
;

280 
asm
 volatile (

287 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

288 : "0" (
n
 / 4), "g" (n), "1" (
d°
), "2" (
§c
)

290  
d°
;

291 
	}
}

	@bootloader/elf.h

1 #i‚de‡
__LIBS_ELF_H__


2 
	#__LIBS_ELF_H__


	)

4 
	~<ty≥s.h
>

6 
	#ELF_MAGIC
 0x464C457FU

7 

	)

8 #i‡
deföed
(
__UCORE_64__
Ë|| deföed(
__ARCH_X86_64__
)

11 
	sñfhdr
 {

12 
uöt32_t
 
	me_magic
;

13 
uöt8_t
 
	me_ñf
[12];

14 
uöt16_t
 
	me_ty≥
;

15 
uöt16_t
 
	me_machöe
;

16 
uöt32_t
 
	me_vîsi⁄
;

17 
uöt64_t
 
	me_íåy
;

18 
uöt64_t
 
	me_phoff
;

19 
uöt64_t
 
	me_shoff
;

20 
uöt32_t
 
	me_Êags
;

21 
uöt16_t
 
	me_ehsize
;

22 
uöt16_t
 
	me_phítsize
;

23 
uöt16_t
 
	me_phnum
;

24 
uöt16_t
 
	me_shítsize
;

25 
uöt16_t
 
	me_shnum
;

26 
uöt16_t
 
	me_sh°∫dx
;

30 
	s¥oghdr
 {

31 
uöt32_t
 
	mp_ty≥
;

32 
uöt32_t
 
	mp_Êags
;

33 
uöt64_t
 
	mp_off£t
;

34 
uöt64_t
 
	mp_va
;

35 
uöt64_t
 
	mp_∑
;

36 
uöt64_t
 
	mp_fûesz
;

37 
uöt64_t
 
	mp_memsz
;

38 
uöt64_t
 
	mp_Æign
;

43 
	sñfhdr
 {

44 
uöt32_t
 
	me_magic
;

45 
uöt8_t
 
	me_ñf
[12];

46 
uöt16_t
 
	me_ty≥
;

47 
uöt16_t
 
	me_machöe
;

48 
uöt32_t
 
	me_vîsi⁄
;

49 
uöt32_t
 
	me_íåy
;

50 
uöt32_t
 
	me_phoff
;

51 
uöt32_t
 
	me_shoff
;

52 
uöt32_t
 
	me_Êags
;

53 
uöt16_t
 
	me_ehsize
;

54 
uöt16_t
 
	me_phítsize
;

55 
uöt16_t
 
	me_phnum
;

56 
uöt16_t
 
	me_shítsize
;

57 
uöt16_t
 
	me_shnum
;

58 
uöt16_t
 
	me_sh°∫dx
;

62 
	s¥oghdr
 {

63 
uöt32_t
 
	mp_ty≥
;

64 
uöt32_t
 
	mp_off£t
;

65 
uöt32_t
 
	mp_va
;

66 
uöt32_t
 
	mp_∑
;

67 
uöt32_t
 
	mp_fûesz
;

68 
uöt32_t
 
	mp_memsz
;

69 
uöt32_t
 
	mp_Êags
;

70 
uöt32_t
 
	mp_Æign
;

76 
	#ELF_PT_LOAD
 1

	)

79 
	#ELF_PF_X
 1

	)

80 
	#ELF_PF_W
 2

	)

81 
	#ELF_PF_R
 4

	)

	@bootloader/types.h

1 #i‚de‡
__LIBS_TYPES_H__


2 
	#__LIBS_TYPES_H__


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*)0)

	)

9 
	tboﬁ
;

12 
	töt8_t
;

13 
	tuöt8_t
;

14 
	töt16_t
;

15 
	tuöt16_t
;

16 
	töt32_t
;

17 
	tuöt32_t
;

18 
	töt64_t
;

19 
	tuöt64_t
;

21 #i‡
deföed
(
__LP64__
Ë|| deföed(
__64BIT__
Ë|| deföed(
_LP64
)

22 #i‚de‡
__UCORE_64__


23 
	#__UCORE_64__


	)

33 #ifde‡
__UCORE_64__


36 
öt64_t
 
	töçå_t
;

37 
uöt64_t
 
	tuöçå_t
;

42 
öt32_t
 
	töçå_t
;

43 
uöt32_t
 
	tuöçå_t
;

48 
uöçå_t
 
	tsize_t
;

51 
size_t
 
	tµn_t
;

57 
	#ROUNDDOWN
(
a
, 
n
) ({ \

58 
size_t
 
__a
 = (size_t)(
a
); \

59 (
	`ty≥of
(
a
))(
__a
 - __®% (
n
)); \

60 })

	)

63 
	#ROUNDUP
(
a
, 
n
) ({ \

64 
size_t
 
__n
 = (size_t)(
n
); \

65 (
	`ty≥of
(
a
))(
	`ROUNDDOWN
((
size_t
)◊Ë+ 
__n
 - 1, __n)); \

66 })

	)

69 
	#off£tof
(
ty≥
, 
membî
) \

70 ((
size_t
)(&((
ty≥
 *)0)->
membî
))

	)

78 
	#to_°ru˘
(
±r
, 
ty≥
, 
membî
) \

79 ((
ty≥
 *)((*)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

	@glue-kern/arch/i386/glue_intr.h

1 #i‚de‡
__GLUE_INTR_H__


2 
	#__GLUE_INTR_H__


	)

4 
	~<ty≥s.h
>

9 
	#T_DIVIDE
 0

10 
	#T_DEBUG
 1

11 
	#T_NMI
 2

12 
	#T_BRKPT
 3

13 
	#T_OFLOW
 4

14 
	#T_BOUND
 5

15 
	#T_ILLOP
 6

16 
	#T_DEVICE
 7

17 
	#T_DBLFLT
 8

19 
	#T_TSS
 10

20 
	#T_SEGNP
 11

21 
	#T_STACK
 12

22 
	#T_GPFLT
 13

23 
	#T_PGFLT
 14

25 
	#T_FPERR
 16

26 
	#T_ALIGN
 17

27 
	#T_MCHK
 18

28 
	#T_SIMDERR
 19

29 

	)

31 
	#IRQ_OFFSET
 32

32 

	)

33 
	#IRQ_TIMER
 0

	)

34 
	#IRQ_KBD
 1

	)

35 
	#IRQ_COM1
 4

	)

36 
	#IRQ_IDE1
 14

	)

37 
	#IRQ_IDE2
 15

	)

38 
	#IRQ_ERROR
 19

	)

39 
	#IRQ_SPURIOUS
 31

	)

42 
	spushªgs
 {

43 
uöt32_t
 
	mªg_edi
;

44 
uöt32_t
 
	mªg_esi
;

45 
uöt32_t
 
	mªg_ebp
;

46 
uöt32_t
 
	mªg_€•
;

47 
uöt32_t
 
	mªg_ebx
;

48 
uöt32_t
 
	mªg_edx
;

49 
uöt32_t
 
	mªg_ecx
;

50 
uöt32_t
 
	mªg_óx
;

53 
	så≠‰ame
 {

54 
pushªgs
 
	mtf_ªgs
;

55 
uöt16_t
 
	mtf_es
;

56 
uöt16_t
 
	mtf_∑ddög1
;

57 
uöt16_t
 
	mtf_ds
;

58 
uöt16_t
 
	mtf_∑ddög2
;

59 
uöt32_t
 
	mtf_å≠no
;

61 
uöt32_t
 
	mtf_îr
;

62 
uöçå_t
 
	mtf_eù
;

63 
uöt16_t
 
	mtf_cs
;

64 
uöt16_t
 
	mtf_∑ddög3
;

65 
uöt32_t
 
	mtf_eÊags
;

67 
uöçå_t
 
	mtf_e•
;

68 
uöt16_t
 
	mtf_ss
;

69 
uöt16_t
 
	mtf_∑ddög4
;

70 } 
__©åibuã__
((
∑cked
));

72 
idt_öô
();

73 
¥öt_å≠‰ame
(
å≠‰ame
 *
tf
);

74 
¥öt_ªgs
(
pushªgs
 *
ªgs
);

75 
boﬁ
 
å≠_ö_kî√l
(
å≠‰ame
 *
tf
);

77 
	#loˇl_öå_íabÀ_hw
 dÿ{ 
__asm
 
	`__vﬁ©ûe
 ("°i"); } 0)

	)

78 
	#loˇl_öå_dißbÀ_hw
 dÿ{ 
__asm
 
	`__vﬁ©ûe
 ("˛i"); } 0)

	)

80 
	#loˇl_öå_ßve_hw
(
x
Ëdÿ{ (xË(
	`ªad_eÊags
(Ë& 
FL_IF
Ë!0; 
	`˛i
(); } 0)

	)

81 
	#loˇl_öå_ª°‹e_hw
(
x
Ëdÿ{ i‡(xË
	`°i
(); } 0)

	)

	@glue-kern/arch/i386/glue_kio.h

1 #i‚de‡
__GLUE_KIO_H__


2 
	#__GLUE_KIO_H__


	)

4 
	~<c⁄sﬁe.h
>

6 
	#kc⁄s_putc
 
c⁄s_putc


	)

7 
	#kc⁄s_gëc
 
c⁄s_gëc


	)

	@glue-kern/arch/i386/glue_memlayout.h

1 #i‚de‡
__KERN_MM_MEMLAYOUT_H__


2 
	#__KERN_MM_MEMLAYOUT_H__


	)

7 
	#SEG_KTEXT
 1

	)

8 
	#SEG_KDATA
 2

	)

9 
	#SEG_UTEXT
 3

	)

10 
	#SEG_UDATA
 4

	)

11 
	#SEG_TSS
 5

	)

14 
	#GD_KTEXT
 ((
SEG_KTEXT
) << 3)

15 
	#GD_KDATA
 ((
SEG_KDATA
) << 3)

16 
	#GD_UTEXT
 ((
SEG_UTEXT
) << 3)

17 
	#GD_UDATA
 ((
SEG_UDATA
) << 3)

18 
	#GD_TSS
 ((
SEG_TSS
) << 3)

19 

	)

20 
	#DPL_KERNEL
 (0)

	)

21 
	#DPL_USER
 (3)

	)

23 
	#KERNEL_CS
 ((
GD_KTEXT
Ë| 
DPL_KERNEL
)

	)

24 
	#KERNEL_DS
 ((
GD_KDATA
Ë| 
DPL_KERNEL
)

	)

25 
	#USER_CS
 ((
GD_UTEXT
Ë| 
DPL_USER
)

	)

26 
	#USER_DS
 ((
GD_UDATA
Ë| 
DPL_USER
)

	)

70 
	#KERNBASE
 0xC0000000

	)

71 
	#PBASE
 
KERNBASE


	)

72 
	#KMEMSIZE
 0x38000000

73 
	#KERNTOP
 (
KERNBASE
 + 
KMEMSIZE
)

	)

81 
	#VPT
 0xFAC00000

	)

83 
	#KSTACKPAGE
 2

84 
	#KSTACKSIZE
 (
KSTACKPAGE
 * 
PGSIZE
)

85 

	)

86 
	#USERTOP
 0xB0000000

	)

87 
	#USTACKTOP
 
USERTOP


	)

88 
	#USTACKPAGE
 256

89 
	#USTACKSIZE
 (
USTACKPAGE
 * 
PGSIZE
)

90 

	)

91 
	#USERBASE
 0x00200000

	)

92 
	#UTEXT
 0x00800000

93 
	#USTAB
 
USERBASE


94 

	)

95 
	#USER_ACCESS
(
°¨t
, 
íd
) \

96 (
USERBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<
USERTOP
)

	)

98 
	#KERN_ACCESS
(
°¨t
, 
íd
) \

99 (
KERNBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<
KERNTOP
)

	)

101 #i‚de‡
__ASSEMBLER__


103 
	~<ty≥s.h
>

104 
	~<©omic.h
>

105 
	~<li°.h
>

107 
uöçå_t
 
	t±e_t
;

108 
uöçå_t
 
	tpde_t
;

109 
uöçå_t
 
	tpud_t
;

110 
uöçå_t
 
	tpmd_t
;

111 
uöçå_t
 
	tpgd_t
;

112 
±e_t
 
	tsw≠_íåy_t
;

115 
	#E820MAX
 20

116 
	#E820_ARM
 1

117 
	#E820_ARR
 2

118 

	)

119 
	se820m≠
 {

120 
	mƒ_m≠
;

122 
uöt64_t
 
	maddr
;

123 
uöt64_t
 
	msize
;

124 
uöt32_t
 
	mty≥
;

125 } 
__©åibuã__
((
∑cked
)Ë
	mm≠
[
E820MAX
];

133 
	sPage
 {

134 
©omic_t
 
	mªf
;

135 
uöt32_t
 
	mÊags
;

136 
	m¥›îty
;

137 
	mz⁄e_num
;

138 
li°_íåy_t
 
	m∑ge_lök
;

139 
sw≠_íåy_t
 
	mödex
;

140 
li°_íåy_t
 
	msw≠_lök
;

144 
	#PG_ª£rved
 0

145 
	#PG_¥›îty
 1

146 
	#PG_¶ab
 2

147 
	#PG_dúty
 3

148 
	#PG_sw≠
 4

149 
	#PG_a˘ive
 5

150 

	)

151 
	#SëPageRe£rved
(
∑ge
Ë
	`£t_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

152 
	#CÀ¨PageRe£rved
(
∑ge
Ë
	`˛ór_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

153 
	#PageRe£rved
(
∑ge
Ë
	`ã°_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

154 
	#SëPagePr›îty
(
∑ge
Ë
	`£t_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

155 
	#CÀ¨PagePr›îty
(
∑ge
Ë
	`˛ór_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

156 
	#PagePr›îty
(
∑ge
Ë
	`ã°_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

157 
	#SëPageSœb
(
∑ge
Ë
	`£t_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

158 
	#CÀ¨PageSœb
(
∑ge
Ë
	`˛ór_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

159 
	#PageSœb
(
∑ge
Ë
	`ã°_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

160 
	#SëPageDúty
(
∑ge
Ë
	`£t_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

161 
	#CÀ¨PageDúty
(
∑ge
Ë
	`˛ór_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

162 
	#PageDúty
(
∑ge
Ë
	`ã°_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

163 
	#SëPageSw≠
(
∑ge
Ë
	`£t_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

164 
	#CÀ¨PageSw≠
(
∑ge
Ë
	`˛ór_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

165 
	#PageSw≠
(
∑ge
Ë
	`ã°_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

166 
	#SëPageA˘ive
(
∑ge
Ë
	`£t_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

167 
	#CÀ¨PageA˘ive
(
∑ge
Ë
	`˛ór_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

168 
	#PageA˘ive
(
∑ge
Ë
	`ã°_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

171 
	#À2∑ge
(
À
, 
membî
) \

172 
	`to_°ru˘
((
À
), 
Page
, 
membî
)

	)

176 
li°_íåy_t
 
	m‰ì_li°
;

177 
	mƒ_‰ì
;

178 } 
	t‰ì_¨ó_t
;

	@glue-kern/arch/i386/glue_mp.h

1 #i‚de‡
__GLUE_MP_H__


2 
	#__GLUE_MP_H__


	)

4 
	#LAPIC_COUNT
 1

	)

6 
	#PLS


	)

8 
	#∂s_ªad
(
v¨
Ë
∂s_
##
	)
var

10 
	#∂s_gë_±r
(
v¨
Ë&
∂s_
##
	)
var

12 
	#∂s_wrôe
(
v¨
, 
vÆue
) \

14 
∂s_
##
v¨
 = 
vÆue
; \

15 } 0)

	)

	@glue-kern/arch/i386/glue_pgmap.h

1 #i‚de‡
__GLUE_PGMAP_H__


2 
	#__GLUE_PGMAP_H__


	)

4 
	~"glue_memœyout.h
"

5 
	~"mmu.h
"

7 
±e_t
 
	t±e_≥rm_t
;

9 
ölöe
 

10 
	$±ï_m≠
 (
±e_t
 *
±ï
, 
uöçå_t
 
∑
)

12 *
±ï
 = (
∑
 | 
PTE_P
);

13 
	}
}

15 
ölöe
 

16 
	$±ï_unm≠
 (
±e_t
 *
±ï
)

18 *
±ï
 = 0;

19 
	}
}

21 
ölöe
 

22 
	$±ï_övÆid
 (
±e_t
 *
±ï
)

24  (*
±ï
 == 0);

25 
	}
}

27 
ölöe
 

28 
	$±ï_¥e£¡
 (
±e_t
 *
±ï
)

30  (*
±ï
 & 
PTE_P
);

31 
	}
}

33 
ölöe
 

34 
	$±ï_s_ªad
 (
±e_t
 *
±ï
)

36  (*
±ï
 & 
PTE_P
);

37 
	}
}

39 
ölöe
 

40 
	$±ï_s_wrôe
 (
±e_t
 *
±ï
)

42  (*
±ï
 & 
PTE_W
);

43 
	}
}

45 
ölöe
 

46 
	$±ï_u_ªad
 (
±e_t
 *
±ï
)

48  (*
±ï
 & 
PTE_U
);

49 
	}
}

51 
ölöe
 

52 
	$±ï_u_wrôe
 (
±e_t
 *
±ï
)

54  ((*
±ï
 & 
PTE_U
Ë&& (*±ï & 
PTE_W
));

55 
	}
}

57 
ölöe
 

58 
	$±ï_£t_s_ªad
 (
±e_t
 *
±ï
)

60 
	}
}

62 
ölöe
 

63 
	$±ï_£t_s_wrôe
 (
±e_t
 *
±ï
)

65 
	}
}

67 
ölöe
 

68 
	$±ï_£t_u_ªad
 (
±e_t
 *
±ï
)

70 *
±ï
 |
PTE_U
;

71 
	}
}

73 
ölöe
 

74 
	$±ï_£t_u_wrôe
 (
±e_t
 *
±ï
)

76 *
±ï
 |
PTE_W
 | 
PTE_U
;

77 
	}
}

79 
ölöe
 

80 
	$±ï_un£t_s_ªad
 (
±e_t
 *
±ï
)

82 
	}
}

84 
ölöe
 

85 
	$±ï_un£t_s_wrôe
 (
±e_t
 *
±ï
)

87 *
±ï
 &(~
PTE_W
);

88 
	}
}

90 
ölöe
 

91 
	$±ï_un£t_u_ªad
 (
±e_t
 *
±ï
)

93 
	}
}

95 
ölöe
 

96 
	$±ï_un£t_u_wrôe
 (
±e_t
 *
±ï
)

98 *
±ï
 &(~
PTE_W
);

99 
	}
}

101 
ölöe
 
±e_≥rm_t


102 
	$±ï_gë_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

104  (*
±ï
Ë& 
≥rm
;

105 
	}
}

107 
ölöe
 

108 
	$±ï_£t_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

110 *
±ï
 |
≥rm
;

111 
	}
}

113 
ölöe
 

114 
	$±ï_c›y
 (
±e_t
 *
to
,Öã_à*
‰om
)

116 *
to
 = *
‰om
;

117 
	}
}

119 
ölöe
 

120 
	$±ï_un£t_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

122 *
±ï
 &(~
≥rm
);

123 
	}
}

125 
ölöe
 

126 
	$±ï_ac˚s£d
 (
±e_t
 *
±ï
)

128  *
±ï
 & 
PTE_A
;

129 
	}
}

131 
ölöe
 

132 
	$±ï_dúty
 (
±e_t
 *
±ï
)

134  *
±ï
 & 
PTE_D
;

135 
	}
}

137 
ölöe
 

138 
	$±ï_£t_ac˚s£d
 (
±e_t
 *
±ï
)

140 *
±ï
 |
PTE_A
;

141 
	}
}

143 
ölöe
 

144 
	$±ï_£t_dúty
 (
±e_t
 *
±ï
)

146 *
±ï
 |
PTE_D
;

147 
	}
}

149 
ölöe
 

150 
	$±ï_un£t_ac˚s£d
 (
±e_t
 *
±ï
)

152 *
±ï
 &(~
PTE_A
);

153 
	}
}

155 
ölöe
 

156 
	$±ï_un£t_dúty
 (
±e_t
 *
±ï
)

158 *
±ï
 &(~
PTE_D
);

159 
	}
}

	@glue-kern/arch/i386/mmu.h

1 #i‚de‡
__KERN_MM_MMU_H__


2 
	#__KERN_MM_MMU_H__


	)

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#STA_X
 0x8

29 
	#STA_E
 0x4

30 
	#STA_C
 0x4

31 
	#STA_W
 0x2

32 
	#STA_R
 0x2

33 
	#STA_A
 0x1

34 

	)

36 
	#STS_T16A
 0x1

37 
	#STS_LDT
 0x2

38 
	#STS_T16B
 0x3

39 
	#STS_CG16
 0x4

40 
	#STS_TG
 0x5

41 
	#STS_IG16
 0x6

42 
	#STS_TG16
 0x7

43 
	#STS_T32A
 0x9

44 
	#STS_T32B
 0xB

45 
	#STS_CG32
 0xC

46 
	#STS_IG32
 0xE

47 
	#STS_TG32
 0xF

48 

	)

49 #ifde‡
__ASSEMBLER__


51 
	#SEG_NULL
 \

52 .
w‹d
 0, 0; \

53 .
byã
 0, 0, 0, 0

	)

55 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

56 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

57 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

58 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

62 
	~<ty≥s.h
>

65 
	sg©edesc
 {

66 
	mgd_off_15_0
 : 16;

67 
	mgd_ss
 : 16;

68 
	mgd_¨gs
 : 5;

69 
	mgd_rsv1
 : 3;

70 
	mgd_ty≥
 : 4;

71 
	mgd_s
 : 1;

72 
	mgd_d∂
 : 2;

73 
	mgd_p
 : 1;

74 
	mgd_off_31_16
 : 16;

86 
	#SETGATE
(
g©e
, 
i°øp
, 
ss
, 
off
, 
d∂
) { \

87 (
g©e
).
gd_off_15_0
 = (
uöt32_t
)(
off
) & 0xffff; \

88 (
g©e
).
gd_ss
 = (
ss
); \

89 (
g©e
).
gd_¨gs
 = 0; \

90 (
g©e
).
gd_rsv1
 = 0; \

91 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

92 (
g©e
).
gd_s
 = 0; \

93 (
g©e
).
gd_d∂
 = (
d∂
); \

94 (
g©e
).
gd_p
 = 1; \

95 (
g©e
).
gd_off_31_16
 = (
uöt32_t
)(
off
) >> 16; \

96 }

	)

99 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) { \

100 (
g©e
).
gd_off_15_0
 = (
uöt32_t
)(
off
) & 0xffff; \

101 (
g©e
).
gd_ss
 = (
ss
); \

102 (
g©e
).
gd_¨gs
 = 0; \

103 (
g©e
).
gd_rsv1
 = 0; \

104 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

105 (
g©e
).
gd_s
 = 0; \

106 (
g©e
).
gd_d∂
 = (
d∂
); \

107 (
g©e
).
gd_p
 = 1; \

108 (
g©e
).
gd_off_31_16
 = (
uöt32_t
)(
off
) >> 16; \

109 }

	)

112 
	s£gdesc
 {

113 
	msd_lim_15_0
 : 16;

114 
	msd_ba£_15_0
 : 16;

115 
	msd_ba£_23_16
 : 8;

116 
	msd_ty≥
 : 4;

117 
	msd_s
 : 1;

118 
	msd_d∂
 : 2;

119 
	msd_p
 : 1;

120 
	msd_lim_19_16
 : 4;

121 
	msd_avl
 : 1;

122 
	msd_rsv1
 : 1;

123 
	msd_db
 : 1;

124 
	msd_g
 : 1;

125 
	msd_ba£_31_24
 : 8;

128 
	#SEG_NULL
 \

129 (
£gdesc
Ë{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

131 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
) \

132 (
£gdesc
) { \

133 ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, \

134 ((
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 1, 
d∂
, 1, \

135 ()(
lim
) >> 28, 0, 0, 1, 1, \

136 (Ë(
ba£
) >> 24 \

137 }

	)

139 
	#SEGTSS
(
ty≥
, 
ba£
, 
lim
, 
d∂
) \

140 (
£gdesc
) { \

141 (
lim
Ë& 0xffff, (
ba£
) & 0xffff, \

142 ((
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 0, 
d∂
, 1, \

143 (Ë(
lim
) >> 16, 0, 0, 1, 0, \

144 (Ë(
ba£
) >> 24 \

145 }

	)

148 
	sèsk°©e
 {

149 
uöt32_t
 
	mts_lök
;

150 
uöçå_t
 
	mts_e•0
;

151 
uöt16_t
 
	mts_ss0
;

152 
uöt16_t
 
	mts_∑ddög1
;

153 
uöçå_t
 
	mts_e•1
;

154 
uöt16_t
 
	mts_ss1
;

155 
uöt16_t
 
	mts_∑ddög2
;

156 
uöçå_t
 
	mts_e•2
;

157 
uöt16_t
 
	mts_ss2
;

158 
uöt16_t
 
	mts_∑ddög3
;

159 
uöçå_t
 
	mts_¸3
;

160 
uöçå_t
 
	mts_eù
;

161 
uöt32_t
 
	mts_eÊags
;

162 
uöt32_t
 
	mts_óx
;

163 
uöt32_t
 
	mts_ecx
;

164 
uöt32_t
 
	mts_edx
;

165 
uöt32_t
 
	mts_ebx
;

166 
uöçå_t
 
	mts_e•
;

167 
uöçå_t
 
	mts_ebp
;

168 
uöt32_t
 
	mts_esi
;

169 
uöt32_t
 
	mts_edi
;

170 
uöt16_t
 
	mts_es
;

171 
uöt16_t
 
	mts_∑ddög4
;

172 
uöt16_t
 
	mts_cs
;

173 
uöt16_t
 
	mts_∑ddög5
;

174 
uöt16_t
 
	mts_ss
;

175 
uöt16_t
 
	mts_∑ddög6
;

176 
uöt16_t
 
	mts_ds
;

177 
uöt16_t
 
	mts_∑ddög7
;

178 
uöt16_t
 
	mts_fs
;

179 
uöt16_t
 
	mts_∑ddög8
;

180 
uöt16_t
 
	mts_gs
;

181 
uöt16_t
 
	mts_∑ddög9
;

182 
uöt16_t
 
	mts_ldt
;

183 
uöt16_t
 
	mts_∑ddög10
;

184 
uöt16_t
 
	mts_t
;

185 
uöt16_t
 
	mts_iomb
;

186 } 
__©åibuã__
((
∑cked
));

203 
	#PTXSHIFT
 12

204 
	#PDXSHIFT
 22

205 
	#PMXSHIFT
 
PDXSHIFT


	)

206 
	#PUXSHIFT
 
PDXSHIFT


	)

207 
	#PGXSHIFT
 
PDXSHIFT


	)

210 
	#PDX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

211 
	#PGX
(
œ
Ë
	`PDX
÷a)

	)

212 
	#PUX
(
œ
Ë
	`PDX
÷a)

	)

213 
	#PMX
(
œ
Ë
	`PDX
÷a)

	)

216 
	#PTX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

219 
	#PPN
(
œ
Ë(((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
)

	)

222 
	#PGOFF
(
œ
Ë(((
uöçå_t
)÷a)Ë& 0xFFF)

	)

225 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöçå_t
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

228 
	#PTE_ADDR
(
±e
Ë((
uöçå_t
)’ãË& ~0xFFF)

	)

229 
	#PDE_ADDR
(
pde
Ë
	`PTE_ADDR
’de)

	)

230 
	#PMD_ADDR
(
pmd
Ë
	`PTE_ADDR
’md)

	)

231 
	#PUD_ADDR
(
pud
Ë
	`PTE_ADDR
’ud)

	)

232 
	#PGD_ADDR
(
pgd
Ë
	`PTE_ADDR
’gd)

	)

235 
	#NPDEENTRY
 1024

236 
	#NPTEENTRY
 1024

237 

	)

238 
	#PGSIZE
 4096

239 
	#PGSHIFT
 12

240 
	#PTSIZE
 (
PGSIZE
 * 
NPTEENTRY
)

241 
	#PMSIZE
 
PTSIZE


	)

242 
	#PUSIZE
 
PTSIZE


	)

243 
	#PTSHIFT
 22

244 

	)

245 
	#SECTSIZE
 512

246 
	#PAGE_NSECT
 (
PGSIZE
 / 
SECTSIZE
)

247 

	)

249 
	#PTE_P
 0x001

250 
	#PTE_W
 0x002

251 
	#PTE_U
 0x004

252 
	#PTE_PWT
 0x008

253 
	#PTE_PCD
 0x010

254 
	#PTE_A
 0x020

255 
	#PTE_D
 0x040

256 
	#PTE_PS
 0x080

257 
	#PTE_MBZ
 0x180

258 
	#PTE_AVAIL
 0xE00

261 

	)

262 
	#PTE_SWAP
 (
PTE_A
 | 
PTE_D
)

	)

263 
	#PTE_USER
 (
PTE_U
 | 
PTE_W
 | 
PTE_P
)

	)

266 
	#CR0_PE
 0x00000001

267 
	#CR0_MP
 0x00000002

268 
	#CR0_EM
 0x00000004

269 
	#CR0_TS
 0x00000008

270 
	#CR0_ET
 0x00000010

271 
	#CR0_NE
 0x00000020

272 
	#CR0_WP
 0x00010000

273 
	#CR0_AM
 0x00040000

274 
	#CR0_NW
 0x20000000

275 
	#CR0_CD
 0x40000000

276 
	#CR0_PG
 0x80000000

277 

	)

278 
	#CR4_PCE
 0x00000100

279 
	#CR4_MCE
 0x00000040

280 
	#CR4_PSE
 0x00000010

281 
	#CR4_DE
 0x00000008

282 
	#CR4_TSD
 0x00000004

283 
	#CR4_PVI
 0x00000002

284 
	#CR4_VME
 0x00000001

285 

	)

	@glue-kern/arch/or32/glue_intr.h

1 #i‚de‡
__GLUE_INTR_H__


2 
	#__GLUE_INTR_H__


	)

9 
	#PC
 0

	)

10 
	#SR
 4

	)

11 
	#SP
 8

	)

12 
	#GPR2
 12

	)

13 
	#GPR3
 16

	)

14 
	#GPR4
 20

	)

15 
	#GPR5
 24

	)

16 
	#GPR6
 28

	)

17 
	#GPR7
 32

	)

18 
	#GPR8
 36

	)

19 
	#GPR9
 40

	)

20 
	#GPR10
 44

	)

21 
	#GPR11
 48

	)

22 
	#GPR12
 52

	)

23 
	#GPR13
 56

	)

24 
	#GPR14
 60

	)

25 
	#GPR15
 64

	)

26 
	#GPR16
 68

	)

27 
	#GPR17
 72

	)

28 
	#GPR18
 76

	)

29 
	#GPR19
 80

	)

30 
	#GPR20
 84

	)

31 
	#GPR21
 88

	)

32 
	#GPR22
 92

	)

33 
	#GPR23
 96

	)

34 
	#GPR24
 100

	)

35 
	#GPR25
 104

	)

36 
	#GPR26
 108

	)

37 
	#GPR27
 112

	)

38 
	#GPR28
 116

	)

39 
	#GPR29
 120

	)

40 
	#GPR30
 124

	)

41 
	#GPR31
 128

	)

42 
	#ORIG_GPR3
 132

	)

43 
	#RESULT
 136

	)

44 
	#SYSCALLNO
 140

	)

45 
	#TF_SIZE
 148

	)

49 
	#GPR1_TMP
 0xA0

	)

50 
	#GPR2_TMP
 0xA4

	)

51 
	#GPR3_TMP
 0xA8

	)

52 
	#GPR4_TMP
 0xAC

	)

53 
	#GPR5_TMP
 0xB0

	)

54 
	#GPR6_TMP
 0xB4

	)

55 
	#GPR10_TMP
 0xB8

	)

56 
	#GPR13_TMP
 0xBC

	)

57 
	#GPR31_TMP
 0xC0

	)

59 #i‚de‡
__ASSEMBLER__


61 
	~<ty≥s.h
>

62 
	~<¨ch.h
>

63 
	~<öå.h
>

64 
	~<sync.h
>

66 
	#EXCEPTION_BUS
 0x200

	)

67 
	#EXCEPTION_DPAGE_FAULT
 0x300

	)

68 
	#EXCEPTION_IPAGE_FAULT
 0x400

	)

69 
	#EXCEPTION_TIMER
 0x500

	)

70 
	#EXCEPTION_EXTERNAL
 0x800

	)

71 
	#EXCEPTION_SYSCALL
 0xC00

	)

73 
	spushªgs
 {

74 
uöt32_t
 
	mg¥s
[30];

77 
	så≠‰ame
 {

78 
uöt32_t
 
	mpc
;

79 
uöt32_t
 
	m§
;

80 
uöt32_t
 
	m•
;

81 
pushªgs
 
	mªgs
;

82 
uöt32_t
 
	m‹ig_g¥3
;

83 
uöt32_t
 
	mªsu…
;

84 
uöt32_t
 
	msysˇŒno
;

85 
uöt32_t
 
	mó
;

88 
	#loˇl_öå_íabÀ_hw
 
	`öå_íabÀ
()

	)

89 
	#loˇl_öå_dißbÀ_hw
 
	`öå_dißbÀ
()

	)

91 
	#loˇl_öå_ßve_hw
(
x
Ë
	`loˇl_öå_ßve
(x)

	)

92 
	#loˇl_öå_ª°‹e_hw
(
x
Ë
	`loˇl_öå_ª°‹e
(x)

	)

	@glue-kern/arch/or32/glue_kio.h

1 #i‚de‡
__GLUE_KIO_H__


2 
	#__GLUE_KIO_H__


	)

4 
	~<c⁄sﬁe.h
>

6 
	#kc⁄s_putc
 
c⁄s_putc


	)

7 
	#kc⁄s_gëc
 
c⁄s_gëc


	)

	@glue-kern/arch/or32/glue_memlayout.h

1 #i‚de‡
__ARCH_TEMPLATE_INCLUDE_MEMLAYOUT_H__


2 
	#__ARCH_TEMPLATE_INCLUDE_MEMLAYOUT_H__


	)

4 
	~<mmu.h
>

10 
	#KERNBASE
 0xC0000000

	)

11 
	#PBASE
 
KERNBASE


	)

12 
	#KMEMSIZE
 0x28000000

13 
	#KERNTOP
 (
KERNBASE
 + 
KMEMSIZE
)

	)

21 
	#VPT
 0xEA000000

	)

23 
	#MMIO_BASE
 0xF0000000

	)

25 
	#KSTACKPAGE
 2

26 
	#KSTACKSIZE
 (
KSTACKPAGE
 * 
PGSIZE
)

27 

	)

28 
	#USERTOP
 0xB0000000

	)

29 
	#USTACKTOP
 
USERTOP


	)

30 
	#USTACKPAGE
 256

31 
	#USTACKSIZE
 (
USTACKPAGE
 * 
PGSIZE
)

32 

	)

33 
	#USERBASE
 0x00200000

	)

34 
	#UTEXT
 0x00800000

35 
	#USTAB
 
USERBASE


36 

	)

37 
	#USER_ACCESS
(
°¨t
, 
íd
) \

38 (
USERBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<
USERTOP
)

	)

40 
	#KERN_ACCESS
(
°¨t
, 
íd
) \

41 (
KERNBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<
KERNTOP
)

	)

43 #i‚de‡
__ASSEMBLER__


45 
	~<ty≥s.h
>

46 
	~<©omic.h
>

47 
	~<li°.h
>

49 
uöçå_t
 
	t±e_t
;

50 
uöçå_t
 
	tpde_t
;

51 
uöçå_t
 
	tpud_t
;

52 
uöçå_t
 
	tpmd_t
;

53 
uöçå_t
 
	tpgd_t
;

54 
±e_t
 
	tsw≠_íåy_t
;

57 
	#E820MAX
 20

58 
	#E820_ARM
 1

59 
	#E820_ARR
 2

60 

	)

61 
	se820m≠
 {

62 
	mƒ_m≠
;

64 
uöt64_t
 
	maddr
;

65 
uöt64_t
 
	msize
;

66 
uöt32_t
 
	mty≥
;

67 } 
	mm≠
[
E820MAX
];

75 
	sPage
 {

76 
©omic_t
 
	mªf
;

77 
uöt32_t
 
	mÊags
;

78 
	m¥›îty
;

79 
	mz⁄e_num
;

80 
li°_íåy_t
 
	m∑ge_lök
;

81 
sw≠_íåy_t
 
	mödex
;

82 
li°_íåy_t
 
	msw≠_lök
;

86 
	#PG_ª£rved
 0

87 
	#PG_¥›îty
 1

88 
	#PG_¶ab
 2

89 
	#PG_dúty
 3

90 
	#PG_sw≠
 4

91 
	#PG_a˘ive
 5

92 

	)

93 
	#SëPageRe£rved
(
∑ge
Ë
	`£t_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

94 
	#CÀ¨PageRe£rved
(
∑ge
Ë
	`˛ór_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

95 
	#PageRe£rved
(
∑ge
Ë
	`ã°_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

96 
	#SëPagePr›îty
(
∑ge
Ë
	`£t_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

97 
	#CÀ¨PagePr›îty
(
∑ge
Ë
	`˛ór_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

98 
	#PagePr›îty
(
∑ge
Ë
	`ã°_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

99 
	#SëPageSœb
(
∑ge
Ë
	`£t_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

100 
	#CÀ¨PageSœb
(
∑ge
Ë
	`˛ór_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

101 
	#PageSœb
(
∑ge
Ë
	`ã°_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

102 
	#SëPageDúty
(
∑ge
Ë
	`£t_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

103 
	#CÀ¨PageDúty
(
∑ge
Ë
	`˛ór_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

104 
	#PageDúty
(
∑ge
Ë
	`ã°_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

105 
	#SëPageSw≠
(
∑ge
Ë
	`£t_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

106 
	#CÀ¨PageSw≠
(
∑ge
Ë
	`˛ór_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

107 
	#PageSw≠
(
∑ge
Ë
	`ã°_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

108 
	#SëPageA˘ive
(
∑ge
Ë
	`£t_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

109 
	#CÀ¨PageA˘ive
(
∑ge
Ë
	`˛ór_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

110 
	#PageA˘ive
(
∑ge
Ë
	`ã°_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

113 
	#À2∑ge
(
À
, 
membî
) \

114 
	`to_°ru˘
((
À
), 
Page
, 
membî
)

	)

118 
li°_íåy_t
 
	m‰ì_li°
;

119 
	mƒ_‰ì
;

120 } 
	t‰ì_¨ó_t
;

	@glue-kern/arch/or32/glue_mp.h

1 #i‚de‡
__GLUE_MP_H__


2 
	#__GLUE_MP_H__


	)

4 
	#LAPIC_COUNT
 1

	)

6 
	#PLS


	)

8 
	#∂s_ªad
(
v¨
Ë
∂s_
##
	)
var

10 
	#∂s_gë_±r
(
v¨
Ë&
∂s_
##
	)
var

12 
	#∂s_wrôe
(
v¨
, 
vÆue
) \

14 
∂s_
##
v¨
 = 
vÆue
; \

15 } 0)

	)

	@glue-kern/arch/or32/glue_pgmap.h

1 #i‚de‡
__ARCH_X86_INCLUDE_PG_MAP_H__


2 
	#__ARCH_X86_INCLUDE_PG_MAP_H__


	)

4 
±e_t
 
	t±e_≥rm_t
;

6 
ölöe
 

7 
	$±ï_m≠
 (
±e_t
 *
±ï
, 
uöçå_t
 
∑
)

9 *
±ï
 = 
∑
 | 
PTE_P
 | 
PTE_SPR_R
 | 
PTE_E
;

10 
	}
}

12 
ölöe
 

13 
	$±ï_unm≠
 (
±e_t
 *
±ï
)

15 *
±ï
 = 0;

16 
	}
}

18 
ölöe
 

19 
	$±ï_övÆid
 (
±e_t
 *
±ï
)

21  (*
±ï
 == 0);

22 
	}
}

24 
ölöe
 

25 
	$±ï_¥e£¡
 (
±e_t
 *
±ï
)

27  (*
±ï
 & 
PTE_P
);

28 
	}
}

30 
ölöe
 

31 
	$±ï_s_ªad
 (
±e_t
 *
±ï
)

33  (*
±ï
 & 
PTE_SPR_R
);

34 
	}
}

36 
ölöe
 

37 
	$±ï_s_wrôe
 (
±e_t
 *
±ï
)

39  (*
±ï
 & 
PTE_SPR_W
);

40 
	}
}

42 
ölöe
 

43 
	$±ï_s_exec
 (
±e_t
 *
±ï
)

45  (*
±ï
 & 
PTE_E
);

46 
	}
}

48 
ölöe
 

49 
	$±ï_u_ªad
 (
±e_t
 *
±ï
)

51  (*
±ï
 & 
PTE_USER_R
);

52 
	}
}

54 
ölöe
 

55 
	$±ï_u_wrôe
 (
±e_t
 *
±ï
)

57  (*
±ï
 & 
PTE_USER_W
);

58 
	}
}

60 
ölöe
 

61 
	$±ï_u_exec
 (
±e_t
 *
±ï
)

63  (*
±ï
 & 
PTE_E
);

64 
	}
}

66 
ölöe
 

67 
	$±ï_£t_s_ªad
 (
±e_t
 *
±ï
)

69 *
±ï
 |
PTE_SPR_R
;

70 
	}
}

71 
ölöe
 

72 
	$±ï_£t_s_wrôe
 (
±e_t
 *
±ï
)

74 *
±ï
 |
PTE_SPR_W
 | 
PTE_SPR_R
;

75 
	}
}

76 
ölöe
 

77 
	$±ï_£t_s_exec
 (
±e_t
 *
±ï
)

79 *
±ï
 |
PTE_E
;

80 
	}
}

81 
ölöe
 

82 
	$±ï_£t_u_ªad
 (
±e_t
 *
±ï
)

84 *
±ï
 |(
PTE_USER_R
 | 
PTE_SPR_R
);

85 
	}
}

86 
ölöe
 

87 
	$±ï_£t_u_wrôe
 (
±e_t
 *
±ï
)

89 *
±ï
 |(
PTE_USER_R
 | 
PTE_USER_W
 | 
PTE_SPR_R
 | 
PTE_SPR_W
);

90 
	}
}

91 
ölöe
 

92 
	$±ï_£t_u_exec
 (
±e_t
 *
±ï
)

94 *
±ï
 |
PTE_E
;

95 
	}
}

97 
ölöe
 

98 
	$±ï_un£t_s_ªad
 (
±e_t
 *
±ï
)

100 *
±ï
 &~(
PTE_SPR_R
 | 
PTE_USER_R
);

101 
	}
}

102 
ölöe
 

103 
	$±ï_un£t_s_wrôe
 (
±e_t
 *
±ï
)

105 *
±ï
 &~(
PTE_SPR_W
 | 
PTE_USER_W
);

106 
	}
}

107 
ölöe
 

108 
	$±ï_un£t_s_exec
 (
±e_t
 *
±ï
)

110 *
±ï
 &~
PTE_E
;

111 
	}
}

112 
ölöe
 

113 
	$±ï_un£t_u_ªad
 (
±e_t
 *
±ï
)

115 *
±ï
 &~
PTE_USER_R
;

116 
	}
}

117 
ölöe
 

118 
	$±ï_un£t_u_wrôe
 (
±e_t
 *
±ï
)

120 *
±ï
 &~
PTE_USER_W
;

121 
	}
}

122 
ölöe
 

123 
	$±ï_un£t_u_exec
 (
±e_t
 *
±ï
)

125 *
±ï
 &~
PTE_E
;

126 
	}
}

129 
ölöe
 
±e_≥rm_t


130 
	$±ï_gë_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

132  (*
±ï
Ë& 
≥rm
;

133 
	}
}

135 
ölöe
 

136 
	$±ï_£t_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

138 *
±ï
 |
≥rm
;

139 
	}
}

141 
ölöe
 

142 
	$±ï_c›y
 (
±e_t
 *
to
,Öã_à*
‰om
)

144 *
to
 = *
‰om
;

145 
	}
}

147 
ölöe
 

148 
	$±ï_un£t_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

150 *
±ï
 &~
≥rm
;

151 
	}
}

153 
ölöe
 

154 
	$±ï_ac˚s£d
 (
±e_t
 *
±ï
)

156  (*
±ï
 & 
PTE_A
);

157 
	}
}

159 
ölöe
 

160 
	$±ï_dúty
 (
±e_t
 *
±ï
)

162  (*
±ï
 & 
PTE_D
);

163 
	}
}

165 
ölöe
 

166 
	$±ï_£t_ac˚s£d
 (
±e_t
 *
±ï
)

168 *
±ï
 |
PTE_A
;

169 
	}
}

171 
ölöe
 

172 
	$±ï_£t_dúty
 (
±e_t
 *
±ï
)

174 *
±ï
 |
PTE_D
;

175 
	}
}

177 
ölöe
 

178 
	$±ï_un£t_ac˚s£d
 (
±e_t
 *
±ï
)

180 *
±ï
 &~
PTE_A
;

181 
	}
}

183 
ölöe
 

184 
	$±ï_un£t_dúty
 (
±e_t
 *
±ï
)

186 *
±ï
 &~
PTE_D
;

187 
	}
}

	@glue-kern/arch/or32/mmu.h

1 #i‚de‡
__KERN_MM_MMU_H__


2 
	#__KERN_MM_MMU_H__


	)

4 
	#NR_SETS
 64

5 

	)

7 
	#NPDEENTRY
 512

8 
	#NPTEENTRY
 2048

9 

	)

10 
	#PGSIZE
 8192

11 
	#PGSHIFT
 13

12 
	#PTSIZE
 (
PGSIZE
 * 
NPTEENTRY
)

13 
	#PMSIZE
 
PTSIZE


	)

14 
	#PUSIZE
 
PTSIZE


	)

15 
	#PTSHIFT
 24

16 

	)

17 
	#SECTSIZE
 512

18 
	#PAGE_NSECT
 (
PGSIZE
 / 
SECTSIZE
)

19 

	)

20 
	#PTXSHIFT
 13

21 
	#PDXSHIFT
 24

22 
	#PMXSHIFT
 
PDXSHIFT


	)

23 
	#PUXSHIFT
 
PDXSHIFT


	)

24 
	#PGXSHIFT
 
PDXSHIFT


	)

28 
	#PTE_P
 0x01

	)

29 
	#PTE_A
 0x10

	)

30 
	#PTE_D
 0x20

	)

31 
	#PTE_USER_R
 0x40

	)

32 
	#PTE_USER_W
 0x80

	)

33 
	#PTE_SPR_R
 0x100

	)

34 
	#PTE_SPR_W
 0x200

	)

35 
	#PTE_E
 0x400

	)

36 
	#PTE_S
 0x800

	)

38 
	#PTE_USER
 (
PTE_USER_R
 | 
PTE_USER_W
 | 
PTE_E
 | 
PTE_SPR_R
 | 
PTE_SPR_W
 | 
PTE_P
)

	)

39 
	#PTE_PERM
 (
PTE_USER_R
 | 
PTE_USER_W
 | 
PTE_SPR_R
 | 
PTE_SPR_W
 | 
PTE_E
)

	)

40 
	#PTE_SWAP
 (
PTE_A
 | 
PTE_D
)

	)

42 #i‚de‡
__ASSEMBLER__


44 
	~<ty≥s.h
>

47 
uöçå_t
 
cuºít_pgdú_∑
;

48 
uöçå_t
 
boŸ_pgdú_∑
;

64 
	#PDX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PDXSHIFT
Ë& 0xFF)

	)

65 
	#PGX
(
œ
Ë
	`PDX
÷a)

	)

66 
	#PUX
(
œ
Ë
	`PDX
÷a)

	)

67 
	#PMX
(
œ
Ë
	`PDX
÷a)

	)

70 
	#PTX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
Ë& 0x7FF)

	)

73 
	#PPN
(
œ
Ë(((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
)

	)

76 
	#PGOFF
(
œ
Ë(((
uöçå_t
)÷a)Ë& 0x1FFF)

	)

79 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöçå_t
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

82 
	#PTE_ADDR
(
±e
Ë((
uöçå_t
)’ãË& ~0x1FFF)

	)

83 
	#PDE_ADDR
(
pde
Ë
	`PTE_ADDR
’de)

	)

84 
	#PMD_ADDR
(
pmd
Ë
	`PTE_ADDR
’md)

	)

85 
	#PUD_ADDR
(
pud
Ë
	`PTE_ADDR
’ud)

	)

86 
	#PGD_ADDR
(
pgd
Ë
	`PTE_ADDR
’gd)

	)

88 
éb_övÆid©e_Æl
 ();

	@glue-kern/arch/um/glue_intr.h

1 #i‚de‡
__GLUE_INTR_H__


2 
	#__GLUE_INTR_H__


	)

4 
	~<öå.h
>

5 
	~<sync.h
>

11 
	så≠‰ame
 {

12 (*
	m‚
)(*);

13 * 
	m¨g
;

16 
	#loˇl_öå_íabÀ_hw
 
	`öå_íabÀ
()

	)

17 
	#loˇl_öå_dißbÀ_hw
 
	`öå_dißbÀ
()

	)

19 
	#loˇl_öå_ßve_hw
(
x
Ë
	`loˇl_öå_ßve
(x)

	)

20 
	#loˇl_öå_ª°‹e_hw
(
x
Ë
	`loˇl_öå_ª°‹e
(x)

	)

	@glue-kern/arch/um/glue_kio.h

1 #i‚de‡
__GLUE_KIO_H__


2 
	#__GLUE_KIO_H__


	)

4 
	~<c⁄sﬁe.h
>

6 
	#kc⁄s_putc
 
c⁄s_putc


	)

7 
	#kc⁄s_gëc
 
c⁄s_gëc


	)

	@glue-kern/arch/um/glue_memlayout.h

7 #i‚de‡
__ARCH_UM_INCLUDE_MEMLAYOUT_H__


8 
	#__ARCH_UM_INCLUDE_MEMLAYOUT_H__


	)

10 
	~<mmu.h
>

56 
	#KERNBASE
 0xB0000000

	)

57 
	#PBASE
 
KERNBASE


	)

58 
	#KMEMSIZE
 0x8000000

	)

59 
	#KERNTOP
 (
KERNBASE
 + 
KMEMSIZE
)

	)

60 
	#HOSTBASE
 0xC0000000

	)

62 
	#RESERVED_SIZE
 0x100000

	)

63 
	#RESERVED_END
 (
KERNBASE
 + 
RESERVED_SIZE
)

	)

64 
	#BOOT_CODE
 (
KERNBASE
 + 0xFF000)

	)

66 
	#USERBASE
 0x00200000

	)

67 
	#UTEXT
 0x00800000

68 
	#USTAB
 
USERBASE


69 
	#STUB_START
 0x00100000

	)

70 
	#STUB_CODE
 
STUB_START


	)

71 
	#STUB_DATA
 (
STUB_CODE
 + 
PGSIZE
)

	)

72 
	#STUB_END
 (
STUB_DATA
 + 
PGSIZE
)

	)

74 
	#USERTOP
 0xB0000000

	)

75 
	#USTACKTOP
 
USERTOP


	)

76 
	#USTACKPAGE
 256

77 
	#USTACKSIZE
 (
USTACKPAGE
 * 
PGSIZE
)

78 

	)

79 
	#KSTACKPAGE
 2

80 
	#KSTACKSIZE
 (
KSTACKPAGE
 * 
PGSIZE
)

81 
	#KSTACKTOP
 (
RESERVED_END
)

	)

82 
	#KSTACK
 (
KSTACKTOP
 - 
KSTACKSIZE
)

	)

84 
	#USER_ACCESS
(
°¨t
, 
íd
) \

85 (
USERBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<
USERTOP
)

	)

87 
	#KERN_ACCESS
(
°¨t
, 
íd
) \

88 (
KERNBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<
KERNTOP
)

	)

90 
	#GLOBL_INFO
 
KERNBASE


	)

92 #i‚de‡
__ASSEMBLER__


94 #i‚de‡
__BOOT__


96 
	~<ty≥s.h
>

97 
	~<©omic.h
>

98 
	~<li°.h
>

101 
uöçå_t
 
	t±e_t
;

102 
uöçå_t
 
	tpde_t
;

103 
uöçå_t
 
	tpud_t
;

104 
uöçå_t
 
	tpmd_t
;

105 
uöçå_t
 
	tpgd_t
;

106 
±e_t
 
	tsw≠_íåy_t
;

113 
	sPage
 {

114 
©omic_t
 
	mªf
;

115 
uöt32_t
 
	mÊags
;

116 
	m¥›îty
;

117 
	mz⁄e_num
;

118 
li°_íåy_t
 
	m∑ge_lök
;

119 
sw≠_íåy_t
 
	mödex
;

120 
li°_íåy_t
 
	msw≠_lök
;

124 
	#PG_ª£rved
 0

125 
	#PG_¥›îty
 1

126 
	#PG_¶ab
 2

127 
	#PG_dúty
 3

128 
	#PG_sw≠
 4

129 
	#PG_a˘ive
 5

130 

	)

131 
	#SëPageRe£rved
(
∑ge
Ë
	`£t_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

132 
	#CÀ¨PageRe£rved
(
∑ge
Ë
	`˛ór_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

133 
	#PageRe£rved
(
∑ge
Ë
	`ã°_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

134 
	#SëPagePr›îty
(
∑ge
Ë
	`£t_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

135 
	#CÀ¨PagePr›îty
(
∑ge
Ë
	`˛ór_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

136 
	#PagePr›îty
(
∑ge
Ë
	`ã°_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

137 
	#SëPageSœb
(
∑ge
Ë
	`£t_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

138 
	#CÀ¨PageSœb
(
∑ge
Ë
	`˛ór_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

139 
	#PageSœb
(
∑ge
Ë
	`ã°_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

140 
	#SëPageDúty
(
∑ge
Ë
	`£t_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

141 
	#CÀ¨PageDúty
(
∑ge
Ë
	`˛ór_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

142 
	#PageDúty
(
∑ge
Ë
	`ã°_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

143 
	#SëPageSw≠
(
∑ge
Ë
	`£t_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

144 
	#CÀ¨PageSw≠
(
∑ge
Ë
	`˛ór_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

145 
	#PageSw≠
(
∑ge
Ë
	`ã°_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

146 
	#SëPageA˘ive
(
∑ge
Ë
	`£t_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

147 
	#CÀ¨PageA˘ive
(
∑ge
Ë
	`˛ór_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

148 
	#PageA˘ive
(
∑ge
Ë
	`ã°_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

151 
	#À2∑ge
(
À
, 
membî
) \

152 
	`to_°ru˘
((
À
), 
Page
, 
membî
)

	)

156 
li°_íåy_t
 
	m‰ì_li°
;

157 
	mƒ_‰ì
;

158 } 
	t‰ì_¨ó_t
;

162 
	#E820MAX
 20

163 
	#E820_ARM
 1

164 
	#E820_ARR
 2

165 

	)

166 
	sE820MAP
 {

167 
	mƒ_m≠
;

169 
uöt64_t
 
	maddr
;

170 
uöt64_t
 
	msize
;

171 
uöt32_t
 
	mty≥
;

172 } 
__©åibuã__
((
∑cked
)Ë
	mm≠
[
E820MAX
];

176 
	#STATUS_RUN
 0

	)

177 
	#STATUS_DEBUG
 1

	)

179 
	sglobÆ_öfo
 {

180 
	mmem_fd
;

181 
	mdisk_fd
;

182 
	mdisk_size
;

183 
	msw≠_fd
;

184 
	msw≠_size
;

185 
E820MAP
 
	mmem_m≠
;

187 
	m°©us
;

190 
	#göfo
 ((
globÆ_öfo
*)
GLOBL_INFO
)

	)

191 
	#e820m≠
 (
göfo
->
mem_m≠
)

	)

	@glue-kern/arch/um/glue_mp.h

1 #i‚de‡
__GLUE_MP_H__


2 
	#__GLUE_MP_H__


	)

4 
	#LAPIC_COUNT
 1

	)

6 
	#PLS


	)

8 
	#∂s_ªad
(
v¨
Ë
∂s_
##
	)
var

10 
	#∂s_gë_±r
(
v¨
Ë&
∂s_
##
	)
var

12 
	#∂s_wrôe
(
v¨
, 
vÆue
) \

14 
∂s_
##
v¨
 = 
vÆue
; \

15 } 0)

	)

	@glue-kern/arch/um/glue_pgmap.h

1 #i‚de‡
__ARCH_X86_INCLUDE_PG_MAP_H__


2 
	#__ARCH_X86_INCLUDE_PG_MAP_H__


	)

4 
	~<glue_memœyout.h
>

5 
	~<mmu.h
>

7 
±e_t
 
	t±e_≥rm_t
;

9 
ölöe
 

10 
	$±ï_m≠
 (
±e_t
 *
±ï
, 
uöçå_t
 
∑
)

12 *
±ï
 = (
∑
 | 
PTE_P
);

13 
	}
}

15 
ölöe
 

16 
	$±ï_unm≠
 (
±e_t
 *
±ï
)

18 *
±ï
 = 0;

19 
	}
}

21 
ölöe
 

22 
	$±ï_övÆid
 (
±e_t
 *
±ï
)

24  (*
±ï
 == 0);

25 
	}
}

27 
ölöe
 

28 
	$±ï_¥e£¡
 (
±e_t
 *
±ï
)

30  (*
±ï
 & 
PTE_P
);

31 
	}
}

33 
ölöe
 

34 
	$±ï_s_ªad
 (
±e_t
 *
±ï
)

36  (*
±ï
 & 
PTE_P
);

37 
	}
}

39 
ölöe
 

40 
	$±ï_s_wrôe
 (
±e_t
 *
±ï
)

42  (*
±ï
 & 
PTE_W
);

43 
	}
}

45 
ölöe
 

46 
	$±ï_s_exec
 (
±e_t
 *
±ï
)

48  (*
±ï
 & 
PTE_P
);

49 
	}
}

51 
ölöe
 

52 
	$±ï_u_ªad
 (
±e_t
 *
±ï
)

54  (*
±ï
 & 
PTE_U
);

55 
	}
}

57 
ölöe
 

58 
	$±ï_u_wrôe
 (
±e_t
 *
±ï
)

60  ((*
±ï
 & 
PTE_U
Ë&& (*±ï & 
PTE_W
));

61 
	}
}

63 
ölöe
 

64 
	$±ï_u_exec
 (
±e_t
 *
±ï
)

66  (*
±ï
 & 
PTE_U
);

67 
	}
}

70 
ölöe
 

71 
	$±ï_£t_s_ªad
 (
±e_t
 *
±ï
)

73 
	}
}

75 
ölöe
 

76 
	$±ï_£t_s_wrôe
 (
±e_t
 *
±ï
)

78 *
±ï
 |
PTE_W
;

79 
	}
}

81 
ölöe
 

82 
	$±ï_£t_s_exec
 (
±e_t
 *
±ï
)

84 
	}
}

86 
ölöe
 

87 
	$±ï_£t_u_ªad
 (
±e_t
 *
±ï
)

89 *
±ï
 |
PTE_U
;

90 
	}
}

92 
ölöe
 

93 
	$±ï_£t_u_wrôe
 (
±e_t
 *
±ï
)

95 *
±ï
 |(
PTE_U
 | 
PTE_W
);

96 
	}
}

98 
ölöe
 

99 
	$±ï_£t_u_exec
 (
±e_t
 *
±ï
)

101 *
±ï
 |
PTE_U
;

102 
	}
}

105 
ölöe
 

106 
	$±ï_un£t_s_ªad
 (
±e_t
 *
±ï
)

108 
	}
}

110 
ölöe
 

111 
	$±ï_un£t_s_wrôe
 (
±e_t
 *
±ï
)

113 *
±ï
 &(~
PTE_W
);

114 
	}
}

116 
ölöe
 

117 
	$±ï_un£t_s_exec
 (
±e_t
 *
±ï
)

119 
	}
}

121 
ölöe
 

122 
	$±ï_un£t_u_ªad
 (
±e_t
 *
±ï
)

124 *
±ï
 &(~
PTE_U
);

125 
	}
}

127 
ölöe
 

128 
	$±ï_un£t_u_wrôe
 (
±e_t
 *
±ï
)

130 *
±ï
 &(~
PTE_W
);

131 
	}
}

133 
ölöe
 

134 
	$±ï_un£t_u_exec
 (
±e_t
 *
±ï
)

136 *
±ï
 &(~
PTE_U
);

137 
	}
}

140 
ölöe
 
±e_≥rm_t


141 
	$±ï_gë_≥rm
 (
±e_t
 *
±ï
,Öã_à
≥rm
)

143  (*
±ï
Ë& 
≥rm
;

144 
	}
}

146 
ölöe
 

147 
	$±ï_£t_≥rm
 (
±e_t
 *
±ï
,Öã_à
≥rm
)

149 *
±ï
 |
≥rm
;

150 
	}
}

152 
ölöe
 

153 
	$±ï_c›y
 (
±e_t
 *
to
,Öã_à*
‰om
)

155 *
to
 = *
‰om
;

156 
	}
}

158 
ölöe
 

159 
	$±ï_un£t_≥rm
 (
±e_t
 *
±ï
,Öã_à
≥rm
)

161 *
±ï
 &(~
≥rm
);

162 
	}
}

164 
ölöe
 

165 
	$±ï_ac˚s£d
 (
±e_t
 *
±ï
)

167  *
±ï
 & 
PTE_A
;

168 
	}
}

170 
ölöe
 

171 
	$±ï_dúty
 (
±e_t
 *
±ï
)

173  *
±ï
 & 
PTE_D
;

174 
	}
}

176 
ölöe
 

177 
	$±ï_£t_ac˚s£d
 (
±e_t
 *
±ï
)

179 *
±ï
 |
PTE_A
;

180 
	}
}

182 
ölöe
 

183 
	$±ï_£t_dúty
 (
±e_t
 *
±ï
)

185 *
±ï
 |
PTE_D
;

186 
	}
}

188 
ölöe
 

189 
	$±ï_un£t_ac˚s£d
 (
±e_t
 *
±ï
)

191 *
±ï
 &(~
PTE_A
);

192 
	}
}

194 
ölöe
 

195 
	$±ï_un£t_dúty
 (
±e_t
 *
±ï
)

197 *
±ï
 &(~
PTE_D
);

198 
	}
}

	@glue-kern/arch/um/mmu.h

5 #i‚de‡
__ARCH_UM_INCLUDE_MMU_H__


6 
	#__ARCH_UM_INCLUDE_MMU_H__


	)

22 
	#NPDEENTRY
 1024

23 
	#NPTEENTRY
 1024

24 

	)

25 
	#PGSIZE
 4096

26 
	#PGSHIFT
 12

27 
	#PTSIZE
 (
PGSIZE
 * 
NPTEENTRY
)

28 
	#PMSIZE
 
PTSIZE


	)

29 
	#PUSIZE
 
PTSIZE


	)

30 
	#PTSHIFT
 22

31 

	)

32 
	#PTXSHIFT
 12

33 
	#PDXSHIFT
 22

34 
	#PMXSHIFT
 
PDXSHIFT


	)

35 
	#PUXSHIFT
 
PDXSHIFT


	)

36 
	#PGXSHIFT
 
PDXSHIFT


	)

39 
	#PDX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

40 
	#PGX
(
œ
Ë
	`PDX
÷a)

	)

41 
	#PUX
(
œ
Ë
	`PDX
÷a)

	)

42 
	#PMX
(
œ
Ë
	`PDX
÷a)

	)

45 
	#PTX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

48 
	#PPN
(
œ
Ë(((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
)

	)

51 
	#PGOFF
(
œ
Ë(((
uöçå_t
)÷a)Ë& 0xFFF)

	)

54 
	#PGADDR
(
d
, 
t
, 
o
Ë((
uöçå_t
)((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

57 
	#PTE_ADDR
(
±e
Ë((
uöçå_t
)’ãË& ~0xFFF)

	)

58 
	#PDE_ADDR
(
pde
Ë
	`PTE_ADDR
’de)

	)

59 
	#PMD_ADDR
(
pmd
Ë
	`PTE_ADDR
’md)

	)

60 
	#PUD_ADDR
(
pud
Ë
	`PTE_ADDR
’ud)

	)

61 
	#PGD_ADDR
(
pgd
Ë
	`PTE_ADDR
’gd)

	)

64 
	#PTE_P
 0x001

65 
	#PTE_W
 0x002

66 
	#PTE_U
 0x004

67 
	#PTE_PWT
 0x008

68 
	#PTE_PCD
 0x010

69 
	#PTE_A
 0x020

70 
	#PTE_D
 0x040

71 
	#PTE_PS
 0x080

72 
	#PTE_MBZ
 0x180

73 
	#PTE_AVAIL
 0xE00

76 

	)

77 
	#PTE_SWAP
 (
PTE_A
 | 
PTE_D
)

	)

78 
	#PTE_USER
 (
PTE_U
 | 
PTE_W
 | 
PTE_P
)

	)

80 #i‚de‡
__ASSEMBLER__


83 
	#SëãrAndGëãr
(
«me
) \

84 
ölöe
 
Së_
 ## 
	`«me
 (* 
±e_p
Ë{ *±e_∞|
«me
; } \

85 
ölöe
 
CÀ¨_
 ## 
	`«me
 (* 
±e_p
Ë{ *±e_∞&~
«me
; } \

86 
ölöe
 
Gë_
 ## 
	`«me
 (* 
±e_p
Ë{  *±e_∞& 
«me
; }

	)

88 
	$SëãrAndGëãr
 (
PTE_P
)

89 
	$SëãrAndGëãr
 (
PTE_W
)

90 
	$SëãrAndGëãr
 (
PTE_U
)

91 
	$SëãrAndGëãr
 (
PTE_A
)

92 
	$SëãrAndGëãr
 (
PTE_D
)

	@glue-kern/arch/x86_64/glue_context.h

1 #i‚de‡
__GLUE_CONTEXT_H__


2 
	#__GLUE_CONTEXT_H__


	)

4 #ifde‡
LIBSPREFIX


5 
	~<libs/ty≥s.h
>

7 
	~<ty≥s.h
>

11 
c⁄ãxt_s
 *
	tc⁄ãxt_t
;

12 
	sc⁄ãxt_s


14 
uöçå_t
 
	m°k_±r
;

15 
uöçå_t
 
	m°k_t›
;

17 
uöçå_t
 
	mpc
;

18 
	ml˝u
;

19 } 
	tc⁄ãxt_s
;

21 
	#c⁄ãxt_swôch
 (*
c⁄ãxt_swôch_±r
)

	)

22 
	#c⁄ãxt_fûl
 (*
c⁄ãxt_fûl_±r
)

	)

24 
c⁄ãxt_swôch
(
c⁄ãxt_t
 
‰om
, c⁄ãxt_à
to
);

25 
c⁄ãxt_fûl
(
c⁄ãxt_t
 
˘x
, (*
íåy
)(*
¨g
), *¨g, 
uöçå_t
 
°k_t›
);

	@glue-kern/arch/x86_64/glue_dos.h

1 #i‚de‡
__GLUE_DOS_H__


2 
	#__GLUE_DOS_H__


	)

4 
	#drivî_os_is_íabÀd
 (*
drivî_os_is_íabÀd_±r
)

	)

5 
	#drivî_os_nŸify
 (*
drivî_os_nŸify_±r
)

	)

6 
	#drivî_os_buf„r_gë
 (*
drivî_os_buf„r_gë_±r
)

	)

7 
	#drivî_os_buf„r_size_gë
 (*
drivî_os_buf„r_size_gë_±r
)

	)

9 
drivî_os_is_íabÀd
();

10 
drivî_os_nŸify
();

11 vﬁ©ûê*
drivî_os_buf„r_gë
();

12 
uöt64_t
 
drivî_os_buf„r_size_gë
();

	@glue-kern/arch/x86_64/glue_intr.h

1 #i‚de‡
__GLUE_INTR_H__


2 
	#__GLUE_INTR_H__


	)

4 #ifde‡
LIBSPREFIX


5 
	~<libs/ty≥s.h
>

6 
	~<libs/¨ch.h
>

8 
	~<ty≥s.h
>

9 
	~<¨ch.h
>

12 
	~"glue_mmu.h
"

15 
	#T_SYSCALL
 0x80

	)

16 
	#T_IPI
 0x81

	)

17 
	#T_IPI_DOS
 0x82

	)

20 
	#T_DIVIDE
 0

21 
	#T_DEBUG
 1

22 
	#T_NMI
 2

23 
	#T_BRKPT
 3

24 
	#T_OFLOW
 4

25 
	#T_BOUND
 5

26 
	#T_ILLOP
 6

27 
	#T_DEVICE
 7

28 
	#T_DBLFLT
 8

30 
	#T_TSS
 10

31 
	#T_SEGNP
 11

32 
	#T_STACK
 12

33 
	#T_GPFLT
 13

34 
	#T_PGFLT
 14

36 
	#T_FPERR
 16

37 
	#T_ALIGN
 17

38 
	#T_MCHK
 18

39 
	#T_SIMDERR
 19

40 

	)

42 
	#IRQ_OFFSET
 32

43 
	#IRQ_COUNT
 32

	)

45 
	#IRQ_TIMER
 0

	)

46 
	#IRQ_KBD
 1

	)

47 
	#IRQ_COM1
 4

	)

48 
	#IRQ_IDE1
 14

	)

49 
	#IRQ_IDE2
 15

	)

50 
	#IRQ_ERROR
 19

	)

51 
	#IRQ_SPURIOUS
 31

	)

54 
	spushªgs
 {

55 
uöt64_t
 
	mªg_r15
;

56 
uöt64_t
 
	mªg_r14
;

57 
uöt64_t
 
	mªg_r13
;

58 
uöt64_t
 
	mªg_r12
;

59 
uöt64_t
 
	mªg_rbp
;

60 
uöt64_t
 
	mªg_rbx
;

61 
uöt64_t
 
	mªg_r11
;

62 
uöt64_t
 
	mªg_r10
;

63 
uöt64_t
 
	mªg_r9
;

64 
uöt64_t
 
	mªg_r8
;

65 
uöt64_t
 
	mªg_øx
;

66 
uöt64_t
 
	mªg_rcx
;

67 
uöt64_t
 
	mªg_rdx
;

68 
uöt64_t
 
	mªg_rsi
;

69 
uöt64_t
 
	mªg_rdi
;

72 
	så≠‰ame
 {

73 
uöt16_t
 
	mtf_ds
;

74 
uöt16_t
 
	mtf_∑ddög0
[3];

75 
uöt16_t
 
	mtf_es
;

76 
uöt16_t
 
	mtf_∑ddög1
[3];

77 
pushªgs
 
	mtf_ªgs
;

78 
uöt64_t
 
	mtf_å≠no
;

80 
uöt64_t
 
	mtf_îr
;

81 
uöçå_t
 
	mtf_rù
;

82 
uöt16_t
 
	mtf_cs
;

83 
uöt16_t
 
	mtf_∑ddög2
[3];

84 
uöt64_t
 
	mtf_rÊags
;

85 
uöçå_t
 
	mtf_r•
;

86 
uöt16_t
 
	mtf_ss
;

87 
uöt16_t
 
	mtf_∑ddög3
[3];

88 } 
__©åibuã__
((
∑cked
));

92 (*
	töå_h™dÀr_f
)(
	tå≠‰ame
 *
	ttf
);

94 
	#öå_h™dÀr_£t
 (*
öå_h™dÀr_£t_±r
)

	)

95 
	#úq_íabÀ
 (*
úq_íabÀ_±r
)

	)

96 
	#úq_dißbÀ
 (*
úq_dißbÀ_±r
)

	)

97 
	#úq_ack
 (*
úq_ack_±r
)

	)

99 
	`öå_h™dÀr_£t
(
öå_no
, 
öå_h™dÀr_f
 
h
);

100 
	`úq_íabÀ
(
úq
);

101 
	`úq_dißbÀ
(
úq
);

102 
	`úq_ack
(
úq
);

104 
	#loˇl_öå_íabÀ_hw
 dÿ{ 
__asm
 
	`__vﬁ©ûe
 ("°i"); 
	}
} 0)

	)

105 
	#loˇl_öå_dißbÀ_hw
 dÿ{ 
__asm
 
	`__vﬁ©ûe
 ("˛i"); } 0)

	)

107 
	#loˇl_öå_ßve_hw
(
x
Ëdÿ{ (xË(
	`ªad_rÊags
(Ë& 
FL_IF
Ë!0; 
	`˛i
(); } 0)

	)

108 
	#loˇl_öå_ª°‹e_hw
(
x
Ëdÿ{ i‡(xË
	`°i
(); } 0)

	)

	@glue-kern/arch/x86_64/glue_kern.h

1 #i‚de‡
__GLUE_KERN_H__


2 
	#__GLUE_KERN_H__


	)

	@glue-kern/arch/x86_64/glue_kio.h

1 #i‚de‡
__GLUE_KIO_H__


2 
	#__GLUE_KIO_H__


	)

4 #ifde‡
LIBSPREFIX


5 
	~<libs/ty≥s.h
>

6 
	~<libs/°d¨g.h
>

8 
	~<ty≥s.h
>

9 
	~<°d¨g.h
>

12 
	#kc⁄s_putc
 (*
kc⁄s_putc_±r
)

	)

13 
	#kc⁄s_gëc
 (*
kc⁄s_gëc_±r
)

	)

15 
kc⁄s_putc
(
c
);

16 
kc⁄s_gëc
();

	@glue-kern/arch/x86_64/glue_memlayout.h

1 #i‚de‡
__GLUE_MEMLAYOUT_H__


2 
	#__GLUE_MEMLAYOUT_H__


	)

4 
	~"glue_mmu.h
"

7 
	#SEG_KTEXT
 1

	)

8 
	#SEG_KDATA
 2

	)

9 
	#SEG_KPLS
 3

	)

10 
	#SEG_UTEXT
 4

	)

11 
	#SEG_UDATA
 5

	)

12 
	#SEG_TLS1
 6

	)

13 
	#SEG_TLS2
 7

	)

14 
	#SEG_TSS
 8

	)

17 
	#GD_KTEXT
 ((
SEG_KTEXT
) << 4)

18 
	#GD_KDATA
 ((
SEG_KDATA
) << 4)

19 
	#GD_UTEXT
 ((
SEG_UTEXT
) << 4)

20 
	#GD_UDATA
 ((
SEG_UDATA
) << 4)

21 
	#GD_TLS1
 ((
SEG_TLS1
Ë<< 4)

	)

22 
	#GD_TLS2
 ((
SEG_TLS2
Ë<< 4)

	)

24 
	#DPL_KERNEL
 (0)

	)

25 
	#DPL_USER
 (3)

	)

27 
	#KERNEL_CS
 ((
GD_KTEXT
Ë| 
DPL_KERNEL
)

	)

28 
	#KERNEL_DS
 ((
GD_KDATA
Ë| 
DPL_KERNEL
)

	)

29 
	#USER_CS
 ((
GD_UTEXT
Ë| 
DPL_USER
)

	)

30 
	#USER_DS
 ((
GD_UDATA
Ë| 
DPL_USER
)

	)

33 
	#SVBASE
 0xFFFF800000000000

	)

35 
	#PBASE
 0xFFFF900000000000

	)

36 
	#PSIZE
 0x0000400000000000

37 

	)

38 
	#KERNBASE
 0xFFFFFFFF80000000

	)

46 
	#VPT
 0xFFFFD00000000000

	)

47 
	#VPT_ENTRY
(
ADDR
Ë((
±e_t
 *)(
VPT
 + (((
uöçå_t
)(ADDRË& 0xFFFFFFFFF000Ë>> 9)))

	)

49 
	#KSTACKPAGE
 4

50 
	#KSTACKSIZE
 (
KSTACKPAGE
 * 
PGSIZE
)

51 

	)

52 
	#USERTOP
 0x0000100000000000

	)

53 
	#USTACKTOP
 
USERTOP


	)

54 
	#USTACKPAGE
 4096

55 
	#USTACKSIZE
 (
USTACKPAGE
 * 
PGSIZE
)

56 

	)

57 
	#USERBASE
 0x0000000001000000

	)

58 
	#UTEXT
 0x0000000010000000

59 
	#USTAB
 
USERBASE


60 

	)

61 
	#USER_ACCESS
(
°¨t
, 
íd
) \

62 (
USERBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<
USERTOP
)

	)

64 
	#KERN_ACCESS
(
°¨t
, 
íd
) \

65 ((
PBASE
 <(
°¨t
Ë&& (°¨tË< (
íd
Ë&& (ídË<PBASE + 
PSIZE
) || \

66 ((
°¨t
Ë< (
íd
Ë&& 
KERNBASE
 <(°¨t)))

	)

68 #i‚de‡
__ASSEMBLER__


70 
	~<libs/ty≥s.h
>

72 
uöçå_t
 
	tpgd_t
;

73 
uöçå_t
 
	tpud_t
;

74 
uöçå_t
 
	tpmd_t
;

75 
uöçå_t
 
	t±e_t
;

76 
±e_t
 
	tsw≠_íåy_t
;

	@glue-kern/arch/x86_64/glue_mmu.h

1 #i‚de‡
__GLUE_MMU_H__


2 
	#__GLUE_MMU_H__


	)

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#STA_X
 0x8

29 
	#STA_E
 0x4

30 
	#STA_C
 0x4

31 
	#STA_W
 0x2

32 
	#STA_R
 0x2

33 
	#STA_A
 0x1

34 

	)

36 
	#STS_T16A
 0x1

37 
	#STS_LDT
 0x2

38 
	#STS_T16B
 0x3

39 
	#STS_CG16
 0x4

40 
	#STS_TG
 0x5

41 
	#STS_IG16
 0x6

42 
	#STS_TG16
 0x7

43 
	#STS_T32A
 0x9

44 
	#STS_T32B
 0xB

45 
	#STS_CG32
 0xC

46 
	#STS_IG32
 0xE

47 
	#STS_TG32
 0xF

48 

	)

49 #ifde‡
__ASSEMBLER__


51 
	#SEG_NULL
() \

52 .
quad
 0x0, 0x0

	)

54 
	#SEG_CODE
(
ty≥
) \

55 .
w‹d
 0x0, 0x0; \

56 .
byã
 0x0, (0x90 | (
ty≥
)), 0x20, 0x0; \

57 .
w‹d
 0x0, 0x0, 0x0, 0x0

	)

59 
	#SEG_DATA
(
ty≥
) \

60 .
w‹d
 0x0, 0x0; \

61 .
byã
 0x0, (0x90 | (
ty≥
)), 0x0, 0x0; \

62 .
w‹d
 0x0, 0x0, 0x0, 0x0

	)

66 
	~<libs/ty≥s.h
>

69 
	sg©edesc
 {

70 
	mgd_off_15_0
 : 16;

71 
	mgd_ss
 : 16;

72 
	mgd_i°
 : 3;

73 
	mgd_rsv1
 : 5;

74 
	mgd_ty≥
 : 4;

75 
	mgd_s
 : 1;

76 
	mgd_d∂
 : 2;

77 
	mgd_p
 : 1;

78 
	mgd_off_31_16
 : 16;

79 
	mgd_off_63_32
 : 32;

80 
	mgd_rsv2
 : 32;

93 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) { \

94 (
g©e
).
gd_off_15_0
 = (
uöt64_t
)(
off
) & 0xffff; \

95 (
g©e
).
gd_ss
 = (
£l
); \

96 (
g©e
).
gd_i°
 = 0; \

97 (
g©e
).
gd_rsv1
 = 0; \

98 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

99 (
g©e
).
gd_s
 = 0; \

100 (
g©e
).
gd_d∂
 = (
d∂
); \

101 (
g©e
).
gd_p
 = 1; \

102 (
g©e
).
gd_off_31_16
 = (
uöt64_t
)(
off
) >> 16; \

103 (
g©e
).
gd_off_63_32
 = (
uöt64_t
)(
off
) >> 32; \

104 (
g©e
).
gd_rsv2
 = 0; \

105 }

	)

108 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) { \

109 (
g©e
).
gd_off_15_0
 = (
uöt64_t
)(
off
) & 0xffff; \

110 (
g©e
).
gd_ss
 = (
ss
); \

111 (
g©e
).
gd_i°
 = 0; \

112 (
g©e
).
gd_rsv1
 = 0; \

113 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

114 (
g©e
).
gd_s
 = 0; \

115 (
g©e
).
gd_d∂
 = (
d∂
); \

116 (
g©e
).
gd_p
 = 1; \

117 (
g©e
).
gd_off_31_16
 = (
uöt64_t
)(
off
) >> 16; \

118 (
g©e
).
gd_off_63_32
 = (
uöt64_t
)(
off
) >> 32; \

119 (
g©e
).
gd_rsv2
 = 0; \

120 }

	)

123 
	s£gdesc
 {

124 
	msd_lim_15_0
 : 16;

125 
	msd_ba£_15_0
 : 16;

126 
	msd_ba£_23_16
 : 8;

127 
	msd_ty≥
 : 4;

128 
	msd_s
 : 1;

129 
	msd_d∂
 : 2;

130 
	msd_p
 : 1;

131 
	msd_lim_19_16
 : 4;

132 
	msd_avl
 : 1;

133 
	msd_l
 : 1;

134 
	msd_db
 : 1;

135 
	msd_g
 : 1;

136 
	msd_ba£_31_24
 : 8;

137 
	msd_ba£_63_32
 : 32;

138 
	msd_rsv
 : 32;

141 
	#SEG_NULL
 \

142 (
£gdesc
Ë{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

144 
	#SEG
(
ty≥
, 
d∂
) \

145 (
£gdesc
) { \

146 0, 0, 0, 
ty≥
, 1, 
d∂
, 1, \

148 }

	)

150 
	#SEGTSS
(
ty≥
, 
ba£
, 
lim
, 
d∂
) \

151 (
£gdesc
) { \

152 (
lim
Ë& 0xffff, (
ba£
) & 0xffff, \

153 ((
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 0, 
d∂
, 1, \

154 ((
lim
) >> 16) & 0xf, 0, 0, 0, 0, \

155 ((
ba£
) >> 24) & 0xff, \

156 ((
ba£
) >> 32) & 0xffffffff, 0 \

157 }

	)

160 
	sèsk°©e
 {

161 
uöt32_t
 
	mts_rsv0
;

162 
uöt64_t
 
	mts_r•0
;

163 
uöt64_t
 
	mts_r•1
;

164 
uöt64_t
 
	mts_r•2
;

165 
uöt64_t
 
	mts_rsv1
;

166 
uöt64_t
 
	mts_i°1
;

167 
uöt64_t
 
	mts_i°2
;

168 
uöt64_t
 
	mts_i°3
;

169 
uöt64_t
 
	mts_i°4
;

170 
uöt64_t
 
	mts_i°5
;

171 
uöt64_t
 
	mts_i°6
;

172 
uöt64_t
 
	mts_i°7
;

173 
uöt64_t
 
	mts_rsv2
;

174 
uöt16_t
 
	mts_rsv3
;

175 
uöt16_t
 
	mts_iomb
;

176 } 
__©åibuã__
((
∑cked
));

197 
	#PGX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PGXSHIFT
Ë& 0x1FF)

	)

198 
	#PUX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PUXSHIFT
Ë& 0x1FF)

	)

199 
	#PMX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PMXSHIFT
Ë& 0x1FF)

	)

202 
	#PTX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
Ë& 0x1FF)

	)

205 
	#PPN
(
œ
Ë(((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
)

	)

208 
	#PGOFF
(
œ
Ë(((
uöçå_t
)÷a)Ë& 0xFFF)

	)

211 
	#PGADDR
(
g
, 
u
, 
m
, 
t
, 
o
) \

212 ((
uöçå_t
)(((
g
Ë& 0x100Ë? ((gË| ~0x1FFË: (g)Ë<< 
PGXSHIFT
 \

213 | (
uöçå_t
)(
u
Ë<< 
PUXSHIFT
 | (uöçå_t)(
m
Ë<< 
PMXSHIFT
 \

214 | (
uöçå_t
)(
t
Ë<< 
PTXSHIFT
 | (
o
))

	)

217 
	#PTE_ADDR
(
±e
Ë((
uöçå_t
)’ãË& ~0xFFF)

	)

218 
	#PMD_ADDR
(
pmd
Ë
	`PTE_ADDR
’md)

	)

219 
	#PUD_ADDR
(
pud
Ë
	`PTE_ADDR
’ud)

	)

220 
	#PGD_ADDR
(
pgd
Ë
	`PTE_ADDR
’gd)

	)

223 
	#NPGENTRY
 512

224 

	)

225 
	#PGSIZE
 4096

226 
	#PGSHIFT
 12

227 

	)

228 
	#PTSIZE
 (1LLU * 
NPGENTRY
 * 
PGSIZE
)

229 
	#PMSIZE
 (1LLU * 
NPGENTRY
 * 
PTSIZE
)

230 
	#PUSIZE
 (1LLU * 
NPGENTRY
 * 
PMSIZE
)

231 

	)

232 
	#PTXSHIFT
 12

233 
	#PMXSHIFT
 21

234 
	#PUXSHIFT
 30

235 
	#PGXSHIFT
 39

236 

	)

238 
	#PTE_P
 0x001

239 
	#PTE_W
 0x002

240 
	#PTE_U
 0x004

241 
	#PTE_PWT
 0x008

242 
	#PTE_PCD
 0x010

243 
	#PTE_A
 0x020

244 
	#PTE_D
 0x040

245 
	#PTE_PS
 0x080

246 
	#PTE_MBZ
 0x180

247 
	#PTE_AVAIL
 0xE00

250 

	)

251 
	#PTE_SWAP
 (
PTE_A
 | 
PTE_D
)

	)

252 
	#PTE_USER
 (
PTE_U
 | 
PTE_W
 | 
PTE_P
)

	)

255 
	#CR0_PE
 0x00000001

256 
	#CR0_MP
 0x00000002

257 
	#CR0_EM
 0x00000004

258 
	#CR0_TS
 0x00000008

259 
	#CR0_ET
 0x00000010

260 
	#CR0_NE
 0x00000020

261 
	#CR0_WP
 0x00010000

262 
	#CR0_AM
 0x00040000

263 
	#CR0_NW
 0x20000000

264 
	#CR0_CD
 0x40000000

265 
	#CR0_PG
 0x80000000

266 

	)

267 
	#CR4_PCE
 0x00000100

268 
	#CR4_PGE
 0x00000080

269 
	#CR4_MCE
 0x00000040

270 
	#CR4_PAE
 0x00000020

271 
	#CR4_PSE
 0x00000010

272 
	#CR4_DE
 0x00000008

273 
	#CR4_TSD
 0x00000004

274 
	#CR4_PVI
 0x00000002

275 
	#CR4_VME
 0x00000001

276 

	)

	@glue-kern/arch/x86_64/glue_mp.h

1 #i‚de‡
__GLUE_MP_H__


2 
	#__GLUE_MP_H__


	)

4 #ifde‡
LIBSPREFIX


5 
	~<libs/ty≥s.h
>

7 
	~<ty≥s.h
>

10 
	sl˝u_öfo_s


12 
	mœpic_id
;

13 
	midx
;

15 
uöt64_t
 
	m‰eq
;

16 } 
	tl˝u_öfo_s
;

18 
	#œpic_id_gë
 (*
œpic_id_gë_±r
)

	)

19 
	#l˝u_idx_gë
 (*
l˝u_idx_gë_±r
)

	)

20 
	#l˝u_cou¡_gë
 (*
l˝u_cou¡_gë_±r
)

	)

21 
	#∂s_ba£_gë
 (*
∂s_ba£_gë_±r
)

	)

22 
	#œpic_ùi_issue
 (*
œpic_ùi_issue_±r
)

	)

24 
œpic_id_gë
();

25 
l˝u_idx_gë
();

26 
l˝u_cou¡_gë
();

27 
uöçå_t
 
∂s_ba£_gë
();

28 
œpic_ùi_issue
(
œpic_id
);

30 
	#LAPIC_COUNT
 256

	)

34 
	#PLS
 
	`__©åibuã__
((
	`£˘i⁄
(".∂s")))

	)

36 #ifde‡
SEGMENT_SUPPORT


38 
	#__°rögify_1
(
x
...Ë#x

	)

39 
	#__°rögify
(
x
...Ë
	`__°rögify_1
(x)

	)

41 
	#__∂s_£g
 
gs


	)

42 
	#__∂s_¥efix
 "%%" 
	`__°rögify
(
__∂s_£g
Ë":"

	)

43 
	#__∂s_¨g
(
x
Ë
__∂s_¥efix
 "%P" #x

	)

45 
	#∂s_‰om_›
(
›
, 
v¨
, 
c⁄°øöt
) \

47 
	`ty≥of
(
v¨
Ë
__ªt
; \

48  (
v¨
)) { \

50 
	`asm
 (
›
"b "
	`__∂s_¨g
(1)",%0" \

51 : "=q" (
__ªt
) \

52 : 
c⁄°øöt
); \

55 
	`asm
 (
›
"w "
	`__∂s_¨g
(1)",%0" \

56 : "=q" (
__ªt
) \

57 : 
c⁄°øöt
); \

60 
	`asm
 (
›
"»"
	`__∂s_¨g
(1)",%0" \

61 : "=q" (
__ªt
) \

62 : 
c⁄°øöt
); \

65 
	`asm
 (
›
"q "
	`__∂s_¨g
(1)",%0" \

66 : "=q" (
__ªt
) \

67 : 
c⁄°øöt
); \

70 
__ªt
; \

71 })

	)

73 
	#∂s_ªad
(
v¨
Ë
	`∂s_‰om_›
("mov", v¨, "m" (v¨))

	)

77 
uöçå_t
 
__kîn_∂s_°¨t
;

79 
	#∂s_ªad
(
v¨
) \

81 
uöçå_t
 
__∂s_ba£
 = 
	`∂s_ba£_gë
(); \

82 
uöçå_t
 
__£g_ba£
 = (uöçå_t)&
__kîn_∂s_°¨t
; \

83 
	`ty≥of
(
∂s_
##
v¨
Ë
__ªt
 = \

84 *(
	`ty≥of
(
∂s_
##
v¨
Ë*)((
uöçå_t
)&’ls_##v¨Ë- 
__£g_ba£
 + 
__∂s_ba£
); \

85 
__ªt
; \

86 })

	)

88 
	#∂s_gë_±r
(
v¨
) \

90 
uöçå_t
 
__∂s_ba£
 = 
	`∂s_ba£_gë
(); \

91 
uöçå_t
 
__£g_ba£
 = (uöçå_t)&
__kîn_∂s_°¨t
; \

92 (*)((
uöçå_t
)&(
∂s_
##
v¨
Ë- 
__£g_ba£
 + 
__∂s_ba£
); \

93 })

	)

95 
	#∂s_wrôe
(
v¨
, 
vÆue
) \

97 
uöçå_t
 
__∂s_ba£
 = 
	`∂s_ba£_gë
(); \

98 
uöçå_t
 
__£g_ba£
 = (uöçå_t)&
__kîn_∂s_°¨t
; \

99 *(
	`ty≥of
(
∂s_
##
v¨
Ë*)((
uöçå_t
)&’ls_##v¨Ë- 
__£g_ba£
 + 
__∂s_ba£
Ë
vÆue
; \

100 } 0)

	)

	@glue-kern/arch/x86_64/glue_pgmap.h

1 #i‚de‡
__GLUE_PGMAP_H__


2 
	#__GLUE_PGMAP_H__


	)

4 
	~"glue_memœyout.h
"

5 
	~"glue_mmu.h
"

7 
±e_t
 
	t±e_≥rm_t
;

9 
ölöe
 

10 
	$±ï_m≠
 (
±e_t
 *
±ï
, 
uöçå_t
 
∑
)

12 *
±ï
 = (
∑
 | 
PTE_P
);

13 
	}
}

15 
ölöe
 

16 
	$±ï_unm≠
 (
±e_t
 *
±ï
)

18 *
±ï
 = 0;

19 
	}
}

21 
ölöe
 

22 
	$±ï_övÆid
 (
±e_t
 *
±ï
)

24  (*
±ï
 == 0);

25 
	}
}

27 
ölöe
 

28 
	$±ï_¥e£¡
 (
±e_t
 *
±ï
)

30  (*
±ï
 & 
PTE_P
);

31 
	}
}

33 
ölöe
 

34 
	$±ï_s_ªad
 (
±e_t
 *
±ï
)

36  (*
±ï
 & 
PTE_P
);

37 
	}
}

39 
ölöe
 

40 
	$±ï_s_wrôe
 (
±e_t
 *
±ï
)

42  (*
±ï
 & 
PTE_W
);

43 
	}
}

45 
ölöe
 

46 
	$±ï_u_ªad
 (
±e_t
 *
±ï
)

48  (*
±ï
 & 
PTE_U
);

49 
	}
}

51 
ölöe
 

52 
	$±ï_u_wrôe
 (
±e_t
 *
±ï
)

54  ((*
±ï
 & 
PTE_U
Ë&& (*±ï & 
PTE_W
));

55 
	}
}

57 
ölöe
 

58 
	$±ï_£t_s_ªad
 (
±e_t
 *
±ï
)

60 
	}
}

62 
ölöe
 

63 
	$±ï_£t_s_wrôe
 (
±e_t
 *
±ï
)

65 
	}
}

67 
ölöe
 

68 
	$±ï_£t_u_ªad
 (
±e_t
 *
±ï
)

70 *
±ï
 |
PTE_U
;

71 
	}
}

73 
ölöe
 

74 
	$±ï_£t_u_wrôe
 (
±e_t
 *
±ï
)

76 *
±ï
 |
PTE_W
 | 
PTE_U
;

77 
	}
}

79 
ölöe
 

80 
	$±ï_un£t_s_ªad
 (
±e_t
 *
±ï
)

82 
	}
}

84 
ölöe
 

85 
	$±ï_un£t_s_wrôe
 (
±e_t
 *
±ï
)

87 *
±ï
 &(~
PTE_W
);

88 
	}
}

90 
ölöe
 

91 
	$±ï_un£t_u_ªad
 (
±e_t
 *
±ï
)

93 
	}
}

95 
ölöe
 

96 
	$±ï_un£t_u_wrôe
 (
±e_t
 *
±ï
)

98 *
±ï
 &(~
PTE_W
);

99 
	}
}

101 
ölöe
 
±e_≥rm_t


102 
	$±ï_gë_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

104  (*
±ï
Ë& 
≥rm
;

105 
	}
}

107 
ölöe
 

108 
	$±ï_£t_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

110 *
±ï
 |
≥rm
;

111 
	}
}

113 
ölöe
 

114 
	$±ï_c›y
 (
±e_t
 *
to
,Öã_à*
‰om
)

116 *
to
 = *
‰om
;

117 
	}
}

119 
ölöe
 

120 
	$±ï_un£t_≥rm
 (
±e_t
 *
±ï
, 
±e_≥rm_t
 
≥rm
)

122 *
±ï
 &(~
≥rm
);

123 
	}
}

125 
ölöe
 

126 
	$±ï_ac˚s£d
 (
±e_t
 *
±ï
)

128  *
±ï
 & 
PTE_A
;

129 
	}
}

131 
ölöe
 

132 
	$±ï_dúty
 (
±e_t
 *
±ï
)

134  *
±ï
 & 
PTE_D
;

135 
	}
}

137 
ölöe
 

138 
	$±ï_£t_ac˚s£d
 (
±e_t
 *
±ï
)

140 *
±ï
 |
PTE_A
;

141 
	}
}

143 
ölöe
 

144 
	$±ï_£t_dúty
 (
±e_t
 *
±ï
)

146 *
±ï
 |
PTE_D
;

147 
	}
}

149 
ölöe
 

150 
	$±ï_un£t_ac˚s£d
 (
±e_t
 *
±ï
)

152 *
±ï
 &(~
PTE_A
);

153 
	}
}

155 
ölöe
 

156 
	$±ï_un£t_dúty
 (
±e_t
 *
±ï
)

158 *
±ï
 &(~
PTE_D
);

159 
	}
}

	@glue-kern/arch/x86_64/glue_pmm.h

1 #i‚de‡
__GLUE_PMM_H__


2 
	#__GLUE_PMM_H__


	)

4 #ifde‡
LIBSPREFIX


5 
	~<libs/ty≥s.h
>

7 
	~<ty≥s.h
>

10 
	~"glue_memœyout.h
"

12 
	#TEST_PAGE
 0x0

	)

14 
	g£gdesc
;

16 
	#kÆloc_∑ges
 (*
kÆloc_∑ges_±r
)

	)

17 
	#k‰ì_∑ges
 (*
k‰ì_∑ges_±r
)

	)

18 
	#k∑ge_¥iv©e_£t
 (*
k∑ge_¥iv©e_£t_±r
)

	)

19 
	#k∑ge_¥iv©e_gë
 (*
k∑ge_¥iv©e_gë_±r
)

	)

20 
	#lﬂd_r•0
 (*
lﬂd_r•0_±r
)

	)

21 
	#öô_pgdú_gë
 (*
öô_pgdú_gë_±r
)

	)

22 
	#¥öt_pgdú
 (*
¥öt_pgdú_±r
)

	)

23 
	#gë_sv_gdt
 (*
gë_sv_gdt_±r
)

	)

25 
uöçå_t
 
kÆloc_∑ges
(
size_t
 
≈ages
);

26 
k‰ì_∑ges
(
uöçå_t
 
ba£∑
, 
size_t
 
≈ages
);

27 
k∑ge_¥iv©e_£t
(
uöçå_t
 
∑
, *
¥iv©e
);

28 *
k∑ge_¥iv©e_gë
(
uöçå_t
 
∑
);

29 
lﬂd_r•0
(
uöçå_t
 
r•0
);

30 
pgd_t
 *
öô_pgdú_gë
();

31 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...));

32 
£gdesc
 *
	`gë_sv_gdt
();

35 
	#KADDR_DIRECT
(
addr
Ë((*)((
uöçå_t
)◊ddrË+ 
PBASE
))

	)

36 
	#PADDR_DIRECT
(
addr
Ë((
uöçå_t
)◊ddrË- 
PBASE
)

	)

	@glue-kern/arch/x86_64/glue_tick.h

1 #i‚de‡
__GLUE_TICK_H__


2 
	#__GLUE_TICK_H__


	)

4 #ifde‡
LIBSPREFIX


5 
	~<libs/ty≥s.h
>

7 
	~<ty≥s.h
>

10 
	#tick_öô
 (*
tick_öô_±r
)

	)

11 
	#h≥t_phys_gë
 (*
h≥t_phys_gë_±r
)

	)

13 
tick_öô
(
‰eq
);

14 
uöçå_t
 
h≥t_phys_gë
();

	@ht-mkram/or32/e820.h

1 #i‚de‡
E820_H


2 
	#E820_H


	)

4 
	tuöt32_t
;

5 
	tuöt64_t
;

6 
uöt32_t
 
	tsize_t
;

8 
	#E820MAX
 10

	)

9 
	#E820_ARM
 1

10 
	#E820_ARR
 2

11 

	)

12 
	se820m≠
 {

13 
	mƒ_m≠
;

15 
uöt64_t
 
	maddr
;

16 
uöt64_t
 
	msize
;

17 
uöt32_t
 
	mty≥
;

18 } 
	mm≠
[
E820MAX
];

21 
	#PGSIZE
 0x2000

	)

27 
	#ROUNDDOWN
(
a
, 
n
) ({ \

28 
size_t
 
__a
 = (size_t)(
a
); \

29 (
	`ty≥of
(
a
))(
__a
 - __®% (
n
)); \

30 })

	)

33 
	#ROUNDUP
(
a
, 
n
) ({ \

34 
size_t
 
__n
 = (size_t)(
n
); \

35 (
	`ty≥of
(
a
))(
	`ROUNDDOWN
((
size_t
)◊Ë+ 
__n
 - 1, __n)); \

36 })

	)

	@ht-mkram/or32/mkram.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<ñf.h
>

4 
	~<ídün.h
>

5 
	~<uni°d.h
>

6 
	~<gë›t.h
>

8 
	~"e820.h
"

10 
	#ELF_MAGIC
 0x464c457f

	)

11 
	#MEMORY
 0x400000

12 
	#FS_BASE
 
MEMORY


	)

13 
	#FS_SIZE
 0x800000

14 

	)

15 
	#BUFFER_SIZE
 2048

	)

16 
	gbuf„r
[
BUFFER_SIZE
];

18 
	#EMPTY_SIZE
 0x100

	)

20 
	$maö
 (
¨gc
, *
¨gv
[])

22 i‡(
¨gc
 < 3) {

23 
	`≥º‹
 ("usage: or32-elf-loader <executable> <output> [-f <fs img>]\n");

24 
	`exô
 (1);

26 
›t
;

27 *
fsimg
 = 
NULL
;

28 i‡((
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:")) != -1) {

29 
fsimg
 = 
›èrg
;

32 
FILE
 *
öput
 = 
	`f›í
 (
¨gv
[1], "r");

33 i‡(
öput
 =
NULL
) {

34 
	`¥ötf
 ("ˇ¬Ÿ o≥¿%†f‹Ñódög.\n", 
¨gv
[1]);

35 
	`exô
 (1);

38 
Elf32_Ehdr
 
hódî
;

39 
	`‰ód
 (&
hódî
, 1, (
Elf32_Ehdr
), 
öput
);

40 i‡(*((*)
hódî
.
e_idít
Ë!
ELF_MAGIC
) {

41 
	`¥ötf
 ("InvÆidÉl‡fûe: %s\n", 
¨gv
[1]);

42 
	`exô
 (1);

45 
FILE
 *
ouçut
 = 
	`f›í
 (
¨gv
[2], "w");

46 i‡(
ouçut
 =
NULL
) {

47 
	`¥ötf
 ("ˇ¬Ÿ o≥¿%†f‹ wrôög.\n", 
¨gv
[2]);

48 
	`exô
 (1);

52 
uöt32_t
 
phnum
, 
phnum_tŸÆ
 = 
	`be16toh
 (
hódî
.
e_phnum
);

53 
e820m≠
 
mem_m≠
;

54 
cuºít_íåy
 = 0, 
mem_t›
 = 0x4000;

56 
mem_m≠
.
m≠
[
cuºít_íåy
].
addr
 = 
	`htobe64
 (0x0);

57 
mem_m≠
.
m≠
[
cuºít_íåy
].
size
 = 
	`htobe64
 (0x4000);

58 
mem_m≠
.
m≠
[
cuºít_íåy
].
ty≥
 = 
	`htobe32
 (
E820_ARR
);

59 
cuºít_íåy
 ++;

60 
phnum
 = 0;Öhnum < 
phnum_tŸÆ
;Öhnum ++) {

61 
Elf32_Phdr
 
ph
;

62 
uöt32_t
 
phoff
 = 
	`be32toh
 (
hódî
.
e_phoff
Ë+  (
Elf32_Phdr
Ë* 
phnum
;

63 
	`f£ek
 (
öput
, 
phoff
, 
SEEK_SET
);

64 
	`‰ód
 (&
ph
, 1,  (
Elf32_Phdr
), 
öput
);

66 i‡(
	`be32toh
 (
ph
.
p_ty≥
Ë!
PT_LOAD
)

68 i‡(
	`be32toh
 (
ph
.
p_fûesz
Ë> be32toh (ph.
p_memsz
)) {

69 
	`¥ötf
 ("InvalidÉlf\n");

70 
	`exô
 (2);

72 i‡(
ph
.
p_fûesz
 == 0)

75 
uöt32_t
 
sour˚
 = 
	`be32toh
 (
ph
.
p_off£t
), 
de°
 = be32toh (ph.
p_∑ddr
);

76 
uöt32_t
 
íd
 = 
sour˚
 + 
	`be32toh
 (
ph
.
p_fûesz
), 
memsize
 = 
	`ROUNDUP
 (be32toh’h.
p_memsz
), 
PGSIZE
);

77 i‡(
sour˚
 == 0) {

78 
sour˚
 +
EMPTY_SIZE
;

79 
de°
 +
EMPTY_SIZE
;

80 i‡(
sour˚
 >
íd
)

83 
mem_m≠
.
m≠
[
cuºít_íåy
].
addr
 = 
	`htobe64
 ((
uöt64_t
)
sour˚
);

84 
mem_m≠
.
m≠
[
cuºít_íåy
].
size
 = 
	`htobe64
 ((
uöt64_t
)
memsize
);

85 
mem_m≠
.
m≠
[
cuºít_íåy
].
ty≥
 = 
	`htobe32
 (
E820_ARR
);

86 
mem_t›
 = 
sour˚
 + 
memsize
;

87 
cuºít_íåy
 ++;

89 
	`f£ek
 (
öput
, 
sour˚
, 
SEEK_SET
);

90 
	`f£ek
 (
ouçut
, 
de°
, 
SEEK_SET
);

91 
sour˚
 < 
íd
 && 
de°
 < 
MEMORY
) {

92 
uöt32_t
 
size
 = (
íd
-
sour˚
 > 
BUFFER_SIZE
) ? BUFFER_SIZE : (end - source);

93 
	`‰ód
 (
buf„r
, 1, 
size
, 
öput
);

94 
	`fwrôe
 (
buf„r
, 1, 
size
, 
ouçut
);

95 
sour˚
 +
size
, 
de°
 += size;

98 i‡(
mem_t›
 < 
MEMORY
) {

99 
mem_m≠
.
m≠
[
cuºít_íåy
].
addr
 = 
	`htobe64
 (
mem_t›
);

100 
mem_m≠
.
m≠
[
cuºít_íåy
].
size
 = 
	`htobe64
 (
MEMORY
 - 
mem_t›
);

101 
mem_m≠
.
m≠
[
cuºít_íåy
].
ty≥
 = 
	`htobe32
 (
E820_ARM
);

105 
mem_m≠
.
ƒ_m≠
 = 
	`htobe32
 (
cuºít_íåy
 + 1);

106 
	`f£ek
 (
ouçut
, 0, 
SEEK_SET
);

107 
	`fwrôe
 (&
mem_m≠
, 1,  (mem_m≠), 
ouçut
);

110 i‡(
fsimg
 !
NULL
) {

111 
FILE
 *
fs
 = 
	`f›í
 (
fsimg
, "r");

112 i‡(
fs
 !
NULL
) {

113 
	`f£ek
 (
ouçut
, 
FS_BASE
, 
SEEK_SET
);

114 
fs_±r
 = 0;

115 
fs_±r
 < 
FS_SIZE
) {

116 
uöt32_t
 
size
 = 
	`‰ód
 (
buf„r
, 1, 
BUFFER_SIZE
, 
fs
);

117 
	`fwrôe
 (
buf„r
, 1, 
size
, 
ouçut
);

118 i‡(
size
 < 
BUFFER_SIZE
) {

121 
fs_±r
 +
BUFFER_SIZE
;

123 i‡(
	`‰ód
 (
buf„r
, 1, 1, 
fs
) > 0) {

124 
	`¥ötf
 ("WARNING: file system imageÅooÜarge.\n");

126 
	`f˛o£
 (
fs
);

130 
	`f˛o£
 (
öput
);

131 
	`f˛o£
 (
ouçut
);

134 
	}
}

	@ht-mksfs/mksfs.c

1 
	#_GNU_SOURCE


	)

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°dlib.h
>

5 
	~<°döt.h
>

6 
	~<limôs.h
>

7 
	~<dúít.h
>

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<î∫o.h
>

13 
	~<as£π.h
>

15 
	tboﬁ
;

17 
	#__îr‹
(
msg
, 
quô
, ...) \

19 
	`Ârötf
(
°dîr
, #msg ": fun˘i⁄ %†-Üöê%d: ", 
__FUNCTION__
, 
__LINE__
); \

20 i‡(
î∫o
 != 0) { \

21 
	`Ârötf
(
°dîr
, "[îr‹] %s: ", 
	`°ªº‹
(
î∫o
)); \

23 
	`Ârötf
(
°dîr
, "\n\t"), f¥ötf(°dîr, 
__VA_ARGS__
); \

24 
î∫o
 = 0; \

25 i‡(
quô
) { \

26 
	`exô
(-1); \

28 } 0)

	)

30 
	#w¨n
(...Ë
	`__îr‹
(
w¨n
, 0, 
__VA_ARGS__
)

	)

31 
	#bug
(...Ë
	`__îr‹
(
bug
, 1, 
__VA_ARGS__
)

	)

33 
	#°©ic_as£π
(
x
) \

34 
x
Ë{0: (x): ; }

	)

37 
	#GOLDEN_RATIO_PRIME_32
 0x9e370001UL

	)

39 
	#HASH_SHIFT
 10

	)

40 
	#HASH_LIST_SIZE
 (1 << 
HASH_SHIFT
)

	)

42 
ölöe
 
uöt32_t


43 
	$__hash32
(
uöt32_t
 
vÆ
, 
bôs
) {

44 
uöt32_t
 
hash
 = 
vÆ
 * 
GOLDEN_RATIO_PRIME_32
;

45  (
hash
 >> (32 - 
bôs
));

46 
	}
}

48 
uöt32_t


49 
	$hash32
(
uöt32_t
 
vÆ
) {

50  
	`__hash32
(
vÆ
, 
HASH_SHIFT
);

51 
	}
}

53 
uöt32_t


54 
	$hash64
(
uöt64_t
 
vÆ
) {

55  
	`__hash32
((
uöt32_t
)
vÆ
, 
HASH_SHIFT
);

56 
	}
}

59 
	$ß„_mÆloc
(
size_t
 
size
) {

60 *
ªt
;

61 i‡((
ªt
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

62 
	`bug
("mÆlo¯%lu byã†Áûed.\n", ()
size
);

64  
ªt
;

65 
	}
}

68 
	$ß„_°rdup
(c⁄° *
°r
) {

69 *
ªt
;

70 i‡((
ªt
 = 
	`°rdup
(
°r
)Ë=
NULL
) {

71 
	`bug
("°rdu∞Áûed: %s\n", 
°r
);

73  
ªt
;

74 
	}
}

76 
°©
 *

77 
	$ß„_°©
(c⁄° *
fûíame
) {

78 
°©
 
__°©
;

79 i‡(
	`°©
(
fûíame
, &
__°©
) != 0) {

80 
	`bug
("°© %†Áûed.\n", 
fûíame
);

82  &
__°©
;

83 
	}
}

85 
°©
 *

86 
	$ß„_f°©
(
fd
) {

87 
°©
 
__°©
;

88 i‡(
	`f°©
(
fd
, &
__°©
) != 0) {

89 
	`bug
("f°© %d faûed.\n", 
fd
);

91  &
__°©
;

92 
	}
}

94 
°©
 *

95 
	$ß„_l°©
(c⁄° *
«me
) {

96 
°©
 
__°©
;

97 i‡(
	`l°©
(
«me
, &
__°©
) != 0) {

98 
	`bug
("l°© '%s' faûed.\n", 
«me
);

100  &
__°©
;

101 
	}
}

104 
	$ß„_fchdú
(
fd
) {

105 i‡(
	`fchdú
(
fd
) != 0) {

106 
	`bug
("fchdú faûed %d.\n", 
fd
);

108 
	}
}

110 
	#SFS_MAGIC
 0x2f8dbe2a

	)

111 
	#SFS_NDIRECT
 12

	)

112 
	#SFS_BLKSIZE
 4096

113 
	#SFS_MAX_NBLKS
 (1024UL * 512)

114 
	#SFS_MAX_INFO_LEN
 31

	)

115 
	#SFS_MAX_FNAME_LEN
 255

	)

116 
	#SFS_MAX_FILE_SIZE
 (1024UL * 1024 * 128)

117 

	)

118 
	#SFS_BLKBITS
 (
SFS_BLKSIZE
 * 
CHAR_BIT
)

	)

119 
	#SFS_TYPE_FILE
 1

	)

120 
	#SFS_TYPE_DIR
 2

	)

121 
	#SFS_TYPE_LINK
 3

	)

123 
	#SFS_BLKN_SUPER
 0

	)

124 
	#SFS_BLKN_ROOT
 1

	)

125 
	#SFS_BLKN_FREEMAP
 2

	)

127 
	sˇche_block
 {

128 
uöt32_t
 
	möo
;

129 
ˇche_block
 *
	mhash_√xt
;

130 *
	mˇche
;

133 
	sˇche_öode
 {

134 
	söode
 {

137 
uöt32_t
 
	msize
;

138 } 
	mfûeöfo
;

140 
uöt32_t
 
	m¶Ÿs
;

141 
uöt32_t
 
	m∑ª¡
;

142 } 
	mdúöfo
;

144 
uöt16_t
 
	mty≥
;

145 
uöt16_t
 
	m∆öks
;

146 
uöt32_t
 
	mblocks
;

147 
uöt32_t
 
	mdúe˘
[
SFS_NDIRECT
];

148 
uöt32_t
 
	mödúe˘
;

149 
uöt32_t
 
	mdb_ödúe˘
;

150 } 
	möode
;

151 
öo_t
 
	mªÆ
;

152 
uöt32_t
 
	möo
;

153 
uöt32_t
 
	mnblks
;

154 
ˇche_block
 *
	ml1
, *
	ml2
;

155 
ˇche_öode
 *
	mhash_√xt
;

158 
	ssfs_fs
 {

160 
uöt32_t
 
	mmagic
;

161 
uöt32_t
 
	mblocks
;

162 
uöt32_t
 
	munu£d_blocks
;

163 
	möfo
[
SFS_MAX_INFO_LEN
 + 1];

164 } 
	msu≥r
;

165 
	ssub∑th
 {

166 
sub∑th
 *
	m√xt
, *
	m¥ev
;

167 *
	msub«me
;

168 } 
	m__•_nû
, *
	m•_roŸ
, *
	m•_íd
;

169 
	mimgfd
;

170 
uöt32_t
 
	mnöos
, 
	m√xt_öo
;

171 
ˇche_öode
 *
	mroŸ
;

172 
ˇche_öode
 *
	möodes
[
HASH_LIST_SIZE
];

173 
ˇche_block
 *
	mblocks
[
HASH_LIST_SIZE
];

176 
	ssfs_íåy
 {

177 
uöt32_t
 
	möo
;

178 
	m«me
[
SFS_MAX_FNAME_LEN
 + 1];

181 
uöt32_t


182 
	$sfs_Æloc_öo
(
sfs_fs
 *
sfs
) {

183 i‡(
sfs
->
√xt_öo
 < sfs->
nöos
) {

184 
sfs
->
su≥r
.
unu£d_blocks
 --;

185  
sfs
->
√xt_öo
 ++;

187 
	`bug
("out of disk space.\n");

188 
	}
}

190 
ˇche_block
 *

191 
	$Æloc_ˇche_block
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

192 
ˇche_block
 *
cb
 = 
	`ß„_mÆloc
((cache_block));

193 
cb
->
öo
 = (öÿ!0Ë? inÿ: 
	`sfs_Æloc_öo
(
sfs
);

194 
cb
->
ˇche
 = 
	`mem£t
(
	`ß„_mÆloc
(
SFS_BLKSIZE
), 0, SFS_BLKSIZE);

195 
ˇche_block
 **
hód
 = 
sfs
->
blocks
 + 
	`hash32
(
öo
);

196 
cb
->
hash_√xt
 = *
hód
, *head = cb;

197  
cb
;

198 
	}
}

200 
ˇche_block
 *

201 
	$£¨ch_ˇche_block
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

202 
ˇche_block
 *
cb
 = 
sfs
->
blocks
[
	`hash32
(
öo
)];

203 
cb
 !
NULL
 && cb->
öo
 != ino) {

204 
cb
 = cb->
hash_√xt
;

206  
cb
;

207 
	}
}

209 
ˇche_öode
 *

210 
	$Æloc_ˇche_öode
(
sfs_fs
 *
sfs
, 
öo_t
 
ªÆ
, 
uöt32_t
 
öo
, 
uöt16_t
 
ty≥
) {

211 
ˇche_öode
 *
ci
 = 
	`ß„_mÆloc
((cache_inode));

212 
ci
->
öo
 = (öÿ!0Ë? inÿ: 
	`sfs_Æloc_öo
(
sfs
);

213 
ci
->
ªÆ
 =Ñól, ci->
nblks
 = 0, ci->
l1
 = ci->
l2
 = 
NULL
;

214 
öode
 *öodê&(
ci
->inode);

215 
	`mem£t
(
öode
, 0, (inode));

216 
öode
->
ty≥
 =Åype;

217 
ˇche_öode
 **
hód
 = 
sfs
->
öodes
 + 
	`hash64
(
ªÆ
);

218 
ci
->
hash_√xt
 = *
hód
, *head = ci;

219  
ci
;

220 
	}
}

222 
ˇche_öode
 *

223 
	$£¨ch_ˇche_öode
(
sfs_fs
 *
sfs
, 
öo_t
 
ªÆ
) {

224 
ˇche_öode
 *
ci
 = 
sfs
->
öodes
[
	`hash64
(
ªÆ
)];

225 
ci
 !
NULL
 && ci->
ªÆ
 !=Ñeal) {

226 
ci
 = ci->
hash_√xt
;

228  
ci
;

229 
	}
}

232 
	$öô_dú_ˇche_öode
(
ˇche_öode
 *
cuºít
, ˇche_öodê*
∑ª¡
) {

233 
öode
 *öodê&(
cuºít
->inode);

234 
	`as£π
(
öode
->
ty≥
 =
SFS_TYPE_DIR
 && 
∑ª¡
->inode.type == SFS_TYPE_DIR);

235 
	`as£π
(
öode
->
∆öks
 =0 && inode->
dúöfo
.
¶Ÿs
 =0 && inode->dúöfo.
∑ª¡
 == 0);

236 
öode
->
∆öks
 ++, 
∑ª¡
->öode.∆ök†++, inode->
dúöfo
.∑ª¡ =Ö¨ít->
öo
;

237 
	}
}

239 
sfs_fs
 *

240 
	$¸óã_sfs
(
imgfd
) {

241 
uöt32_t
 
nöos
, 
√xt_öo
;

242 
°©
 *°© = 
	`ß„_f°©
(
imgfd
);

243 i‡((
nöos
 = 
°©
->
°_size
 / 
SFS_BLKSIZE
Ë> 
SFS_MAX_NBLKS
) {

244 
nöos
 = 
SFS_MAX_NBLKS
;

245 
	`w¨n
("img file isÅoo big (%llu bytes, only use %u blocks).\n",

246 ()
°©
->
°_size
, 
nöos
);

248 i‡((
√xt_öo
 = 
SFS_BLKN_FREEMAP
 + (
nöos
 + 
SFS_BLKBITS
 - 1) / SFS_BLKBITS) >=Çinos) {

249 
	`bug
("img file isÅoo small (%llu bytes, %u blocks, bitmap useátÜeast %u blocks).\n",

250 ()
°©
->
°_size
, 
nöos
, 
√xt_öo
 - 2);

253 
sfs_fs
 *
sfs
 = 
	`ß„_mÆloc
((sfs_fs));

254 
sfs
->
su≥r
.
magic
 = 
SFS_MAGIC
;

255 
sfs
->
su≥r
.
blocks
 = 
nöos
, sfs->su≥r.
unu£d_blocks
 =Çöo†- 
√xt_öo
;

256 
	`¢¥ötf
(
sfs
->
su≥r
.
öfo
, 
SFS_MAX_INFO_LEN
, "simple file system");

258 
sfs
->
nöos
 =Çöos, sfs->
√xt_öo
 =Çext_öo, sfs->
imgfd
 = imgfd;

259 
sfs
->
•_roŸ
 = sfs->
•_íd
 = &(sfs->
__•_nû
);

260 
sfs
->
•_íd
->
¥ev
 = sfs->•_íd->
√xt
 = 
NULL
;

262 
i
;

263 
i
 = 0; i < 
HASH_LIST_SIZE
; i ++) {

264 
sfs
->
öodes
[
i
] = 
NULL
;

265 
sfs
->
blocks
[
i
] = 
NULL
;

268 
sfs
->
roŸ
 = 
	`Æloc_ˇche_öode
(sfs, 0, 
SFS_BLKN_ROOT
, 
SFS_TYPE_DIR
);

269 
	`öô_dú_ˇche_öode
(
sfs
->
roŸ
, sfs->root);

270  
sfs
;

271 
	}
}

274 
	$sub∑th_push
(
sfs_fs
 *
sfs
, c⁄° *
sub«me
) {

275 
sub∑th
 *sub∑th = 
	`ß„_mÆloc
((subpath));

276 
sub∑th
->
sub«me
 = 
	`ß„_°rdup
(subname);

277 
sfs
->
•_íd
->
√xt
 = 
sub∑th
;

278 
sub∑th
->
¥ev
 = 
sfs
->
•_íd
;

279 
sub∑th
->
√xt
 = 
NULL
;

280 
sfs
->
•_íd
 = 
sub∑th
;

281 
	}
}

284 
	$sub∑th_p›
(
sfs_fs
 *
sfs
) {

285 
	`as£π
(
sfs
->
•_roŸ
 !sfs->
•_íd
);

286 
sub∑th
 *sub∑th = 
sfs
->
•_íd
;

287 
sfs
->
•_íd
 = sfs->•_íd->
¥ev
, sfs->•_íd->
√xt
 = 
NULL
;

288 
	`‰ì
(
sub∑th
->
sub«me
), free(subpath);

289 
	}
}

292 
	$sub∑th_show
(
FILE
 *
fout
, 
sfs_fs
 *
sfs
, c⁄° *
«me
) {

293 
sub∑th
 *sub∑th = 
sfs
->
•_roŸ
;

294 
	`Ârötf
(
fout
, "current is: /");

295 (
sub∑th
 = sub∑th->
√xt
Ë!
NULL
) {

296 
	`Ârötf
(
fout
, "%s/", 
sub∑th
->
sub«me
);

298 i‡(
«me
 !
NULL
) {

299 
	`Ârötf
(
fout
, "%s", 
«me
);

301 
	`Ârötf
(
fout
, "\n");

302 
	}
}

305 
	$wrôe_block
(
sfs_fs
 *
sfs
, *
d©a
, 
size_t
 
Àn
, 
uöt32_t
 
öo
) {

306 
	`as£π
(
Àn
 <
SFS_BLKSIZE
 && 
öo
 < 
sfs
->
nöos
);

307 
buf„r
[
SFS_BLKSIZE
];

308 i‡(
Àn
 !
SFS_BLKSIZE
) {

309 
	`mem£t
(
buf„r
, 0, (buffer));

310 
d©a
 = 
	`mem˝y
(
buf„r
, d©a, 
Àn
);

312 
off_t
 
off£t
 = (off_t)
öo
 * 
SFS_BLKSIZE
;

313 
ssize_t
 
ªt
;

314 i‡((
ªt
 = 
	`pwrôe
(
sfs
->
imgfd
, 
d©a
, 
SFS_BLKSIZE
, 
off£t
)) != SFS_BLKSIZE) {

315 
	`bug
("wrôê%u block faûed: (%d/%d).\n", 
öo
, ()
ªt
, 
SFS_BLKSIZE
);

317 
	}
}

320 
	$Êush_ˇche_block
(
sfs_fs
 *
sfs
, 
ˇche_block
 *
cb
) {

321 
	`wrôe_block
(
sfs
, 
cb
->
ˇche
, 
SFS_BLKSIZE
, cb->
öo
);

322 
	}
}

325 
	$Êush_ˇche_öode
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
ci
) {

326 
	`wrôe_block
(
sfs
, &(
ci
->
öode
), (ci->öode), ci->
öo
);

327 
	}
}

330 
	$˛o£_sfs
(
sfs_fs
 *
sfs
) {

331 
buf„r
[
SFS_BLKSIZE
];

332 
uöt32_t
 
i
, 
j
, 
öo
 = 
SFS_BLKN_FREEMAP
;

333 
uöt32_t
 
nöos
 = 
sfs
->nöos, 
√xt_öo
 = sfs->next_ino;

334 
i
 = 0; i < 
nöos
; 
öo
 ++, i +
SFS_BLKBITS
) {

335 
	`mem£t
(
buf„r
, 0, (buffer));

336 i‡(
i
 + 
SFS_BLKBITS
 > 
√xt_öo
) {

337 
uöt32_t
 
°¨t
 = 0, 
íd
 = 
SFS_BLKBITS
;

338 i‡(
i
 < 
√xt_öo
) {

339 
°¨t
 = 
√xt_öo
 - 
i
;

341 i‡(
i
 + 
SFS_BLKBITS
 > 
nöos
) {

342 
íd
 = 
nöos
 - 
i
;

344 
uöt32_t
 *
d©a
 = (uöt32_à*)
buf„r
;

345 c⁄° 
uöt32_t
 
bôs
 = (bôsË* 
CHAR_BIT
;

346 
j
 = 
°¨t
; j < 
íd
; j ++) {

347 
d©a
[
j
 / 
bôs
] |= (1 << (j % bits));

350 
	`wrôe_block
(
sfs
, 
buf„r
, (buf„r), 
öo
);

352 
	`wrôe_block
(
sfs
, &(sfs->
su≥r
), (sfs->su≥r), 
SFS_BLKN_SUPER
);

354 
i
 = 0; i < 
HASH_LIST_SIZE
; i ++) {

355 
ˇche_block
 *
cb
 = 
sfs
->
blocks
[
i
];

356 
cb
 !
NULL
) {

357 
	`Êush_ˇche_block
(
sfs
, 
cb
);

358 
cb
 = cb->
hash_√xt
;

360 
ˇche_öode
 *
ci
 = 
sfs
->
öodes
[
i
];

361 
ci
 !
NULL
) {

362 
	`Êush_ˇche_öode
(
sfs
, 
ci
);

363 
ci
 = ci->
hash_√xt
;

366 
	}
}

368 
sfs_fs
 *

369 
	$›í_img
(c⁄° *
img«me
) {

370 c⁄° *
ex≥˘
 = ".img", *
ext
 = 
img«me
 + 
	`°æí
(imgname) - strlen(expect);

371 i‡(
ext
 <
img«me
 || 
	`°rcmp
”xt, 
ex≥˘
) != 0) {

372 
	`bug
("övÆid .img fûê«mê'%s'.\n", 
img«me
);

374 
imgfd
;

375 i‡((
imgfd
 = 
	`›í
(
img«me
, 
O_WRONLY
)) < 0) {

376 
	`bug
("›í '%s' faûed.\n", 
img«me
);

378  
	`¸óã_sfs
(
imgfd
);

379 
	}
}

381 
	#›í_bug
(
sfs
, 
«me
, ...) \

383 
	`sub∑th_show
(
°dîr
, 
sfs
, 
«me
); \

384 
	`bug
(
__VA_ARGS__
); \

385 } 0)

	)

387 
	#show_fuŒ∑th
(
sfs
, 
«me
Ë
	`sub∑th_show
(
°dîr
, sfs,Çame)

	)

389 
›í_dú
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
);

390 
›í_fûe
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
, 
fd
);

391 
›í_lök
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
);

393 
	#SFS_BLK_NENTRY
 (
SFS_BLKSIZE
 / (
uöt32_t
))

	)

394 
	#SFS_L0_NBLKS
 
SFS_NDIRECT


	)

395 
	#SFS_L1_NBLKS
 (
SFS_BLK_NENTRY
 + 
SFS_L0_NBLKS
)

	)

396 
	#SFS_L2_NBLKS
 (
SFS_BLK_NENTRY
 * SFS_BLK_NENTRY + 
SFS_L1_NBLKS
)

	)

397 
	#SFS_LN_NBLKS
 (
SFS_MAX_FILE_SIZE
 / 
SFS_BLKSIZE
)

	)

400 
	$upd©e_ˇche
(
sfs_fs
 *
sfs
, 
ˇche_block
 **
cbp
, 
uöt32_t
 *
ö›
) {

401 
uöt32_t
 
öo
 = *
ö›
;

402 
ˇche_block
 *
cb
 = *
cbp
;

403 i‡(
öo
 == 0) {

404 
cb
 = 
	`Æloc_ˇche_block
(
sfs
, 0);

405 
öo
 = 
cb
->ino;

407 i‡(
cb
 =
NULL
 || cb->
öo
 != ino) {

408 
cb
 = 
	`£¨ch_ˇche_block
(
sfs
, 
öo
);

409 
	`as£π
(
cb
 !
NULL
 && cb->
öo
 == ino);

411 *
cbp
 = 
cb
, *
ö›
 = 
öo
;

412 
	}
}

415 
	$__≠≥nd_block
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, 
uöt32_t
 
öo
, c⁄° *
fûíame
) {

416 
	`°©ic_as£π
(
SFS_LN_NBLKS
 <
SFS_L2_NBLKS
);

417 
uöt32_t
 
nblks
 = 
fûe
->nblks;

418 
öode
 *öodê&(
fûe
->inode);

419 i‡(
nblks
 >
SFS_LN_NBLKS
) {

420 
	`›í_bug
(
sfs
, 
fûíame
, "file isÅoo big.\n");

422 i‡(
nblks
 < 
SFS_L0_NBLKS
) {

423 
öode
->
dúe˘
[
nblks
] = 
öo
;

425 i‡(
nblks
 < 
SFS_L1_NBLKS
) {

426 
nblks
 -
SFS_L0_NBLKS
;

427 
	`upd©e_ˇche
(
sfs
, &(
fûe
->
l1
), &(
öode
->
ödúe˘
));

428 
uöt32_t
 *
d©a
 = 
fûe
->
l1
->
ˇche
;

429 
d©a
[
nblks
] = 
öo
;

431 i‡(
nblks
 < 
SFS_L2_NBLKS
) {

432 
nblks
 -
SFS_L1_NBLKS
;

433 
	`upd©e_ˇche
(
sfs
, &(
fûe
->
l2
), &(
öode
->
db_ödúe˘
));

434 
uöt32_t
 *
d©a2
 = 
fûe
->
l2
->
ˇche
;

435 
	`upd©e_ˇche
(
sfs
, &(
fûe
->
l1
), &
d©a2
[
nblks
 / 
SFS_BLK_NENTRY
]);

436 
uöt32_t
 *
d©a1
 = 
fûe
->
l1
->
ˇche
;

437 
d©a1
[
nblks
 % 
SFS_BLK_NENTRY
] = 
öo
;

439 
fûe
->
nblks
 ++;

440 
öode
->
blocks
 ++;

441 
	}
}

444 
	$≠≥nd_block_size
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, 
size_t
 
size
, 
uöt32_t
 
öo
, c⁄° *
fûíame
) {

445 
öode
 *öodê&(
fûe
->inode);

446 
	`as£π
(
öode
->
ty≥
 !
SFS_TYPE_DIR
 && 
size
 !0 && sizê<
SFS_BLKSIZE
);

447 
	`as£π
(
öode
->
fûeöfo
.
size
 % 
SFS_BLKSIZE
 == 0);

448 
öode
->
fûeöfo
.
size
 += size;

449 
	`__≠≥nd_block
(
sfs
, 
fûe
, 
öo
, 
fûíame
);

450 
	}
}

453 
	$≠≥nd_block_¶Ÿ
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, 
uöt32_t
 
öo
, c⁄° *
fûíame
) {

454 
öode
 *öodê&(
fûe
->inode);

455 
	`as£π
(
öode
->
ty≥
 =
SFS_TYPE_DIR
);

456 
öode
->
dúöfo
.
¶Ÿs
 ++;

457 
	`__≠≥nd_block
(
sfs
, 
fûe
, 
öo
, 
fûíame
);

458 
	}
}

461 
	$add_íåy
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
, ˇche_öodê*
fûe
, c⁄° *
«me
) {

462 
sfs_íåy
 
__íåy
, *
íåy
 = &__entry;

463 
	`as£π
(
cuºít
->
öode
.
ty≥
 =
SFS_TYPE_DIR
 && 
	`°æí
(
«me
Ë<
SFS_MAX_FNAME_LEN
);

464 
íåy
->
öo
 = 
fûe
->öo, 
	`°r˝y
”¡ry->
«me
,Çame);

465 
uöt32_t
 
íåy_öo
 = 
	`sfs_Æloc_öo
(
sfs
);

466 
	`wrôe_block
(
sfs
, 
íåy
, ”¡ry->
«me
), 
íåy_öo
);

467 
	`≠≥nd_block_¶Ÿ
(
sfs
, 
cuºít
, 
íåy_öo
, 
«me
);

468 
fûe
->
öode
.
∆öks
 ++;

469 
	}
}

472 
	$add_dú
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
∑ª¡
, c⁄° *
dú«me
, 
curfd
, 
fd
, 
öo_t
 
ªÆ
) {

473 
	`as£π
(
	`£¨ch_ˇche_öode
(
sfs
, 
ªÆ
Ë=
NULL
);

474 
ˇche_öode
 *
cuºít
 = 
	`Æloc_ˇche_öode
(
sfs
, 
ªÆ
, 0, 
SFS_TYPE_DIR
);

475 
	`öô_dú_ˇche_öode
(
cuºít
, 
∑ª¡
);

476 
	`ß„_fchdú
(
fd
), 
	`sub∑th_push
(
sfs
, 
dú«me
);

477 
	`›í_dú
(
sfs
, 
cuºít
);

478 
	`ß„_fchdú
(
curfd
), 
	`sub∑th_p›
(
sfs
);

479 
	`add_íåy
(
sfs
, 
∑ª¡
, 
cuºít
, 
dú«me
);

480 
	}
}

483 
	$add_fûe
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
, c⁄° *
fûíame
, 
fd
, 
öo_t
 
ªÆ
) {

484 
ˇche_öode
 *
fûe
;

485 i‡((
fûe
 = 
	`£¨ch_ˇche_öode
(
sfs
, 
ªÆ
)Ë=
NULL
) {

486 
fûe
 = 
	`Æloc_ˇche_öode
(
sfs
, 
ªÆ
, 0, 
SFS_TYPE_FILE
);

487 
	`›í_fûe
(
sfs
, 
fûe
, 
fûíame
, 
fd
);

489 
	`add_íåy
(
sfs
, 
cuºít
, 
fûe
, 
fûíame
);

490 
	}
}

493 
	$add_lök
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
, c⁄° *
fûíame
, 
öo_t
 
ªÆ
) {

494 
ˇche_öode
 *
fûe
 = 
	`Æloc_ˇche_öode
(
sfs
, 
ªÆ
, 0, 
SFS_TYPE_LINK
);

495 
	`›í_lök
(
sfs
, 
fûe
, 
fûíame
);

496 
	`add_íåy
(
sfs
, 
cuºít
, 
fûe
, 
fûíame
);

497 
	}
}

500 
	$›í_dú
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
) {

501 
DIR
 *
dú
;

502 i‡((
dú
 = 
	`›ídú
(".")Ë=
NULL
) {

503 
	`›í_bug
(
sfs
, 
NULL
, "opendir failed.\n");

505 
dúít
 *
dúíç
;

506 (
dúíç
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

507 c⁄° *
«me
 = 
dúíç
->
d_«me
;

508 i‡(
	`°rcmp
(
«me
, ".") == 0 || strcmp(name, "..") == 0) {

511 i‡(
«me
[0] == '.') {

514 i‡(
	`°æí
(
«me
Ë> 
SFS_MAX_FNAME_LEN
) {

515 
	`›í_bug
(
sfs
, 
NULL
, "fûê«mêi†toÿl⁄g: %s\n", 
«me
);

517 
°©
 *°© = 
	`ß„_l°©
(
«me
);

518 i‡(
	`S_ISLNK
(
°©
->
°_mode
)) {

519 
	`add_lök
(
sfs
, 
cuºít
, 
«me
, 
°©
->
°_öo
);

522 
fd
;

523 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0) {

524 
	`›í_bug
(
sfs
, 
NULL
, "›í faûed: %s\n", 
«me
);

526 i‡(
	`S_ISDIR
(
°©
->
°_mode
)) {

527 
	`add_dú
(
sfs
, 
cuºít
, 
«me
, 
	`dúfd
(
dú
), 
fd
, 
°©
->
°_öo
);

529 i‡(
	`S_ISREG
(
°©
->
°_mode
)) {

530 
	`add_fûe
(
sfs
, 
cuºít
, 
«me
, 
fd
, 
°©
->
°_öo
);

533 
mode
 = '?';

534 i‡(
	`S_ISFIFO
(
°©
->
°_mode
)Ë
mode
 = 'f';

535 i‡(
	`S_ISSOCK
(
°©
->
°_mode
)Ë
mode
 = 's';

536 i‡(
	`S_ISCHR
(
°©
->
°_mode
)Ë
mode
 = 'c';

537 i‡(
	`S_ISBLK
(
°©
->
°_mode
)Ë
mode
 = 'b';

538 
	`show_fuŒ∑th
(
sfs
, 
NULL
);

539 
	`w¨n
("unsuµ‹ãd modê%07x (%c): fûê%s\n", 
°©
->
°_mode
, 
mode
, 
«me
);

541 
	`˛o£
(
fd
);

544 
	`˛o£dú
(
dú
);

545 
	}
}

548 
	$›í_fûe
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
, 
fd
) {

549 
buf„r
[
SFS_BLKSIZE
];

550 
ssize_t
 
ªt
, 
œ°
 = 
SFS_BLKSIZE
;

551 (
ªt
 = 
	`ªad
(
fd
, 
buf„r
, (buffer))) != 0) {

552 
	`as£π
(
œ°
 =
SFS_BLKSIZE
);

553 
uöt32_t
 
öo
 = 
	`sfs_Æloc_öo
(
sfs
);

554 
	`wrôe_block
(
sfs
, 
buf„r
, 
ªt
, 
öo
);

555 
	`≠≥nd_block_size
(
sfs
, 
fûe
, 
ªt
, 
öo
, 
fûíame
);

556 
œ°
 = 
ªt
;

558 i‡(
ªt
 < 0) {

559 
	`›í_bug
(
sfs
, 
fûíame
, "read file failed.\n");

561 
	}
}

564 
	$›í_lök
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
) {

565 
buf„r
[
SFS_BLKSIZE
];

566 
uöt32_t
 
öo
 = 
	`sfs_Æloc_öo
(
sfs
);

567 
ssize_t
 
ªt
 = 
	`ªadlök
(
fûíame
, 
buf„r
, (buffer));

568 i‡(
ªt
 < 0 ||Ñë =
SFS_BLKSIZE
) {

569 
	`›í_bug
(
sfs
, 
fûíame
, "ªadÜök faûed, %d", ()
ªt
);

571 
	`wrôe_block
(
sfs
, 
buf„r
, 
ªt
, 
öo
);

572 
	`≠≥nd_block_size
(
sfs
, 
fûe
, 
ªt
, 
öo
, 
fûíame
);

573 
	}
}

576 
	$¸óã_img
(
sfs_fs
 *
sfs
, c⁄° *
home
) {

577 
curfd
, 
homefd
;

578 i‡((
curfd
 = 
	`›í
(".", 
O_RDONLY
)) < 0) {

579 
	`bug
("get current fd failed.\n");

581 i‡((
homefd
 = 
	`›í
(
home
, 
O_RDONLY
 | 
O_NOFOLLOW
)) < 0) {

582 
	`bug
("›í homêdúe˘‹y '%s' faûed.\n", 
home
);

584 
	`ß„_fchdú
(
homefd
);

585 
	`›í_dú
(
sfs
, sfs->
roŸ
);

586 
	`ß„_fchdú
(
curfd
);

587 
	`˛o£
(
curfd
), clo£(
homefd
);

588 
	`˛o£_sfs
(
sfs
);

590 
	}
}

593 
	$°©ic_check
() {

594 
	`°©ic_as£π
((
off_t
) == 8);

595 
	`°©ic_as£π
((
öo_t
) == 8);

596 
	`°©ic_as£π
(
SFS_MAX_NBLKS
 <= 0x80000000UL);

597 
	`°©ic_as£π
(
SFS_MAX_FILE_SIZE
 <= 0x80000000UL);

598 
	}
}

601 
	$maö
(
¨gc
, **
¨gv
) {

602 
	`°©ic_check
();

603 i‡(
¨gc
 != 3) {

604 
	`bug
("usage: <input *.img> <input dirname>\n");

606 c⁄° *
img«me
 = 
¨gv
[1], *
home
 =árgv[2];

607 i‡(
	`¸óã_img
(
	`›í_img
(
img«me
), 
home
) != 0) {

608 
	`bug
("create img failed.\n");

610 
	`¥ötf
("¸óã %†(%sËsuc˚ssfuŒy.\n", 
img«me
, 
home
);

612 
	}
}

	@ht-mksfs/mksfs_be.c

1 
	#_GNU_SOURCE


	)

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°dlib.h
>

5 
	~<°döt.h
>

6 
	~<limôs.h
>

7 
	~<dúít.h
>

8 
	~<uni°d.h
>

9 
	~<f˙é.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<î∫o.h
>

13 
	~<as£π.h
>

14 
	~<ídün.h
>

16 
	tboﬁ
;

18 
	#__îr‹
(
msg
, 
quô
, ...) \

20 
	`Ârötf
(
°dîr
, #msg ": fun˘i⁄ %†-Üöê%d: ", 
__FUNCTION__
, 
__LINE__
); \

21 i‡(
î∫o
 != 0) { \

22 
	`Ârötf
(
°dîr
, "[îr‹] %s: ", 
	`°ªº‹
(
î∫o
)); \

24 
	`Ârötf
(
°dîr
, "\n\t"), f¥ötf(°dîr, 
__VA_ARGS__
); \

25 
î∫o
 = 0; \

26 i‡(
quô
) { \

27 
	`exô
(-1); \

29 } 0)

	)

31 
	#w¨n
(...Ë
	`__îr‹
(
w¨n
, 0, 
__VA_ARGS__
)

	)

32 
	#bug
(...Ë
	`__îr‹
(
bug
, 1, 
__VA_ARGS__
)

	)

34 
	#°©ic_as£π
(
x
) \

35 
x
Ë{0: (x): ; }

	)

38 
	#GOLDEN_RATIO_PRIME_32
 0x9e370001UL

	)

40 
	#HASH_SHIFT
 10

	)

41 
	#HASH_LIST_SIZE
 (1 << 
HASH_SHIFT
)

	)

43 
ölöe
 
uöt32_t


44 
	$__hash32
(
uöt32_t
 
vÆ
, 
bôs
) {

45 
uöt32_t
 
hash
 = 
vÆ
 * 
GOLDEN_RATIO_PRIME_32
;

46  (
hash
 >> (32 - 
bôs
));

47 
	}
}

49 
uöt32_t


50 
	$hash32
(
uöt32_t
 
vÆ
) {

51  
	`__hash32
(
vÆ
, 
HASH_SHIFT
);

52 
	}
}

54 
uöt32_t


55 
	$hash64
(
uöt64_t
 
vÆ
) {

56  
	`__hash32
((
uöt32_t
)
vÆ
, 
HASH_SHIFT
);

57 
	}
}

60 
	$ß„_mÆloc
(
size_t
 
size
) {

61 *
ªt
;

62 i‡((
ªt
 = 
	`mÆloc
(
size
)Ë=
NULL
) {

63 
	`bug
("mÆlo¯%lu byã†Áûed.\n", ()
size
);

65  
ªt
;

66 
	}
}

69 
	$ß„_°rdup
(c⁄° *
°r
) {

70 *
ªt
;

71 i‡((
ªt
 = 
	`°rdup
(
°r
)Ë=
NULL
) {

72 
	`bug
("°rdu∞Áûed: %s\n", 
°r
);

74  
ªt
;

75 
	}
}

77 
°©
 *

78 
	$ß„_°©
(c⁄° *
fûíame
) {

79 
°©
 
__°©
;

80 i‡(
	`°©
(
fûíame
, &
__°©
) != 0) {

81 
	`bug
("°© %†Áûed.\n", 
fûíame
);

83  &
__°©
;

84 
	}
}

86 
°©
 *

87 
	$ß„_f°©
(
fd
) {

88 
°©
 
__°©
;

89 i‡(
	`f°©
(
fd
, &
__°©
) != 0) {

90 
	`bug
("f°© %d faûed.\n", 
fd
);

92  &
__°©
;

93 
	}
}

95 
°©
 *

96 
	$ß„_l°©
(c⁄° *
«me
) {

97 
°©
 
__°©
;

98 i‡(
	`l°©
(
«me
, &
__°©
) != 0) {

99 
	`bug
("l°© '%s' faûed.\n", 
«me
);

101  &
__°©
;

102 
	}
}

105 
	$ß„_fchdú
(
fd
) {

106 i‡(
	`fchdú
(
fd
) != 0) {

107 
	`bug
("fchdú faûed %d.\n", 
fd
);

109 
	}
}

111 
	#SFS_MAGIC
 0x2f8dbe2a

	)

112 
	#SFS_NDIRECT
 12

	)

113 
	#SFS_BLKSIZE
 8192

114 
	#SFS_MAX_NBLKS
 (1024UL * 512)

115 
	#SFS_MAX_INFO_LEN
 31

	)

116 
	#SFS_MAX_FNAME_LEN
 255

	)

117 
	#SFS_MAX_FILE_SIZE
 (1024UL * 1024 * 128)

118 

	)

119 
	#SFS_BLKBITS
 (
SFS_BLKSIZE
 * 
CHAR_BIT
)

	)

120 
	#SFS_TYPE_FILE
 1

	)

121 
	#SFS_TYPE_DIR
 2

	)

122 
	#SFS_TYPE_LINK
 3

	)

124 
	#SFS_BLKN_SUPER
 0

	)

125 
	#SFS_BLKN_ROOT
 1

	)

126 
	#SFS_BLKN_FREEMAP
 2

	)

128 
	gídün_buf„r
[
SFS_BLKSIZE
];

130 
	sˇche_block
 {

131 
uöt32_t
 
	möo
;

132 
ˇche_block
 *
	mhash_√xt
;

133 *
	mˇche
;

136 
	sˇche_öode
 {

137 
	söode
 {

140 
uöt32_t
 
	msize
;

141 } 
	mfûeöfo
;

143 
uöt32_t
 
	m¶Ÿs
;

144 
uöt32_t
 
	m∑ª¡
;

145 } 
	mdúöfo
;

147 
uöt16_t
 
	mty≥
;

148 
uöt16_t
 
	m∆öks
;

149 
uöt32_t
 
	mblocks
;

150 
uöt32_t
 
	mdúe˘
[
SFS_NDIRECT
];

151 
uöt32_t
 
	mödúe˘
;

152 
uöt32_t
 
	mdb_ödúe˘
;

153 } 
	möode
;

154 
öo_t
 
	mªÆ
;

155 
uöt32_t
 
	möo
;

156 
uöt32_t
 
	mnblks
;

157 
ˇche_block
 *
	ml1
, *
	ml2
;

158 
ˇche_öode
 *
	mhash_√xt
;

161 
	ssu≥r_block
 {

162 
uöt32_t
 
	mmagic
;

163 
uöt32_t
 
	mblocks
;

164 
uöt32_t
 
	munu£d_blocks
;

165 
	möfo
[
SFS_MAX_INFO_LEN
 + 1];

168 
	ssfs_fs
 {

169 
su≥r_block
 
	msu≥r
;

170 
	ssub∑th
 {

171 
sub∑th
 *
	m√xt
, *
	m¥ev
;

172 *
	msub«me
;

173 } 
	m__•_nû
, *
	m•_roŸ
, *
	m•_íd
;

174 
	mimgfd
;

175 
uöt32_t
 
	mnöos
, 
	m√xt_öo
;

176 
ˇche_öode
 *
	mroŸ
;

177 
ˇche_öode
 *
	möodes
[
HASH_LIST_SIZE
];

178 
ˇche_block
 *
	mblocks
[
HASH_LIST_SIZE
];

181 
	ssfs_íåy
 {

182 
uöt32_t
 
	möo
;

183 
	m«me
[
SFS_MAX_FNAME_LEN
 + 1];

188 
	#htobe
(
buf„r
, 
‹igö
, 
fõld
, 
bôs
) \

189 (
buf„r
)->
fõld
 = 
htobe
##
	`bôs
 ((
‹igö
)->fõld);

	)

192 
	$öode_big_ídün
 (
öode
 *inode)

194 
öode
 *
be_öode
 = (öodê*)
ídün_buf„r
;

195 
i
;

197 
öode
->
ty≥
) {

198 
SFS_TYPE_FILE
:

199 
SFS_TYPE_LINK
:

200 
	`htobe
 (
be_öode
, 
öode
, 
fûeöfo
.
size
, 32);

202 
SFS_TYPE_DIR
:

203 
	`htobe
 (
be_öode
, 
öode
, 
dúöfo
.
¶Ÿs
, 32);

204 
	`htobe
 (
be_öode
, 
öode
, 
dúöfo
.
∑ª¡
, 32);

207 
	`htobe
 (
be_öode
, 
öode
, 
ty≥
, 16);

208 
	`htobe
 (
be_öode
, 
öode
, 
∆öks
, 16);

209 
	`htobe
 (
be_öode
, 
öode
, 
blocks
, 32);

210 
i
 = 0; i < 
SFS_NDIRECT
; i++) {

211 
	`htobe
 (
be_öode
, 
öode
, 
dúe˘
[
i
], 32);

213 
	`htobe
 (
be_öode
, 
öode
, 
ödúe˘
, 32);

214 
	`htobe
 (
be_öode
, 
öode
, 
db_ödúe˘
, 32);

215 
	}
}

218 
	$su≥r_big_ídün
 (
su≥r_block
 *
su≥r
)

220 
su≥r_block
 *
be_su≥r
 = (su≥r_block *)
ídün_buf„r
;

222 
	`htobe
 (
be_su≥r
, 
su≥r
, 
magic
, 32);

223 
	`htobe
 (
be_su≥r
, 
su≥r
, 
blocks
, 32);

224 
	`htobe
 (
be_su≥r
, 
su≥r
, 
unu£d_blocks
, 32);

225 
	`mem˝y
 (
be_su≥r
->
öfo
, 
su≥r
->öfo, 
SFS_MAX_INFO_LEN
 + 1);

226 
	}
}

229 
	$íåy_big_ídün
 (
sfs_íåy
 *
íåy
)

231 
sfs_íåy
 *
be_íåy
 = (sfs_íåy *)
ídün_buf„r
;

233 
	`htobe
 (
be_íåy
, 
íåy
, 
öo
, 32);

234 
	`mem˝y
 (
be_íåy
->
«me
, 
íåy
->«me, 
SFS_MAX_FNAME_LEN
 + 1);

235 
	}
}

238 
	$ˇche_block_big_ídün
 (*
ˇche
)

240 
uöt32_t
 *
be_block_íåy
 = (uöt32_à*)
ídün_buf„r
;

241 
uöt32_t
 *
‹igöÆ_íåy
 = (uöt32_à*)
ˇche
;

243 
i
;

244 
i
 = 0; i < 
SFS_BLKSIZE
 /  (
uöt32_t
); i++, 
be_block_íåy
++, 
‹igöÆ_íåy
 ++)

245 *
be_block_íåy
 = 
	`htobe32
 (*
‹igöÆ_íåy
);

246 
	}
}

250 
uöt32_t


251 
	$sfs_Æloc_öo
(
sfs_fs
 *
sfs
) {

252 i‡(
sfs
->
√xt_öo
 < sfs->
nöos
) {

253 
sfs
->
su≥r
.
unu£d_blocks
 --;

254  
sfs
->
√xt_öo
 ++;

256 
	`bug
("out of disk space.\n");

257 
	}
}

259 
ˇche_block
 *

260 
	$Æloc_ˇche_block
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

261 
ˇche_block
 *
cb
 = 
	`ß„_mÆloc
((cache_block));

262 
cb
->
öo
 = (öÿ!0Ë? inÿ: 
	`sfs_Æloc_öo
(
sfs
);

263 
cb
->
ˇche
 = 
	`mem£t
(
	`ß„_mÆloc
(
SFS_BLKSIZE
), 0, SFS_BLKSIZE);

264 
ˇche_block
 **
hód
 = 
sfs
->
blocks
 + 
	`hash32
(
öo
);

265 
cb
->
hash_√xt
 = *
hód
, *head = cb;

266  
cb
;

267 
	}
}

269 
ˇche_block
 *

270 
	$£¨ch_ˇche_block
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

271 
ˇche_block
 *
cb
 = 
sfs
->
blocks
[
	`hash32
(
öo
)];

272 
cb
 !
NULL
 && cb->
öo
 != ino) {

273 
cb
 = cb->
hash_√xt
;

275  
cb
;

276 
	}
}

278 
ˇche_öode
 *

279 
	$Æloc_ˇche_öode
(
sfs_fs
 *
sfs
, 
öo_t
 
ªÆ
, 
uöt32_t
 
öo
, 
uöt16_t
 
ty≥
) {

280 
ˇche_öode
 *
ci
 = 
	`ß„_mÆloc
((cache_inode));

281 
ci
->
öo
 = (öÿ!0Ë? inÿ: 
	`sfs_Æloc_öo
(
sfs
);

282 
ci
->
ªÆ
 =Ñól, ci->
nblks
 = 0, ci->
l1
 = ci->
l2
 = 
NULL
;

283 
öode
 *öodê&(
ci
->inode);

284 
	`mem£t
(
öode
, 0, (inode));

285 
öode
->
ty≥
 =Åype;

286 
ˇche_öode
 **
hód
 = 
sfs
->
öodes
 + 
	`hash64
(
ªÆ
);

287 
ci
->
hash_√xt
 = *
hód
, *head = ci;

288  
ci
;

289 
	}
}

291 
ˇche_öode
 *

292 
	$£¨ch_ˇche_öode
(
sfs_fs
 *
sfs
, 
öo_t
 
ªÆ
) {

293 
ˇche_öode
 *
ci
 = 
sfs
->
öodes
[
	`hash64
(
ªÆ
)];

294 
ci
 !
NULL
 && ci->
ªÆ
 !=Ñeal) {

295 
ci
 = ci->
hash_√xt
;

297  
ci
;

298 
	}
}

301 
	$öô_dú_ˇche_öode
(
ˇche_öode
 *
cuºít
, ˇche_öodê*
∑ª¡
) {

302 
öode
 *öodê&(
cuºít
->inode);

303 
	`as£π
(
öode
->
ty≥
 =
SFS_TYPE_DIR
 && 
∑ª¡
->inode.type == SFS_TYPE_DIR);

304 
	`as£π
(
öode
->
∆öks
 =0 && inode->
dúöfo
.
¶Ÿs
 =0 && inode->dúöfo.
∑ª¡
 == 0);

305 
öode
->
∆öks
 ++, 
∑ª¡
->öode.∆ök†++, inode->
dúöfo
.∑ª¡ =Ö¨ít->
öo
;

306 
	}
}

308 
sfs_fs
 *

309 
	$¸óã_sfs
(
imgfd
) {

310 
uöt32_t
 
nöos
, 
√xt_öo
;

311 
°©
 *°© = 
	`ß„_f°©
(
imgfd
);

312 i‡((
nöos
 = 
°©
->
°_size
 / 
SFS_BLKSIZE
Ë> 
SFS_MAX_NBLKS
) {

313 
nöos
 = 
SFS_MAX_NBLKS
;

314 
	`w¨n
("img file isÅoo big (%llu bytes, only use %u blocks).\n",

315 ()
°©
->
°_size
, 
nöos
);

317 i‡((
√xt_öo
 = 
SFS_BLKN_FREEMAP
 + (
nöos
 + 
SFS_BLKBITS
 - 1) / SFS_BLKBITS) >=Çinos) {

318 
	`bug
("img file isÅoo small (%llu bytes, %u blocks, bitmap useátÜeast %u blocks).\n",

319 ()
°©
->
°_size
, 
nöos
, 
√xt_öo
 - 2);

322 
sfs_fs
 *
sfs
 = 
	`ß„_mÆloc
((sfs_fs));

323 
sfs
->
su≥r
.
magic
 = 
SFS_MAGIC
;

324 
sfs
->
su≥r
.
blocks
 = 
nöos
, sfs->su≥r.
unu£d_blocks
 =Çöo†- 
√xt_öo
;

325 
	`¢¥ötf
(
sfs
->
su≥r
.
öfo
, 
SFS_MAX_INFO_LEN
, "simple file system");

327 
sfs
->
nöos
 =Çöos, sfs->
√xt_öo
 =Çext_öo, sfs->
imgfd
 = imgfd;

328 
sfs
->
•_roŸ
 = sfs->
•_íd
 = &(sfs->
__•_nû
);

329 
sfs
->
•_íd
->
¥ev
 = sfs->•_íd->
√xt
 = 
NULL
;

331 
i
;

332 
i
 = 0; i < 
HASH_LIST_SIZE
; i ++) {

333 
sfs
->
öodes
[
i
] = 
NULL
;

334 
sfs
->
blocks
[
i
] = 
NULL
;

337 
sfs
->
roŸ
 = 
	`Æloc_ˇche_öode
(sfs, 0, 
SFS_BLKN_ROOT
, 
SFS_TYPE_DIR
);

338 
	`öô_dú_ˇche_öode
(
sfs
->
roŸ
, sfs->root);

339  
sfs
;

340 
	}
}

343 
	$sub∑th_push
(
sfs_fs
 *
sfs
, c⁄° *
sub«me
) {

344 
sub∑th
 *sub∑th = 
	`ß„_mÆloc
((subpath));

345 
sub∑th
->
sub«me
 = 
	`ß„_°rdup
(subname);

346 
sfs
->
•_íd
->
√xt
 = 
sub∑th
;

347 
sub∑th
->
¥ev
 = 
sfs
->
•_íd
;

348 
sub∑th
->
√xt
 = 
NULL
;

349 
sfs
->
•_íd
 = 
sub∑th
;

350 
	}
}

353 
	$sub∑th_p›
(
sfs_fs
 *
sfs
) {

354 
	`as£π
(
sfs
->
•_roŸ
 !sfs->
•_íd
);

355 
sub∑th
 *sub∑th = 
sfs
->
•_íd
;

356 
sfs
->
•_íd
 = sfs->•_íd->
¥ev
, sfs->•_íd->
√xt
 = 
NULL
;

357 
	`‰ì
(
sub∑th
->
sub«me
), free(subpath);

358 
	}
}

361 
	$sub∑th_show
(
FILE
 *
fout
, 
sfs_fs
 *
sfs
, c⁄° *
«me
) {

362 
sub∑th
 *sub∑th = 
sfs
->
•_roŸ
;

363 
	`Ârötf
(
fout
, "current is: /");

364 (
sub∑th
 = sub∑th->
√xt
Ë!
NULL
) {

365 
	`Ârötf
(
fout
, "%s/", 
sub∑th
->
sub«me
);

367 i‡(
«me
 !
NULL
) {

368 
	`Ârötf
(
fout
, "%s", 
«me
);

370 
	`Ârötf
(
fout
, "\n");

371 
	}
}

374 
	$wrôe_block
(
sfs_fs
 *
sfs
, *
d©a
, 
size_t
 
Àn
, 
uöt32_t
 
öo
) {

375 
	`as£π
(
Àn
 <
SFS_BLKSIZE
 && 
öo
 < 
sfs
->
nöos
);

376 
buf„r
[
SFS_BLKSIZE
];

377 i‡(
Àn
 !
SFS_BLKSIZE
) {

378 
	`mem£t
(
buf„r
, 0, (buffer));

379 
d©a
 = 
	`mem˝y
(
buf„r
, d©a, 
Àn
);

381 
off_t
 
off£t
 = (off_t)
öo
 * 
SFS_BLKSIZE
;

382 
ssize_t
 
ªt
;

383 i‡((
ªt
 = 
	`pwrôe
(
sfs
->
imgfd
, 
d©a
, 
SFS_BLKSIZE
, 
off£t
)) != SFS_BLKSIZE) {

384 
	`bug
("wrôê%u block faûed: (%d/%d).\n", 
öo
, ()
ªt
, 
SFS_BLKSIZE
);

386 
	}
}

389 
	$Êush_ˇche_block
(
sfs_fs
 *
sfs
, 
ˇche_block
 *
cb
) {

392 
	`ˇche_block_big_ídün
 (
cb
->
ˇche
);

394 
	`wrôe_block
 (
sfs
, 
ídün_buf„r
, 
SFS_BLKSIZE
, 
cb
->
öo
);

396 
	}
}

399 
	$Êush_ˇche_öode
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
ci
) {

402 
	`öode_big_ídün
 (&(
ci
->
öode
));

404 
	`wrôe_block
(
sfs
, 
ídün_buf„r
, (
ci
->
öode
), ci->
öo
);

406 
	}
}

409 
	$˛o£_sfs
(
sfs_fs
 *
sfs
) {

410 
buf„r
[
SFS_BLKSIZE
];

411 
uöt32_t
 
i
, 
j
, 
öo
 = 
SFS_BLKN_FREEMAP
;

412 
uöt32_t
 
nöos
 = 
sfs
->nöos, 
√xt_öo
 = sfs->next_ino;

413 
i
 = 0; i < 
nöos
; 
öo
 ++, i +
SFS_BLKBITS
) {

414 
	`mem£t
(
buf„r
, 0, (buffer));

415 i‡(
i
 + 
SFS_BLKBITS
 > 
√xt_öo
) {

416 
uöt32_t
 
°¨t
 = 0, 
íd
 = 
SFS_BLKBITS
;

417 i‡(
i
 < 
√xt_öo
) {

418 
°¨t
 = 
√xt_öo
 - 
i
;

420 i‡(
i
 + 
SFS_BLKBITS
 > 
nöos
) {

421 
íd
 = 
nöos
 - 
i
;

423 
uöt32_t
 *
d©a
 = (uöt32_à*)
buf„r
;

424 c⁄° 
uöt32_t
 
bôs
 = (bôsË* 
CHAR_BIT
;

425 
j
 = 
°¨t
; j < 
íd
; j ++) {

426 
d©a
[
j
 / 
bôs
] |= (1 << (j % bits));

435 
	`ˇche_block_big_ídün
 (
buf„r
);

436 
	`wrôe_block
(
sfs
, 
ídün_buf„r
, ”ndün_buf„r), 
öo
);

441 
	`su≥r_big_ídün
 (&(
sfs
->
su≥r
));

443 
	`wrôe_block
(
sfs
, 
ídün_buf„r
, (sfs->
su≥r
), 
SFS_BLKN_SUPER
);

446 
i
 = 0; i < 
HASH_LIST_SIZE
; i ++) {

447 
ˇche_block
 *
cb
 = 
sfs
->
blocks
[
i
];

448 
cb
 !
NULL
) {

449 
	`Êush_ˇche_block
(
sfs
, 
cb
);

450 
cb
 = cb->
hash_√xt
;

452 
ˇche_öode
 *
ci
 = 
sfs
->
öodes
[
i
];

453 
ci
 !
NULL
) {

454 
	`Êush_ˇche_öode
(
sfs
, 
ci
);

455 
ci
 = ci->
hash_√xt
;

458 
	}
}

460 
sfs_fs
 *

461 
	$›í_img
(c⁄° *
img«me
) {

462 c⁄° *
ex≥˘
 = ".img", *
ext
 = 
img«me
 + 
	`°æí
(imgname) - strlen(expect);

463 i‡(
ext
 <
img«me
 || 
	`°rcmp
”xt, 
ex≥˘
) != 0) {

464 
	`bug
("övÆid .img fûê«mê'%s'.\n", 
img«me
);

466 
imgfd
;

467 i‡((
imgfd
 = 
	`›í
(
img«me
, 
O_WRONLY
)) < 0) {

468 
	`bug
("›í '%s' faûed.\n", 
img«me
);

470  
	`¸óã_sfs
(
imgfd
);

471 
	}
}

473 
	#›í_bug
(
sfs
, 
«me
, ...) \

475 
	`sub∑th_show
(
°dîr
, 
sfs
, 
«me
); \

476 
	`bug
(
__VA_ARGS__
); \

477 } 0)

	)

479 
	#show_fuŒ∑th
(
sfs
, 
«me
Ë
	`sub∑th_show
(
°dîr
, sfs,Çame)

	)

481 
›í_dú
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
);

482 
›í_fûe
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
, 
fd
);

483 
›í_lök
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
);

485 
	#SFS_BLK_NENTRY
 (
SFS_BLKSIZE
 / (
uöt32_t
))

	)

486 
	#SFS_L0_NBLKS
 
SFS_NDIRECT


	)

487 
	#SFS_L1_NBLKS
 (
SFS_BLK_NENTRY
 + 
SFS_L0_NBLKS
)

	)

488 
	#SFS_L2_NBLKS
 (
SFS_BLK_NENTRY
 * SFS_BLK_NENTRY + 
SFS_L1_NBLKS
)

	)

489 
	#SFS_LN_NBLKS
 (
SFS_MAX_FILE_SIZE
 / 
SFS_BLKSIZE
)

	)

492 
	$upd©e_ˇche
(
sfs_fs
 *
sfs
, 
ˇche_block
 **
cbp
, 
uöt32_t
 *
ö›
) {

493 
uöt32_t
 
öo
 = *
ö›
;

494 
ˇche_block
 *
cb
 = *
cbp
;

495 i‡(
öo
 == 0) {

496 
cb
 = 
	`Æloc_ˇche_block
(
sfs
, 0);

497 
öo
 = 
cb
->ino;

499 i‡(
cb
 =
NULL
 || cb->
öo
 != ino) {

500 
cb
 = 
	`£¨ch_ˇche_block
(
sfs
, 
öo
);

501 
	`as£π
(
cb
 !
NULL
 && cb->
öo
 == ino);

503 *
cbp
 = 
cb
, *
ö›
 = 
öo
;

504 
	}
}

507 
	$__≠≥nd_block
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, 
uöt32_t
 
öo
, c⁄° *
fûíame
) {

508 
	`°©ic_as£π
(
SFS_LN_NBLKS
 <
SFS_L2_NBLKS
);

509 
uöt32_t
 
nblks
 = 
fûe
->nblks;

510 
öode
 *öodê&(
fûe
->inode);

511 i‡(
nblks
 >
SFS_LN_NBLKS
) {

512 
	`›í_bug
(
sfs
, 
fûíame
, "file isÅoo big.\n");

514 i‡(
nblks
 < 
SFS_L0_NBLKS
) {

515 
öode
->
dúe˘
[
nblks
] = 
öo
;

517 i‡(
nblks
 < 
SFS_L1_NBLKS
) {

518 
nblks
 -
SFS_L0_NBLKS
;

519 
	`upd©e_ˇche
(
sfs
, &(
fûe
->
l1
), &(
öode
->
ödúe˘
));

520 
uöt32_t
 *
d©a
 = 
fûe
->
l1
->
ˇche
;

521 
d©a
[
nblks
] = 
öo
;

523 i‡(
nblks
 < 
SFS_L2_NBLKS
) {

524 
nblks
 -
SFS_L1_NBLKS
;

525 
	`upd©e_ˇche
(
sfs
, &(
fûe
->
l2
), &(
öode
->
db_ödúe˘
));

526 
uöt32_t
 *
d©a2
 = 
fûe
->
l2
->
ˇche
;

527 
	`upd©e_ˇche
(
sfs
, &(
fûe
->
l1
), &
d©a2
[
nblks
 / 
SFS_BLK_NENTRY
]);

528 
uöt32_t
 *
d©a1
 = 
fûe
->
l1
->
ˇche
;

529 
d©a1
[
nblks
 % 
SFS_BLK_NENTRY
] = 
öo
;

531 
fûe
->
nblks
 ++;

532 
öode
->
blocks
 ++;

533 
	}
}

536 
	$≠≥nd_block_size
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, 
size_t
 
size
, 
uöt32_t
 
öo
, c⁄° *
fûíame
) {

537 
öode
 *öodê&(
fûe
->inode);

538 
	`as£π
(
öode
->
ty≥
 !
SFS_TYPE_DIR
 && 
size
 !0 && sizê<
SFS_BLKSIZE
);

539 
	`as£π
(
öode
->
fûeöfo
.
size
 % 
SFS_BLKSIZE
 == 0);

540 
öode
->
fûeöfo
.
size
 += size;

541 
	`__≠≥nd_block
(
sfs
, 
fûe
, 
öo
, 
fûíame
);

542 
	}
}

545 
	$≠≥nd_block_¶Ÿ
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, 
uöt32_t
 
öo
, c⁄° *
fûíame
) {

546 
öode
 *öodê&(
fûe
->inode);

547 
	`as£π
(
öode
->
ty≥
 =
SFS_TYPE_DIR
);

548 
öode
->
dúöfo
.
¶Ÿs
 ++;

549 
	`__≠≥nd_block
(
sfs
, 
fûe
, 
öo
, 
fûíame
);

550 
	}
}

553 
	$add_íåy
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
, ˇche_öodê*
fûe
, c⁄° *
«me
) {

554 
sfs_íåy
 
__íåy
, *
íåy
 = &__entry;

555 
	`as£π
(
cuºít
->
öode
.
ty≥
 =
SFS_TYPE_DIR
 && 
	`°æí
(
«me
Ë<
SFS_MAX_FNAME_LEN
);

556 
íåy
->
öo
 = 
fûe
->öo, 
	`°r˝y
”¡ry->
«me
,Çame);

557 
uöt32_t
 
íåy_öo
 = 
	`sfs_Æloc_öo
(
sfs
);

560 
	`íåy_big_ídün
 (
íåy
);

562 
	`wrôe_block
(
sfs
, 
ídün_buf„r
, (
íåy
->
«me
), 
íåy_öo
);

564 
	`≠≥nd_block_¶Ÿ
(
sfs
, 
cuºít
, 
íåy_öo
, 
«me
);

565 
fûe
->
öode
.
∆öks
 ++;

566 
	}
}

569 
	$add_dú
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
∑ª¡
, c⁄° *
dú«me
, 
curfd
, 
fd
, 
öo_t
 
ªÆ
) {

570 
	`as£π
(
	`£¨ch_ˇche_öode
(
sfs
, 
ªÆ
Ë=
NULL
);

571 
ˇche_öode
 *
cuºít
 = 
	`Æloc_ˇche_öode
(
sfs
, 
ªÆ
, 0, 
SFS_TYPE_DIR
);

572 
	`öô_dú_ˇche_öode
(
cuºít
, 
∑ª¡
);

573 
	`ß„_fchdú
(
fd
), 
	`sub∑th_push
(
sfs
, 
dú«me
);

574 
	`›í_dú
(
sfs
, 
cuºít
);

575 
	`ß„_fchdú
(
curfd
), 
	`sub∑th_p›
(
sfs
);

576 
	`add_íåy
(
sfs
, 
∑ª¡
, 
cuºít
, 
dú«me
);

577 
	}
}

580 
	$add_fûe
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
, c⁄° *
fûíame
, 
fd
, 
öo_t
 
ªÆ
) {

581 
ˇche_öode
 *
fûe
;

582 i‡((
fûe
 = 
	`£¨ch_ˇche_öode
(
sfs
, 
ªÆ
)Ë=
NULL
) {

583 
fûe
 = 
	`Æloc_ˇche_öode
(
sfs
, 
ªÆ
, 0, 
SFS_TYPE_FILE
);

584 
	`›í_fûe
(
sfs
, 
fûe
, 
fûíame
, 
fd
);

586 
	`add_íåy
(
sfs
, 
cuºít
, 
fûe
, 
fûíame
);

587 
	}
}

590 
	$add_lök
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
, c⁄° *
fûíame
, 
öo_t
 
ªÆ
) {

591 
ˇche_öode
 *
fûe
 = 
	`Æloc_ˇche_öode
(
sfs
, 
ªÆ
, 0, 
SFS_TYPE_LINK
);

592 
	`›í_lök
(
sfs
, 
fûe
, 
fûíame
);

593 
	`add_íåy
(
sfs
, 
cuºít
, 
fûe
, 
fûíame
);

594 
	}
}

597 
	$›í_dú
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
cuºít
) {

598 
DIR
 *
dú
;

599 i‡((
dú
 = 
	`›ídú
(".")Ë=
NULL
) {

600 
	`›í_bug
(
sfs
, 
NULL
, "opendir failed.\n");

602 
dúít
 *
dúíç
;

603 (
dúíç
 = 
	`ªaddú
(
dú
)Ë!
NULL
) {

604 c⁄° *
«me
 = 
dúíç
->
d_«me
;

605 i‡(
	`°rcmp
(
«me
, ".") == 0 || strcmp(name, "..") == 0) {

608 i‡(
«me
[0] == '.') {

611 i‡(
	`°æí
(
«me
Ë> 
SFS_MAX_FNAME_LEN
) {

612 
	`›í_bug
(
sfs
, 
NULL
, "fûê«mêi†toÿl⁄g: %s\n", 
«me
);

614 
°©
 *°© = 
	`ß„_l°©
(
«me
);

615 i‡(
	`S_ISLNK
(
°©
->
°_mode
)) {

616 
	`add_lök
(
sfs
, 
cuºít
, 
«me
, 
°©
->
°_öo
);

619 
fd
;

620 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0) {

621 
	`›í_bug
(
sfs
, 
NULL
, "›í faûed: %s\n", 
«me
);

623 i‡(
	`S_ISDIR
(
°©
->
°_mode
)) {

624 
	`add_dú
(
sfs
, 
cuºít
, 
«me
, 
	`dúfd
(
dú
), 
fd
, 
°©
->
°_öo
);

626 i‡(
	`S_ISREG
(
°©
->
°_mode
)) {

627 
	`add_fûe
(
sfs
, 
cuºít
, 
«me
, 
fd
, 
°©
->
°_öo
);

630 
mode
 = '?';

631 i‡(
	`S_ISFIFO
(
°©
->
°_mode
)Ë
mode
 = 'f';

632 i‡(
	`S_ISSOCK
(
°©
->
°_mode
)Ë
mode
 = 's';

633 i‡(
	`S_ISCHR
(
°©
->
°_mode
)Ë
mode
 = 'c';

634 i‡(
	`S_ISBLK
(
°©
->
°_mode
)Ë
mode
 = 'b';

635 
	`show_fuŒ∑th
(
sfs
, 
NULL
);

636 
	`w¨n
("unsuµ‹ãd modê%07x (%c): fûê%s\n", 
°©
->
°_mode
, 
mode
, 
«me
);

638 
	`˛o£
(
fd
);

641 
	`˛o£dú
(
dú
);

642 
	}
}

645 
	$›í_fûe
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
, 
fd
) {

646 
buf„r
[
SFS_BLKSIZE
];

647 
ssize_t
 
ªt
, 
œ°
 = 
SFS_BLKSIZE
;

648 (
ªt
 = 
	`ªad
(
fd
, 
buf„r
, (buffer))) != 0) {

649 
	`as£π
(
œ°
 =
SFS_BLKSIZE
);

650 
uöt32_t
 
öo
 = 
	`sfs_Æloc_öo
(
sfs
);

652 
	`wrôe_block
(
sfs
, 
buf„r
, 
ªt
, 
öo
);

653 
	`≠≥nd_block_size
(
sfs
, 
fûe
, 
ªt
, 
öo
, 
fûíame
);

654 
œ°
 = 
ªt
;

656 i‡(
ªt
 < 0) {

657 
	`›í_bug
(
sfs
, 
fûíame
, "read file failed.\n");

659 
	}
}

662 
	$›í_lök
(
sfs_fs
 *
sfs
, 
ˇche_öode
 *
fûe
, c⁄° *
fûíame
) {

663 
buf„r
[
SFS_BLKSIZE
];

664 
uöt32_t
 
öo
 = 
	`sfs_Æloc_öo
(
sfs
);

665 
ssize_t
 
ªt
 = 
	`ªadlök
(
fûíame
, 
buf„r
, (buffer));

666 i‡(
ªt
 < 0 ||Ñë =
SFS_BLKSIZE
) {

667 
	`›í_bug
(
sfs
, 
fûíame
, "ªadÜök faûed, %d", ()
ªt
);

669 
	`wrôe_block
(
sfs
, 
buf„r
, 
ªt
, 
öo
);

670 
	`≠≥nd_block_size
(
sfs
, 
fûe
, 
ªt
, 
öo
, 
fûíame
);

671 
	}
}

674 
	$¸óã_img
(
sfs_fs
 *
sfs
, c⁄° *
home
) {

675 
curfd
, 
homefd
;

676 i‡((
curfd
 = 
	`›í
(".", 
O_RDONLY
)) < 0) {

677 
	`bug
("get current fd failed.\n");

679 i‡((
homefd
 = 
	`›í
(
home
, 
O_RDONLY
 | 
O_NOFOLLOW
)) < 0) {

680 
	`bug
("›í homêdúe˘‹y '%s' faûed.\n", 
home
);

682 
	`ß„_fchdú
(
homefd
);

683 
	`›í_dú
(
sfs
, sfs->
roŸ
);

684 
	`ß„_fchdú
(
curfd
);

685 
	`˛o£
(
curfd
), clo£(
homefd
);

686 
	`˛o£_sfs
(
sfs
);

688 
	}
}

691 
	$°©ic_check
() {

692 
	`°©ic_as£π
((
off_t
) == 8);

693 
	`°©ic_as£π
((
öo_t
) == 8);

694 
	`°©ic_as£π
(
SFS_MAX_NBLKS
 <= 0x80000000UL);

695 
	`°©ic_as£π
(
SFS_MAX_FILE_SIZE
 <= 0x80000000UL);

696 
	}
}

699 
	$maö
(
¨gc
, **
¨gv
) {

700 
	`°©ic_check
();

701 i‡(
¨gc
 != 3) {

702 
	`bug
("usage: <input *.img> <input dirname>\n");

704 c⁄° *
img«me
 = 
¨gv
[1], *
home
 =árgv[2];

705 i‡(
	`¸óã_img
(
	`›í_img
(
img«me
), 
home
) != 0) {

706 
	`bug
("create img failed.\n");

708 
	`¥ötf
("¸óã %†(%sËsuc˚ssfuŒy.\n", 
img«me
, 
home
);

710 
	}
}

	@ht-sign/i386/sign.c

1 
	~<°dio.h
>

2 
	~<î∫o.h
>

3 
	~<°rög.h
>

4 
	~<sys/°©.h
>

7 
	$maö
(
¨gc
, *
¨gv
[]) {

8 
°©
 
°
;

9 i‡(
¨gc
 != 3) {

10 
	`Ârötf
(
°dîr
, "Usage: <input filename> <output filename>\n");

13 i‡(
	`°©
(
¨gv
[1], &
°
) != 0) {

14 
	`Ârötf
(
°dîr
, "Eº‹ o≥nög fûê'%s': %s\n", 
¨gv
[1], 
	`°ªº‹
(
î∫o
));

17 
	`¥ötf
("'%s' size: %Œd byãs\n", 
¨gv
[1], ()
°
.
°_size
);

18 i‡(
°
.
°_size
 > 510) {

19 
	`Ârötf
(
°dîr
, "%Œd >> 510!!\n", ()
°
.
°_size
);

22 
buf
[512];

23 
	`mem£t
(
buf
, 0, (buf));

24 
FILE
 *
iÂ
 = 
	`f›í
(
¨gv
[1], "rb");

25 
size
 = 
	`‰ód
(
buf
, 1, 
°
.
°_size
, 
iÂ
);

26 i‡(
size
 !
°
.
°_size
) {

27 
	`Ârötf
(
°dîr
, "ªad '%s'Éº‹, sizêi†%d.\n", 
¨gv
[1], 
size
);

30 
	`f˛o£
(
iÂ
);

31 
buf
[510] = 0x55;

32 
buf
[511] = 0xAA;

33 
FILE
 *
oÂ
 = 
	`f›í
(
¨gv
[2], "wb+");

34 
size
 = 
	`fwrôe
(
buf
, 1, 512, 
oÂ
);

35 i‡(
size
 != 512) {

36 
	`Ârötf
(
°dîr
, "wrôê'%s'Éº‹, sizêi†%d.\n", 
¨gv
[2], 
size
);

39 
	`f˛o£
(
oÂ
);

40 
	`¥ötf
("buûd 512 byã†boŸ se˘‹: '%s' suc˚ss!\n", 
¨gv
[2]);

42 
	}
}

	@ht-sign/or32/sign.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<f˙é.h
>

4 
	~<ídün.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

9 
	tuöt8_t
;

10 
	tuöt16_t
;

11 
	tuöt32_t
;

13 
	#BOOTBLOCK_MAX_SIZE
 446

	)

14 
	#BLOCK_SIZE
 512

	)

16 
	s∑πôi⁄_öfo_íåy


18 
uöt8_t
 
	mÊag
;

19 
uöt8_t
 
	m∑ddög1
;

20 
uöt32_t
 
	m°¨t
;

21 
uöt32_t
 
	msize
;

22 
uöt32_t
 
	m∑ddög2
;

23 
uöt16_t
 
	m∑ddög3
;

24 } 
__©åibuã__
((
∑cked
));

26 
	#PARTITION_UNIT
 0x8000

	)

27 
	#PARTITION_ENTRY_FLAG_BOOTABLE
 0x80

	)

28 
	#PARTITION_ENTRY_FLAG_VALID
 0x1

	)

30 
	gbuf„r
[
BLOCK_SIZE
];

32 
	$maö
 (
¨gc
, * 
¨gv
[])

34 i‡(
¨gc
 < 3) {

35 
	`¥ötf
 ("ußge: %†<dev/fûê«me> <boŸblock> [<∑π1> <∑π2> ...]\n", 
¨gv
[0]);

39 
disk
 = 
	`›í
 (
¨gv
[1], 
O_WRONLY
 | 
O_CREAT
);

40 i‡(
disk
 < 0) {

41 
	`¥ötf
 ("ˇ¬Ÿ o≥¿dev: %s\n", 
¨gv
[1]);

45 
boŸblock
 = 
	`›í
 (
¨gv
[2], 
O_RDONLY
);

46 i‡(
boŸblock
 < 0) {

47 
	`¥ötf
 ("ˇ¬Ÿ o≥¿boŸblock fûe: %s\n", 
¨gv
[2]);

51 
i
;

55 
∑πs
[4] = {0, 0, 0, 0};

56 
i
 = 3; i < 
¨gc
; i++) {

57 i‡(
i
 >= 6) {

58 
	`¥ötf
 ("warning:Åoo muchÖartitions. onlyÅhe first fouráre handled.");

61 i‡((
∑πs
[
i
-3] = 
	`›í
 (
¨gv
[i], 
O_RDONLY
)) < 0) {

62 
	`¥ötf
 ("ˇ¬Ÿ o≥¿fûe: %s\n", 
¨gv
[
i
]);

68 
°©
 
fûe_°©us
;

69 
∑πôi⁄_öfo_íåy
 
íåõs
[4];

70 
uöt32_t
 
√xt_block
 = 1, 
íd
, 
ƒ_unô
;

71 
uöt32_t
 
a˘uÆ_blocks
;

74 i‡(
	`f°©
 (
boŸblock
, &
fûe_°©us
) < 0) {

75 
	`¥ötf
 ("cannot get status ofÅhe bootblock\n");

78 i‡(
fûe_°©us
.
°_size
 > 
BOOTBLOCK_MAX_SIZE
) {

79 
	`¥ötf
 ("boŸblock i†%d byãs, which i†toÿLARGE!!!\n", (
uöt32_t
)
fûe_°©us
.
°_size
);

82 
	`l£ek
 (
disk
, 0, 
SEEK_SET
);

83 
	`ªad
 (
boŸblock
, &
buf„r
, 
fûe_°©us
.
°_size
);

84 
	`wrôe
 (
disk
, &
buf„r
, 
fûe_°©us
.
°_size
);

87 
	`mem£t
 (&
íåõs
, 0,  (entries));

88 
i
 = 0; i < 4; i++) {

89 i‡(
∑πs
[
i
] != 0) {

90 i‡(
	`f°©
 (
∑πs
[
i
], &
fûe_°©us
) < 0) {

91 
	`¥ötf
 ("ˇ¬Ÿ gë sètu†o‡thêfûê%d.", 
i
);

94 i‡(
fûe_°©us
.
°_size
 == 0)

96 
íåõs
[
i
].
Êag
 |
PARTITION_ENTRY_FLAG_VALID
;

97 
ƒ_unô
 = (
√xt_block
*
BLOCK_SIZE
 + 
fûe_°©us
.
°_size
 - 1Ë/ (
PARTITION_UNIT
 * BLOCK_SIZE) + 1;

98 
íd
 = 
ƒ_unô
 * 
PARTITION_UNIT
;

99 
íåõs
[
i
].
°¨t
 = 
√xt_block
;

100 
íåõs
[
i
].
size
 = 
íd
 - 
√xt_block
;

101 
√xt_block
 = 
íd
;

104 
j
;

105 
a˘uÆ_blocks
 = (
fûe_°©us
.
°_size
 - 1Ë/ 
BLOCK_SIZE
 + 1;

106 
	`l£ek
 (
disk
, 
íåõs
[
i
].
°¨t
 * 
BLOCK_SIZE
, 
SEEK_SET
);

107 
j
 = 0; j < 
a˘uÆ_blocks
; j++) {

108 
	`ªad
 (
∑πs
[
i
], &
buf„r
, 
BLOCK_SIZE
);

109 
	`wrôe
 (
disk
, &
buf„r
, 
BLOCK_SIZE
);

113 
íåõs
[
i
].
Êag
 |
PARTITION_ENTRY_FLAG_VALID
;

114 
íd
 = 0x40000;

115 
íåõs
[
i
].
°¨t
 = 
√xt_block
;

116 
íåõs
[
i
].
size
 = 
íd
;

124 
íåõs
[0].
Êag
 |
PARTITION_ENTRY_FLAG_BOOTABLE
;

125 
i
 = 0; i < 4; i++) {

126 
íåõs
[
i
].
°¨t
 = 
	`htobe32
 (entries[i].start);

127 
íåõs
[
i
].
size
 = 
	`htobe32
 (entries[i].size);

130 
	`l£ek
 (
disk
, 
BLOCK_SIZE
 - 66, 
SEEK_SET
);

131 
	`wrôe
 (
disk
, (*)&
íåõs
,  (entries));

134 
buf„r
[0] = 0x55;

135 
buf„r
[1] = 0xAA;

136 
	`wrôe
 (
disk
, &
buf„r
, 2);

139 
	`¥ötf
 ("The image is created successfully.\n");

142 
	}
}

	@ht-sign/x86_64/sign.c

1 
	~<°dio.h
>

2 
	~<î∫o.h
>

3 
	~<°rög.h
>

4 
	~<sys/°©.h
>

7 
	$maö
(
¨gc
, *
¨gv
[]) {

8 
°©
 
°
;

9 i‡(
¨gc
 != 3) {

10 
	`Ârötf
(
°dîr
, "Usage: <input filename> <output filename>\n");

13 i‡(
	`°©
(
¨gv
[1], &
°
) != 0) {

14 
	`Ârötf
(
°dîr
, "Eº‹ o≥nög fûê'%s': %s\n", 
¨gv
[1], 
	`°ªº‹
(
î∫o
));

17 
	`¥ötf
("'%s' size: %Œd byãs\n", 
¨gv
[1], ()
°
.
°_size
);

18 i‡(
°
.
°_size
 > 510) {

19 
	`Ârötf
(
°dîr
, "%Œd >> 510!!\n", ()
°
.
°_size
);

22 
buf
[512];

23 
	`mem£t
(
buf
, 0, (buf));

24 
FILE
 *
iÂ
 = 
	`f›í
(
¨gv
[1], "rb");

25 
size
 = 
	`‰ód
(
buf
, 1, 
°
.
°_size
, 
iÂ
);

26 i‡(
size
 !
°
.
°_size
) {

27 
	`Ârötf
(
°dîr
, "ªad '%s'Éº‹, sizêi†%d.\n", 
¨gv
[1], 
size
);

30 
	`f˛o£
(
iÂ
);

31 
buf
[510] = 0x55;

32 
buf
[511] = 0xAA;

33 
FILE
 *
oÂ
 = 
	`f›í
(
¨gv
[2], "wb+");

34 
size
 = 
	`fwrôe
(
buf
, 1, 512, 
oÂ
);

35 i‡(
size
 != 512) {

36 
	`Ârötf
(
°dîr
, "wrôê'%s'Éº‹, sizêi†%d.\n", 
¨gv
[2], 
size
);

39 
	`f˛o£
(
oÂ
);

40 
	`¥ötf
("buûd 512 byã†boŸ se˘‹: '%s' suc˚ss!\n", 
¨gv
[2]);

42 
	}
}

	@kern-module/mod-add/mod_main.c

2 
	$add
(
a
, 
b
, *
c
) {

3 *
c
 = 
a
 + 
b
;

5 
	}
}

7 
	$öô_moduÀ
() {

8 
	`k¥ötf
("[ MM ] init mod-add\n");

9 
	`ªgi°î_mod_add
(
add
);

10 
	`k¥ötf
("[ MM ] init mod-add done\n");

11 
	}
}

13 
	$˛ónup_moduÀ
() {

14 
	`k¥ötf
("[ MM ] cleanup module mod-add\n");

15 
	`uƒegi°î_mod_add
();

16 
	`k¥ötf
("[ MM ] cleanup module mod-add done\n");

17 
	}
}

	@kern-module/mod-mul/mod_main.c

2 
	~<ty≥s.h
>

3 
	~<mod.h
>

5 
	$mul
(
a
, 
b
, *
c
) {

6 i‡(
moduÀ_func_add
 =
NULL
) {

9 
i
 = 0;

10 i‡(
a
 > 
b
) {

11 
tmp
 = 
b
;

12 
b
 = 
a
;

13 
a
 = 
tmp
;

15 *
c
 = 0;

16 ; 
i
 < 
a
; i++) {

17 
	`moduÀ_func_add
(*
c
, 
b
, c);

20 
	}
}

22 
	$öô_moduÀ
() {

23 
	`k¥ötf
("[ MM ] init mod-mul\n");

24 
	`ªgi°î_mod_mul
(
mul
);

25 
	`k¥ötf
("[ MM ] init mod-mul done\n");

26 
	}
}

28 
	$˛ónup_moduÀ
() {

29 
	`k¥ötf
("[ MM ] cleanup mod-mul\n");

30 
	`uƒegi°î_mod_mul
();

31 
	`k¥ötf
("[ MM ] cleanup mod-mul done\n");

32 
	}
}

	@kern-river/debug/io.c

1 
	~<debug/io.h
>

2 
	~<libs/x86/•ölock.h
>

3 
	~<libs/¥ötfmt.h
>

4 
	~<glue_öå.h
>

5 
	~<glue_kio.h
>

12 
	$˝utch
(
c
, *
˙t
) {

13 
	`kc⁄s_putc
(
c
);

14 (*
˙t
) ++;

15 
	}
}

17 
•ölock_s
 
	gk¥ötf_lock
 = {0};

29 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
) {

30 
˙t
 = 0;

31 
Êag
;

32 
	`loˇl_öå_ßve_hw
(
Êag
);

33 
	`•ölock_acquúe
(&
k¥ötf_lock
);

34 
	`v¥ötfmt
((*)
˝utch
, &
˙t
, 
fmt
, 
≠
);

35 
	`•ölock_ªÀa£
(&
k¥ötf_lock
);

36 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

37  
˙t
;

38 
	}
}

47 
	$k¥ötf
(c⁄° *
fmt
, ...) {

48 
va_li°
 
≠
;

49 
˙t
;

50 
	`va_°¨t
(
≠
, 
fmt
);

51 
˙t
 = 
	`vk¥ötf
(
fmt
, 
≠
);

52 
	`va_íd
(
≠
);

53  
˙t
;

54 
	}
}

	@kern-river/debug/io.h

1 #i‚de‡
__RIVER_DEBUGIO_H__


2 
	#__RIVER_DEBUGIO_H__


	)

4 
	~<libs/ty≥s.h
>

5 
	~<libs/°d¨g.h
>

7 
k¥ötf
(c⁄° *
fmt
, ...);

8 
vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
);

	@kern-river/drivers/hpet.c

1 
	~<drivîs/h≥t.h
>

2 
	~<mp/mp.h
>

3 
	~<glue_pmm.h
>

4 
	~<glue_tick.h
>

5 
	~<debug/io.h
>

6 
	~<libs/x86.h
>

8 vﬁ©ûê
uöt64_t
 *
	gh≥t_ªgs
;

10 vﬁ©ûêc⁄° 
uöt64_t
 *
	gh≥t_tick
;

11 
uöt64_t
 
	gh≥t_tick_‰eq
;

13 
	gh≥t_timî_cou¡
;

14 
uöt32_t
 
	gh≥t_≥riod
;

16 
	#HR_GEN_CAP_ID
 0

	)

17 
	#HR_GEN_CONF
 2

	)

18 
	#HR_IRQ_STATUS
 4

	)

19 
	#HR_MAIN_COUNTER_VALUE
 30

	)

21 
	#HRT_BASE
(
n
Ë(“ << 2Ë+ 32)

	)

22 
	#HRT_CONF
(
n
Ë(
	`HRT_BASE
“Ë+ 0)

	)

23 
	#HRT_COMP
(
n
Ë(
	`HRT_BASE
“Ë+ 1)

	)

24 
	#HRT_FSB_INT
(
n
Ë(
	`HRT_BASE
“Ë+ 2)

	)

27 
	$h≥t_íabÀ_timî
(
t
)

29 
uöt64_t
 
id
 = 
h≥t_ªgs
[
	`HRT_CONF
(
t
)];

31 
id
 &~((
uöt64_t
)1 << 14);

33 i‡(
id
 & ((
uöt64_t
)1 << 4))

34 
id
 &~((
uöt64_t
)1 << 3);

36 
id
 &~((
uöt64_t
)0x1f << 9);

37 
id
 |((
uöt64_t
)2 << 9);

39 
id
 |((
uöt64_t
)1 << 2);

40 
id
 &~((
uöt64_t
)1 << 1);

42 
h≥t_ªgs
[
	`HRT_CONF
(
t
)] = 
id
;

43 
	}
}

45 vﬁ©ûê
	gh≥t_ªady
 = 0;

48 
	$h≥t_öô
()

50 i‡(
l˝u_idx
 == 0)

52 
h≥t_ªgs
 = (vﬁ©ûê
uöt64_t
 *)
	`KADDR_DIRECT
(
	`h≥t_phys_gë
());

54 
uöt32_t
 
id_hi
 = 
h≥t_ªgs
[
HR_GEN_CAP_ID
] >> 32;

55 
uöt32_t
 
id_lo
 = 
h≥t_ªgs
[
HR_GEN_CAP_ID
];

58 
	`k¥ötf
("HPET INFO[%08x %08x]:\nÑev_id 0x%02x hpet_timers: %d width: %dÖeriod: %d (10^-15 s)\n",

59 
id_hi
, 
id_lo
,

60 
id_lo
 & 0xff, (id_lÿ>> 8Ë& 0xf, (id_lÿ& (1 << 13)Ë? 64 : 32, 
id_hi
);

63 
h≥t_≥riod
 = 
id_hi
;

64 
h≥t_timî_cou¡
 = (
id_lo
 >> 8) & 0xf;

67 
h≥t_ªgs
[
HR_GEN_CONF
] = 1;

68 
h≥t_tick
 = (vﬁ©ûê
uöt64_t
 *)(
h≥t_ªgs
 + 
HR_MAIN_COUNTER_VALUE
);

70 
h≥t_tick_‰eq
 = 1000000000000000.0 / 
h≥t_≥riod
;

71 
	`k¥ötf
("HPET FREQ = %d\n", 
h≥t_tick_‰eq
);

73 
h≥t_ªady
 = 1;

78 
h≥t_ªady
 =0Ë
	`b¨rõr
();

81 
	}
}

	@kern-river/drivers/hpet.h

1 #i‚de‡
__RIVER_HPET_H__


2 
	#__RIVER_HPET_H__


	)

4 
	~<libs/ty≥s.h
>

6 vﬁ©ûêc⁄° 
uöt64_t
 *
h≥t_tick
;

7 
uöt64_t
 
h≥t_tick_‰eq
;

9 
h≥t_öô
();

	@kern-river/drivers/pci.c

1 
	~<drivîs/pcúeg.h
>

2 
	~<libs/x86.h
>

3 
	~<libs/°rög.h
>

4 
	~<debug/io.h
>

7 íum { 
	mpci_ªs_bus
, 
	mpci_ªs_mem
, 
	mpci_ªs_io
, 
	mpci_ªs_max
 };

9 
	gpci_bus_t
;

11 
	spci_dev_t


13 
uöt32_t
 
	mdev
;

14 
uöt32_t
 
	mfunc
;

16 
uöt32_t
 
	mdev_id
;

17 
uöt32_t
 
	mdev_˛ass
;

19 
uöt32_t
 
	mªg_ba£
[6];

20 
uöt32_t
 
	mªg_size
[6];

21 
uöt8_t
 
	múq_löe
;

24 
	spci_func_t


26 
pci_bus_t
 *
	mbus
;

27 
pci_dev_t
 
	mdev
;

30 
	spci_bus_t


32 
pci_func_t
 *
	m∑ª¡_bridge
;

33 
uöt32_t
 
	mbu¢o
;

36 
	#PCI_ATTACH_BY_CLASS
 0

	)

37 
	#PCI_ATTACH_BY_VENDOR
 1

	)

39 
	#as£π
(
x
) \

40 dÿ{ i‡(!(
x
)Ë
	`k¥ötf
("as£πi⁄ faûed: %s", #x); } 0)

	)

43 
	gpci_show_devs
 = 1;

44 
	gpci_show_addrs
 = 1;

47 
uöt32_t
 
	gpci_c⁄f1_addr_i›‹t
 = 0x0cf8;

48 
uöt32_t
 
	gpci_c⁄f1_d©a_i›‹t
 = 0x0cfc;

51 
pci_bridge_©èch
(
pci_func_t
 *
pcif
);

54 
	spci_drivî_t
 {

55 
uöt32_t
 
	mkey1
, 
	mkey2
;

56 (*
	m©èch‚
Ë(
pci_func_t
 *
	mpcif
);

59 
pci_drivî_t
 
	gpci_©èch_˛ass
[] = {

60 { 
PCI_CLASS_BRIDGE
, 
PCI_SUBCLASS_BRIDGE_PCI
, &
pci_bridge_©èch
 },

64 
pci_drivî_t
 
	gpci_©èch_víd‹
[] = {

69 
	spci_node_t


71 
pci_func_t
 
	mfunc
;

74 
	#PCI_NODES_MAX
 256

	)

75 
	#PCI_BUSES_MAX
 256

	)

77 
pci_bus_t
 
	groŸ_bus
;

78 
pci_func_t
 
	gpci_nodes
[
PCI_NODES_MAX
];

79 
pci_bus_t
 
	gpci_bu£s
[
PCI_BUSES_MAX
];

80 
	gpci_bu£s_cou¡
;

81 
	gpci_nodes_cou¡
;

84 
	$pci_c⁄f1_£t_addr
(
uöt32_t
 
bus
,

85 
uöt32_t
 
dev
,

86 
uöt32_t
 
func
,

87 
uöt32_t
 
off£t
)

89 
	`as£π
(
bus
 < 256);

90 
	`as£π
(
dev
 < 32);

91 
	`as£π
(
func
 < 8);

92 
	`as£π
(
off£t
 < 256);

93 
	`as£π
((
off£t
 & 0x3) == 0);

95 
uöt32_t
 
v
 = (1 << 31) |

96 (
bus
 << 16Ë| (
dev
 << 11Ë| (
func
 << 8Ë| (
off£t
);

97 
	`oué
(
pci_c⁄f1_addr_i›‹t
, 
v
);

98 
	}
}

100 
uöt32_t


101 
	$pci_c⁄f_ªad
(
pci_func_t
 *
f
, 
uöt32_t
 
off
)

103 
	`pci_c⁄f1_£t_addr
(
f
->
bus
->
bu¢o
, f->
dev
.dev, f->dev.
func
, 
off
);

104  
	`öl
(
pci_c⁄f1_d©a_i›‹t
);

105 
	}
}

108 
	$pci_c⁄f_wrôe
(
pci_func_t
 *
f
, 
uöt32_t
 
off
, uöt32_à
v
)

110 
	`pci_c⁄f1_£t_addr
(
f
->
bus
->
bu¢o
, f->
dev
.dev, f->dev.
func
, 
off
);

111 
	`oué
(
pci_c⁄f1_d©a_i›‹t
, 
v
);

112 
	}
}

114 
__©åibuã__
((
w¨n_unu£d_ªsu…
))

115 
	$pci_©èch_m©ch
(
uöt32_t
 
key1
, uöt32_à
key2
,

116 
pci_drivî_t
 *
li°
, 
pci_func_t
 *
pcif
)

118 
uöt32_t
 
i
;

120 
i
 = 0; 
li°
[i].
©èch‚
; i++) {

121 i‡(
li°
[
i
].
key1
 =key1 &&Üi°[i].
key2
 == key2) {

122 
r
 = 
li°
[
i
].
	`©èch‚
(
pcif
);

123 i‡(
r
 > 0)

124  
r
;

125 i‡(
r
 < 0)

128 
	`k¥ötf
("pci_attach_match:áttaching %x.%x (%p): SOME ERROR\n",

129 
key1
, 
key2
, 
li°
[
i
].
©èch‚
);

134 
	}
}

137 
	$pci_©èch
(
pci_func_t
 *
f
)

140 
	`pci_©èch_m©ch
(
	`PCI_CLASS
(
f
->
dev
.
dev_˛ass
), 
	`PCI_SUBCLASS
(f->dev.dev_class),

141 &
pci_©èch_˛ass
[0], 
f
) ||

142 
	`pci_©èch_m©ch
(
	`PCI_VENDOR
(
f
->
dev
.
dev_id
), 
	`PCI_PRODUCT
(f->dev.dev_id),

143 &
pci_©èch_víd‹
[0], 
f
);

144 
	}
}

147 
	$pci_sˇn_bus
(
pci_bus_t
 *
bus
)

149 
tŸÆdev
 = 0;

150 
pci_func_t
 
df
;

151 
	`mem£t
(&
df
, 0, (df));

152 
df
.
bus
 = bus;

154 
df
.
dev
.dev = 0; df.dev.dev < 32; df.dev.dev++) {

155 
uöt32_t
 
bhlc
 = 
	`pci_c⁄f_ªad
(&
df
, 
PCI_BHLC_REG
);

156 i‡(
	`PCI_HDRTYPE_TYPE
(
bhlc
) > 1)

159 
tŸÆdev
++;

161 
pci_func_t
 
f
;

162 
	`memmove
(&
f
, &
df
, (
pci_func_t
));

164 
f
.
dev
.
func
 = 0; f.dev.fun¯< (
	`PCI_HDRTYPE_MULTIFN
(
bhlc
) ? 8 : 1);

165 
f
.
dev
.
func
++) {

166 
pci_func_t
 
af
;

167 
	`memmove
(&
af
, &
f
, (
pci_func_t
));

169 
af
.
dev
.
dev_id
 = 
	`pci_c⁄f_ªad
(&
f
, 
PCI_ID_REG
);

170 i‡(
	`PCI_VENDOR
(
af
.
dev
.
dev_id
) == 0xffff)

173 
uöt32_t
 
öå
 = 
	`pci_c⁄f_ªad
(&
af
, 
PCI_INTERRUPT_REG
);

174 
af
.
dev
.
úq_löe
 = 
	`PCI_INTERRUPT_LINE
(
öå
);

176 
af
.
dev
.
dev_˛ass
 = 
	`pci_c⁄f_ªad
(&af, 
PCI_CLASS_REG
);

177 i‡(
pci_show_devs
)

178 
	`k¥ötf
("PCI: %02x:%02x.%d: %04x:%04x: class %x.%x irq %d -- ",

179 
af
.
bus
->
bu¢o
,áf.
dev
.dev,áf.dev.
func
,

180 
	`PCI_VENDOR
(
af
.
dev
.
dev_id
), 
	`PCI_PRODUCT
(af.dev.dev_id),

181 
	`PCI_CLASS
(
af
.
dev
.
dev_˛ass
), 
	`PCI_SUBCLASS
(af.dev.dev_class),

182 
af
.
dev
.
úq_löe
);

184 i‡(
	`pci_©èch
(&
af
) == 0)

186 i‡(
pci_nodes_cou¡
 =
PCI_NODES_MAX
)

187 
	`k¥ötf
("nodesáre full\n");

190 
	`memmove
(&
pci_nodes
[
pci_nodes_cou¡
], &
af
,

191 (
pci_func_t
));

192 
pci_nodes_cou¡
 ++;

193 
	`k¥ötf
("saved\n");

196 
	`k¥ötf
("attached\n");

200  
tŸÆdev
;

201 
	}
}

204 
	$pci_bridge_©èch
(
pci_func_t
 *
pcif
)

206 
uöt32_t
 
i‹eg
 = 
	`pci_c⁄f_ªad
(
pcif
, 
PCI_BRIDGE_STATIO_REG
);

207 
uöt32_t
 
bu§eg
 = 
	`pci_c⁄f_ªad
(
pcif
, 
PCI_BRIDGE_BUS_REG
);

209 i‡(
	`PCI_BRIDGE_IO_32BITS
(
i‹eg
)) {

210 
	`k¥ötf
("PCI: %02x:%02x.%d: 32-bit bridge IOÇot supported.\n",

211 
pcif
->
bus
->
bu¢o
,Öcif->
dev
.dev,Öcif->dev.
func
);

215 
pci_bus_t
 *
nbus
;

217 i‡(
pci_bu£s_cou¡
 =
PCI_BUSES_MAX
)

219 
	`k¥ötf
("reachÅhe maximumÇumber of buses.\n");

222 
nbus
 = 
pci_bu£s
 + (
pci_bu£s_cou¡
 ++);

224 
	`mem£t
(
nbus
, 0, (
pci_bus_t
));

226 
nbus
->
∑ª¡_bridge
 = 
pcif
;

227 
nbus
->
bu¢o
 = (
bu§eg
 >> 
PCI_BRIDGE_BUS_SECONDARY_SHIFT
) & 0xff;

229 i‡(
pci_show_devs
)

230 
	`k¥ötf
("PCI: %02x:%02x.%d: bridgeÅo PCI bus %d--%d\n",

231 
pcif
->
bus
->
bu¢o
,Öcif->
dev
.dev,Öcif->dev.
func
,

232 
nbus
->
bu¢o
,

233 (
bu§eg
 >> 
PCI_BRIDGE_BUS_SUBORDINATE_SHIFT
) & 0xff);

235 
	`pci_sˇn_bus
(
nbus
);

237 
	}
}

242 
	$pci_func_íabÀ
(
pci_func_t
 *
f
)

244 
	`pci_c⁄f_wrôe
(
f
, 
PCI_COMMAND_STATUS_REG
,

245 
PCI_COMMAND_IO_ENABLE
 |

246 
PCI_COMMAND_MEM_ENABLE
 |

247 
PCI_COMMAND_MASTER_ENABLE
);

249 
uöt32_t
 
b¨_width
;

250 
uöt32_t
 
b¨
;

251 
b¨
 = 
PCI_MAPREG_START
; b¨ < 
PCI_MAPREG_END
;

252 
b¨
 +
b¨_width
)

254 
uöt32_t
 
ﬁdv
 = 
	`pci_c⁄f_ªad
(
f
, 
b¨
);

256 
b¨_width
 = 4;

258 
	`pci_c⁄f_wrôe
(
f
, 
b¨
, 0xffffffff);

259 
uöt32_t
 
rv
 = 
	`pci_c⁄f_ªad
(
f
, 
b¨
);

261 i‡(
rv
 == 0)

264 
ªgnum
 = 
	`PCI_MAPREG_NUM
(
b¨
);

265 
uöt32_t
 
ba£
, 
size
;

266 i‡(
	`PCI_MAPREG_TYPE
(
rv
Ë=
PCI_MAPREG_TYPE_MEM
) {

267 i‡(
	`PCI_MAPREG_MEM_TYPE
(
rv
Ë=
PCI_MAPREG_MEM_TYPE_64BIT
)

268 
b¨_width
 = 8;

270 
size
 = 
	`PCI_MAPREG_MEM_SIZE
(
rv
);

271 
ba£
 = 
	`PCI_MAPREG_MEM_ADDR
(
ﬁdv
);

272 i‡(
pci_show_addrs
)

273 
	`k¥ötf
(" memÑegion %d: %d bytesát 0x%x\n",

274 
ªgnum
, 
size
, 
ba£
);

276 
size
 = 
	`PCI_MAPREG_IO_SIZE
(
rv
);

277 
ba£
 = 
	`PCI_MAPREG_IO_ADDR
(
ﬁdv
);

278 i‡(
pci_show_addrs
)

279 
	`k¥ötf
(" ioÑegion %d: %d bytesát 0x%x\n",

280 
ªgnum
, 
size
, 
ba£
);

283 
	`pci_c⁄f_wrôe
(
f
, 
b¨
, 
ﬁdv
);

284 
f
->
dev
.
ªg_ba£
[
ªgnum
] = 
ba£
;

285 
f
->
dev
.
ªg_size
[
ªgnum
] = 
size
;

287 
	`k¥ötf
(" ->Ñeg_ba£[%d] = %08x\n", 
ªgnum
, 
ba£
);

288 
	`k¥ötf
(" ->Ñeg_size[%d] = %08x\n", 
ªgnum
, 
size
);

290 i‡(
size
 && !
ba£
)

291 
	`k¥ötf
("PCI device %02x:%02x.%d (%04x:%04x) may be misconfigured: "

293 
f
->
bus
->
bu¢o
, f->
dev
.dev, f->dev.
func
,

294 
	`PCI_VENDOR
(
f
->
dev
.
dev_id
), 
	`PCI_PRODUCT
(f->dev.dev_id),

295 
ªgnum
, 
ba£
, 
size
);

297 
	}
}

300 
	$pci_öô
()

302 
	`mem£t
(&
roŸ_bus
, 0, (root_bus));

303 
pci_nodes_cou¡
 = 0;

304 
pci_bu£s_cou¡
 = 0;

306 
	`pci_sˇn_bus
(&
roŸ_bus
);

308 
	}
}

	@kern-river/drivers/pci.h

1 #i‚de‡
__RIVER_PCI_H__


2 
	#__RIVER_PCI_H__


	)

4 
pci_öô
();

	@kern-river/drivers/pcireg.h

34 #i‚de‡
_DEV_PCI_PCIREG_H_


35 
	#_DEV_PCI_PCIREG_H_


	)

43 
	~<libs/ty≥s.h
>

48 
	#PCI_ID_REG
 0x00

	)

50 
uöt16_t
 
	tpci_víd‹_id_t
;

51 
uöt16_t
 
	tpci_¥odu˘_id_t
;

53 
	#PCI_VENDOR_SHIFT
 0

	)

54 
	#PCI_VENDOR_MASK
 0xffff

	)

55 
	#PCI_VENDOR
(
id
) \

56 (((
id
Ë>> 
PCI_VENDOR_SHIFT
Ë& 
PCI_VENDOR_MASK
)

	)

58 
	#PCI_PRODUCT_SHIFT
 16

	)

59 
	#PCI_PRODUCT_MASK
 0xffff

	)

60 
	#PCI_PRODUCT
(
id
) \

61 (((
id
Ë>> 
PCI_PRODUCT_SHIFT
Ë& 
PCI_PRODUCT_MASK
)

	)

63 
	#PCI_ID_CODE
(
vid
,
pid
) \

64 ((((
vid
Ë& 
PCI_VENDOR_MASK
Ë<< 
PCI_VENDOR_SHIFT
) | \

65 (((
pid
Ë& 
PCI_PRODUCT_MASK
Ë<< 
PCI_PRODUCT_SHIFT
)) \

66 

	)

70 
	#PCI_COMMAND_STATUS_REG
 0x04

	)

71 
	#PCI_COMMAND_SHIFT
 0

	)

72 
	#PCI_COMMAND_MASK
 0xffff

	)

73 
	#PCI_STATUS_SHIFT
 16

	)

74 
	#PCI_STATUS_MASK
 0xffff

	)

76 
	#PCI_COMMAND_STATUS_CODE
(
cmd
,
°©
) \

77 ((((
cmd
Ë& 
PCI_COMMAND_MASK
Ë>> 
PCI_COMMAND_SHIFT
) | \

78 (((
°©
Ë& 
PCI_STATUS_MASK
Ë>> 
PCI_STATUS_SHIFT
)) \

79 

	)

80 
	#PCI_COMMAND_IO_ENABLE
 0x00000001

	)

81 
	#PCI_COMMAND_MEM_ENABLE
 0x00000002

	)

82 
	#PCI_COMMAND_MASTER_ENABLE
 0x00000004

	)

83 
	#PCI_COMMAND_SPECIAL_ENABLE
 0x00000008

	)

84 
	#PCI_COMMAND_INVALIDATE_ENABLE
 0x00000010

	)

85 
	#PCI_COMMAND_PALETTE_ENABLE
 0x00000020

	)

86 
	#PCI_COMMAND_PARITY_ENABLE
 0x00000040

	)

87 
	#PCI_COMMAND_STEPPING_ENABLE
 0x00000080

	)

88 
	#PCI_COMMAND_SERR_ENABLE
 0x00000100

	)

89 
	#PCI_COMMAND_BACKTOBACK_ENABLE
 0x00000200

	)

91 
	#PCI_STATUS_CAPLIST_SUPPORT
 0x00100000

	)

92 
	#PCI_STATUS_66MHZ_SUPPORT
 0x00200000

	)

93 
	#PCI_STATUS_UDF_SUPPORT
 0x00400000

	)

94 
	#PCI_STATUS_BACKTOBACK_SUPPORT
 0x00800000

	)

95 
	#PCI_STATUS_PARITY_ERROR
 0x01000000

	)

96 
	#PCI_STATUS_DEVSEL_FAST
 0x00000000

	)

97 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x02000000

	)

98 
	#PCI_STATUS_DEVSEL_SLOW
 0x04000000

	)

99 
	#PCI_STATUS_DEVSEL_MASK
 0x06000000

	)

100 
	#PCI_STATUS_TARGET_TARGET_ABORT
 0x08000000

	)

101 
	#PCI_STATUS_MASTER_TARGET_ABORT
 0x10000000

	)

102 
	#PCI_STATUS_MASTER_ABORT
 0x20000000

	)

103 
	#PCI_STATUS_SPECIAL_ERROR
 0x40000000

	)

104 
	#PCI_STATUS_PARITY_DETECT
 0x80000000

	)

109 
	#PCI_CLASS_REG
 0x08

	)

111 
uöt8_t
 
	tpci_˛ass_t
;

112 
uöt8_t
 
	tpci_sub˛ass_t
;

113 
uöt8_t
 
	tpci_öãrÁ˚_t
;

114 
uöt8_t
 
	tpci_ªvisi⁄_t
;

116 
	#PCI_CLASS_SHIFT
 24

	)

117 
	#PCI_CLASS_MASK
 0xff

	)

118 
	#PCI_CLASS
(
¸
) \

119 (((
¸
Ë>> 
PCI_CLASS_SHIFT
Ë& 
PCI_CLASS_MASK
)

	)

121 
	#PCI_SUBCLASS_SHIFT
 16

	)

122 
	#PCI_SUBCLASS_MASK
 0xff

	)

123 
	#PCI_SUBCLASS
(
¸
) \

124 (((
¸
Ë>> 
PCI_SUBCLASS_SHIFT
Ë& 
PCI_SUBCLASS_MASK
)

	)

126 
	#PCI_INTERFACE_SHIFT
 8

	)

127 
	#PCI_INTERFACE_MASK
 0xff

	)

128 
	#PCI_INTERFACE
(
¸
) \

129 (((
¸
Ë>> 
PCI_INTERFACE_SHIFT
Ë& 
PCI_INTERFACE_MASK
)

	)

131 
	#PCI_REVISION_SHIFT
 0

	)

132 
	#PCI_REVISION_MASK
 0xff

	)

133 
	#PCI_REVISION
(
¸
) \

134 (((
¸
Ë>> 
PCI_REVISION_SHIFT
Ë& 
PCI_REVISION_MASK
)

	)

136 
	#PCI_CLASS_CODE
(
maö˛ass
, 
sub˛ass
, 
öãrÁ˚
) \

137 ((((
maö˛ass
Ë& 
PCI_CLASS_MASK
Ë<< 
PCI_CLASS_SHIFT
) | \

138 (((
sub˛ass
Ë& 
PCI_SUBCLASS_MASK
Ë<< 
PCI_SUBCLASS_SHIFT
) | \

139 (((
öãrÁ˚
Ë& 
PCI_INTERFACE_MASK
Ë<< 
PCI_INTERFACE_SHIFT
))

	)

142 
	#PCI_CLASS_PREHISTORIC
 0x00

	)

143 
	#PCI_CLASS_MASS_STORAGE
 0x01

	)

144 
	#PCI_CLASS_NETWORK
 0x02

	)

145 
	#PCI_CLASS_DISPLAY
 0x03

	)

146 
	#PCI_CLASS_MULTIMEDIA
 0x04

	)

147 
	#PCI_CLASS_MEMORY
 0x05

	)

148 
	#PCI_CLASS_BRIDGE
 0x06

	)

149 
	#PCI_CLASS_COMMUNICATIONS
 0x07

	)

150 
	#PCI_CLASS_SYSTEM
 0x08

	)

151 
	#PCI_CLASS_INPUT
 0x09

	)

152 
	#PCI_CLASS_DOCK
 0x0a

	)

153 
	#PCI_CLASS_PROCESSOR
 0x0b

	)

154 
	#PCI_CLASS_SERIALBUS
 0x0c

	)

155 
	#PCI_CLASS_WIRELESS
 0x0d

	)

156 
	#PCI_CLASS_I2O
 0x0e

	)

157 
	#PCI_CLASS_SATCOM
 0x0f

	)

158 
	#PCI_CLASS_CRYPTO
 0x10

	)

159 
	#PCI_CLASS_DASP
 0x11

	)

160 
	#PCI_CLASS_UNDEFINED
 0xff

	)

163 
	#PCI_SUBCLASS_PREHISTORIC_MISC
 0x00

	)

164 
	#PCI_SUBCLASS_PREHISTORIC_VGA
 0x01

	)

167 
	#PCI_SUBCLASS_MASS_STORAGE_SCSI
 0x00

	)

168 
	#PCI_SUBCLASS_MASS_STORAGE_IDE
 0x01

	)

169 
	#PCI_SUBCLASS_MASS_STORAGE_FLOPPY
 0x02

	)

170 
	#PCI_SUBCLASS_MASS_STORAGE_IPI
 0x03

	)

171 
	#PCI_SUBCLASS_MASS_STORAGE_RAID
 0x04

	)

172 
	#PCI_SUBCLASS_MASS_STORAGE_ATA
 0x05

	)

173 
	#PCI_SUBCLASS_MASS_STORAGE_SATA
 0x06

	)

174 
	#PCI_SUBCLASS_MASS_STORAGE_MISC
 0x80

	)

177 
	#PCI_SUBCLASS_NETWORK_ETHERNET
 0x00

	)

178 
	#PCI_SUBCLASS_NETWORK_TOKENRING
 0x01

	)

179 
	#PCI_SUBCLASS_NETWORK_FDDI
 0x02

	)

180 
	#PCI_SUBCLASS_NETWORK_ATM
 0x03

	)

181 
	#PCI_SUBCLASS_NETWORK_ISDN
 0x04

	)

182 
	#PCI_SUBCLASS_NETWORK_WORLDFIP
 0x05

	)

183 
	#PCI_SUBCLASS_NETWORK_PCIMGMULTICOMP
 0x06

	)

184 
	#PCI_SUBCLASS_NETWORK_MISC
 0x80

	)

187 
	#PCI_SUBCLASS_DISPLAY_VGA
 0x00

	)

188 
	#PCI_SUBCLASS_DISPLAY_XGA
 0x01

	)

189 
	#PCI_SUBCLASS_DISPLAY_3D
 0x02

	)

190 
	#PCI_SUBCLASS_DISPLAY_MISC
 0x80

	)

193 
	#PCI_SUBCLASS_MULTIMEDIA_VIDEO
 0x00

	)

194 
	#PCI_SUBCLASS_MULTIMEDIA_AUDIO
 0x01

	)

195 
	#PCI_SUBCLASS_MULTIMEDIA_TELEPHONY
 0x02

	)

196 
	#PCI_SUBCLASS_MULTIMEDIA_MISC
 0x80

	)

199 
	#PCI_SUBCLASS_MEMORY_RAM
 0x00

	)

200 
	#PCI_SUBCLASS_MEMORY_FLASH
 0x01

	)

201 
	#PCI_SUBCLASS_MEMORY_MISC
 0x80

	)

204 
	#PCI_SUBCLASS_BRIDGE_HOST
 0x00

	)

205 
	#PCI_SUBCLASS_BRIDGE_ISA
 0x01

	)

206 
	#PCI_SUBCLASS_BRIDGE_EISA
 0x02

	)

207 
	#PCI_SUBCLASS_BRIDGE_MC
 0x03

	)

208 
	#PCI_SUBCLASS_BRIDGE_PCI
 0x04

	)

209 
	#PCI_SUBCLASS_BRIDGE_PCMCIA
 0x05

	)

210 
	#PCI_SUBCLASS_BRIDGE_NUBUS
 0x06

	)

211 
	#PCI_SUBCLASS_BRIDGE_CARDBUS
 0x07

	)

212 
	#PCI_SUBCLASS_BRIDGE_RACEWAY
 0x08

	)

213 
	#PCI_SUBCLASS_BRIDGE_STPCI
 0x09

	)

214 
	#PCI_SUBCLASS_BRIDGE_INFINIBAND
 0x0a

	)

215 
	#PCI_SUBCLASS_BRIDGE_MISC
 0x80

	)

218 
	#PCI_SUBCLASS_COMMUNICATIONS_SERIAL
 0x00

	)

219 
	#PCI_SUBCLASS_COMMUNICATIONS_PARALLEL
 0x01

	)

220 
	#PCI_SUBCLASS_COMMUNICATIONS_MPSERIAL
 0x02

	)

221 
	#PCI_SUBCLASS_COMMUNICATIONS_MODEM
 0x03

	)

222 
	#PCI_SUBCLASS_COMMUNICATIONS_GPIB
 0x04

	)

223 
	#PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD
 0x05

	)

224 
	#PCI_SUBCLASS_COMMUNICATIONS_MISC
 0x80

	)

227 
	#PCI_SUBCLASS_SYSTEM_PIC
 0x00

	)

228 
	#PCI_SUBCLASS_SYSTEM_DMA
 0x01

	)

229 
	#PCI_SUBCLASS_SYSTEM_TIMER
 0x02

	)

230 
	#PCI_SUBCLASS_SYSTEM_RTC
 0x03

	)

231 
	#PCI_SUBCLASS_SYSTEM_PCIHOTPLUG
 0x04

	)

232 
	#PCI_SUBCLASS_SYSTEM_MISC
 0x80

	)

235 
	#PCI_SUBCLASS_INPUT_KEYBOARD
 0x00

	)

236 
	#PCI_SUBCLASS_INPUT_DIGITIZER
 0x01

	)

237 
	#PCI_SUBCLASS_INPUT_MOUSE
 0x02

	)

238 
	#PCI_SUBCLASS_INPUT_SCANNER
 0x03

	)

239 
	#PCI_SUBCLASS_INPUT_GAMEPORT
 0x04

	)

240 
	#PCI_SUBCLASS_INPUT_MISC
 0x80

	)

243 
	#PCI_SUBCLASS_DOCK_GENERIC
 0x00

	)

244 
	#PCI_SUBCLASS_DOCK_MISC
 0x80

	)

247 
	#PCI_SUBCLASS_PROCESSOR_386
 0x00

	)

248 
	#PCI_SUBCLASS_PROCESSOR_486
 0x01

	)

249 
	#PCI_SUBCLASS_PROCESSOR_PENTIUM
 0x02

	)

250 
	#PCI_SUBCLASS_PROCESSOR_ALPHA
 0x10

	)

251 
	#PCI_SUBCLASS_PROCESSOR_POWERPC
 0x20

	)

252 
	#PCI_SUBCLASS_PROCESSOR_MIPS
 0x30

	)

253 
	#PCI_SUBCLASS_PROCESSOR_COPROC
 0x40

	)

256 
	#PCI_SUBCLASS_SERIALBUS_FIREWIRE
 0x00

	)

257 
	#PCI_SUBCLASS_SERIALBUS_ACCESS
 0x01

	)

258 
	#PCI_SUBCLASS_SERIALBUS_SSA
 0x02

	)

259 
	#PCI_SUBCLASS_SERIALBUS_USB
 0x03

	)

260 
	#PCI_SUBCLASS_SERIALBUS_FIBER
 0x04

	)

261 
	#PCI_SUBCLASS_SERIALBUS_SMBUS
 0x05

	)

262 
	#PCI_SUBCLASS_SERIALBUS_INFINIBAND
 0x06

	)

263 
	#PCI_SUBCLASS_SERIALBUS_IPMI
 0x07

	)

264 
	#PCI_SUBCLASS_SERIALBUS_SERCOS
 0x08

	)

265 
	#PCI_SUBCLASS_SERIALBUS_CANBUS
 0x09

	)

268 
	#PCI_SUBCLASS_WIRELESS_IRDA
 0x00

	)

269 
	#PCI_SUBCLASS_WIRELESS_CONSUMERIR
 0x01

	)

270 
	#PCI_SUBCLASS_WIRELESS_RF
 0x10

	)

271 
	#PCI_SUBCLASS_WIRELESS_BLUETOOTH
 0x11

	)

272 
	#PCI_SUBCLASS_WIRELESS_BROADBAND
 0x12

	)

273 
	#PCI_SUBCLASS_WIRELESS_802_11A
 0x20

	)

274 
	#PCI_SUBCLASS_WIRELESS_802_11B
 0x21

	)

275 
	#PCI_SUBCLASS_WIRELESS_MISC
 0x80

	)

278 
	#PCI_SUBCLASS_I2O_STANDARD
 0x00

	)

282 
	#PCI_SUBCLASS_SATCOM_TV
 0x01

	)

283 
	#PCI_SUBCLASS_SATCOM_AUDIO
 0x02

	)

284 
	#PCI_SUBCLASS_SATCOM_VOICE
 0x03

	)

285 
	#PCI_SUBCLASS_SATCOM_DATA
 0x04

	)

288 
	#PCI_SUBCLASS_CRYPTO_NETCOMP
 0x00

	)

289 
	#PCI_SUBCLASS_CRYPTO_ENTERTAINMENT
 0x10

	)

290 
	#PCI_SUBCLASS_CRYPTO_MISC
 0x80

	)

293 
	#PCI_SUBCLASS_DASP_DPIO
 0x00

	)

294 
	#PCI_SUBCLASS_DASP_TIMEFREQ
 0x01

	)

295 
	#PCI_SUBCLASS_DASP_SYNC
 0x10

	)

296 
	#PCI_SUBCLASS_DASP_MGMT
 0x20

	)

297 
	#PCI_SUBCLASS_DASP_MISC
 0x80

	)

302 
	#PCI_BHLC_REG
 0x0c

	)

304 
	#PCI_BIST_SHIFT
 24

	)

305 
	#PCI_BIST_MASK
 0xff

	)

306 
	#PCI_BIST
(
bhl¸
) \

307 (((
bhl¸
Ë>> 
PCI_BIST_SHIFT
Ë& 
PCI_BIST_MASK
)

	)

309 
	#PCI_HDRTYPE_SHIFT
 16

	)

310 
	#PCI_HDRTYPE_MASK
 0xff

	)

311 
	#PCI_HDRTYPE
(
bhl¸
) \

312 (((
bhl¸
Ë>> 
PCI_HDRTYPE_SHIFT
Ë& 
PCI_HDRTYPE_MASK
)

	)

314 
	#PCI_HDRTYPE_TYPE
(
bhl¸
) \

315 (
	`PCI_HDRTYPE
(
bhl¸
Ë& 0x7f)

	)

316 
	#PCI_HDRTYPE_MULTIFN
(
bhl¸
) \

317 ((
	`PCI_HDRTYPE
(
bhl¸
Ë& 0x80Ë!0)

	)

319 
	#PCI_LATTIMER_SHIFT
 8

	)

320 
	#PCI_LATTIMER_MASK
 0xff

	)

321 
	#PCI_LATTIMER
(
bhl¸
) \

322 (((
bhl¸
Ë>> 
PCI_LATTIMER_SHIFT
Ë& 
PCI_LATTIMER_MASK
)

	)

324 
	#PCI_CACHELINE_SHIFT
 0

	)

325 
	#PCI_CACHELINE_MASK
 0xff

	)

326 
	#PCI_CACHELINE
(
bhl¸
) \

327 (((
bhl¸
Ë>> 
PCI_CACHELINE_SHIFT
Ë& 
PCI_CACHELINE_MASK
)

	)

329 
	#PCI_BHLC_CODE
(
bi°
,
ty≥
,
mu…i
,
œãncy
,
ˇchñöe
) \

330 ((((
bi°
Ë& 
PCI_BIST_MASK
Ë<< 
PCI_BIST_SHIFT
) | \

331 (((
ty≥
Ë& 
PCI_HDRTYPE_MASK
Ë<< 
PCI_HDRTYPE_SHIFT
) | \

332 (((
mu…i
)?0x80:0Ë<< 
PCI_HDRTYPE_SHIFT
) | \

333 (((
œãncy
Ë& 
PCI_LATTIMER_MASK
Ë<< 
PCI_LATTIMER_SHIFT
) | \

334 (((
ˇchñöe
Ë& 
PCI_CACHELINE_MASK
Ë<< 
PCI_CACHELINE_SHIFT
))

	)

339 
	#PCI_HDRTYPE_DEVICE
 0

	)

340 
	#PCI_HDRTYPE_PPB
 1

	)

341 
	#PCI_HDRTYPE_PCB
 2

	)

346 
	#PCI_MAPREG_START
 0x10

	)

347 
	#PCI_MAPREG_END
 0x28

	)

348 
	#PCI_MAPREG_ROM
 0x30

	)

349 
	#PCI_MAPREG_PPB_END
 0x18

	)

350 
	#PCI_MAPREG_PCB_END
 0x14

	)

352 
	#PCI_MAPREG_TYPE
(
mr
) \

353 ((
mr
Ë& 
PCI_MAPREG_TYPE_MASK
)

	)

354 
	#PCI_MAPREG_TYPE_MASK
 0x00000001

	)

356 
	#PCI_MAPREG_TYPE_MEM
 0x00000000

	)

357 
	#PCI_MAPREG_TYPE_IO
 0x00000001

	)

358 
	#PCI_MAPREG_ROM_ENABLE
 0x00000001

	)

360 
	#PCI_MAPREG_MEM_TYPE
(
mr
) \

361 ((
mr
Ë& 
PCI_MAPREG_MEM_TYPE_MASK
)

	)

362 
	#PCI_MAPREG_MEM_TYPE_MASK
 0x00000006

	)

364 
	#PCI_MAPREG_MEM_TYPE_32BIT
 0x00000000

	)

365 
	#PCI_MAPREG_MEM_TYPE_32BIT_1M
 0x00000002

	)

366 
	#PCI_MAPREG_MEM_TYPE_64BIT
 0x00000004

	)

368 
	#PCI_MAPREG_MEM_PREFETCHABLE
(
mr
) \

369 (((
mr
Ë& 
PCI_MAPREG_MEM_PREFETCHABLE_MASK
Ë!0)

	)

370 
	#PCI_MAPREG_MEM_PREFETCHABLE_MASK
 0x00000008

	)

372 
	#PCI_MAPREG_MEM_ADDR
(
mr
) \

373 ((
mr
Ë& 
PCI_MAPREG_MEM_ADDR_MASK
)

	)

374 
	#PCI_MAPREG_MEM_SIZE
(
mr
) \

375 (
	`PCI_MAPREG_MEM_ADDR
(
mr
Ë& -PCI_MAPREG_MEM_ADDR(mr))

	)

376 
	#PCI_MAPREG_MEM_ADDR_MASK
 0xfffffff0

	)

378 
	#PCI_MAPREG_MEM64_ADDR
(
mr
) \

379 ((
mr
Ë& 
PCI_MAPREG_MEM64_ADDR_MASK
)

	)

380 
	#PCI_MAPREG_MEM64_SIZE
(
mr
) \

381 (
	`PCI_MAPREG_MEM64_ADDR
(
mr
Ë& -PCI_MAPREG_MEM64_ADDR(mr))

	)

382 
	#PCI_MAPREG_MEM64_ADDR_MASK
 0xfffffffffffffff0ULL

	)

384 
	#PCI_MAPREG_IO_ADDR
(
mr
) \

385 ((
mr
Ë& 
PCI_MAPREG_IO_ADDR_MASK
)

	)

386 
	#PCI_MAPREG_IO_SIZE
(
mr
) \

387 (
	`PCI_MAPREG_IO_ADDR
(
mr
Ë& -PCI_MAPREG_IO_ADDR(mr))

	)

388 
	#PCI_MAPREG_IO_ADDR_MASK
 0xfffffffc

	)

390 
	#PCI_MAPREG_SIZE_TO_MASK
(
size
) \

391 (-(
size
))

	)

393 
	#PCI_MAPREG_NUM
(
off£t
) \

394 ((()(
off£t
)-
PCI_MAPREG_START
)/4)

	)

400 
	#PCI_CARDBUS_CIS_REG
 0x28

	)

407 
	#PCI_SUBSYS_ID_REG
 0x2c

	)

412 
	#PCI_CAPLISTPTR_REG
 0x34

	)

413 
	#PCI_CARDBUS_CAPLISTPTR_REG
 0x14

	)

414 
	#PCI_CAPLIST_PTR
(
˝r
Ë((˝rË& 0xff)

	)

415 
	#PCI_CAPLIST_NEXT
(
¸
Ë(((¸Ë>> 8Ë& 0xff)

	)

416 
	#PCI_CAPLIST_CAP
(
¸
Ë((¸Ë& 0xff)

	)

418 
	#PCI_CAP_RESERVED0
 0x00

	)

419 
	#PCI_CAP_PWRMGMT
 0x01

	)

420 
	#PCI_CAP_AGP
 0x02

	)

421 
	#PCI_CAP_AGP_MAJOR
(
¸
Ë(((¸Ë>> 20Ë& 0xf)

	)

422 
	#PCI_CAP_AGP_MINOR
(
¸
Ë(((¸Ë>> 16Ë& 0xf)

	)

423 
	#PCI_CAP_VPD
 0x03

	)

424 
	#PCI_CAP_SLOTID
 0x04

	)

425 
	#PCI_CAP_MSI
 0x05

	)

426 
	#PCI_CAP_CPCI_HOTSWAP
 0x06

	)

427 
	#PCI_CAP_PCIX
 0x07

	)

428 
	#PCI_CAP_LDT
 0x08

	)

429 
	#PCI_CAP_VENDSPEC
 0x09

	)

430 
	#PCI_CAP_DEBUGPORT
 0x0a

	)

431 
	#PCI_CAP_CPCI_RSRCCTL
 0x0b

	)

432 
	#PCI_CAP_HOTPLUG
 0x0c

	)

433 
	#PCI_CAP_AGP8
 0x0e

	)

434 
	#PCI_CAP_SECURE
 0x0f

	)

435 
	#PCI_CAP_PCIEXPRESS
 0x10

	)

436 
	#PCI_CAP_MSIX
 0x11

	)

441 
	#PCI_VPD_ADDRESS_MASK
 0x7fff

	)

442 
	#PCI_VPD_ADDRESS_SHIFT
 16

	)

443 
	#PCI_VPD_ADDRESS
(
ofs
) \

444 (((
ofs
Ë& 
PCI_VPD_ADDRESS_MASK
Ë<< 
PCI_VPD_ADDRESS_SHIFT
)

	)

445 
	#PCI_VPD_DATAREG
(
ofs
Ë((ofsË+ 4)

	)

446 
	#PCI_VPD_OPFLAG
 0x80000000

	)

453 
	#PCI_PMCR
 0x02

	)

454 
	#PCI_PMCR_D1SUPP
 0x0200

	)

455 
	#PCI_PMCR_D2SUPP
 0x0400

	)

457 
	#PCI_PMCSR
 0x04

	)

458 
	#PCI_PMCSR_STATE_MASK
 0x03

	)

459 
	#PCI_PMCSR_STATE_D0
 0x00

	)

460 
	#PCI_PMCSR_STATE_D1
 0x01

	)

461 
	#PCI_PMCSR_STATE_D2
 0x02

	)

462 
	#PCI_PMCSR_STATE_D3
 0x03

	)

477 
	#PCI_PCIX_CMD
 0x00

	)

478 
	#PCI_PCIX_CMD_PERR_RECOVER
 0x00010000

	)

479 
	#PCI_PCIX_CMD_RELAXED_ORDER
 0x00020000

	)

480 
	#PCI_PCIX_CMD_BYTECNT_MASK
 0x000c0000

	)

481 
	#PCI_PCIX_CMD_BYTECNT_SHIFT
 18

	)

482 
	#PCI_PCIX_CMD_BCNT_512
 0x00000000

	)

483 
	#PCI_PCIX_CMD_BCNT_1024
 0x00040000

	)

484 
	#PCI_PCIX_CMD_BCNT_2048
 0x00080000

	)

485 
	#PCI_PCIX_CMD_BCNT_4096
 0x000c0000

	)

486 
	#PCI_PCIX_CMD_SPLTRANS_MASK
 0x00700000

	)

487 
	#PCI_PCIX_CMD_SPLTRANS_1
 0x00000000

	)

488 
	#PCI_PCIX_CMD_SPLTRANS_2
 0x00100000

	)

489 
	#PCI_PCIX_CMD_SPLTRANS_3
 0x00200000

	)

490 
	#PCI_PCIX_CMD_SPLTRANS_4
 0x00300000

	)

491 
	#PCI_PCIX_CMD_SPLTRANS_8
 0x00400000

	)

492 
	#PCI_PCIX_CMD_SPLTRANS_12
 0x00500000

	)

493 
	#PCI_PCIX_CMD_SPLTRANS_16
 0x00600000

	)

494 
	#PCI_PCIX_CMD_SPLTRANS_32
 0x00700000

	)

499 
	#PCI_PCIX_STATUS
 0x04

	)

500 
	#PCI_PCIX_STATUS_FN_MASK
 0x00000007

	)

501 
	#PCI_PCIX_STATUS_DEV_MASK
 0x000000f8

	)

502 
	#PCI_PCIX_STATUS_BUS_MASK
 0x0000ff00

	)

503 
	#PCI_PCIX_STATUS_64BIT
 0x00010000

	)

504 
	#PCI_PCIX_STATUS_133
 0x00020000

	)

505 
	#PCI_PCIX_STATUS_SPLDISC
 0x00040000

	)

506 
	#PCI_PCIX_STATUS_SPLUNEX
 0x00080000

	)

507 
	#PCI_PCIX_STATUS_DEVCPLX
 0x00100000

	)

508 
	#PCI_PCIX_STATUS_MAXB_MASK
 0x00600000

	)

509 
	#PCI_PCIX_STATUS_MAXB_SHIFT
 21

	)

510 
	#PCI_PCIX_STATUS_MAXB_512
 0x00000000

	)

511 
	#PCI_PCIX_STATUS_MAXB_1024
 0x00200000

	)

512 
	#PCI_PCIX_STATUS_MAXB_2048
 0x00400000

	)

513 
	#PCI_PCIX_STATUS_MAXB_4096
 0x00600000

	)

514 
	#PCI_PCIX_STATUS_MAXST_MASK
 0x03800000

	)

515 
	#PCI_PCIX_STATUS_MAXST_1
 0x00000000

	)

516 
	#PCI_PCIX_STATUS_MAXST_2
 0x00800000

	)

517 
	#PCI_PCIX_STATUS_MAXST_3
 0x01000000

	)

518 
	#PCI_PCIX_STATUS_MAXST_4
 0x01800000

	)

519 
	#PCI_PCIX_STATUS_MAXST_8
 0x02000000

	)

520 
	#PCI_PCIX_STATUS_MAXST_12
 0x02800000

	)

521 
	#PCI_PCIX_STATUS_MAXST_16
 0x03000000

	)

522 
	#PCI_PCIX_STATUS_MAXST_32
 0x03800000

	)

523 
	#PCI_PCIX_STATUS_MAXRS_MASK
 0x1c000000

	)

524 
	#PCI_PCIX_STATUS_MAXRS_1K
 0x00000000

	)

525 
	#PCI_PCIX_STATUS_MAXRS_2K
 0x04000000

	)

526 
	#PCI_PCIX_STATUS_MAXRS_4K
 0x08000000

	)

527 
	#PCI_PCIX_STATUS_MAXRS_8K
 0x0c000000

	)

528 
	#PCI_PCIX_STATUS_MAXRS_16K
 0x10000000

	)

529 
	#PCI_PCIX_STATUS_MAXRS_32K
 0x14000000

	)

530 
	#PCI_PCIX_STATUS_MAXRS_64K
 0x18000000

	)

531 
	#PCI_PCIX_STATUS_MAXRS_128K
 0x1c000000

	)

532 
	#PCI_PCIX_STATUS_SCERR
 0x20000000

	)

538 
	#PCI_INTERRUPT_REG
 0x3c

	)

540 
uöt8_t
 
	tpci_öå_œãncy_t
;

541 
uöt8_t
 
	tpci_öå_gø¡_t
;

542 
uöt8_t
 
	tpci_öå_pö_t
;

543 
uöt8_t
 
	tpci_öå_löe_t
;

545 
	#PCI_MAX_LAT_SHIFT
 24

	)

546 
	#PCI_MAX_LAT_MASK
 0xff

	)

547 
	#PCI_MAX_LAT
(
i¸
) \

548 (((
i¸
Ë>> 
PCI_MAX_LAT_SHIFT
Ë& 
PCI_MAX_LAT_MASK
)

	)

550 
	#PCI_MIN_GNT_SHIFT
 16

	)

551 
	#PCI_MIN_GNT_MASK
 0xff

	)

552 
	#PCI_MIN_GNT
(
i¸
) \

553 (((
i¸
Ë>> 
PCI_MIN_GNT_SHIFT
Ë& 
PCI_MIN_GNT_MASK
)

	)

555 
	#PCI_INTERRUPT_GRANT_SHIFT
 24

	)

556 
	#PCI_INTERRUPT_GRANT_MASK
 0xff

	)

557 
	#PCI_INTERRUPT_GRANT
(
i¸
) \

558 (((
i¸
Ë>> 
PCI_INTERRUPT_GRANT_SHIFT
Ë& 
PCI_INTERRUPT_GRANT_MASK
)

	)

560 
	#PCI_INTERRUPT_LATENCY_SHIFT
 16

	)

561 
	#PCI_INTERRUPT_LATENCY_MASK
 0xff

	)

562 
	#PCI_INTERRUPT_LATENCY
(
i¸
) \

563 (((
i¸
Ë>> 
PCI_INTERRUPT_LATENCY_SHIFT
Ë& 
PCI_INTERRUPT_LATENCY_MASK
)

	)

565 
	#PCI_INTERRUPT_PIN_SHIFT
 8

	)

566 
	#PCI_INTERRUPT_PIN_MASK
 0xff

	)

567 
	#PCI_INTERRUPT_PIN
(
i¸
) \

568 (((
i¸
Ë>> 
PCI_INTERRUPT_PIN_SHIFT
Ë& 
PCI_INTERRUPT_PIN_MASK
)

	)

570 
	#PCI_INTERRUPT_LINE_SHIFT
 0

	)

571 
	#PCI_INTERRUPT_LINE_MASK
 0xff

	)

572 
	#PCI_INTERRUPT_LINE
(
i¸
) \

573 (((
i¸
Ë>> 
PCI_INTERRUPT_LINE_SHIFT
Ë& 
PCI_INTERRUPT_LINE_MASK
)

	)

575 
	#PCI_INTERRUPT_CODE
(
œt
,
g¡
,
pö
,
löe
) \

576 ((((
œt
)&
PCI_INTERRUPT_LATENCY_MASK
)<<
PCI_INTERRUPT_LATENCY_SHIFT
)| \

577 (((
g¡
)&
PCI_INTERRUPT_GRANT_MASK
Ë<<
PCI_INTERRUPT_GRANT_SHIFT
) | \

578 (((
pö
)&
PCI_INTERRUPT_PIN_MASK
Ë<<
PCI_INTERRUPT_PIN_SHIFT
) | \

579 (((
löe
)&
PCI_INTERRUPT_LINE_MASK
Ë<<
PCI_INTERRUPT_LINE_SHIFT
))

	)

581 
	#PCI_INTERRUPT_PIN_NONE
 0x00

	)

582 
	#PCI_INTERRUPT_PIN_A
 0x01

	)

583 
	#PCI_INTERRUPT_PIN_B
 0x02

	)

584 
	#PCI_INTERRUPT_PIN_C
 0x03

	)

585 
	#PCI_INTERRUPT_PIN_D
 0x04

	)

586 
	#PCI_INTERRUPT_PIN_MAX
 0x04

	)

589 
	#PCI_BRIDGE_BUS_REG
 0x18

	)

590 
	#PCI_BRIDGE_BUS_PRIMARY_SHIFT
 0

	)

591 
	#PCI_BRIDGE_BUS_SECONDARY_SHIFT
 8

	)

592 
	#PCI_BRIDGE_BUS_SUBORDINATE_SHIFT
 16

	)

594 
	#PCI_BRIDGE_STATIO_REG
 0x1C

	)

595 
	#PCI_BRIDGE_STATIO_IOBASE_SHIFT
 0

	)

596 
	#PCI_BRIDGE_STATIO_IOLIMIT_SHIFT
 8

	)

597 
	#PCI_BRIDGE_STATIO_STATUS_SHIFT
 16

	)

598 
	#PCI_BRIDGE_STATIO_IOBASE_MASK
 0xf0

	)

599 
	#PCI_BRIDGE_STATIO_IOLIMIT_MASK
 0xf0

	)

600 
	#PCI_BRIDGE_STATIO_STATUS_MASK
 0xffff

	)

601 
	#PCI_BRIDGE_IO_32BITS
(
ªg
Ë((‘egË& 0xfË=1)

	)

603 
	#PCI_BRIDGE_MEMORY_REG
 0x20

	)

604 
	#PCI_BRIDGE_MEMORY_BASE_SHIFT
 4

	)

605 
	#PCI_BRIDGE_MEMORY_LIMIT_SHIFT
 20

	)

606 
	#PCI_BRIDGE_MEMORY_BASE_MASK
 0xffff

	)

607 
	#PCI_BRIDGE_MEMORY_LIMIT_MASK
 0xffff

	)

609 
	#PCI_BRIDGE_PREFETCHMEM_REG
 0x24

	)

610 
	#PCI_BRIDGE_PREFETCHMEM_BASE_SHIFT
 4

	)

611 
	#PCI_BRIDGE_PREFETCHMEM_LIMIT_SHIFT
 20

	)

612 
	#PCI_BRIDGE_PREFETCHMEM_BASE_MASK
 0xffff

	)

613 
	#PCI_BRIDGE_PREFETCHMEM_LIMIT_MASK
 0xffff

	)

614 
	#PCI_BRIDGE_PREFETCHMEM_64BITS
(
ªg
Ë(‘egË& 0xf)

	)

616 
	#PCI_BRIDGE_PREFETCHBASE32_REG
 0x28

	)

617 
	#PCI_BRIDGE_PREFETCHLIMIT32_REG
 0x2C

	)

619 
	#PCI_BRIDGE_IOHIGH_REG
 0x30

	)

620 
	#PCI_BRIDGE_IOHIGH_BASE_SHIFT
 0

	)

621 
	#PCI_BRIDGE_IOHIGH_LIMIT_SHIFT
 16

	)

622 
	#PCI_BRIDGE_IOHIGH_BASE_MASK
 0xffff

	)

623 
	#PCI_BRIDGE_IOHIGH_LIMIT_MASK
 0xffff

	)

625 
	#PCI_BRIDGE_CONTROL_REG
 0x3C

	)

626 
	#PCI_BRIDGE_CONTROL_SHIFT
 16

	)

627 
	#PCI_BRIDGE_CONTROL_MASK
 0xffff

	)

628 
	#PCI_BRIDGE_CONTROL_PERE
 (1 << 0)

	)

629 
	#PCI_BRIDGE_CONTROL_SERR
 (1 << 1)

	)

630 
	#PCI_BRIDGE_CONTROL_ISA
 (1 << 2)

	)

631 
	#PCI_BRIDGE_CONTROL_VGA
 (1 << 3)

	)

633 
	#PCI_BRIDGE_CONTROL_MABRT
 (1 << 5)

	)

634 
	#PCI_BRIDGE_CONTROL_SECBR
 (1 << 6)

	)

635 
	#PCI_BRIDGE_CONTROL_SECFASTB2B
 (1 << 7)

	)

636 
	#PCI_BRIDGE_CONTROL_PRI_DISC_TIMER
 (1 << 8)

	)

637 
	#PCI_BRIDGE_CONTROL_SEC_DISC_TIMER
 (1 << 9)

	)

638 
	#PCI_BRIDGE_CONTROL_DISC_TIMER_STAT
 (1 << 10)

	)

639 
	#PCI_BRIDGE_CONTROL_DISC_TIMER_SERR
 (1 << 11)

	)

645 
	spci_vpd_smÆÃes
 {

646 
uöt8_t
 
	mvpdªs_byã0
;

648 } 
__©åibuã__
((
__∑cked__
));

650 
	spci_vpd_œrgîes
 {

651 
uöt8_t
 
	mvpdªs_byã0
;

652 
uöt8_t
 
	mvpdªs_Àn_lsb
;

653 
uöt8_t
 
	mvpdªs_Àn_msb
;

655 } 
__©åibuã__
((
__∑cked__
));

657 
	#PCI_VPDRES_ISLARGE
(
x
Ë((xË& 0x80)

	)

659 
	#PCI_VPDRES_SMALL_LENGTH
(
x
Ë((xË& 0x7)

	)

660 
	#PCI_VPDRES_SMALL_NAME
(
x
Ë(((xË>> 3Ë& 0xf)

	)

662 
	#PCI_VPDRES_LARGE_NAME
(
x
Ë((xË& 0x7f)

	)

664 
	#PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID
 0x3

	)

665 
	#PCI_VPDRES_TYPE_VENDOR_DEFINED
 0xê

	)

666 
	#PCI_VPDRES_TYPE_END_TAG
 0x‡

	)

668 
	#PCI_VPDRES_TYPE_IDENTIFIER_STRING
 0x02

	)

669 
	#PCI_VPDRES_TYPE_VPD
 0x10

	)

671 
	spci_vpd
 {

672 
uöt8_t
 
	mvpd_key0
;

673 
uöt8_t
 
	mvpd_key1
;

674 
uöt8_t
 
	mvpd_Àn
;

676 } 
__©åibuã__
((
__∑cked__
));

708 
	#PCI32_DMA_BOUNCE_THRESHOLD
 0x100000000ULL

	)

	@kern-river/drivers/rand.c

1 
	~<drivîs/ønd.h
>

2 
	~<drivîs/h≥t.h
>

3 
	~<glue_öå.h
>

4 
	~<glue_mp.h
>

6 
PLS
 
uöt32_t
 
	g£ed
;

9 
	$ønd_öô
()

11 
£ed
 = *
h≥t_tick
;

13 
	}
}

15 
uöt16_t


16 
	$ønd16
()

18 
uöt16_t
 
r
;

19 
Êag
;

20 
	`loˇl_öå_ßve_hw
(
Êag
);

21 
r
 = 
£ed
 = seed * 1103515245 + 12345;

22 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

23  
r
;

24 
	}
}

	@kern-river/drivers/rand.h

1 #i‚de‡
__RIVER_RAND_H__


2 
	#__RIVER_RAND_H__


	)

4 
	~<libs/ty≥s.h
>

6 
ønd_öô
();

7 
uöt16_t
 
ønd16
();

	@kern-river/drivers/timer.c

1 
	~<drivîs/timî.h
>

2 
	~<glue_öå.h
>

3 
	~<å≠/å≠.h
>

4 
	~<¥oc/ïroc.h
>

5 
	~<glue_tick.h
>

6 
	~<libs/¸h.h
>

7 
	~<¥oc/evít.h
>

8 
	~<glue_pmm.h
>

9 
	~<debug/io.h
>

10 
	~<mp/mp.h
>

11 
	~<drivîs/h≥t.h
>

12 
	~<öô.h
>

13 
	~<libs/x86/rdtsc.h
>

15 
PLS
 
¸h_s
 
	g¸h
;

17 
PLS
 vﬁ©ûê
uöt64_t
 
	gtimî_tick
;

18 
PLS
 vﬁ©ûê
uöt64_t
 
	gtimî_‰eq
;

20 
	#TIMER_CLOSED
 0

	)

21 
	#TIMER_OPEN
 1

	)

23 
	#CRH_NODE_TO_TIMER
(
node
Ë((
timî_t
) \

24 ((*)(
node
Ë- (
uöçå_t
)&(((
timî_t
)0)->
¸h_node
)))

	)

27 
	$timî_queue_≠≥nd
(
¸h_node_t
 
node
)

29 i‡(
node
 !
NULL
)

31 
¸h_node_t
 
cur
 = 
node
;

34 
timî_t
 
t
 = 
	`CRH_NODE_TO_TIMER
(
cur
);

35 
t
->
°©us
 = 
TIMER_CLOSED
;

36 i‡(
cur
->
√xt
 == cur)

38 
node
 = 
NULL
;

39 
	`evít_a˘iv©e
(&
t
->
evít
);

43 
cur
->
√xt
->
¥ev
 = cur->prev;

44 
cur
->
¥ev
->
√xt
 = cur->next;

46 i‡(
cur
 =
node
)

48 
node
 = 
cur
 = cur->
√xt
;

49 
	`evít_a˘iv©e
(&
t
->
evít
);

53 
cur
 = cur->
√xt
;

54 
	`evít_a˘iv©e
(&
t
->
evít
);

56 i‡(
cur
 =
node
) ;

60 
	}
}

62 
PLS
 
uöt64_t
 
	gﬁd_h≥t_tick
;

63 
PLS
 
uöt64_t
 
	gﬁd_tick
;

64 
PLS
 
uöt64_t
 
	gﬁd_tsc
;

65 
PLS
 
uöt64_t
 
	g√w_h≥t_tick
;

66 
PLS
 
uöt64_t
 
	g√w_tick
;

67 
PLS
 
uöt64_t
 
	g√w_tsc
;

69 
	#MEASURE_TICK
 200

	)

71 
PLS
 
timî_s
 
	gmósuª_timî
;

72 
PLS
 
ïroc_s
 
	gmósuª_ïroc
;

75 
	$mósuª_evít
(
evít_t
 
e
)

77 
√w_h≥t_tick
 = *
h≥t_tick
;

78 
√w_tick
 = 
timî_tick
;

79 
√w_tsc
 = 
	`rdtsc
();

81 
time_öv
 = (()(
√w_h≥t_tick
 - 
ﬁd_h≥t_tick
Ë/ 
h≥t_tick_‰eq
);

82 
uöt64_t
 
‰eq
 = (
√w_tick
 - 
ﬁd_tick
Ë/ 
time_öv
 * 2 + 1;

83 
l˝u_‰eq
 = (
√w_tsc
 - 
ﬁd_tsc
Ë/ 
time_öv
 * 2 + 1;

84 
l˝u_‰eq
 >>= 1;

86 
timî_‰eq
 = 
‰eq
 >> 1;

88 
	`k¥ötf
("LCPU %d FREQ %d TICK FREQ %d\n", 
l˝u_idx
, 
l˝u_‰eq
, 
timî_‰eq
);

90 
	`evít_a˘iv©e
(
öô_evít
);

91 
	}
}

94 
	$timî_mósuª
()

96 
ﬁd_h≥t_tick
 = *
h≥t_tick
;

97 
ﬁd_tick
 = 
timî_tick
;

98 
ﬁd_tsc
 = 
	`rdtsc
();

100 
	`ïroc_›í
(&
mósuª_ïroc
, "timî_mósuª", ((*)())
¥oc_waô_åy
, 
NULL
, 8192);

101 
	`evít_›í
(&
mósuª_timî
.
evít
, &
mósuª_ïroc
.
evít_poﬁ
, 
mósuª_evít
, 
NULL
);

102 
	`timî_›í
(&
mósuª_timî
, 
ﬁd_tick
 + 
MEASURE_TICK
);

103 
	}
}

106 
	$timî_›í
(
timî_t
 
timî
, 
uöt64_t
 
tick
)

108 
timî
->
°©us
 = 
TIMER_OPEN
;

109 
timî
->
¸h_node
.
key
 = 
tick
;

111 
	`loˇl_úq_ßve
();

112 i‡(
	`¸h_ö£π
(&
¸h
, &
timî
->
¸h_node
) != 0)

114 
timî
->
¸h_node
.
√xt
 =Åimî->¸h_node.
¥ev
 = &timer->crh_node;

115 
	`timî_queue_≠≥nd
(&
timî
->
¸h_node
);

117 
	`loˇl_úq_ª°‹e
();

118 
	}
}

121 
	$timî_˛o£
(
timî_t
 
timî
)

123 
	`loˇl_úq_ßve
();

124 
timî
->
°©us
)

126 
TIMER_OPEN
:

127 
	`¸h_ªmove
(&
¸h
, &
timî
->
¸h_node
);

130 
timî
->
°©us
 = 
TIMER_CLOSED
;

131 
	`loˇl_úq_ª°‹e
();

132 
	}
}

135 
	$timî_is_˛o£d
(
timî_t
 
timî
)

137  
timî
->
°©us
 =
TIMER_CLOSED
;

138 
	}
}

141 
	$tick_h™dÀr
(
úq_no
, 
uöt64_t
 
tick
)

143 i‡(
¥oc_cuºít
->
time_¶i˚
 > 
tick
)

144 
¥oc_cuºít
->
time_¶i˚
 -
tick
;

147 
¥oc_cuºít
->
time_¶i˚
 = 0;

150 
tick
 > 0)

152 
uöt64_t
 
s
 = 
	`¸h_max_°ï
(&
¸h
);

153 i‡(
s
 == 0)

156 
	`¸h_£t_ba£
(&
¸h
, 
timî_tick
 +
tick
);

160 i‡(
tick
 < 
s
) s =Åick;

161 
¸h_node_t
 
node
 = 
	`¸h_£t_ba£
(&
¸h
, 
timî_tick
 +
s
);

162 
	`timî_queue_≠≥nd
(
node
);

164 
tick
 -
s
;

166 
	}
}

169 
	$timî_öô
()

171 
	`¸h_öô
(&
¸h
);

172 
	`¸h_£t_ba£
(&
¸h
, 0);

173 
timî_tick
 = 0;

175 
	`å≠_úq_h™dÀr_£t
(
IRQ_TIMER
, 
tick_h™dÀr
);

176 
	`tick_öô
(100);

179 
	}
}

	@kern-river/drivers/timer.h

1 #i‚de‡
__RIVER_TIMER_H__


2 
	#__RIVER_TIMER_H__


	)

4 
	~<libs/¸h.h
>

5 
	~<¥oc/evít.h
>

7 
timî_s
 *
	ttimî_t
;

8 (*
	ttimî_cb_f
)(
	ttimî_t
 
	ttimî
);

10 
	stimî_s


12 
°©us
;

18 
evít_s
 
evít
;

19 
¸h_node_s
 
¸h_node
;

22 
timî_t
 *
‰ì_√xt
;

24 } 
	ttimî_s
;

26 
	`timî_›í
(
timî_t
 
timî
, 
uöt64_t
 
tick
);

27 
	`timî_˛o£
(
timî_t
 
timî
);

28 
	`timî_öô
();

29 
	`timî_mósuª
();

31 vﬁ©ûê
uöt64_t
 
timî_tick
;

32 vﬁ©ûê
uöt64_t
 
timî_‰eq
;

	@kern-river/init.c

1 
	~<debug/io.h
>

2 
	~<drivîs/h≥t.h
>

3 
	~<drivîs/pci.h
>

4 
	~<drivîs/ønd.h
>

5 
	~<drivîs/timî.h
>

6 
	~<glue_öå.h
>

7 
	~<glue_kio.h
>

8 
	~<glue_pmm.h
>

9 
	~<mm/kmm.h
>

10 
	~<mp/mp.h
>

11 
	~<¥oc/dos.h
>

12 
	~<¥oc/ïroc.h
>

13 
	~<¥oc/ùe.h
>

14 
	~<¥oc/¥oc.h
>

15 
	~<å≠/å≠.h
>

17 
PLS
 
evít_s
 
	g__öô_evít
;

18 
PLS
 
ïroc_s
 
	göô_ïroc
;

20 
PLS
 
evít_t
 
	göô_evít
 = &
__öô_evít
;

21 
PLS
 
	göô_föished
 = 0;

23 #i‡
IPE_PACKET_TEST


25 
ùe_∑ckë_s
 
	gpög_∑ckë
;

28 
	$pög_∑ckë_h™dÀr
(
ùe_∑ckë_t
 
∑ckë
)

30 
	`k¥ötf
("CPU %d: PING!\n", 
œpic_id
);

31 
	}
}

34 
	$pög_∑ckë_back_h™dÀr
(
ùe_∑ckë_t
 
∑ckë
)

36 
	`k¥ötf
("CPU %d: PONG!\n", 
œpic_id
);

37 
	}
}

41 
evít_s
 
	gtdos
;

42 
timî_s
 
	gt
;

45 
	$ã°_drivî_os_back
(
evít_t
 
evít
)

48 
	`timî_›í
(&
t
, 
timî_tick
 + 
timî_‰eq
 * 1);

49 
	}
}

52 
	$ã°_drivî_os
(
evít_t
 
evít
)

54 
	`dos_∑ckë_£nd
(&
tdos
, 0, 0, 0, 0, 0, 0);

55 
	}
}

58 
	$do_öô
(
evít_t
 
e
)

65 
	`ùe_öô
();

66 
	`dos_öô
();

68 
	`k¥ötf
("LCPU %d DONE\n", 
l˝u_idx
);

70 i‡(
l˝u_idx
 == 1)

72 
	`evít_›í
(&
tdos
, &
öô_ïroc
.
evít_poﬁ
, 
ã°_drivî_os_back
, 
NULL
);

73 
	`evít_›í
(&
t
.
evít
, &
öô_ïroc
.
evít_poﬁ
, 
ã°_drivî_os
, 
NULL
);

74 
	`timî_›í
(&
t
, 
timî_tick
 + 
timî_‰eq
 * 20);

77 
öô_föished
 = 1;

78 
	}
}

81 
	$__kîn_íåy
()

83 
	`mp_öô
();

84 
	`¥oc_öô
();

86 
	`ïroc_›í
(&
öô_ïroc
, "öô", ((*)())
¥oc_waô_åy
, 
NULL
, 8192);

87 
	`evít_›í
(
öô_evít
, &
öô_ïroc
.
evít_poﬁ
, 
do_öô
, 
NULL
);

89 
	`kmm_öô
();

90 
	`å≠_öô
();

92 
	`h≥t_öô
();

93 
	`timî_öô
();

95 
	`ønd_öô
();

97 
loˇl_öå_íabÀ_hw
;

98 
	`timî_mósuª
();

100 
	`do_idÀ
();

102 
	`k¥ötf
("[%d]IDLE EXIT\n", 
œpic_id
);

103 1Ë
asm
 volatile ("hlt");

104 
	}
}

	@kern-river/init.h

1 #i‚de‡
__RIVER_INIT_H__


2 
	#__RIVER_INIT_H__


	)

4 
	~<¥oc/evít.h
>

6 
öô_föished
;

7 
evít_t
 
öô_evít
;

	@kern-river/libs/crh.c

1 
	~<libs/¸h.h
>

2 
	~<libs/°rög.h
>

3 
	~<libs/x86/bô£¨ch.h
>

5 
	$¸h_öô
(
¸h_t
 
¸h
)

7 
	`mem£t
(
¸h
, 0, (
¸h_s
));

8 
	}
}

10 
ölöe
 

11 
	$_¸h_ö£π
(
¸h_t
 
¸h
, 
¸h_node_t
 
node
)

13 
d
 = 
	`b§
(
¸h
->
ba£
 ^ 
node
->
key
Ë>> 
CRH_RADIX_BITSIZE_SHIFT
;

14 
idx
 = (
node
->
key
 >> (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)Ë& ((1 << 
CRH_RADIX_BITSIZE
) - 1);

16 i‡((
node
->
√xt
 = 
¸h
->
hóds
[
d
][
idx
]Ë!
NULL
)

17 
node
->
√xt
->
¥ev
 =Çode;

18 
node
->
¥ev
 = 
NULL
;

19 
¸h
->
hóds
[
d
][
idx
] = 
node
;

21 
¸h
->
hóds_bm
[
d
] |1 << 
idx
;

22 
¸h
->
bm
 |1 << 
d
;

24  
d
;

25 
	}
}

27 
¸h_node_t


28 
	$¸h_£t_ba£
(
¸h_t
 
¸h
, 
¸h_key_t
 
ba£
)

30 i‡(
¸h
->
ba£
 =ba£Ë 
NULL
;

31 
¸h_node_t
 
ªsu…
;

32 
ªsu…
 = 
NULL
;

34 
d
 = 
	`b§
(
¸h
->
ba£
 ^ ba£Ë>> 
CRH_RADIX_BITSIZE_SHIFT
;

35 
idx
 = (
ba£
 >> (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)Ë& ((1 << 
CRH_RADIX_BITSIZE
) - 1);

37 
¸h
->
ba£
 = base;

38 
¸h_node_t
 
node
 = 
¸h
->
hóds
[
d
][
idx
];

40 
¸h
->
hóds
[
d
][
idx
] = 
NULL
;

41 i‡(
node
 !
NULL
)

43 i‡((
¸h
->
hóds_bm
[
d
] ^(1 << 
idx
)) == 0)

44 
¸h
->
bm
 ^1 << 
d
;

47 
node
 !
NULL
)

49 
¸h_node_t
 
√xt
 = 
node
->next;

50 i‡(
node
->
key
 !
ba£
)

52 
	`_¸h_ö£π
(
¸h
, 
node
);

56 i‡(
ªsu…
 =
NULL
)

58 
node
->
√xt
 =Çode->
¥ev
 =Çode;

59 
ªsu…
 = 
node
;

63 
node
->
√xt
 = 
ªsu…
;

64 
node
->
¥ev
 = 
ªsu…
->prev;

65 
node
->
√xt
->
¥ev
 =Çode;

66 
node
->
¥ev
->
√xt
 =Çode;

69 
node
 = 
√xt
;

72  
ªsu…
;

73 
	}
}

76 
	$¸h_ö£π
(
¸h_t
 
¸h
, 
¸h_node_t
 
node
)

78 i‡(
¸h
->
ba£
 =
node
->
key
)  -1;

79 
	`_¸h_ö£π
(
¸h
, 
node
);

81 
	}
}

83 
¸h_key_t
 
	$¸h_max_°ï
(
¸h_t
 
¸h
)

85 i‡(
¸h
->
bm
 == 0)  0;

87 
d
 = 
	`bsf
(
¸h
->
bm
);

88 
idx
 = (
¸h
->
ba£
 >> (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)Ë& ((1 << 
CRH_RADIX_BITSIZE
) - 1);

89 
¸h_key_t
 
ªmaö
 = 
d
 == 0 ? 0 :

90 (
¸h
->
ba£
 & ((1 << (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)) - 1));

91 
¸h_key_t
 
r
;

93 i‡(
d
 =
CRH_SEG_COUNT
 - 1)

95 
uöt64_t
 
r_bm
 = (
¸h
->
hóds_bm
[
d
] >> 
idx
) |

96 (
¸h
->
hóds_bm
[
d
] << (
CRH_RADIX_BITSIZE
 - 
idx
));

97 
r
 = (
	`bsf
(
r_bm
Ë<< (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)Ë- 
ªmaö
;

101 
uöt64_t
 
r_bm
 = (
¸h
->
hóds_bm
[
d
] >> 
idx
);

102 i‡(
r_bm
 == 0)

103 
r
 = ((
CRH_RADIX_BITSIZE
 - 
idx
Ë<< (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)Ë- 
ªmaö
;

104 
r
 = (
	`bsf
(
r_bm
Ë<< (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)Ë- 
ªmaö
;

106  
r
;

108 
	}
}

111 
	$¸h_ªmove
(
¸h_t
 
¸h
, 
¸h_node_t
 
node
)

113 i‡(
node
->
¥ev
 !
NULL
)

115 i‡((
node
->
¥ev
->
√xt
 =Çode->√xtË!
NULL
)

116 
node
->
√xt
->
¥ev
 =Çode->prev;

120 
d
 = 
	`b§
(
¸h
->
ba£
 ^ 
node
->
key
Ë>> 
CRH_RADIX_BITSIZE_SHIFT
;

121 
idx
 = (
node
->
key
 >> (
d
 << 
CRH_RADIX_BITSIZE_SHIFT
)Ë& ((1 << 
CRH_RADIX_BITSIZE
) - 1);

123 i‡(
node
->
√xt
 !
NULL
)

125 
node
->
√xt
->
¥ev
 = 
NULL
;

126 
¸h
->
hóds
[
d
][
idx
] = 
node
->
√xt
;

130 
¸h
->
hóds
[
d
][
idx
] = 
NULL
;

131 i‡((
¸h
->
hóds_bm
[
d
] ^1 << 
idx
) == 0)

133 
¸h
->
bm
 ^1 << 
d
;

136 
	}
}

	@kern-river/libs/crh.h

1 #i‚de‡
__LIBS_CRADIX_HEAP_H__


2 
	#__LIBS_CRADIX_HEAP_H__


	)

4 
	~<libs/ty≥s.h
>

8 
	#CRH_KEY_BITSIZE
 (64)

	)

9 
	#CRH_RADIX_BITSIZE_SHIFT
 (2)

	)

10 
	#CRH_RADIX_BITSIZE
 (1 << 
CRH_RADIX_BITSIZE_SHIFT
)

	)

11 
	#CRH_SEG_COUNT
 (16)

	)

13 
uöt64_t
 
	t¸h_key_t
;

15 
¸h_node_s
 *
	t¸h_node_t
;

16 
	s¸h_node_s


18 
¸h_key_t
 
	mkey
;

19 
¸h_node_t
 
	m√xt
, 
	m¥ev
;

20 } 
	t¸h_node_s
;

22 
¸h_s
 *
	t¸h_t
;

23 
	s¸h_s


25 
¸h_key_t
 
	mba£
;

27 
uöt64_t
 
	mbm
;

28 
uöt64_t
 
	mhóds_bm
[
CRH_SEG_COUNT
];

30 
¸h_node_t
 
	mhóds
[
CRH_SEG_COUNT
][1 << 
CRH_RADIX_BITSIZE
];

31 } 
	t¸h_s
;

33 
¸h_öô
(
¸h_t
 
¸h
);

34 
¸h_node_t
 
¸h_£t_ba£
(
¸h_t
 
¸h
, 
¸h_key_t
 
ba£
);

35 
¸h_key_t
 
¸h_max_°ï
(
¸h_t
 
¸h
);

36 
¸h_ö£π
(
¸h_t
 
¸h
, 
¸h_node_t
 
node
);

37 
¸h_ªmove
(
¸h_t
 
¸h
, 
¸h_node_t
 
node
);

	@kern-river/libs/printfmt.c

1 
	~<libs/x86.h
>

2 
	~<libs/¥ötfmt.h
>

3 
	~<libs/°rög.h
>

21 
¥öäum
((*
putch
)(, *), *
putd©
,

22 
num
, 
ba£
, 
width
, 
∑dc
) {

23 
ªsu…
 = 
num
;

24 
mod
 = 
	`do_div
(
ªsu…
, 
ba£
);

27 i‡(
num
 >
ba£
) {

28 
	`¥öäum
(
putch
, 
putd©
, 
ªsu…
, 
ba£
, 
width
 - 1, 
∑dc
);

31 -- 
width
 > 0)

32 
	`putch
(
∑dc
, 
putd©
);

35 
	`putch
("0123456789abcdef"[
mod
], 
putd©
);

36 
	}
}

44 
	$gëuöt
(
va_li°
 
≠
, 
lÊag
) {

45 i‡(
lÊag
 >= 2) {

46  
	`va_¨g
(
≠
, );

48 i‡(
lÊag
) {

49  
	`va_¨g
(
≠
, );

52  
	`va_¨g
(
≠
, );

54 
	}
}

62 
	$gëöt
(
va_li°
 
≠
, 
lÊag
) {

63 i‡(
lÊag
 >= 2) {

64  
	`va_¨g
(
≠
, );

66 i‡(
lÊag
) {

67  
	`va_¨g
(
≠
, );

70  
	`va_¨g
(
≠
, );

72 
	}
}

81 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...) {

82 
va_li°
 
≠
;

84 
	`va_°¨t
(
≠
, 
fmt
);

85 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

86 
	`va_íd
(
≠
);

87 
	}
}

101 
v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
) {

102 c⁄° *
p
;

103 
ch
;

104 
num
;

105 
ba£
, 
width
, 
¥ecisi⁄
, 
lÊag
, 
ÆtÊag
;

108 (
ch
 = *(*)
fmt
 ++) != '%') {

109 i‡(
ch
 == '\0') {

112 
	`putch
(
ch
, 
putd©
);

116 
∑dc
 = ' ';

117 
width
 = 
¥ecisi⁄
 = -1;

118 
lÊag
 = 
ÆtÊag
 = 0;

120 
ªswôch
:

121 
ch
 = *(*)
fmt
 ++) {

125 
∑dc
 = '-';

126 
ªswôch
;

130 
∑dc
 = '0';

131 
ªswôch
;

135 
¥ecisi⁄
 = 0; ; ++ 
fmt
) {

136 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

137 
ch
 = *
fmt
;

138 i‡(
ch
 < '0' || ch > '9') {

142 
¥o˚ss_¥ecisi⁄
;

145 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

146 
¥o˚ss_¥ecisi⁄
;

149 i‡(
width
 < 0)

150 
width
 = 0;

151 
ªswôch
;

154 
ÆtÊag
 = 1;

155 
ªswôch
;

157 
¥o˚ss_¥ecisi⁄
:

158 i‡(
width
 < 0)

159 
width
 = 
¥ecisi⁄
,Örecision = -1;

160 
ªswôch
;

164 
lÊag
 ++;

165 
ªswôch
;

169 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
);

174 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
) {

175 
p
 = "(null)";

177 i‡(
width
 > 0 && 
∑dc
 != '-') {

178 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width --) {

179 
	`putch
(
∑dc
, 
putd©
);

182 ; (
ch
 = *
p
 ++Ë!'\0' && (
¥ecisi⁄
 < 0 || --Öªcisi⁄ >0); 
width
 --) {

183 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~')) {

184 
	`putch
('?', 
putd©
);

187 
	`putch
(
ch
, 
putd©
);

190 ; 
width
 > 0; width --) {

191 
	`putch
(' ', 
putd©
);

197 
num
 = 
	`gëöt
(
≠
, 
lÊag
);

198 i‡(()
num
 < 0) {

199 
	`putch
('-', 
putd©
);

200 
num
 = -()num;

202 
ba£
 = 10;

203 
numbî
;

207 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

208 
ba£
 = 10;

209 
numbî
;

213 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

214 
ba£
 = 8;

215 
numbî
;

219 
	`putch
('0', 
putd©
);

220 
	`putch
('x', 
putd©
);

221 
num
 = ()(
uöçå_t
)
	`va_¨g
(
≠
, *);

222 
ba£
 = 16;

223 
numbî
;

227 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

228 
ba£
 = 16;

229 
numbî
:

230 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

235 
	`putch
(
ch
, 
putd©
);

240 
	`putch
('%', 
putd©
);

241 
fmt
 --; fmt[-1] != '%'; fmt --)

246 
	}
}

249 
	s•rötbuf
 {

250 *
	mbuf
;

251 *
	mebuf
;

252 
	m˙t
;

261 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
) {

262 
b
->
˙t
 ++;

263 i‡(
b
->
buf
 < b->
ebuf
) {

264 *
b
->
buf
 ++ = 
ch
;

266 
	}
}

275 
	$¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...) {

276 
va_li°
 
≠
;

277 
˙t
;

278 
	`va_°¨t
(
≠
, 
fmt
);

279 
˙t
 = 
	`v¢¥ötf
(
°r
, 
size
, 
fmt
, 
≠
);

280 
	`va_íd
(
≠
);

281  
˙t
;

282 
	}
}

299 
	$v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

300 
•rötbuf
 
b
 = {
°r
, så + 
size
 - 1, 0};

301 i‡(
°r
 =
NULL
 || 
b
.
buf
 > b.
ebuf
) {

305 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
≠
);

307 *
b
.
buf
 = '\0';

308  
b
.
˙t
;

309 
	}
}

	@kern-river/libs/printfmt.h

1 #i‚de‡
__LIBS_PRINTFMT_H__


2 
	#__LIBS_PRINTFMT_H__


	)

4 
	~<libs/ty≥s.h
>

5 
	~<libs/°d¨g.h
>

7 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

8 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
);

9 
	`¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...);

10 
	`v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
);

	@kern-river/libs/stdarg.h

1 #i‚de‡
__LIBS_STDARG_H__


2 
	#__LIBS_STDARG_H__


	)

5 
__buûtö_va_li°
 
	tva_li°
;

7 
	#va_°¨t
(
≠
, 
œ°
Ë(
	`__buûtö_va_°¨t
◊p,Üa°))

	)

8 
	#va_¨g
(
≠
, 
ty≥
Ë(
	`__buûtö_va_¨g
◊p,Åy≥))

	)

9 
	#va_íd
(
≠
Ë

	)

	@kern-river/libs/string.c

1 
	~<libs/°rög.h
>

2 
	~<libs/x86.h
>

11 
size_t


12 
	$°æí
(c⁄° *
s
) {

13 
size_t
 
˙t
 = 0;

14 *
s
 ++ != '\0') {

15 
˙t
 ++;

17  
˙t
;

18 
	}
}

33 
size_t


34 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
Àn
) {

35 
size_t
 
˙t
 = 0;

36 
˙t
 < 
Àn
 && *
s
 ++ != '\0') {

37 
˙t
 ++;

39  
˙t
;

40 
	}
}

55 
	$°r˝y
(*
d°
, c⁄° *
§c
) {

56 #ifde‡
__HAVE_ARCH_STRCPY


57  
	`__°r˝y
(
d°
, 
§c
);

59 *
p
 = 
d°
;

60 (*
p
 ++ = *
§c
 ++) != '\0')

62  
d°
;

64 
	}
}

77 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

78 *
p
 = 
d°
;

79 
Àn
 > 0) {

80 i‡((*
p
 = *
§c
) != '\0') {

81 
§c
 ++;

83 
p
 ++, 
Àn
 --;

85  
d°
;

86 
	}
}

97 
	$°rˇt
(*
d°
, c⁄° *
§c
) {

98  
	`°r˝y
(
d°
 + 
	`°æí
(d°), 
§c
);

99 
	}
}

117 
	$°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

118 #ifde‡
__HAVE_ARCH_STRCMP


119  
	`__°rcmp
(
s1
, 
s2
);

121 *
s1
 !'\0' && *s1 =*
s2
) {

122 
s1
 ++, 
s2
 ++;

124  ()(()*
s1
 - ()*
s2
);

126 
	}
}

140 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
) {

141 
n
 > 0 && *
s1
 !'\0' && *s1 =*
s2
) {

142 
n
 --, 
s1
 ++, 
s2
 ++;

144  (
n
 =0Ë? 0 : ()(()*
s1
 - ()*
s2
);

145 
	}
}

156 
	$°rchr
(c⁄° *
s
, 
c
) {

157 *
s
 != '\0') {

158 i‡(*
s
 =
c
) {

159  (*)
s
;

161 
s
 ++;

163  
NULL
;

164 
	}
}

176 
	$°rföd
(c⁄° *
s
, 
c
) {

177 *
s
 != '\0') {

178 i‡(*
s
 =
c
) {

181 
s
 ++;

183  (*)
s
;

184 
	}
}

217 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
) {

218 
√g
 = 0;

219 
vÆ
 = 0;

222 *
s
 == ' ' || *s == '\t') {

223 
s
 ++;

227 i‡(*
s
 == '+') {

228 
s
 ++;

230 i‡(*
s
 == '-') {

231 
s
 ++, 
√g
 = 1;

235 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x')) {

236 
s
 +2, 
ba£
 = 16;

238 i‡(
ba£
 =0 && 
s
[0] == '0') {

239 
s
 ++, 
ba£
 = 8;

241 i‡(
ba£
 == 0) {

242 
ba£
 = 10;

247 
dig
;

249 i‡(*
s
 >= '0' && *s <= '9') {

250 
dig
 = *
s
 - '0';

252 i‡(*
s
 >= 'a' && *s <= 'z') {

253 
dig
 = *
s
 - 'a' + 10;

255 i‡(*
s
 >= 'A' && *s <= 'Z') {

256 
dig
 = *
s
 - 'A' + 10;

261 i‡(
dig
 >
ba£
) {

264 
s
 ++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

268 i‡(
íd±r
) {

269 *
íd±r
 = (*Ë
s
;

271  (
√g
 ? -
vÆ
 : val);

272 
	}
}

284 
	$mem£t
(*
s
, 
c
, 
size_t
 
n
) {

285 #ifde‡
__HAVE_ARCH_MEMSET


286  
	`__mem£t
(
s
, 
c
, 
n
);

288 *
p
 = 
s
;

289 
n
 -- > 0) {

290 *
p
 ++ = 
c
;

292  
s
;

294 
	}
}

306 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

307 #ifde‡
__HAVE_ARCH_MEMMOVE


308  
	`__memmove
(
d°
, 
§c
, 
n
);

310 c⁄° *
s
 = 
§c
;

311 *
d
 = 
d°
;

312 i‡(
s
 <
glue_
 
d
 && s + 
n
 > d) {

313 
s
 +
n
, 
d
 +=Ç;

314 
n
 -- > 0) {

315 *-- 
d
 = *-- 
s
;

318 
n
 -- > 0) {

319 *
d
 ++ = *
s
 ++;

322  
d°
;

324 
	}
}

341 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

342 #ifde‡
__HAVE_ARCH_MEMCPY


343  
	`__mem˝y
(
d°
, 
§c
, 
n
);

345 c⁄° *
s
 = 
§c
;

346 *
d
 = 
d°
;

347 
n
 -- > 0) {

348 *
d
 ++ = *
s
 ++;

350  
d°
;

352 
	}
}

369 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
) {

370 c⁄° *
s1
 = (c⁄° *)
v1
;

371 c⁄° *
s2
 = (c⁄° *)
v2
;

372 
n
 -- > 0) {

373 i‡(*
s1
 !*
s2
) {

374  ()(()*
s1
 - ()*
s2
);

376 
s1
 ++, 
s2
 ++;

379 
	}
}

384 #i‚de‡
__HAVE_ARCH_STRSPN


391 
size_t
 
	$°r•n
(c⁄° *
s
, c⁄° *
ac˚±
)

393 c⁄° *
p
;

394 c⁄° *
a
;

395 
size_t
 
cou¡
 = 0;

397 
p
 = 
s
; *p != '\0'; ++p) {

398 
a
 = 
ac˚±
; *a != '\0'; ++a) {

399 i‡(*
p
 =*
a
)

402 i‡(*
a
 == '\0')

403  
cou¡
;

404 ++
cou¡
;

406  
cou¡
;

407 
	}
}

410 #i‚de‡
__HAVE_ARCH_STRCSPN


417 
size_t
 
	$°rc•n
(c⁄° *
s
, c⁄° *
ªje˘
)

419 c⁄° *
p
;

420 c⁄° *
r
;

421 
size_t
 
cou¡
 = 0;

423 
p
 = 
s
; *p != '\0'; ++p) {

424 
r
 = 
ªje˘
; *r != '\0'; ++r) {

425 i‡(*
p
 =*
r
)

426  
cou¡
;

428 ++
cou¡
;

430  
cou¡
;

431 
	}
}

	@kern-river/libs/string.h

1 #i‚de‡
__LIBS_STRING_H__


2 
	#__LIBS_STRING_H__


	)

4 
	~<libs/ty≥s.h
>

6 
size_t
 
°æí
(c⁄° *
s
);

7 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
Àn
);

9 *
°r˝y
(*
d°
, c⁄° *
§c
);

10 *
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

11 *
°rˇt
(*
d°
, c⁄° *
§c
);

12 *
°rdup
(c⁄° *
§c
);

13 *
°ødd
(c⁄° *
§c1
, c⁄° *
§c2
);

15 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

16 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

18 *
°rchr
(c⁄° *
s
, 
c
);

19 *
°rföd
(c⁄° *
s
, 
c
);

20 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

22 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

23 *
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

24 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

25 
memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
);

	@kern-river/libs/types.h

1 #i‚de‡
__LIBS_TYPES_H__


2 
	#__LIBS_TYPES_H__


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*)0)

	)

8 
	#CHAR_BIT
 8

	)

11 
	tboﬁ
;

14 
	töt8_t
;

15 
	tuöt8_t
;

16 
	töt16_t
;

17 
	tuöt16_t
;

18 
	töt32_t
;

19 
	tuöt32_t
;

20 
	töt64_t
;

21 
	tuöt64_t
;

24 
öt64_t
 
	töçå_t
;

25 
uöt64_t
 
	tuöçå_t
;

28 
uöçå_t
 
	tsize_t
;

31 
öçå_t
 
	toff_t
;

37 
	#ROUNDDOWN
(
a
, 
n
) ({ \

38 
size_t
 
__a
 = (size_t)(
a
); \

39 (
	`ty≥of
(
a
))(
__a
 - __®% (
n
)); \

40 })

	)

43 
	#ROUNDUP
(
a
, 
n
) ({ \

44 
size_t
 
__n
 = (size_t)(
n
); \

45 (
	`ty≥of
(
a
))(
	`ROUNDDOWN
((
size_t
)◊Ë+ 
__n
 - 1, __n)); \

46 })

	)

49 
	#ROUNDUP_DIV
(
a
, 
n
) ({ \

50 
uöt32_t
 
__n
 = (uöt32_t)(
n
); \

51 (
	`ty≥of
(
a
))((◊Ë+ 
__n
 - 1) / __n); \

52 })

	)

55 
	#off£tof
(
ty≥
, 
membî
) \

56 ((
size_t
)(&((
ty≥
 *)0)->
membî
))

	)

64 
	#to_°ru˘
(
±r
, 
ty≥
, 
membî
) \

65 ((
ty≥
 *)((*)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

	@kern-river/libs/x86.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<libs/ty≥s.h
>

6 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" ::: "mem‹y")

	)

8 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
ölöe
 
uöt16_t
 
	$öw
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
ölöe
 
uöt32_t
 
	$öl
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
	$oué
(
uöt16_t
 
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
	sp£udodesc
 {

19 
uöt16_t
 
pd_lim
;

20 
uöçå_t
 
pd_ba£
;

21 } 
	`__©åibuã__
 ((
∑cked
));

23 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
uöçå_t
 
	$r¸1
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
uöçå_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
ölöe
 
uöt8_t


36 
	$öb
(
uöt16_t
 
p‹t
) {

37 
uöt8_t
 
d©a
;

38 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
) : "memory");

39  
d©a
;

40 
	}
}

43 
ölöe
 
uöt16_t


44 
	$öw
(
uöt16_t
 
p‹t
) {

45 
uöt16_t
 
d©a
;

46 
asm
 vﬁ©ûê("öw %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
) : "memory");

47  
d©a
;

48 
	}
}

51 
ölöe
 
uöt32_t


52 
	$öl
(
uöt16_t
 
p‹t
) {

53 
uöt32_t
 
d©a
;

54 
asm
 vﬁ©ûê("ö»%1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
) : "memory");

55  
d©a
;

56 
	}
}

58 
ölöe
 

59 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

60 
asm
 volatile (

63 : "=D" (
addr
), "=c" (
˙t
)

64 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

66 
	}
}

68 
ölöe
 

69 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

70 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

71 
	}
}

73 
ölöe
 

74 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

75 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

76 
	}
}

78 
ölöe
 

79 
	$oué
(
uöt16_t
 
p‹t
, 
uöt32_t
 
d©a
) {

80 
asm
 vﬁ©ûê("oué %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

81 
	}
}

83 
ölöe
 

84 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
) {

85 
asm
 volatile (

88 : "=S" (
addr
), "=c" (
˙t
)

89 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

91 
	}
}

93 
ölöe
 

94 
	$lidt
(
p£udodesc
 *
pd
) {

95 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
) : "memory");

96 
	}
}

98 
ölöe
 

99 
	$°i
() {

100 
asm
 volatile ("sti");

101 
	}
}

103 
ölöe
 

104 
	$˛i
() {

105 
asm
 volatile ("cli" ::: "memory");

106 
	}
}

108 
ölöe
 

109 
	$…r
(
uöt16_t
 
£l
) {

110 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
) : "memory");

111 
	}
}

113 
ölöe
 

114 
	$l¸0
(
uöçå_t
 
¸0
) {

115 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
) : "memory");

116 
	}
}

118 
ölöe
 

119 
	$l¸3
(
uöçå_t
 
¸3
) {

120 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
) : "memory");

121 
	}
}

123 
ölöe
 
uöçå_t


124 
	$r¸0
() {

125 
uöçå_t
 
¸0
;

126 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
) :: "memory");

127  
¸0
;

128 
	}
}

130 
ölöe
 
uöçå_t


131 
	$r¸1
() {

132 
uöçå_t
 
¸1
;

133 
asm
 vﬁ©ûê("mov %%¸1, %0" : "Ù" (
¸1
) :: "memory");

134  
¸1
;

135 
	}
}

137 
ölöe
 
uöçå_t


138 
	$r¸2
() {

139 
uöçå_t
 
¸2
;

140 
asm
 vﬁ©ûê("mov %%¸2, %0" : "Ù" (
¸2
) :: "memory");

141  
¸2
;

142 
	}
}

144 
ölöe
 
uöçå_t


145 
	$r¸3
() {

146 
uöçå_t
 
¸3
;

147 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
) :: "memory");

148  
¸3
;

149 
	}
}

151 
ölöe
 

152 
	$övÕg
(*
addr
) {

153 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

154 
	}
}

156 
	#do_div
(
n
, 
ba£
) ({ \

157 
uöt64_t
 
__mod
, 
__ba£
 = (uöt64_t)
ba£
; \

158 
__mod
 = ((
uöt64_t
)(
n
)Ë% 
__ba£
; \

159 (
n
Ë((
uöt64_t
)“)Ë/ 
__ba£
; \

160 
__mod
; \

161 })

	)

163 
ölöe
 
uöt64_t
 
	$ªad_rbp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
uöt64_t
 
	$ªad_rÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
uöt64_t


168 
	$ªad_rbp
() {

169 
uöt64_t
 
rbp
;

170 
asm
 vﬁ©ûê("movq %%rbp, %0" : "Ù" (
rbp
));

171  
rbp
;

172 
	}
}

174 
ölöe
 
uöt64_t


175 
	$ªad_rÊags
() {

176 
uöt64_t
 
rÊags
;

177 
asm
 vﬁ©ûê("pushfq;Ö›q %0" : "Ù" (
rÊags
));

178  
rÊags
;

179 
	}
}

181 
ölöe
 

182 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
) {

183 
asm
 vﬁ©ûê("pushq %0;Ö›fq" :: "r" (
rÊags
));

184 
	}
}

186 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

187 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

188 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

189 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

190 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

192 #i‚de‡
__HAVE_ARCH_STRCMP


193 
	#__HAVE_ARCH_STRCMP


	)

194 
ölöe
 

195 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

196 
d0
, 
d1
, 
ªt
;

197 
asm
 volatile (

208 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

209 : "1" (
s1
), "2" (
s2
)

211  
ªt
;

212 
	}
}

216 #i‚de‡
__HAVE_ARCH_STRCPY


217 
	#__HAVE_ARCH_STRCPY


	)

218 
ölöe
 *

219 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

220 
d0
, 
d1
, 
d2
;

221 
asm
 volatile (

226 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

227 : "0" (
§c
), "1" (
d°
) : "memory");

228  
d°
;

229 
	}
}

232 #i‚de‡
__HAVE_ARCH_MEMSET


233 
	#__HAVE_ARCH_MEMSET


	)

234 
ölöe
 *

235 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

236 
d0
, 
d1
;

237 
asm
 volatile (

239 : "=&c" (
d0
), "=&D" (
d1
)

240 : "0" (
n
), "a" (
c
), "1" (
s
)

242  
s
;

243 
	}
}

246 #i‚de‡
__HAVE_ARCH_MEMMOVE


247 
	#__HAVE_ARCH_MEMMOVE


	)

248 
ölöe
 *

249 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

250 i‡(
d°
 < 
§c
) {

251  
	`__mem˝y
(
d°
, 
§c
, 
n
);

253 
d0
, 
d1
, 
d2
;

254 
asm
 volatile (

258 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

259 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

261  
d°
;

262 
	}
}

265 #i‚de‡
__HAVE_ARCH_MEMCPY


266 
	#__HAVE_ARCH_MEMCPY


	)

267 
ölöe
 *

268 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

269 
d0
, 
d1
, 
d2
;

270 
asm
 volatile (

277 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

278 : "0" (
n
 / 4), "m" (n), "1" (
d°
), "2" (
§c
)

280  
d°
;

281 
	}
}

	@kern-river/libs/x86/atom.h

1 #i‚de‡
__ATOM_H__


2 
	#__ATOM_H__


	)

4 
	~<libs/ty≥s.h
>

6 
__ölöe
 
uöt64_t


7 
	$xchg64
(vﬁ©ûê*
addr
, 
uöt64_t
 
√wvÆ
)

9 
uöt64_t
 
ªsu…
;

12 
asm
 volatile("lock; xchgq %0, %1" :

13 "+m" (*(vﬁ©ûê
uöt64_t
 *)
addr
), "˜" (
ªsu…
) :

14 "1" (
√wvÆ
) :

16  
ªsu…
;

17 
	}
}

19 
__ölöe
 
uöt32_t


20 
	$xchg32
(vﬁ©ûê*
addr
, 
uöt32_t
 
√wvÆ
)

22 
uöt32_t
 
ªsu…
;

25 
asm
 volatile("lock; xchgl %0, %1" :

26 "+m" (*(vﬁ©ûê
uöt32_t
 *)
addr
), "˜" (
ªsu…
) :

27 "1" (
√wvÆ
) :

29  
ªsu…
;

30 
	}
}

32 
__ölöe
 
uöt16_t


33 
	$xchg16
(vﬁ©ûê*
addr
, 
uöt16_t
 
√wvÆ
)

35 
uöt16_t
 
ªsu…
;

38 
asm
 volatile("lock; xchgw %0, %1" :

39 "+m" (*(vﬁ©ûê
uöt16_t
 *)
addr
), "˜" (
ªsu…
) :

40 "1" (
√wvÆ
) :

42  
ªsu…
;

43 
	}
}

45 
__ölöe
 
uöt8_t


46 
	$xchg8
(vﬁ©ûê*
addr
, 
uöt8_t
 
√wvÆ
)

48 
uöt8_t
 
ªsu…
;

51 
asm
 volatile("lock xchgb %0, %1" :

52 "+m" (*(vﬁ©ûê
uöt8_t
 *)
addr
), "˜" (
ªsu…
) :

53 "1" (
√wvÆ
) :

55  
ªsu…
;

56 
	}
}

58 
__ölöe
 
uöt64_t


59 
	$cmpxchg64
(vﬁ©ûê*
addr
, 
uöt64_t
 
ﬁdvÆ
, uöt64_à
√wvÆ
)

61 
uöt64_t
 
ªsu…
;

63 
asm
 volatile("cmpxchgq %3, %1" :

64 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt64_t
 *)
addr
) :

65 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

67  
ªsu…
;

68 
	}
}

70 
__ölöe
 
uöt32_t


71 
	$cmpxchg32
(vﬁ©ûê*
addr
, 
uöt32_t
 
ﬁdvÆ
, uöt32_à
√wvÆ
)

73 
uöt32_t
 
ªsu…
;

75 
asm
 volatile("cmpxchgl %3, %1" :

76 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt32_t
 *)
addr
) :

77 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

79  
ªsu…
;

80 
	}
}

82 
__ölöe
 
uöt16_t


83 
	$cmpxchg16
(vﬁ©ûê*
addr
, 
uöt16_t
 
ﬁdvÆ
, uöt16_à
√wvÆ
)

85 
uöt16_t
 
ªsu…
;

87 
asm
 volatile("cmpxchgw %3, %1" :

88 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt16_t
 *)
addr
) :

89 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

91  
ªsu…
;

92 
	}
}

94 
__ölöe
 
uöt8_t


95 
	$cmpxchg8
(vﬁ©ûê*
addr
, 
uöt8_t
 
ﬁdvÆ
, uöt8_à
√wvÆ
)

97 
uöt8_t
 
ªsu…
;

99 
asm
 volatile("cmpxchgb %3, %1" :

100 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt8_t
 *)
addr
) :

101 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

103  
ªsu…
;

104 
	}
}

	@kern-river/libs/x86/bitsearch.h

1 #i‚de‡
__BITSEARCH_H__


2 
	#__BITSEARCH_H__


	)

4 
	~<libs/ty≥s.h
>

6 
ölöe
 
	$bsf
(
uöt64_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

7 
ölöe
 
	$b§
(
uöt64_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
ölöe
 

10 
	$bsf
(
uöt64_t
 
n
)

12 i‡(
n
 == 0)  -1;

13 
uöt64_t
 
ªsu…
;

14 
__asm
 
	`__vﬁ©ûe
("bsfq %1, %0"

15 : "Ù" (
ªsu…
)

16 : "r" (
n
));

17  
ªsu…
;

18 
	}
}

20 
ölöe
 

21 
	$b§
(
uöt64_t
 
n
)

23 i‡(
n
 == 0)  -1;

24 
uöt64_t
 
ªsu…
;

25 
__asm
 
	`__vﬁ©ûe
("bsrq %1, %0"

26 : "Ù" (
ªsu…
)

27 : "r" (
n
));

28  
ªsu…
;

29 
	}
}

	@kern-river/libs/x86/rdtsc.h

1 #i‚de‡
__LIBS_X86_RDTSC_H__


2 
	#__LIBS_X86_RDTSC_H__


	)

4 
	~<libs/ty≥s.h
>

6 
ölöe
 
uöt64_t
 
	$rdtsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

8 
ölöe


9 
uöt64_t
 
	$rdtsc
()

11 
uöt32_t
 
lo
, 
hi
;

13 
__asm__
 
	`__vﬁ©ûe__
 ("xorl %%eax,%%eax; cpuid"::: "%rax", "%rbx", "%rcx", "%rdx");

15 
__asm__
 
	`__vﬁ©ûe__
 ("rdtsc" : "˜" (
lo
), "=d" (
hi
));

16  (
uöt64_t
)
hi
 << 32 | 
lo
;

17 
	}
}

	@kern-river/libs/x86/spinlock.h

1 #i‚de‡
__SPINLOCK_H__


2 
	#__SPINLOCK_H__


	)

4 
	~<libs/x86/©om.h
>

6 
	s•ölock_s
 {

7 vﬁ©ûê
	mlock
;

8 } 
	t•ölock_s
;

10 
•ölock_s
 *
	t•ölock_t
;

12 
	#•ölock_öô
(
x
Ëdÿ{ (x)->
lock
 = 0; } 0)

	)

14 
ölöe
 

15 
	$•ölock_acquúe
(
•ölock_t
 
lock
)

17 
	`xchg32
(&
lock
->lock, 1) == 1) ;

18 
	}
}

20 
ölöe
 

21 
	$•ölock_acquúe_åy
(
•ölock_t
 
lock
)

23  !
	`xchg32
(&
lock
->lock, 1);

24 
	}
}

26 
ölöe
 

27 
	$•ölock_ªÀa£
(
•ölock_t
 
lock
)

29 
lock
->lock = 0;

30 
	}
}

	@kern-river/mm/kmm.c

1 
	~<glue_öå.h
>

2 
	~<glue_mp.h
>

3 
	~<glue_pmm.h
>

4 
	~<libs/°rög.h
>

5 
	~<libs/x86.h
>

6 
	~<libs/x86/bô£¨ch.h
>

7 
	~<å≠/å≠.h
>

9 
	~<mm/kmm.h
>

11 
	#META_SIZE
 ((
uöçå_t
))

	)

12 
	#MIN_SHIFT
 3

	)

13 
	#MIN_ALLOC
 (1 << 
MIN_SHIFT
)

	)

14 
	#ALLOC_DELTA_SHIFT
 10

	)

15 
	#MAX_SHIFT
 (
MIN_SHIFT
 + 
ALLOC_DELTA_SHIFT
)

	)

16 
	#MAX_ALLOC
 (
MIN_ALLOC
 << 
ALLOC_DELTA_SHIFT
)

	)

17 
	#MIN_BLOCK_PAGE
 4

	)

18 
	#MAX_BLOCK_PAGE
 256

	)

20 
	skmm_˘æ_s


22 
size_t
 
	mÆloc_size
;

23 
size_t
 
	mblock_psize
;

24 
uöçå_t
 
	mhód
;

25 } 
	tkmm_˘æ_s
;

27 
PLS
 
kmm_˘æ_s
 
	g˘æ
[
ALLOC_DELTA_SHIFT
 + 1];

29 
PLS
 
pgd_t
 *
	gœ°_pgd
;

30 
PLS
 
uöçå_t
 
	gœ°_addr
;

31 
PLS
 
pud_t
 *
	gãmp_pud
;

32 
PLS
 
pmd_t
 *
	gãmp_pmd
;

33 
PLS
 
±e_t
 *
	gãmp_±d
;

36 
	$kmm_öô
()

38 
i
;

39 
i
 = 0; i <
ALLOC_DELTA_SHIFT
; ++ i)

41 
˘æ
[
i
].
Æloc_size
 = 
MIN_ALLOC
 << i;

42 
˘æ
[
i
].
hód
 = (
uöçå_t
)-1;

43 
˘æ
[
i
].
block_psize
 = 
MIN_BLOCK_PAGE
;

46 
œ°_pgd
 = 
NULL
;

47 
œ°_addr
 = 0;

48 
ãmp_pud
 = 
	`KADDR_DIRECT
(
	`kÆloc_∑ges
(1));

49 
ãmp_pmd
 = 
	`KADDR_DIRECT
(
	`kÆloc_∑ges
(1));

50 
ãmp_±d
 = 
	`KADDR_DIRECT
(
	`kÆloc_∑ges
(1));

53 
	}
}

56 
	$kmm_üŒoc
(
kmm_˘æ_s
 *
˘æ
)

58 i‡(
˘æ
->
hód
 =(
uöçå_t
)-1)

60 
uöçå_t
 
psize
 = 
˘æ
->
block_psize
;

61 i‡(
˘æ
->
block_psize
 < 
MAX_BLOCK_PAGE
)

62 
˘æ
->
block_psize
 <<= 1;

64 
uöçå_t
 
∑
 = 
	`kÆloc_∑ges
(
psize
);

65 i‡(
∑
 =0Ë 
NULL
;

66 *
block
 = 
	`KADDR_DIRECT
(
∑
);

68 
	`mem£t
(
block
, 0, 
psize
 << 
PGSHIFT
);

70 
uöçå_t
 *
èû
 = (uintptr_t *)(

71 (
uöçå_t
)
block
 +

72 (((
psize
 << 
PGSHIFT
Ë/ 
˘æ
->
Æloc_size
 - 1) * (ctrl->alloc_size)));

73 *
èû
 = (
uöçå_t
)-1;

75 
˘æ
->
hód
 = (
uöçå_t
)
block
;

78 
uöçå_t
 *
hód
 = (uöçå_à*)
˘æ
->head;

79 
˘æ
->
hód
 = (*hód =0Ë? (˘æ->hód + cål->
Æloc_size
) : (*head);

81 *
hód
 = (
uöçå_t
)
˘æ
;

83  
hód
 + 1;

84 
	}
}

87 
	$kÆloc
(
size_t
 
size
)

89 
	`loˇl_úq_ßve
();

90 
size_ödex
 = 
	`b§
(
size
 + 
META_SIZE
 - 1Ë- 
MIN_SHIFT
 + 1;

92 *
ªsu…
;

93 i‡(
size_ödex
 < 0)

94 
ªsu…
 = 
NULL
;

95 i‡(
size_ödex
 <
ALLOC_DELTA_SHIFT
)

97 
ªsu…
 = 
	`kmm_üŒoc
((
kmm_˘æ_s
 *)
˘æ
 + 
size_ödex
);

101 
uöçå_t
 
psize
 = (
size
 + 2 * 
PGSIZE
 - 1Ë>> 
PGSHIFT
;

102 
ªsu…
 = 
	`KADDR_DIRECT
(
	`kÆloc_∑ges
(
psize
Ë+ 
PGSIZE
);

103 *((
uöçå_t
 *)
ªsu…
 - 1Ë
psize
;

106 
	`loˇl_úq_ª°‹e
();

107  
ªsu…
;

108 
	}
}

111 
	$k‰ì
(*
±r
)

113 i‡(
±r
 =
NULL
) ;

114 
	`loˇl_úq_ßve
();

116 i‡((
uöçå_t
)
±r
 & (
PGSIZE
 - 1))

118 
uöçå_t
 *
hód
 = ((uöçå_à*)
±r
 - 1);

119 
kmm_˘æ_s
 *
˘æ
 = (kmm_˘æ_†*)*
hód
;

121 *
hód
 = 
˘æ
->head;

122 
˘æ
->
hód
 = (
uöçå_t
)head;

126 
	`k‰ì_∑ges
((
uöçå_t
)
	`PADDR_DIRECT
(
±r
Ë- 
PGSIZE
, *((uintptr_t *)ptr - 1));

129 
	`loˇl_úq_ª°‹e
();

130 
	}
}

132 
	~<libs/x86.h
>

133 
	~<mp/mp.h
>

136 
	$kmm_pgÁu…
(
å≠‰ame
 *
tf
)

139 
uöçå_t
 
addr
 = 
	`r¸2
();

141 i‡(
addr
 >
PBASE
 &&ádd∏< PBASE + 
PSIZE
)

143 
pgd_t
 *
pgd
 = 
	`KADDR_DIRECT
(
	`PTE_ADDR
(
	`r¸3
()));

144 
pud_t
 *
pud
;

145 
pmd_t
 *
pmd
;

146 
±e_t
 *
±d
;

149 i‡(
œ°_pgd
 !
NULL
)

151 
pud
 = 
	`KADDR_DIRECT
(
	`PGD_ADDR
(
œ°_pgd
[
	`PGX
(
œ°_addr
)]));

152 
pmd
 = 
	`KADDR_DIRECT
(
	`PUD_ADDR
(
pud
[
	`PUX
(
œ°_addr
)]));

153 
±d
 = 
	`KADDR_DIRECT
(
	`PMD_ADDR
(
pmd
[
	`PMX
(
œ°_addr
)]));

155 
±d
[
	`PTX
(
œ°_addr
)] = 0;

156 i‡(
±d
 =
ãmp_±d
)

158 
pmd
[
	`PUX
(
œ°_addr
)] = 0;

159 i‡(
pmd
 =
ãmp_pmd
)

161 
pud
[
	`PUX
(
œ°_addr
)] = 0;

162 i‡(
pud
 =
ãmp_pud
)

163 
œ°_pgd
[
	`PGX
(
œ°_addr
)] = 0;

166 i‡(
œ°_pgd
 =
pgd
)

168 
	`övÕg
((*)
œ°_addr
);

173 i‡(
pgd
[
	`PGX
(
œ°_addr
)] == 0)

174 
pgd
[
	`PGX
(
œ°_addr
)] = 
	`PADDR_DIRECT
(
ãmp_pud
Ë| 
PTE_W
 | 
PTE_P
;

175 
pud
 = 
	`KADDR_DIRECT
(
	`PGD_ADDR
(
pgd
[
	`PGX
(
œ°_addr
)]));

176 i‡(
pud
[
	`PUX
(
œ°_addr
)] == 0)

177 
pud
[
	`PUX
(
œ°_addr
)] = 
	`PADDR_DIRECT
(
ãmp_pmd
Ë| 
PTE_W
 | 
PTE_P
;

178 
pmd
 = 
	`KADDR_DIRECT
(
	`PUD_ADDR
(
pud
[
	`PUX
(
œ°_addr
)]));

179 i‡(
pmd
[
	`PMX
(
œ°_addr
)] == 0)

180 
pmd
[
	`PMX
(
œ°_addr
)] = 
	`PADDR_DIRECT
(
ãmp_±d
Ë| 
PTE_W
 | 
PTE_P
;

181 
±d
 = 
	`KADDR_DIRECT
(
	`PMD_ADDR
(
pmd
[
	`PMX
(
œ°_addr
)]));

183 
±d
[
	`PTX
(
œ°_addr
)] = 
	`PADDR_DIRECT
(
addr
Ë| 
PTE_W
 | 
PTE_P
;

185 
œ°_pgd
 = 
pgd
;

186 
œ°_addr
 = 
addr
;

191 
	}
}

	@kern-river/mm/kmm.h

1 #i‚de‡
__RIVER_KMM_H__


2 
	#__RIVER_KMM_H__


	)

4 
	~<libs/ty≥s.h
>

5 
	~<glue_öå.h
>

7 
kmm_öô
();

8 *
kÆloc
(
size_t
 
size
);

9 
k‰ì
(*
±r
);

10 
kmm_pgÁu…
(
å≠‰ame
 *
tf
);

	@kern-river/mp/mp.c

1 
	~<mp/mp.h
>

3 
PLS
 
	gœpic_id
;

4 
PLS
 
	gl˝u_idx
;

5 
PLS
 
	gl˝u_cou¡
;

6 
PLS
 
uöt64_t
 
	gl˝u_‰eq
;

8 
	gmpc⁄f_maö_l˝u_idx
;

11 
	$mp_öô
()

13 
œpic_id
 = 
	`œpic_id_gë
();

14 
l˝u_idx
 = 
	`l˝u_idx_gë
();

15 
l˝u_cou¡
 = 
	`l˝u_cou¡_gë
();

17 
mpc⁄f_maö_l˝u_idx
 = 0;

20 
	}
}

	@kern-river/mp/mp.h

1 #i‚de‡
__RIVER_MP_H__


2 
	#__RIVER_MP_H__


	)

4 
	~<glue_mp.h
>

5 
	~<libs/ty≥s.h
>

7 
œpic_id
;

8 
l˝u_idx
;

9 
l˝u_cou¡
;

10 
l˝u_rivî_cou¡
;

11 
uöt64_t
 
l˝u_‰eq
;

13 
mp_öô
();

	@kern-river/object/object.h

1 #i‚de‡
__RIVER_OBJ_OBJECT_H__


2 
	#__RIVER_OBJ_OBJECT_H__


	)

4 
	~<¥oc/evít.h
>

6 
	#OBJECT_TYPE_NAME_MAX
 32

	)

8 
obje˘_ty≥_s
 *
	tobje˘_ty≥_t
;

9 
	sobje˘_ty≥_s


11 c⁄° 
	m«me
[
OBJECT_TYPE_NAME_MAX
];

12 } 
	tobje˘_desc_s
;

14 
obje˘_hód_s
 *
	tobje˘_hód_t
;

15 
	sobje˘_hód_s


17 
obje˘_ty≥_t
 
	mty≥
;

18 
obje˘_ªf_s
 *
	mhód
;

19 
evít_s
 
	mde°roy_evít
;

20 } 
	tobje˘_hód_s
;

22 
obje˘_öô
();

24 *
obje˘_Æloc
(
size_t
 
size
);

25 
obje˘_‰ì
(*
obje˘
);

26 
obje˘_¥Ÿe˘
(*
obje˘
);

27 
obje˘_u≈rŸe˘
(*
obje˘
);

	@kern-river/object/ref.h

1 #i‚de‡
__RIVER_OBJ_REF_H__


2 
	#__RIVER_OBJ_REF_H__


	)

4 
ªf_s
 *
	tªf_t
;

5 
	sªf_s


7 *
	mobje˘
;

8 
ªf_t
 
	m¥ev
, 
	m√xt
;

9 } 
	tobje˘_ªf_s
;

11 
ªf_£t
(*
obje˘
);

12 *
ªf_gë
(
ªf_t
 
ªf
);

	@kern-river/proc/dos.c

1 
	~<¥oc/dos.h
>

2 
	~<glue_memœyout.h
>

3 
	~<libs/ty≥s.h
>

4 
	~<glue_mp.h
>

5 
	~<mp/mp.h
>

6 
	~<debug/io.h
>

7 
	~<glue_pmm.h
>

8 
	~<libs/x86/©om.h
>

9 
	~<drivîs/ønd.h
>

10 
	~<drivîs/timî.h
>

11 
	~<¥oc/ïroc.h
>

12 
	~<glue_öå.h
>

13 
	~<libs/°rög.h
>

14 
	~<glue_dos.h
>

16 
	#DOS_RETRY
 10

	)

17 
	#DOS_REFRESH_INV
 1

	)

19 
PLS
 vﬁ©ûê*
	gdos_buf
;

20 
PLS
 
	gdos_buf_size
;

21 
PLS
 vﬁ©ûê
dosm_∑ckë_t
 
	gdos_∑ckë_buf
;

22 
PLS
 
	gdos_∑ckë_buf_ˇp
;

23 
PLS
 
	gdos_∑ckë_loˇl_hód
;

24 
PLS
 
	gdos_∑ckë_loˇl_œ°
;

26 
PLS
 
ïroc_s
 
	gdos_ïroc
;

27 
PLS
 
evít_s
 
	g__dos_evít
;

28 
PLS
 
evít_t
 
	gdos_evít
 = &
__dos_evít
;

29 
PLS
 
timî_s
 
	gdos_timî
;

30 
PLS
 
	gdos_íabÀd
;

33 
	$dos_∑ckë_h™dÀ
(
dosm_∑ckë_t
 
∑ckë
)

35 
	`evít_a˘iv©e
((
evít_t
)
∑ckë
->
¥iv
);

36 
	}
}

39 
	$do_dos_sˇn
(
evít_t
 
e
)

41 
Êag
;

43 
	`loˇl_öå_ßve_hw
(
Êag
);

44 
íd
 = 
dos_∑ckë_loˇl_œ°
;

45 
cur
 = 
dos_∑ckë_loˇl_hód
;

46 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

48 
œ°
 = -1, 
√xt
;

49 
cur
 != -1)

51 i‡(
cur
 =
íd
)

52 
√xt
 = -1;

54 
√xt
 = 
dos_∑ckë_buf
[
cur
].
off£t_lök
;

56 i‡(
dos_∑ckë_buf
[
cur
].
ªmŸe_Êags
 & 
DOSM_RF_FINISHED
)

58 
	`dos_∑ckë_h™dÀ
(&
dos_∑ckë_buf
[
cur
]);

60 i‡(
œ°
 != -1)

62 
dos_∑ckë_buf
[
œ°
].
off£t_lök
 = 
√xt
;

64 i‡(
√xt
 != -1)

66 
dos_∑ckë_loˇl_hód
 = 
√xt
;

70 
	`loˇl_öå_ßve_hw
(
Êag
);

71 i‡(
cur
 =
dos_∑ckë_loˇl_œ°
)

73 
dos_∑ckë_loˇl_hód
 = 
dos_∑ckë_loˇl_œ°
 = -1;

75 
dos_∑ckë_loˇl_hód
 = 
dos_∑ckë_buf
[
cur
].
off£t_lök
;

76 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

78 
	`mem£t
(&
dos_∑ckë_buf
[
cur
], 0, (
dosm_∑ckë_s
));

79 
cur
 = 
œ°
;

82 
œ°
 = 
cur
;

83 
cur
 = 
√xt
;

86 i‡(
e
 =&
dos_timî
.
evít
)

88 
	`timî_›í
(&
dos_timî
, 
timî_tick
 + 
DOS_REFRESH_INV
 * 
timî_‰eq
);

90 
	}
}

93 
	$dos_öô
()

95 
dos_íabÀd
 = 
	`drivî_os_is_íabÀd
();

96 i‡(!
dos_íabÀd
)  -1;

98 
dos_buf
 = 
	`drivî_os_buf„r_gë
();

99 
dos_buf_size
 = 
	`drivî_os_buf„r_size_gë
();

100 
dos_∑ckë_buf
 = (
dosm_∑ckë_t
)
dos_buf
;

101 
dos_∑ckë_buf_ˇp
 = 
dos_buf_size
 / (
dosm_∑ckë_s
);

103 
dos_∑ckë_loˇl_hód
 = 
dos_∑ckë_loˇl_œ°
 = -1;

105 
	`ïroc_›í
(&
dos_ïroc
, "doscomm", ((*)())
¥oc_waô_åy
, 
NULL
, 8192);

106 
	`evít_›í
(
dos_evít
, &
dos_ïroc
.
evít_poﬁ
, 
do_dos_sˇn
, 
NULL
);

107 
	`evít_›í
(&
dos_timî
.
evít
, &
dos_ïroc
.
evít_poﬁ
, 
do_dos_sˇn
, 
NULL
);

108 
	`timî_›í
(&
dos_timî
, 
timî_tick
 + 
DOS_REFRESH_INV
 * 
timî_‰eq
);

111 
	}
}

114 
	$dos_∑ckë_Æloc
()

116 
ªåy
;

117 
idx
;

118 
ªåy
 = 0;Ñëry < 
DOS_RETRY
; ++Ñetry)

120 
idx
 = 
	`ønd16
(Ë% 
dos_∑ckë_buf_ˇp
;

121 i‡(
	`cmpxchg16
(&
dos_∑ckë_buf
[
idx
].
sour˚_Êags
, 0, 
DOSM_SF_USED
) == 0) ;

124 i‡(
ªåy
 =
DOS_RETRY
)

126 
	`drivî_os_nŸify
();

130  
idx
;

131 
	}
}

134 
	$dos_∑ckë_£nd
(
evít_t
 
e
, 
uöt64_t
 
¨g0
, uöt64_à
¨g1
, uöt64_à
¨g2
, uöt64_à
¨g3
, uöt64_à
¨g4
, uöt64_à
¨g5
)

136 i‡(!
dos_íabÀd
)  -1;

138 
idx
 = 
	`dos_∑ckë_Æloc
();

139 i‡(
idx
 == -1)  -1;

141 
dos_∑ckë_buf
[
idx
].
¥iv
 = (
uöt64_t
)
e
;

142 
dos_∑ckë_buf
[
idx
].
¨gs
[0] = 
¨g0
;

143 
dos_∑ckë_buf
[
idx
].
¨gs
[1] = 
¨g1
;

144 
dos_∑ckë_buf
[
idx
].
¨gs
[2] = 
¨g2
;

145 
dos_∑ckë_buf
[
idx
].
¨gs
[3] = 
¨g3
;

146 
dos_∑ckë_buf
[
idx
].
¨gs
[4] = 
¨g4
;

147 
dos_∑ckë_buf
[
idx
].
¨gs
[5] = 
¨g5
;

149 
dos_∑ckë_buf
[
idx
].
sour˚_œpic
 = 
œpic_id
;

150 
dos_∑ckë_buf
[
idx
].
ªmŸe_Êags
 = 0;

152 
Êag
;

153 
	`loˇl_öå_ßve_hw
(
Êag
);

154 i‡(
dos_∑ckë_loˇl_œ°
 != -1)

155 
dos_∑ckë_buf
[
dos_∑ckë_loˇl_œ°
].
off£t_lök
 = 
idx
;

158 
dos_∑ckë_loˇl_hód
 = 
dos_∑ckë_loˇl_œ°
 = 
idx
;

160 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

162 
dos_∑ckë_buf
[
idx
].
sour˚_Êags
 |
DOSM_SF_VALID
;

164 
	`drivî_os_nŸify
();

167 
	}
}

170 
	$dos_∑ckë_£ndv
(
evít_t
 
e
, 
uöt64_t
 *
¨gs
)

172 i‡(!
dos_íabÀd
)  -1;

174 
idx
 = 
	`dos_∑ckë_Æloc
();

175 i‡(
idx
 == -1)  -1;

177 
dos_∑ckë_buf
[
idx
].
¥iv
 = (
uöt64_t
)
e
;

178 
	`memmove
(
dos_∑ckë_buf
[
idx
].
¨gs
,árgs, (
uöt64_t
) * 6);

180 
dos_∑ckë_buf
[
idx
].
sour˚_œpic
 = 
œpic_id
;

181 
dos_∑ckë_buf
[
idx
].
ªmŸe_Êags
 = 0;

183 
Êag
;

184 
	`loˇl_öå_ßve_hw
(
Êag
);

185 i‡(
dos_∑ckë_loˇl_œ°
 != -1)

186 
dos_∑ckë_buf
[
dos_∑ckë_loˇl_œ°
].
off£t_lök
 = 
idx
;

189 
dos_∑ckë_loˇl_hód
 = 
dos_∑ckë_loˇl_œ°
 = 
idx
;

191 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

193 
dos_∑ckë_buf
[
idx
].
sour˚_Êags
 |
DOSM_SF_VALID
;

195 
	`drivî_os_nŸify
();

198 
	}
}

	@kern-river/proc/dos.h

1 #i‚de‡
__RIVER_DOS_H__


2 
	#__RIVER_DOS_H__


	)

4 
	~<libs/ty≥s.h
>

5 
	~<¥oc/evít.h
>

7 
evít_t
 
dos_evít
;

9 
	~<dosm-∑ckë.h
>

11 
dos_öô
();

12 
dos_∑ckë_£nd
(
evít_t
 
e
, 
uöt64_t
 
¨g0
, uöt64_à
¨g1
, uöt64_à
¨g2
, uöt64_à
¨g3
, uöt64_à
¨g4
, uöt64_à
¨g5
);

13 
dos_∑ckë_£ndv
(
evít_t
 
e
, 
uöt64_t
 *
¨gs
);

	@kern-river/proc/eproc.c

1 
	~<¥oc/ïroc.h
>

2 
	~<glue_mmu.h
>

3 
	~<glue_memœyout.h
>

4 
	~<glue_pmm.h
>

7 
	$ïroc_public_íåy
(*
__¨g
)

9 
	`evít_lo›
(
	`PROC_TO_EVENT_POOL
(
¥oc_cuºít
));

10 
	}
}

13 
	$ï_touch
(
evít_t
 
evít
)

15 
	`¥oc_nŸify
(
	`EVENT_POOL_TO_PROC
(
evít
->
poﬁ
));

17 
	}
}

20 
	$ï_exhau°
(
evít_poﬁ_t
 
poﬁ
)

22 
	`EVENT_POOL_TO_EPROC
(
poﬁ
)->
	`idÀ
();

23 
	}
}

26 
	$ï_°›
(
evít_poﬁ_t
 
poﬁ
)

30 
	}
}

33 
	$ïroc_›í
(
ïroc_t
 
ïroc
, c⁄° *
«me
, 
ïroc_idÀ_f
 
idÀ
, *
¥iv©e
, 
size_t
 
°ack_size
)

35 
°ack_∑ges
 = (
°ack_size
 + 
PGSIZE
 - 1Ë>> 
PGSHIFT
;

37 
ïroc
->
idÀ
 = idle;

38 
	`evít_poﬁ_öô
(&
ïroc
->
evít_poﬁ
, 
ï_touch
, 
ï_exhau°
, 
ï_°›
);

39 
	`¥oc_›í
(&
ïroc
->
¥oc
, 
«me
, 
ïroc_public_íåy
, 
NULL
, 
¥iv©e
,

40 (
uöçå_t
)
	`KADDR_DIRECT
(
	`kÆloc_∑ges
(
°ack_∑ges
)Ë+ (°ack_∑ge†<< 
PGSHIFT
));

42 
ïroc
->
¥oc
.
ty≥
 = 
PROC_TYPE_KEVENTD
;

43 
ïroc
->
¥oc
.
°©us
 = 
PROC_STATUS_WAIT
;

46 
	}
}

	@kern-river/proc/eproc.h

1 #i‚de‡
__RIVER_EPROC_H__


2 
	#__RIVER_EPROC_H__


	)

4 
	~<libs/ty≥s.h
>

5 
	~<¥oc/¥oc.h
>

6 
	~<¥oc/evít.h
>

8 
ïroc_s
 *
	tïroc_t
;

9 (*
	tïroc_idÀ_f
) ();

11 
	sïroc_s


13 
¥oc_s
 
¥oc
;

14 
evít_poﬁ_s
 
evít_poﬁ
;

16 
ïroc_idÀ_f
 
idÀ
;

17 } 
	tïroc_s
;

19 
	#PROC_TO_EVENT_POOL
(
p
Ë((
evít_poﬁ_t
)( \

20 (
uöçå_t
)
p
 + \

21 (
uöçå_t
)(&((
ïroc_t
)0)->
evít_poﬁ
Ë- (uöçå_t)(&(”¥oc_t)0)->
¥oc
)))

	)

23 
	#EVENT_POOL_TO_PROC
(
ï
Ë((
¥oc_t
)( \

24 (
uöçå_t
)
ï
 + \

25 (
uöçå_t
)(&((
ïroc_t
)0)->
¥oc
Ë- (uöçå_t)(&(”¥oc_t)0)->
evít_poﬁ
)))

	)

27 
	#EVENT_POOL_TO_EPROC
(
ï
Ë((
ïroc_t
)( \

28 (
uöçå_t
)
ï
 - (uöçå_t)(&((
ïroc_t
)0)->
evít_poﬁ
)))

	)

31 
	`ïroc_›í
(
ïroc_t
 
ïroc
, c⁄° *
«me
, 
ïroc_idÀ_f
 
idÀ
, *
¥iv©e
, 
size_t
 
°ack_size
);

	@kern-river/proc/event.c

1 
	~<¥oc/evít.h
>

2 
	~<glue_mp.h
>

3 
	~<glue_öå.h
>

4 
	~<å≠/å≠.h
>

6 
PLS
 
evít_poﬁ_s
 
	gglobÆ_poﬁ
;

8 
	#EVENT_STATUS_WAIT
 0

	)

9 
	#EVENT_STATUS_QUEUE
 1

	)

10 
	#EVENT_STATUS_QUEUE_STRONG
 2

	)

13 
	$evít_poﬁ_öô
(
evít_poﬁ_t
 
poﬁ
,

14 
evít_poﬁ_touch_f
 
touch
,

15 
evít_poﬁ_h™dÀr_f
 
exhau°
,

16 
evít_poﬁ_h™dÀr_f
 
°›
)

18 i‡(
poﬁ
 =
NULL
)

19 
poﬁ
 = &
globÆ_poﬁ
;

21 
poﬁ
->
hód
 =Öoﬁ->
èû
 = 
NULL
;

23 
poﬁ
->
touch
 =Åouch;

24 
poﬁ
->
exhau°
 =Éxhaust;

25 
poﬁ
->
to_°›
 = 0;

26 
poﬁ
->
°›
 = stop;

27 
	}
}

30 
	$evít_›í
(
evít_t
 
evít
, 
evít_poﬁ_t
 
poﬁ
, 
evít_h™dÀr_f
 
h™dÀr
, *
¥iv©e
)

32 i‡(
poﬁ
 =
NULL
)

33 
poﬁ
 = &
globÆ_poﬁ
;

35 
evít
->
poﬁ
 =Öool;

36 
evít
->
°©us
 = 
EVENT_STATUS_WAIT
;

37 
evít
->
h™dÀr
 = handler;

38 
evít
->
¥iv©e
 =Örivate;

39 
	}
}

42 
	$evít_a˘iv©e
(
evít_t
 
evít
)

44 
	`loˇl_úq_ßve
();

46 
evít_poﬁ_t
 
poﬁ
 = 
evít
->pool;

47 i‡(
poﬁ
->
	`touch
(
evít
) == 0)

49 
evít
->
°©us
)

51 
EVENT_STATUS_WAIT
:

53 
evít
->
°©us
 = 
EVENT_STATUS_QUEUE
;

54 
evít
->
√xt
 = 
NULL
;

55 i‡(
poﬁ
->
èû
 =
NULL
)

57 
poﬁ
->
hód
 =Öoﬁ->
èû
 = 
evít
;

61 
poﬁ
->
èû
->
√xt
 = 
evít
;

62 
poﬁ
->
èû
 = 
evít
;

68 
EVENT_STATUS_QUEUE
:

69 
evít
->
°©us
 = 
EVENT_STATUS_QUEUE_STRONG
;

74 
	`loˇl_úq_ª°‹e
();

76 
	}
}

79 
	$evít_lo›
(
evít_poﬁ_t
 
poﬁ
)

81 i‡(
poﬁ
 =
NULL
)

82 
poﬁ
 = &
globÆ_poﬁ
;

86 
evít_t
 
evít
;

87 
	`loˇl_úq_ßve
();

88 i‡(
poﬁ
->
hód
 =
NULL
)

90 i‡(
poﬁ
->
to_°›
)

92 
	`loˇl_úq_ª°‹e
();

95 
evít
 = 
NULL
;

99 
evít
 = 
poﬁ
->
hód
;

100 
evít
->
°©us
)

102 
EVENT_STATUS_QUEUE
:

104 
evít
->
°©us
 = 
EVENT_STATUS_WAIT
;

105 i‡((
poﬁ
->
hód
 =Öoﬁ->hód->
√xt
Ë=
NULL
)

107 
poﬁ
->
èû
 = 
NULL
;

112 
EVENT_STATUS_QUEUE_STRONG
:

114 
evít
->
°©us
 = 
EVENT_STATUS_QUEUE
;

115 i‡(
poﬁ
->
èû
 !
evít
)

117 
poﬁ
->
hód
 =Öoﬁ->hód->
√xt
;

118 
poﬁ
->
èû
->
√xt
 = 
evít
;

119 
poﬁ
->
èû
 = 
evít
;

121 
evít
->
√xt
 = 
NULL
;

128 
	`loˇl_úq_ª°‹e
();

130 i‡(
evít
)

131 
evít
->
	`h™dÀr
(event);

132 
poﬁ
->
	`exhau°
(pool);

135 
poﬁ
->
	`°›
(pool);

136 
	}
}

139 
	$evít_lo›_°›
(
evít_poﬁ_t
 
poﬁ
)

141 i‡(
poﬁ
 =
NULL
)

142 
poﬁ
 = &
globÆ_poﬁ
;

144 
poﬁ
->
to_°›
 = 1;

145 
	}
}

	@kern-river/proc/event.h

1 #i‚de‡
__RIVER_EVENT_H__


2 
	#__RIVER_EVENT_H__


	)

4 
	~<libs/ty≥s.h
>

6 
evít_s
 *
	tevít_t
;

7 
evít_poﬁ_s
 *
	tevít_poﬁ_t
;

9 (*
	tevít_h™dÀr_f
Ë(
	tevít_t
 
	tevít
);

10 (*
	tevít_poﬁ_touch_f
Ë(
	tevít_t
 
	tevít
);

11 (*
	tevít_poﬁ_h™dÀr_f
Ë(
	tevít_poﬁ_t
 
	tpoﬁ
);

13 
	sevít_s


15 
evít_poﬁ_t
 
poﬁ
;

16 
uöt32_t
 
°©us
;

17 
evít_h™dÀr_f
 
h™dÀr
;

18 *
¥iv©e
;

20 
evít_t
 
√xt
;

21 } 
	tevít_s
;

23 
	sevít_poﬁ_s


25 
evít_t
 
hód
;

26 
evít_t
 
èû
;

28 
evít_poﬁ_touch_f
 
touch
;

29 
evít_poﬁ_h™dÀr_f
 
exhau°
;

30 
to_°›
;

31 
evít_poﬁ_h™dÀr_f
 
°›
;

32 } 
	tevít_poﬁ_s
;

34 
	`evít_poﬁ_öô
(
evít_poﬁ_t
 
poﬁ
,

35 
evít_poﬁ_touch_f
 
touch
,

36 
evít_poﬁ_h™dÀr_f
 
exhau°
,

37 
evít_poﬁ_h™dÀr_f
 
°›
);

38 
	`evít_›í
(
evít_t
 
evít
, 
evít_poﬁ_t
 
poﬁ
, 
evít_h™dÀr_f
 
h™dÀr
, *
¥iv©e
);

39 
	`evít_a˘iv©e
(
evít_t
 
evít
);

40 
	`evít_lo›
(
evít_poﬁ_t
 
poﬁ
);

41 
	`evít_lo›_°›
(
evít_poﬁ_t
 
poﬁ
);

	@kern-river/proc/ipe.c

1 
	~<¥oc/ùe.h
>

2 
	~<glue_memœyout.h
>

3 
	~<libs/ty≥s.h
>

4 
	~<glue_mp.h
>

5 
	~<mp/mp.h
>

6 
	~<debug/io.h
>

7 
	~<glue_pmm.h
>

8 
	~<libs/x86/©om.h
>

9 
	~<drivîs/ønd.h
>

10 
	~<drivîs/timî.h
>

11 
	~<¥oc/ïroc.h
>

13 
	#RBUF_PAGES
 16

	)

14 
	#RBUF_SIZE
 (
RBUF_PAGES
 << 
PGSHIFT
)

	)

15 
	#RBUF_COUNT
 (
RBUF_SIZE
 / (
ùe_∑ckë_t
))

	)

17 
	#IPE_RETRY
 10

	)

18 
	#IPE_REFRESH_INV
 1

	)

20 
PLS
 vﬁ©ûê
ùe_∑ckë_t
 *
	gloˇl_ªcv_buf„r
;

21 vﬁ©ûê
ùe_∑ckë_t
 *
	gªmŸe_ªcv_buf„r
[
LAPIC_COUNT
];

23 
PLS
 
ïroc_s
 
	gùe_ïroc
;

24 
PLS
 
evít_s
 
	g__ùe_evít
;

25 
PLS
 
evít_t
 
	gùe_evít
 = &
__ùe_evít
;

26 
PLS
 
timî_s
 
	gùe_timî
;

29 
	$ùe_∑ckë_h™dÀ
(
ùe_∑ckë_t
 
∑ckë
)

31 
∑ckë
->
	`h™dÀr
(packet);

32 
	}
}

35 
	$ùe_∑ckë_back_h™dÀ
(
ùe_∑ckë_t
 
∑ckë
)

37 
∑ckë
->
	`back_h™dÀr
(packet);

38 
	}
}

41 
	$do_ùe
(
evít_t
 
e
)

43 
i
;

44 
i
 = 0; i !
RBUF_COUNT
; ++ i)

46 i‡(
loˇl_ªcv_buf„r
[
i
])

48 
ùe_∑ckë_t
 
∑ckë
 = 
loˇl_ªcv_buf„r
[
i
];

49 i‡(
∑ckë
->
‰om_œpic
 =
œpic_id
)

51 
	`ùe_∑ckë_back_h™dÀ
(
∑ckë
);

55 i‡(
∑ckë
->
¥o˚s£d
 == 0)

57 
∑ckë
->
¥o˚s£d
 = 1;

58 
	`ùe_∑ckë_h™dÀ
(
∑ckë
);

61 i‡(
	`ùe_∑ckë_£nd
(
∑ckë
->
‰om_œpic
,Öacket))

68 
loˇl_ªcv_buf„r
[
i
] = 
NULL
;

72 i‡(
e
 =&
ùe_timî
.
evít
)

74 
	`timî_›í
(&
ùe_timî
, 
timî_tick
 + 
IPE_REFRESH_INV
 * 
timî_‰eq
);

76 
	}
}

78 
	~<libs/x86/•ölock.h
>

80 vﬁ©ûê
	gùe_ªady
 = 0;

81 
•ölock_s
 
	gùe_öô_Æloc_lock
 = {0};

84 
	$ùe_öô
()

86 
	`•ölock_acquúe
(&
ùe_öô_Æloc_lock
);

87 
loˇl_ªcv_buf„r
 = 
ªmŸe_ªcv_buf„r
[
œpic_id
] =

88 (
ùe_∑ckë_t
 *)
	`KADDR_DIRECT
(
	`kÆloc_∑ges
(
RBUF_PAGES
));

89 
	`•ölock_ªÀa£
(&
ùe_öô_Æloc_lock
);

91 
	`ïroc_›í
(&
ùe_ïroc
, "ùe", ((*)())
¥oc_waô_åy
, 
NULL
, 8192);

92 
	`evít_›í
(
ùe_evít
, &
ùe_ïroc
.
evít_poﬁ
, 
do_ùe
, 
NULL
);

93 
	`evít_›í
(&
ùe_timî
.
evít
, &
ùe_ïroc
.
evít_poﬁ
, 
do_ùe
, 
NULL
);

94 
	`timî_›í
(&
ùe_timî
, 
timî_tick
 + 
IPE_REFRESH_INV
 * 
timî_‰eq
);

100 
ﬁd
 = 
ùe_ªady
;

101 i‡(
	`cmpxchg32
(&
ùe_ªady
, 
ﬁd
, old + 1) == old) ;

104 
ùe_ªady
 !
l˝u_cou¡
) ;

108 
	}
}

111 
	$ùe_∑ckë_öô
(
ùe_∑ckë_t
 
∑ckë
, 
ùe_∑ckë_h™dÀr_f
 
h™dÀr
, i≥_∑ckë_h™dÀr_‡
back_h™dÀr
, *
¥iv©e
)

113 
∑ckë
->
‰om_œpic
 = 
œpic_id
;

114 
∑ckë
->
h™dÀr
 = handler;

115 
∑ckë
->
back_h™dÀr
 = back_handler;

116 
∑ckë
->
¥iv©e
 =Örivate;

117 
	}
}

120 
	$ùe_∑ckë_£nd
(
èrgë_œpic_id
, 
ùe_∑ckë_t
 
∑ckë
)

122 i‡(
œpic_id
 =
èrgë_œpic_id
)

124 
	`ùe_∑ckë_h™dÀ
(
∑ckë
);

125 
	`ùe_∑ckë_back_h™dÀ
(
∑ckë
);

129 
∑ckë
->
¥o˚s£d
 = 0;

131 
ªåy
;

132 
ªåy
 = 0;Ñëry < 
IPE_RETRY
; ++Ñetry)

134 
idx
 = 
	`ønd16
(Ë& (
RBUF_COUNT
 - 1);

135 i‡(
	`cmpxchg64
(
ªmŸe_ªcv_buf„r
[
èrgë_œpic_id
] + 
idx
, 0, (
uöçå_t
)
∑ckë
) == 0) ;

138 i‡(
ªåy
 =
IPE_RETRY
)

140 
	`œpic_ùi_issue
(
èrgë_œpic_id
);

145 
	}
}

	@kern-river/proc/ipe.h

1 #i‚de‡
__RIVER_IPE_H__


2 
	#__RIVER_IPE_H__


	)

4 
	~<libs/ty≥s.h
>

5 
	~<¥oc/evít.h
>

7 
evít_t
 
ùe_evít
;

9 
ùe_∑ckë_s
 *
	tùe_∑ckë_t
;

10 (*
	tùe_∑ckë_h™dÀr_f
)(
	tùe_∑ckë_t
 
	t∑ckë
);

12 
	sùe_∑ckë_s


14 
ùe_∑ckë_h™dÀr_f
 
h™dÀr
;

15 
ùe_∑ckë_h™dÀr_f
 
back_h™dÀr
;

16 *
¥iv©e
;

18 
¥o˚s£d
;

19 
‰om_œpic
;

20 } 
	tùe_∑ckë_s
;

22 
	`ùe_öô
();

23 
	`ùe_∑ckë_öô
(
ùe_∑ckë_t
 
∑ckë
, 
ùe_∑ckë_h™dÀr_f
 
h™dÀr
, i≥_∑ckë_h™dÀr_‡
back_h™dÀr
, *
¥iv©e
);

24 
	`ùe_∑ckë_£nd
(
œpic_id
, 
ùe_∑ckë_t
 
∑ckë
);

	@kern-river/proc/proc.c

1 
	~<glue_öå.h
>

2 
	~<¥oc/¥oc.h
>

3 
	~<mp/mp.h
>

4 
	~<mm/kmm.h
>

5 
	~<å≠/å≠.h
>

6 
	~<libs/°rög.h
>

7 
	~<¥oc/ùe.h
>

8 
	~<öô.h
>

9 
	~<debug/io.h
>

11 
	#SCHED_NODE_TO_PROC
(
sch
) \

12 ((
¥oc_t
)((*)(
sch
Ë- (
uöçå_t
)(&(’roc_t)0)->
sched_node
)))

	)

14 
	#PROC_TIME_SLICE_DEFAULT
 50

	)

16 
PLS
 vﬁ©ûê
¥oc_t
 
	g¥oc_cuºít
;

17 
PLS
 
¥oc_s
 
	g¥oc_idÀ
;

20 
	$¥oc_swôch
(
¥oc_t
 
¥oc
)

22 
¥oc_t
 
ﬁd
 = 
¥oc_cuºít
;

23 
¥oc_cuºít
 = 
¥oc
;

24 
	`c⁄ãxt_swôch
(&
ﬁd
->
kîn_˘x
, &
¥oc
->kern_ctx);

25 
	}
}

28 
	$¥oc_scheduÀ
()

30 
	`loˇl_úq_ßve
();

31 
¥oc_ru¬abÀ
 =

32 
¥oc_cuºít
->
°©us
 =
PROC_STATUS_RUNNABLE_WEAK
 ||

33 
¥oc_cuºít
->
°©us
 =
PROC_STATUS_RUNNABLE_STRONG
;

35 i‡(
¥oc_cuºít
->
time_¶i˚
 =0 || !
¥oc_ru¬abÀ
)

37 i‡(
¥oc_cuºít
->
ty≥
 !
PROC_TYPE_IDLE
 && 
¥oc_ru¬abÀ
)

38 
	`sched_©èch
(&
¥oc_cuºít
->
sched_node
);

40 
sched_node_s
 *
s
 = 
	`sched_pick
();

41 
¥oc_t
 
≈roc
;

43 i‡(
s
 !
NULL
)

45 
	`sched_dëach
(
s
);

46 
≈roc
 = 
	`SCHED_NODE_TO_PROC
(
s
);

50 
≈roc
 = &
¥oc_idÀ
;

53 
≈roc
->
time_¶i˚
 = 
PROC_TIME_SLICE_DEFAULT
;

54 i‡(
≈roc
 !
¥oc_cuºít
)

56 
	`¥oc_swôch
(
≈roc
);

59 
	`loˇl_úq_ª°‹e
();

60 
	}
}

63 
	$¥oc_public_íåy
(*
__¨g
)

65 
¥oc_cuºít
->
	`íåy
(
__¨g
);

66 
	`k¥ötf
("¥o¯%†íds.\n", 
¥oc_cuºít
->
«me
);

67 
	}
}

70 
	$¥oc_›í
(
¥oc_t
 
¥oc
, c⁄° *
«me
, 
¥oc_íåy_f
 
íåy
, *
¨g
, *
¥iv©e
, 
uöçå_t
 
°ack
)

72 i‡(
«me
 !
NULL
)

74 
	`°∫˝y
(
¥oc
->
«me
,Çame, 
MAX_PROC_NAME
);

78 
	`°r˝y
(
¥oc
->
«me
, "unnamed");

80 
¥oc
->
«me
[
MAX_PROC_NAME
 - 1] = 0;

82 
¥oc
->
ty≥
 = 
PROC_TYPE_KTHREAD
;

83 
¥oc
->
¥iv©e
 =Örivate;

84 
¥oc
->
íåy
 =Éntry;

86 
¥oc
->
úq_ßve_Àvñ
 = 0;

88 
	`c⁄ãxt_fûl
(&
¥oc
->
kîn_˘x
, 
¥oc_public_íåy
, 
¨g
, 
°ack
);

89 
	`sched_node_öô
(&
¥oc
->
sched_node
);

91 
¥oc
->
time_¶i˚
 = 
PROC_TIME_SLICE_DEFAULT
;

92 
¥oc
->
°©us
 = 
PROC_STATUS_UNINIT
;

95 
	}
}

98 
	$do_idÀ
()

102 i‡(
öô_föished
)

103 
	`evít_a˘iv©e
(
ùe_evít
);

104 
	`¥oc_yõld
();

106 
	}
}

109 
	$¥oc_öô
()

111 
îr
;

112 i‡((
îr
 = 
	`sched_öô
())) Érr;

115 
	`evít_poﬁ_öô
(
NULL
, NULL, NULL, NULL);

117 
¥oc_t
 
¥oc
 = &
¥oc_idÀ
;

119 
	`°r˝y
(
¥oc
->
«me
, "idle");

120 
¥oc
->
«me
[
MAX_PROC_NAME
 - 1] = 0;

122 
¥oc
->
ty≥
 = 
PROC_TYPE_IDLE
;

123 
¥oc
->
íåy
 = 
NULL
;

124 
¥oc
->
¥iv©e
 = 
NULL
;

126 
¥oc
->
úq_ßve_Àvñ
 = 0;

128 
¥oc
->
kîn_˘x
.
l˝u
 = 
œpic_id
;

129 
¥oc
->
kîn_˘x
.
°k_t›
 = 0x0;

131 
	`sched_node_öô
(&
¥oc
->
sched_node
);

133 
¥oc
->
time_¶i˚
 = 
PROC_TIME_SLICE_DEFAULT
;

134 
¥oc
->
°©us
 = 
PROC_STATUS_RUNNABLE_WEAK
;

136 
¥oc_cuºít
 = 
¥oc
;

138 
	}
}

141 
	$¥oc_yõld
()

143 
¥oc_cuºít
->
time_¶i˚
 = 0;

144 
	`¥oc_scheduÀ
();

145 
	}
}

148 
	$¥oc_waô_¥ëíd
()

150 
Êag
;

151 
	`loˇl_öå_ßve_hw
(
Êag
);

152 
¥oc_cuºít
->
°©us
 = 
PROC_STATUS_RUNNABLE_WEAK
;

153 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

154 
	}
}

157 
	$¥oc_waô_åy
()

159 
Êag
, 
to_scheduÀ
 = 0;

160 
	`loˇl_öå_ßve_hw
(
Êag
);

161 
¥oc_cuºít
->
°©us
)

163 
PROC_STATUS_RUNNABLE_WEAK
:

164 
¥oc_cuºít
->
°©us
 = 
PROC_STATUS_WAIT
;

165 
to_scheduÀ
 = 1;

168 
PROC_STATUS_RUNNABLE_STRONG
:

169 
¥oc_cuºít
->
°©us
 = 
PROC_STATUS_RUNNABLE_WEAK
;

172 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

174 i‡(
to_scheduÀ
)

175 
	`¥oc_scheduÀ
();

177  
to_scheduÀ
;

178 
	}
}

181 
	$¥oc_nŸify
(
¥oc_t
 
¥oc
)

183 
Êag
;

184 
	`loˇl_öå_ßve_hw
(
Êag
);

185 i‡(
¥oc
->
°©us
 =
PROC_STATUS_RUNNABLE_WEAK
)

187 
¥oc
->
°©us
 = 
PROC_STATUS_RUNNABLE_STRONG
;

189 i‡(
¥oc
->
°©us
 =
PROC_STATUS_WAIT
)

191 
¥oc
->
°©us
 = 
PROC_STATUS_RUNNABLE_WEAK
;

192 
	`sched_©èch
(&
¥oc
->
sched_node
);

194 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

197 
	}
}

	@kern-river/proc/proc.h

1 #i‚de‡
__RIVER_PROC_H__


2 
	#__RIVER_PROC_H__


	)

4 
	~<libs/ty≥s.h
>

5 
	~<glue_c⁄ãxt.h
>

6 
	~<glue_mp.h
>

8 
	~<¥oc/sched.h
>

9 
	~<¥oc/evít.h
>

11 
	#MAX_PROC_NAME
 32

	)

13 
¥oc_s
 *
	t¥oc_t
;

14 (*
	t¥oc_íåy_f
)(*
	t¨g
);

16 
	s¥oc_s


18 
uöt32_t
 
ty≥
;

19 
uöt32_t
 
°©us
;

20 
«me
[
MAX_PROC_NAME
];

22 
c⁄ãxt_s
 
kîn_˘x
;

23 
sched_node_s
 
sched_node
;

24 
uöt32_t
 
time_¶i˚
;

25 
uöt32_t
 
úq_ßve_Àvñ
;

27 
¥oc_íåy_f
 
íåy
;

28 *
¥iv©e
;

29 } 
	t¥oc_s
;

31 
	#PROC_TYPE_KTHREAD
 0x0

	)

32 
	#PROC_TYPE_KEVENTD
 0x1

	)

33 
	#PROC_TYPE_UTHREAD
 0x2

	)

34 
	#PROC_TYPE_IDLE
 0x3

	)

36 
	#PROC_STATUS_UNINIT
 0

	)

37 
	#PROC_STATUS_RUNNABLE_WEAK
 1

	)

38 
	#PROC_STATUS_RUNNABLE_STRONG
 2

	)

39 
	#PROC_STATUS_WAIT
 3

	)

40 
	#PROC_STATUS_ZOMBIE
 4

	)

42 vﬁ©ûê
¥oc_t
 
¥oc_cuºít
;

44 
	`¥oc_öô
();

45 
	`¥oc_›í
(
¥oc_t
 
¥oc
, c⁄° *
«me
, 
¥oc_íåy_f
 
íåy
, *
¨g
, *
¥iv©e
, 
uöçå_t
 
°ack
);

46 
	`¥oc_scheduÀ
();

47 
	`¥oc_yõld
();

48 
	`¥oc_waô_¥ëíd
();

49 
	`¥oc_waô_åy
();

50 
	`¥oc_nŸify
(
¥oc_t
 
¥oc
);

51 
	`¥oc_˛o£
(
¥oc_t
 
¥oc
);

52 
	`¥oc_exô
();

54 
	`do_idÀ
();

	@kern-river/proc/sched.c

1 
	~<¥oc/sched.h
>

3 
PLS
 
sched_node_s
 
	gqueue
;

6 
	$sched_öô
()

8 
queue
.
¥ev
 = queue.
√xt
 = &queue;

10 
	}
}

13 
	$sched_node_öô
(
sched_node_t
 
node
)

15 
node
->
¥ev
 =Çode->
√xt
 =Çode;

17 
	}
}

19 
sched_node_t


20 
	$sched_pick
()

22 i‡(
queue
.
√xt
 =&queueË 
NULL
;

23  
queue
.
√xt
;

24 
	}
}

27 
	$sched_©èch
(
sched_node_t
 
node
)

29 
node
->
√xt
 = &
queue
;

30 
node
->
¥ev
 =Çode->
√xt
->prev;

32 
node
->
√xt
->
¥ev
 =Çode;

33 
node
->
¥ev
->
√xt
 =Çode;

35 
	}
}

38 
	$sched_dëach
(
sched_node_t
 
node
)

40 
node
->
√xt
->
¥ev
 =Çode->prev;

41 
node
->
¥ev
->
√xt
 =Çode->next;

43 
	}
}

	@kern-river/proc/sched.h

1 #i‚de‡
__RIVER_SCHED_H__


2 
	#__RIVER_SCHED_H__


	)

4 
	~<glue_mp.h
>

5 
	~<libs/ty≥s.h
>

7 
sched_node_s
 *
	tsched_node_t
;

8 
	ssched_node_s


10 
sched_node_t
 
	m¥ev
, 
	m√xt
;

11 } 
	tsched_node_s
;

13 
sched_öô
();

15 
sched_node_öô
(
sched_node_t
 
node
);

17 
sched_node_t
 
sched_pick
();

18 
sched_©èch
(
sched_node_t
 
node
);

19 
sched_dëach
(
sched_node_t
 
node
);

	@kern-river/trap/trap.c

1 
	~<å≠/å≠.h
>

2 
	~<libs/ty≥s.h
>

3 
	~<libs/x86/bô£¨ch.h
>

4 
	~<glue_mp.h
>

5 
	~<glue_öå.h
>

6 
	~<¥oc/¥oc.h
>

7 
	~<mm/kmm.h
>

8 
	~<glue_memœyout.h
>

9 
	~<mp/mp.h
>

10 
	~<debug/io.h
>

11 
	~<¥oc/ùe.h
>

12 
	~<¥oc/dos.h
>

14 
PLS
 
uöt64_t
 
	gúq_mask
;

15 
PLS
 
uöt64_t
 
	gúq_accumuœã
[
IRQ_COUNT
];

16 
PLS
 
úq_h™dÀr_f
 
	gúq_h™dÀr
[
IRQ_COUNT
];

19 
	$úq_¥o˚ss
()

21 
úq_no
;

22 
úq_h™dÀr_f
 
h
;

23 
uöt64_t
 
acc
;

25 
úq_mask
)

27 
úq_no
 = 
	`b§
(
úq_mask
);

28 
h
 = 
úq_h™dÀr
[
úq_no
];

29 i‡(
h
)

31 
acc
 = 
úq_accumuœã
[
úq_no
];

33 
úq_accumuœã
[
úq_no
] = 0;

34 
úq_mask
 ^1 << 
úq_no
;

36 
loˇl_öå_íabÀ_hw
;

37 
	`h
(
úq_no
, 
acc
);

38 
loˇl_öå_dißbÀ_hw
;

42 
úq_mask
 ^1 << 
úq_no
;

45 
	}
}

48 
	$loˇl_úq_ßve
()

50 
Êag
;

51 
	`loˇl_öå_ßve_hw
(
Êag
);

52 ++ 
¥oc_cuºít
->
úq_ßve_Àvñ
;

53 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

54 
	}
}

57 
	$loˇl_úq_ª°‹e
()

59 
Êag
;

60 
	`loˇl_öå_ßve_hw
(
Êag
);

61 i‡(
¥oc_cuºít
->
úq_ßve_Àvñ
 =1 && 
úq_mask
)

63 
	`úq_¥o˚ss
();

64 
	`¥oc_scheduÀ
();

66 -- 
¥oc_cuºít
->
úq_ßve_Àvñ
;

67 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

68 
	}
}

71 
	$å≠_ö_kî√l
(
å≠‰ame
 *
tf
) {

72  (
tf
->
tf_cs
 =(
uöt16_t
)
KERNEL_CS
);

73 
	}
}

76 
	$å≠_di•©ch
(
å≠‰ame
 *
tf
)

78 i‡(
tf
->
tf_å≠no
 < 
IRQ_COUNT
)

81 
tf
->
tf_å≠no
)

83 
T_PGFLT
:

84 i‡(
	`å≠_ö_kî√l
(
tf
))

86 
	`kmm_pgÁu…
(
tf
);

91 i‡(
tf
->
tf_å≠no
 < 
IRQ_OFFSET
 + 
IRQ_COUNT
)

94 
	`úq_ack
(
tf
->
tf_å≠no
 - 
IRQ_OFFSET
);

97 
úq_no
 = 
tf
->
tf_å≠no
 - 
IRQ_OFFSET
;

98 
úq_mask
 |(1 << 
úq_no
);

99 ++ 
úq_accumuœã
[
úq_no
];

100 i‡(
¥oc_cuºít
->
úq_ßve_Àvñ
 == 0)

102 ++ 
¥oc_cuºít
->
úq_ßve_Àvñ
;

104 
	`úq_¥o˚ss
();

105 
	`¥oc_scheduÀ
();

107 -- 
¥oc_cuºít
->
úq_ßve_Àvñ
;

112 
tf
->
tf_å≠no
)

114 
T_SYSCALL
:

118 
T_IPI
:

119 
	`evít_a˘iv©e
(
ùe_evít
);

122 
T_IPI_DOS
:

123 
	`evít_a˘iv©e
(
dos_evít
);

127 
	}
}

130 
	$å≠_öô
()

132 
i
;

134 
i
 = 0; i != 32; ++i)

136 
	`öå_h™dÀr_£t
(
i
, 
å≠_di•©ch
);

139 
	`öå_h™dÀr_£t
(
T_SYSCALL
, 
å≠_di•©ch
);

140 
	`öå_h™dÀr_£t
(
T_IPI
, 
å≠_di•©ch
);

141 
	`öå_h™dÀr_£t
(
T_IPI_DOS
, 
å≠_di•©ch
);

143 
úq_mask
 = 0;

144 
i
 = 0; i !
IRQ_COUNT
; ++ i)

146 
úq_accumuœã
[
i
] = 0;

147 
úq_h™dÀr
[
i
] = 
NULL
;

151 
	}
}

154 
	$å≠_úq_h™dÀr_£t
(
úq_no
, 
úq_h™dÀr_f
 
h™dÀr
)

156 
Êag
;

157 
	`loˇl_öå_ßve_hw
(
Êag
);

158 
	`öå_h™dÀr_£t
(
IRQ_OFFSET
 + 
úq_no
, 
å≠_di•©ch
);

159 
úq_h™dÀr
[
úq_no
] = 
h™dÀr
;

160 i‡(
úq_accumuœã
[
úq_no
]Ë
úq_mask
 |= (1 << irq_no);

161 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

162 
	}
}

	@kern-river/trap/trap.h

1 #i‚de‡
__RIVER_TRAP_H__


2 
	#__RIVER_TRAP_H__


	)

4 
loˇl_úq_ßve
();

5 
loˇl_úq_ª°‹e
();

7 
å≠_öô
();

9 
	~<libs/ty≥s.h
>

10 (*
	túq_h™dÀr_f
)(
	túq_no
, 
	tuöt64_t
 
	taccumuœã
);

12 
	`å≠_úq_h™dÀr_£t
(
úq_no
, 
úq_h™dÀr_f
 
h™dÀr
);

	@kern-ucore/arch/i386/debug/kdebug.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<°ab.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<memœyout.h
>

7 
	~<sync.h
>

8 
	~<vmm.h
>

9 
	~<¥oc.h
>

10 
	~<kdebug.h
>

11 
	~<m⁄ô‹.h
>

12 
	~<as£π.h
>

13 
	~<kio.h
>

14 
	~<glue_mp.h
>

16 
	#STACKFRAME_DEPTH
 20

	)

18 c⁄° 
°ab
 
__STAB_BEGIN__
[];

19 c⁄° 
°ab
 
__STAB_END__
[];

20 c⁄° 
__STABSTR_BEGIN__
[];

21 c⁄° 
__STABSTR_END__
[];

24 
	seùdebugöfo
 {

25 c⁄° *
	meù_fûe
;

26 
	meù_löe
;

27 c⁄° *
	meù_‚_«me
;

28 
	meù_‚_«mñí
;

29 
uöçå_t
 
	meù_‚_addr
;

30 
	meù_‚_«rg
;

34 
	su£r°abd©a
 {

35 c⁄° 
°ab
 *
	m°abs
;

36 c⁄° 
°ab
 *
	m°ab_íd
;

37 c⁄° *
	m°ab°r
;

38 c⁄° *
	m°ab°r_íd
;

83 
	$°ab_bö£¨ch
(c⁄° 
°ab
 *
°abs
, *
ªgi⁄_À·
, *
ªgi⁄_right
,

84 
ty≥
, 
uöçå_t
 
addr
) {

85 
l
 = *
ªgi⁄_À·
, 
r
 = *
ªgi⁄_right
, 
™y_m©ches
 = 0;

87 
l
 <
r
) {

88 
åue_m
 = (
l
 + 
r
Ë/ 2, 
m
 =Årue_m;

91 
m
 >
l
 && 
°abs
[m].
n_ty≥
 !
ty≥
) {

92 
m
 --;

94 i‡(
m
 < 
l
) {

95 
l
 = 
åue_m
 + 1;

100 
™y_m©ches
 = 1;

101 i‡(
°abs
[
m
].
n_vÆue
 < 
addr
) {

102 *
ªgi⁄_À·
 = 
m
;

103 
l
 = 
åue_m
 + 1;

104 } i‡(
°abs
[
m
].
n_vÆue
 > 
addr
) {

105 *
ªgi⁄_right
 = 
m
 - 1;

106 
r
 = 
m
 - 1;

110 *
ªgi⁄_À·
 = 
m
;

111 
l
 = 
m
;

112 
addr
 ++;

116 i‡(!
™y_m©ches
) {

117 *
ªgi⁄_right
 = *
ªgi⁄_À·
 - 1;

121 
l
 = *
ªgi⁄_right
;

122 ; 
l
 > *
ªgi⁄_À·
 && 
°abs
[l].
n_ty≥
 !
ty≥
;Ü --)

124 *
ªgi⁄_À·
 = 
l
;

126 
	}
}

135 
	$debugöfo_eù
(
uöçå_t
 
addr
, 
eùdebugöfo
 *
öfo
) {

136 c⁄° 
°ab
 *
°abs
, *
°ab_íd
;

137 c⁄° *
°ab°r
, *
°ab°r_íd
;

139 
öfo
->
eù_fûe
 = "<unknown>";

140 
öfo
->
eù_löe
 = 0;

141 
öfo
->
eù_‚_«me
 = "<unknown>";

142 
öfo
->
eù_‚_«mñí
 = 9;

143 
öfo
->
eù_‚_addr
 = 
addr
;

144 
öfo
->
eù_‚_«rg
 = 0;

147 i‡(
addr
 >
KERNBASE
) {

148 
°abs
 = 
__STAB_BEGIN__
;

149 
°ab_íd
 = 
__STAB_END__
;

150 
°ab°r
 = 
__STABSTR_BEGIN__
;

151 
°ab°r_íd
 = 
__STABSTR_END__
;

157 c⁄° 
u£r°abd©a
 *
usd
 = (u£r°abd©®*)
USTAB
;

160 
mm_°ru˘
 *
mm
;

161 i‡(
	`∂s_ªad
(
cuºít
Ë=
NULL
 || (
mm
 =Öls_read(current)->mm) == NULL) {

164 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
usd
, (
u£r°abd©a
), 0)) {

168 
°abs
 = 
usd
->stabs;

169 
°ab_íd
 = 
usd
->stab_end;

170 
°ab°r
 = 
usd
->stabstr;

171 
°ab°r_íd
 = 
usd
->stabstr_end;

174 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
°abs
, (uöçå_t)
°ab_íd
 - (uintptr_t)stabs, 0)) {

177 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
°ab°r
, 
°ab°r_íd
 - stabstr, 0)) {

183 i‡(
°ab°r_íd
 <
°ab°r
 || stabstr_end[-1] != 0) {

193 
lfûe
 = 0, 
rfûe
 = (
°ab_íd
 - 
°abs
) - 1;

194 
	`°ab_bö£¨ch
(
°abs
, &
lfûe
, &
rfûe
, 
N_SO
, 
addr
);

195 i‡(
lfûe
 == 0)

200 
lfun
 = 
lfûe
, 
rfun
 = 
rfûe
;

201 
Œöe
, 
æöe
;

202 
	`°ab_bö£¨ch
(
°abs
, &
lfun
, &
rfun
, 
N_FUN
, 
addr
);

204 i‡(
lfun
 <
rfun
) {

207 i‡(
°abs
[
lfun
].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
) {

208 
öfo
->
eù_‚_«me
 = 
°ab°r
 + 
°abs
[
lfun
].
n_°rx
;

210 
öfo
->
eù_‚_addr
 = 
°abs
[
lfun
].
n_vÆue
;

211 
addr
 -
öfo
->
eù_‚_addr
;

213 
Œöe
 = 
lfun
;

214 
æöe
 = 
rfun
;

218 
öfo
->
eù_‚_addr
 = 
addr
;

219 
Œöe
 = 
lfûe
;

220 
æöe
 = 
rfûe
;

222 
öfo
->
eù_‚_«mñí
 = 
	`°rföd
(öfo->
eù_‚_«me
, ':') - info->eip_fn_name;

227 
	`°ab_bö£¨ch
(
°abs
, &
Œöe
, &
æöe
, 
N_SLINE
, 
addr
);

228 i‡(
Œöe
 <
æöe
) {

229 
öfo
->
eù_löe
 = 
°abs
[
æöe
].
n_desc
;

238 
Œöe
 >
lfûe


239 && 
°abs
[
Œöe
].
n_ty≥
 !
N_SOL


240 && (
°abs
[
Œöe
].
n_ty≥
 !
N_SO
 || !°abs[Œöe].
n_vÆue
)) {

241 
Œöe
 --;

243 i‡(
Œöe
 >
lfûe
 && 
°abs
[Œöe].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
) {

244 
öfo
->
eù_fûe
 = 
°ab°r
 + 
°abs
[
Œöe
].
n_°rx
;

249 i‡(
lfun
 < 
rfun
) {

250 
Œöe
 = 
lfun
 + 1;

251 
Œöe
 < 
rfun
 && 
°abs
[Œöe].
n_ty≥
 =
N_PSYM
;

252 
Œöe
 ++) {

253 
öfo
->
eù_‚_«rg
 ++;

257 
	}
}

265 
	$¥öt_kînöfo
() {

266 
ëext
[], 
ed©a
[], 
íd
[], 
kîn_öô
[];

267 
	`k¥ötf
("Special kernel symbols:\n");

268 
	`k¥ötf
("É¡ry 0x%08x (phys)\n", 
kîn_öô
);

269 
	`k¥ötf
("Éãxà 0x%08x (phys)\n", 
ëext
);

270 
	`k¥ötf
("Éd©® 0x%08x (phys)\n", 
ed©a
);

271 
	`k¥ötf
("Énd 0x%08x (phys)\n", 
íd
);

272 
	`k¥ötf
("Kî√»execuèbÀ mem‹y foŸ¥öt: %dKB\n", (
íd
 - 
kîn_öô
 + 1023)/1024);

273 
	}
}

280 
	$¥öt_debugöfo
(
uöçå_t
 
eù
) {

281 
eùdebugöfo
 
öfo
;

282 i‡(
	`debugöfo_eù
(
eù
, &
öfo
) != 0) {

283 
	`k¥ötf
(" <unknow>: -- 0x%08x --\n", 
eù
);

286 
‚«me
[256];

287 
j
;

288 
j
 = 0; j < 
öfo
.
eù_‚_«mñí
; j ++) {

289 
‚«me
[
j
] = 
öfo
.
eù_‚_«me
[j];

291 
‚«me
[
j
] = '\0';

292 
	`k¥ötf
(" %s:%d: %s+%d\n", 
öfo
.
eù_fûe
, info.
eù_löe
,

293 
‚«me
, 
eù
 - 
öfo
.
eù_‚_addr
);

295 
	}
}

297 
uöt32_t
 
	$ªad_eù
(Ë
	`__©åibuã__
((
noölöe
));

299 
uöt32_t


300 
	$ªad_eù
() {

301 
uöt32_t
 
eù
;

302 
asm
 vﬁ©ûe("mov»4(%%ebp), %0" : "Ù" (
eù
));

303  
eù
;

304 
	}
}

341 
	$¥öt_°ack‰ame
() {

342 
uöt32_t
 
ebp
 = 
	`ªad_ebp
(), 
eù
 = 
	`ªad_eù
();

344 
i
, 
j
;

345 
i
 = 0; 
ebp
 != 0 && i < 10; i ++) {

346 
	`k¥ötf
("ebp:0x%08xÉù:0x%08xárgs:", 
ebp
, 
eù
);

347 
uöt32_t
 *
¨gs
 = (uöt32_à*)
ebp
 + 2;

348 
j
 = 0; j < 4; j ++) {

349 
	`k¥ötf
("0x%08x ", 
¨gs
[
j
]);

351 
	`k¥ötf
("\n");

352 
	`¥öt_debugöfo
(
eù
 - 1);

353 
eù
 = ((
uöt32_t
 *)
ebp
)[1];

354 
ebp
 = ((
uöt32_t
 *)ebp)[0];

356 
	}
}

362 
uöt32_t
 
	gloˇl_dr
[
MAX_DR_NUM
], 
	g°©us_dr
, 
	gc⁄åﬁ_dr
;

364 
	gloˇl_dr_cou¡î
[
MAX_DR_NUM
];

368 
	$ßve_Æl_dr
() {

369 
i
;

370 
i
 = 0; i < 
MAX_DR_NUM
; i ++) {

371 
loˇl_dr
[
i
] = 
	`ªad_dr
(i);

373 
°©us_dr
 = 
	`ªad_dr
(
DR_STATUS
);

374 
c⁄åﬁ_dr
 = 
	`ªad_dr
(
DR_CONTROL
);

377 
	`wrôe_dr
(
DR_CONTROL
, 0);

380 
ªgnum
;

381 
ªgnum
 = 0;Ñegnum < 
MAX_DR_NUM
;Ñegnum ++) {

382 i‡(
°©us_dr
 & (1 << 
ªgnum
)) {

383 
loˇl_dr_cou¡î
[
ªgnum
] ++;

386 
	}
}

390 
	$ª°‹e_Æl_dr
() {

391 
i
;

392 
i
 = 0; i < 
MAX_DR_NUM
; i ++) {

393 
	`wrôe_dr
(
i
, 
loˇl_dr
[i]);

395 
	`wrôe_dr
(
DR_STATUS
, 0);

396 
	`wrôe_dr
(
DR_CONTROL
, 
c⁄åﬁ_dr
);

397 
	}
}

401 
	$debug_íabÀ_dr
(
ªgnum
, 
uöçå_t
 
addr
, 
ty≥
, 
Àn
) {

402 i‡(
ªgnum
 < 
MAX_DR_NUM
) {

403 
loˇl_dr
[
ªgnum
] = 
addr
;

404 
loˇl_dr_cou¡î
[
ªgnum
] = 0;

405 
shi·
 = (
ªgnum
 * 4) + 16;

406 
uöt32_t
 
mask
 = (0xF << 
shi·
);

407 
c⁄åﬁ_dr
 &~
mask
;

408 
c⁄åﬁ_dr
 |((
ty≥
 & 3Ë<< 
shi·
);

409 
c⁄åﬁ_dr
 |((
Àn
 & 3Ë<< (
shi·
 + 2));

410 
c⁄åﬁ_dr
 |(1 << (
ªgnum
 * 2));

414 
	}
}

418 
	$debug_dißbÀ_dr
(
ªgnum
) {

419 i‡(
ªgnum
 < 
MAX_DR_NUM
) {

420 
shi·
 = (
ªgnum
 * 4) + 16;

421 
uöt32_t
 
mask
 = (0xF << 
shi·
);

422 
c⁄åﬁ_dr
 &~
mask
;

423 
c⁄åﬁ_dr
 &~(1 << (
ªgnum
 * 2));

427 
	}
}

429 c⁄° *
	gBªakDes¸ùti⁄
[] = {

433 c⁄° *
	gBªakLígthDes¸ùti⁄
[] = {

438 
boﬁ
 
	gis_dr_ßved
 = 0;

442 
	$debug_öô
() {

443 
	`mem£t
(
loˇl_dr
, 0, (local_dr));

444 
	`mem£t
(
loˇl_dr_cou¡î
, 0, (local_dr_counter));

445 
c⁄åﬁ_dr
 = 
DR7_GEXACT
 | 
DR7_LEXACT
;

446 
	`ª°‹e_Æl_dr
();

447 
	}
}

451 
	$debug_li°_dr
() {

452 
boﬁ
 
has
 = 0;

453 
ªgnum
;

454 
ªgnum
 = 0;Ñegnum < 
MAX_DR_NUM
;Ñegnum ++) {

455 i‡(
c⁄åﬁ_dr
 & (1 << (
ªgnum
 * 2))) {

456 i‡(!
has
) {

457 
has
 = 1;

458 
	`k¥ötf
(" Num Address Type Len Count\n");

460 
shi·
 = (
ªgnum
 * 4) + 16;

461 
ty≥
 = ((
c⁄åﬁ_dr
 >> 
shi·
) & 3);

462 
Àn
 = ((
c⁄åﬁ_dr
 >> (
shi·
 + 2)) & 3);

463 
	`k¥ötf
(" %1d 0x%08x %-10†%6†%d\n", 
ªgnum
, 
loˇl_dr
[regnum],

464 
BªakDes¸ùti⁄
[
ty≥
], 
BªakLígthDes¸ùti⁄
[
Àn
], 
loˇl_dr_cou¡î
[
ªgnum
]);

467 i‡(!
has
) {

468 
	`k¥ötf
("no breakpoints or watchpoints.\n");

470 
	}
}

479 
	$debug_°¨t
(
å≠‰ame
 *
tf
) {

480 i‡(!
is_dr_ßved
) {

481 
is_dr_ßved
 = 1;

482 
	`ßve_Æl_dr
();

484 
	}
}

491 
	$debug_íd
(
å≠‰ame
 *
tf
) {

492 i‡(!(
tf
->
tf_eÊags
 & 
FL_TF
Ë&& 
is_dr_ßved
) {

493 
is_dr_ßved
 = 0;

494 
	`ª°‹e_Æl_dr
();

496 
	}
}

500 
	$debug_m⁄ô‹
(
å≠‰ame
 *
tf
) {

501 
	`as£π
(
tf
 !
NULL
);

502 
boﬁ
 
öå_Êag
;

503 
	`loˇl_öå_ßve
(
öå_Êag
);

505 
	`debug_°¨t
(
tf
);

506 
	`k¥ötf
("debug_monitorát:\n");

507 
	`¥öt_debugöfo
(
tf
->
tf_eù
);

508 
	`m⁄ô‹
(
tf
);

509 
	`debug_íd
(
tf
);

511 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

512 
	}
}

	@kern-ucore/arch/i386/debug/kdebug.h

1 #i‚de‡
__KERN_DEBUG_KDEBUG_H__


2 
	#__KERN_DEBUG_KDEBUG_H__


	)

4 
	~<ty≥s.h
>

5 
	~<å≠.h
>

7 
¥öt_kînöfo
();

8 
¥öt_°ack‰ame
();

9 
¥öt_debugöfo
(
uöçå_t
 
eù
);

12 
	#MAX_DR_NUM
 4

	)

15 
	#DR_STATUS
 6

	)

16 
	#DR_CONTROL
 7

	)

19 
	#DR6_B0_BIT
 0x00000001

	)

20 
	#DR6_B1_BIT
 0x00000002

	)

21 
	#DR6_B2_BIT
 0x00000004

	)

22 
	#DR6_B3_BIT
 0x00000008

	)

25 
	#DR7_L0_BIT
 0x00000001

	)

26 
	#DR7_G0_BIT
 0x00000002

	)

27 
	#DR7_L1_BIT
 0x00000004

	)

28 
	#DR7_G1_BIT
 0x00000008

	)

29 
	#DR7_L2_BIT
 0x00000010

	)

30 
	#DR7_G2_BIT
 0x00000020

	)

31 
	#DR7_L3_BIT
 0x00000040

	)

32 
	#DR7_G3_BIT
 0x00000080

	)

33 
	#DR7_LEXACT
 0x00000100

	)

34 
	#DR7_GEXACT
 0x00000200

	)

35 
	#DR7_GDETECT
 0x00002000

	)

36 
	#DR7_MASK
 0xFFFF0000

	)

38 
debug_öô
();

39 
debug_m⁄ô‹
(
å≠‰ame
 *
tf
);

40 
debug_li°_dr
();

41 
debug_íabÀ_dr
(
ªgnum
, 
uöçå_t
 
addr
, 
ty≥
, 
Àn
);

42 
debug_dißbÀ_dr
(
ªgnum
);

	@kern-ucore/arch/i386/debug/monitor.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<mmu.h
>

4 
	~<å≠.h
>

5 
	~<m⁄ô‹.h
>

6 
	~<kdebug.h
>

7 
	~<kio.h
>

14 
	scomm™d
 {

15 c⁄° *
	m«me
;

16 c⁄° *
	mdesc
;

18 (*
	mfunc
)(
	m¨gc
, **
	m¨gv
, 
å≠‰ame
 *
	mtf
);

21 
comm™d
 
	gcomm™ds
[] = {

22 {"hñp", "Di•œyÅhi†li° o‡comm™ds.", 
m⁄_hñp
},

23 {"kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l.", 
m⁄_kînöfo
},

24 {"backåa˚", "Pröàbackåa˚ o‡°ack føme.", 
m⁄_backåa˚
},

25 {"c⁄töue", "C⁄töuêexecuti⁄.", 
m⁄_c⁄töue
},

26 {"°ï", "Ru¿sögÀ in°ru˘i⁄.", 
m⁄_°ï
},

29 " @exam∂e: bªakpoöà-r0 0xC0100000", 
m⁄_bªakpoöt
},

38 " @exam∂e: w©chpoöà-r3 0xC020000", 
m⁄_w©chpoöt
},

41 " @exam∂e: dñb∞3", 
m⁄_dñëe_dr
},

42 {"li°dr", "Li°áŒ bªakpoöt†‹ w©chpoöts.", 
m⁄_li°_dr
},

46 
boﬁ
 
is_kî√l_∑nic
();

48 
	#NCOMMANDS
 ((
comm™ds
)/(
comm™d
))

	)

52 
	#MAXARGS
 16

	)

53 
	#WHITESPACE
 " \t\n\r"

	)

57 
	$∑r£
(*
buf
, **
¨gv
) {

58 
¨gc
 = 0;

61 *
buf
 !'\0' && 
	`°rchr
(
WHITESPACE
, *bufË!
NULL
) {

62 *
buf
 ++ = '\0';

64 i‡(*
buf
 == '\0') {

69 i‡(
¨gc
 =
MAXARGS
 - 1) {

70 
	`k¥ötf
("Toÿm™yárgumít†(max %d).\n", 
MAXARGS
);

72 
¨gv
[
¨gc
 ++] = 
buf
;

73 *
buf
 !'\0' && 
	`°rchr
(
WHITESPACE
, *bufË=
NULL
) {

74 
buf
 ++;

77  
¨gc
;

78 
	}
}

85 
	$runcmd
(*
buf
, 
å≠‰ame
 *
tf
) {

86 *
¨gv
[
MAXARGS
];

87 
¨gc
 = 
	`∑r£
(
buf
, 
¨gv
);

88 i‡(
¨gc
 == 0) {

91 
i
;

92 
i
 = 0; i < 
NCOMMANDS
; i ++) {

93 i‡(
	`°rcmp
(
comm™ds
[
i
].
«me
, 
¨gv
[0]) == 0) {

94  
comm™ds
[
i
].
	`func
(
¨gc
 - 1, 
¨gv
 + 1, 
tf
);

97 
	`k¥ötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

99 
	}
}

104 
	$m⁄ô‹
(
å≠‰ame
 *
tf
) {

105 
	`k¥ötf
("WelcomeÅoÅhe kernel debug monitor!!\n");

106 
	`k¥ötf
("Type 'help' foráÜist of commands.\n");

108 i‡(
tf
 !
NULL
) {

109 
	`¥öt_å≠‰ame
(
tf
);

112 *
buf
;

114 i‡((
buf
 = 
	`ªadlöe
("K> ")Ë!
NULL
) {

115 i‡(
	`runcmd
(
buf
, 
tf
) < 0) {

120 
	}
}

124 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

125 
i
;

126 
i
 = 0; i < 
NCOMMANDS
; i ++) {

127 
	`k¥ötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

130 
	}
}

137 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

138 
	`¥öt_kînöfo
();

140 
	}
}

147 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

148 
	`¥öt_°ack‰ame
();

150 
	}
}

154 
	$m⁄_c⁄töue
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

155 i‡(
	`is_kî√l_∑nic
()) {

156 
	`k¥ötf
("can't continueÉxecution in kernelÖanic.\n");

159 i‡(
tf
 !
NULL
) {

160 
tf
->
tf_eÊags
 &~
FL_TF
;

163 
	}
}

167 
	$m⁄_°ï
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

168 i‡(
	`is_kî√l_∑nic
()) {

169 
	`k¥ötf
("can't continueÉxecution in kernelÖanic.\n");

172 i‡(
tf
 !
NULL
) {

173 
tf
->
tf_eÊags
 |
FL_TF
;

176 
	`k¥ötf
("trapframe is NULL, can'tÑun step.\n");

178 
	}
}

182 
	$m⁄_bªakpoöt
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

183 i‡(
¨gc
 != 2) {

184 
	`k¥ötf
("needs 2Öarameter(s).\n");

187 
uöçå_t
 
addr
;

188 
ªgnum
 = 
MAX_DR_NUM
, 
ty≥
 = 0, 
Àn
 = 3;

189 
i
;

190 
i
 = 0; i < 
¨gc
; i ++) {

191 i‡(
¨gv
[
i
][0] == '-') {

192 i‡(
¨gv
[
i
][1] !'r' || 
	`°æí
(argv[i]) != 3) {

193 
bad_¨gv
;

196 
¨gv
[
i
][2]) {

197 '0' ... '3': 
ªgnum
 = 
¨gv
[
i
][2] - '0'; ;

198 : 
bad_¨gv
;

203 *
íd±r
;

204 
addr
 = 
	`°πﬁ
(
¨gv
[
i
], &
íd±r
, 16);

205 i‡(*
íd±r
 != '\0') {

206 
bad_¨gv
;

210 
ªt
 = 
	`debug_íabÀ_dr
(
ªgnum
, 
addr
, 
ty≥
, 
Àn
);

211 
	`k¥ötf
("£àbªakpoöà[%d]áà0x%08x: %s.\n", 
ªgnum
, 
addr
,

212 (
ªt
 == 0) ? "successed" : "failed");

215 
bad_¨gv
:

216 
	`k¥ötf
("unknowÖ¨amëî(s): [%d] %s\n", 
i
, 
¨gv
[i]);

218 
	}
}

222 
	$m⁄_w©chpoöt
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

223 i‡(
¨gc
 < 2) {

224 
	`k¥ötf
("needsátÜeast 2Öarameter(s).\n");

227 
uöçå_t
 
addr
;

228 
ªgnum
 = 
MAX_DR_NUM
, 
ty≥
 = 1, 
Àn
 = 3;

229 
i
;

230 
i
 = 0; i < 
¨gc
; i ++) {

231 i‡(
¨gv
[
i
][0] == '-') {

232 
c
 = 
¨gv
[
i
][1];

233 i‡((
c
 !'r' && c !'t' && c !'l'Ë|| 
	`°æí
(
¨gv
[
i
]) != 3) {

234 
bad_¨gv
;

236 
c
) {

238 
¨gv
[
i
][2]) {

239 '0' ... '3': 
ªgnum
 = 
¨gv
[
i
][2] - '0'; ;

240 : 
bad_¨gv
;

244 
¨gv
[
i
][2]) {

245 'w': 
ty≥
 = 1; ;

246 'a': 
ty≥
 = 3; ;

247 : 
bad_¨gv
;

251 
¨gv
[
i
][2]) {

252 '1': 
Àn
 = 0; ;

253 '2': 
Àn
 = 1; ;

254 '4': 
Àn
 = 3; ;

255 : 
bad_¨gv
;

261 *
íd±r
;

262 
addr
 = 
	`°πﬁ
(
¨gv
[
i
], &
íd±r
, 16);

263 i‡(*
íd±r
 != '\0') {

264 
bad_¨gv
;

268 
ªt
 = 
	`debug_íabÀ_dr
(
ªgnum
, 
addr
, 
ty≥
, 
Àn
);

269 
	`k¥ötf
("£àw©chpoöà[%d]áà0x%08x: %s.\n", 
ªgnum
, 
addr
,

270 (
ªt
 == 0) ? "successed" : "failed");

273 
bad_¨gv
:

274 
	`k¥ötf
("unknowÖ¨amëî(s): [%d] %s\n", 
i
, 
¨gv
[i]);

276 
	}
}

280 
	$m⁄_dñëe_dr
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

281 i‡(
¨gc
 != 1) {

282 
	`k¥ötf
("needs 1Öarameter(s).\n");

285 
ªgnum
 = 
MAX_DR_NUM
;

286 i‡(
	`°æí
(
¨gv
[0]) != 1) {

287 
bad_¨gv
;

290 
¨gv
[0][0]) {

291 '0' ... '3': 
ªgnum
 = 
¨gv
[0][0] - '0'; ;

292 : 
bad_¨gv
;

295 
ªt
 = 
	`debug_dißbÀ_dr
(
ªgnum
);

296 
	`k¥ötf
("dñëê[%d]: %s.\n", 
ªgnum
,

297 (
ªt
 == 0) ? "successed" : "failed");

300 
bad_¨gv
:

301 
	`k¥ötf
("unknowÖ¨amëî(s): [%d] %s\n", 0, 
¨gv
[0]);

303 
	}
}

307 
	$m⁄_li°_dr
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

308 
	`debug_li°_dr
();

310 
	}
}

	@kern-ucore/arch/i386/debug/monitor.h

1 #i‚de‡
__KERN_DEBUG_MONITOR_H__


2 
	#__KERN_DEBUG_MONITOR_H__


	)

4 
	~<å≠.h
>

6 
m⁄ô‹
(
å≠‰ame
 *
tf
);

8 
m⁄_hñp
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

9 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

10 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

11 
m⁄_c⁄töue
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

12 
m⁄_°ï
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

13 
m⁄_bªakpoöt
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

14 
m⁄_w©chpoöt
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

15 
m⁄_dñëe_dr
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

16 
m⁄_li°_dr
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

	@kern-ucore/arch/i386/debug/panic.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<öå.h
>

4 
	~<m⁄ô‹.h
>

5 
	~<kio.h
>

7 
boﬁ
 
	gis_∑nic
 = 0;

14 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

15 i‡(
is_∑nic
) {

16 
∑nic_dód
;

18 
is_∑nic
 = 1;

21 
va_li°
 
≠
;

22 
	`va_°¨t
(
≠
, 
fmt
);

23 
	`k¥ötf
("kî√»∑ni¯© %s:%d:\¿ ", 
fûe
, 
löe
);

24 
	`vk¥ötf
(
fmt
, 
≠
);

25 
	`k¥ötf
("\n");

26 
	`va_íd
(
≠
);

28 
∑nic_dód
:

29 
	`öå_dißbÀ
();

31 
	`m⁄ô‹
(
NULL
);

33 
	}
}

37 
	$__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

38 
va_li°
 
≠
;

39 
	`va_°¨t
(
≠
, 
fmt
);

40 
	`k¥ötf
("kî√»w¨nögáà%s:%d:\¿ ", 
fûe
, 
löe
);

41 
	`vk¥ötf
(
fmt
, 
≠
);

42 
	`k¥ötf
("\n");

43 
	`va_íd
(
≠
);

44 
	}
}

46 
boﬁ


47 
	$is_kî√l_∑nic
() {

48  
is_∑nic
;

49 
	}
}

	@kern-ucore/arch/i386/debug/stab.h

1 #i‚de‡
__KERN_DEBUG_STAB_H__


2 
	#__KERN_DEBUG_STAB_H__


	)

4 
	~<ty≥s.h
>

17 
	#N_GSYM
 0x20

18 
	#N_FNAME
 0x22

19 
	#N_FUN
 0x24

20 
	#N_STSYM
 0x26

21 
	#N_LCSYM
 0x28

22 
	#N_MAIN
 0x2a

23 
	#N_PC
 0x30

24 
	#N_RSYM
 0x40

25 
	#N_SLINE
 0x44

26 
	#N_DSLINE
 0x46

27 
	#N_BSLINE
 0x48

28 
	#N_SSYM
 0x60

29 
	#N_SO
 0x64

30 
	#N_LSYM
 0x80

31 
	#N_BINCL
 0x82

32 
	#N_SOL
 0x84

33 
	#N_PSYM
 0xa0

34 
	#N_EINCL
 0xa2

35 
	#N_ENTRY
 0xa4

36 
	#N_LBRAC
 0xc0

37 
	#N_EXCL
 0xc2

38 
	#N_RBRAC
 0xe0

39 
	#N_BCOMM
 0xe2

40 
	#N_ECOMM
 0xe4

41 
	#N_ECOML
 0xe8

42 
	#N_LENG
 0xfe

43 

	)

45 
	s°ab
 {

46 
uöt32_t
 
	mn_°rx
;

47 
uöt8_t
 
	mn_ty≥
;

48 
uöt8_t
 
	mn_Ÿhî
;

49 
uöt16_t
 
	mn_desc
;

50 
uöçå_t
 
	mn_vÆue
;

	@kern-ucore/arch/i386/driver/clock.c

1 
	~<¨ch.h
>

2 
	~<å≠.h
>

3 
	~<°dio.h
>

4 
	~<picúq.h
>

5 
	~<kio.h
>

12 
	#IO_TIMER1
 0x040

13 

	)

19 
	#TIMER_FREQ
 1193182

	)

20 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
 + (xË/ 2Ë/ (x))

	)

22 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

23 
	#TIMER_SEL0
 0x00

24 
	#TIMER_RATEGEN
 0x04

25 
	#TIMER_16BIT
 0x30

26 

	)

27 vﬁ©ûê
size_t
 
	gticks
;

34 
	$˛ock_öô
() {

36 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

37 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

38 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

41 
ticks
 = 0;

43 
	`k¥ötf
("++ setupÅimer interrupts\n");

44 
	`pic_íabÀ
(
IRQ_TIMER
);

45 
	}
}

	@kern-ucore/arch/i386/driver/clock.h

1 #i‚de‡
__KERN_DRIVER_CLOCK_H__


2 
	#__KERN_DRIVER_CLOCK_H__


	)

4 
	~<ty≥s.h
>

6 vﬁ©ûê
size_t
 
ticks
;

8 
˛ock_öô
();

	@kern-ucore/arch/i386/driver/console.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<kbdªg.h
>

6 
	~<picúq.h
>

7 
	~<å≠.h
>

8 
	~<memœyout.h
>

9 
	~<sync.h
>

10 
	~<kio.h
>

14 
	$dñay
() {

15 
	`öb
(0x84);

16 
	`öb
(0x84);

17 
	`öb
(0x84);

18 
	`öb
(0x84);

19 
	}
}

22 
	#COM1
 0x3F8

	)

24 
	#COM_RX
 0

25 
	#COM_TX
 0

26 
	#COM_DLL
 0

27 
	#COM_DLM
 1

28 
	#COM_IER
 1

29 
	#COM_IER_RDI
 0x01

30 
	#COM_IIR
 2

31 
	#COM_FCR
 2

32 
	#COM_LCR
 3

33 
	#COM_LCR_DLAB
 0x80

34 
	#COM_LCR_WLEN8
 0x03

35 
	#COM_MCR
 4

36 
	#COM_MCR_RTS
 0x02

37 
	#COM_MCR_DTR
 0x01

38 
	#COM_MCR_OUT2
 0x08

39 
	#COM_LSR
 5

40 
	#COM_LSR_DATA
 0x01

41 
	#COM_LSR_TXRDY
 0x20

42 
	#COM_LSR_TSRE
 0x40

43 

	)

44 
	#MONO_BASE
 0x3B4

	)

45 
	#MONO_BUF
 0xB0000

	)

46 
	#CGA_BASE
 0x3D4

	)

47 
	#CGA_BUF
 0xB8000

	)

48 
	#CRT_ROWS
 25

	)

49 
	#CRT_COLS
 80

	)

50 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

52 
	#LPTPORT
 0x378

	)

54 
uöt16_t
 *
	g¸t_buf
;

55 
uöt16_t
 
	g¸t_pos
;

56 
uöt16_t
 
	gaddr_6845
;

61 
	$cga_öô
() {

62 vﬁ©ûê
uöt16_t
 *
˝
 = (uöt16_à*)(
CGA_BUF
 + 
KERNBASE
);

63 
uöt16_t
 
was
 = *
˝
;

64 *
˝
 = (
uöt16_t
) 0xA55A;

65 i‡(*
˝
 != 0xA55A) {

66 
˝
 = (
uöt16_t
*)(
MONO_BUF
 + 
KERNBASE
);

67 
addr_6845
 = 
MONO_BASE
;

69 *
˝
 = 
was
;

70 
addr_6845
 = 
CGA_BASE
;

74 
uöt32_t
 
pos
;

75 
	`outb
(
addr_6845
, 14);

76 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

77 
	`outb
(
addr_6845
, 15);

78 
pos
 |
	`öb
(
addr_6845
 + 1);

80 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

81 
¸t_pos
 = 
pos
;

82 
	}
}

84 
boﬁ
 
	g£rül_exi°s
 = 0;

87 
	$£rül_öô
() {

89 
	`outb
(
COM1
 + 
COM_FCR
, 0);

92 
	`outb
(
COM1
 + 
COM_LCR
, 
COM_LCR_DLAB
);

93 
	`outb
(
COM1
 + 
COM_DLL
, (
uöt8_t
) (115200 / 9600));

94 
	`outb
(
COM1
 + 
COM_DLM
, 0);

97 
	`outb
(
COM1
 + 
COM_LCR
, 
COM_LCR_WLEN8
 & ~
COM_LCR_DLAB
);

100 
	`outb
(
COM1
 + 
COM_MCR
, 0);

102 
	`outb
(
COM1
 + 
COM_IER
, 
COM_IER_RDI
);

106 
£rül_exi°s
 = (
	`öb
(
COM1
 + 
COM_LSR
) != 0xFF);

107 (Ë
	`öb
(
COM1
+
COM_IIR
);

108 (Ë
	`öb
(
COM1
+
COM_RX
);

110 i‡(
£rül_exi°s
) {

111 
	`pic_íabÀ
(
IRQ_COM1
);

113 
	}
}

116 
	$Õt_putc_sub
(
c
) {

117 
i
;

118 
i
 = 0; !(
	`öb
(
LPTPORT
 + 1) & 0x80) && i < 12800; i ++) {

119 
	`dñay
();

121 
	`outb
(
LPTPORT
 + 0, 
c
);

122 
	`outb
(
LPTPORT
 + 2, 0x08 | 0x04 | 0x01);

123 
	`outb
(
LPTPORT
 + 2, 0x08);

124 
	}
}

128 
	$Õt_putc
(
c
) {

129 i‡(
c
 != '\b') {

130 
	`Õt_putc_sub
(
c
);

133 
	`Õt_putc_sub
('\b');

134 
	`Õt_putc_sub
(' ');

135 
	`Õt_putc_sub
('\b');

137 
	}
}

141 
	$cga_putc
(
c
) {

143 i‡(!(
c
 & ~0xFF)) {

144 
c
 |= 0x0700;

147 
c
 & 0xff) {

149 i‡(
¸t_pos
 > 0) {

150 
¸t_pos
 --;

151 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

155 
¸t_pos
 +
CRT_COLS
;

157 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

160 
¸t_buf
[
¸t_pos
 ++] = 
c
;

165 i‡(
¸t_pos
 >
CRT_SIZE
) {

166 
i
;

167 
	`memmove
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

168 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i ++) {

169 
¸t_buf
[
i
] = 0x0700 | ' ';

171 
¸t_pos
 -
CRT_COLS
;

175 
	`outb
(
addr_6845
, 14);

176 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

177 
	`outb
(
addr_6845
, 15);

178 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

179 
	}
}

182 
	$£rül_putc_sub
(
c
) {

183 
i
;

184 
i
 = 0; !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
) && i < 12800; i ++) {

185 
	`dñay
();

187 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

188 
	}
}

192 
	$£rül_putc
(
c
) {

193 i‡(
c
 != '\b') {

194 
	`£rül_putc_sub
(
c
);

197 
	`£rül_putc_sub
('\b');

198 
	`£rül_putc_sub
(' ');

199 
	`£rül_putc_sub
('\b');

201 
	}
}

209 
	#CONSBUFSIZE
 512

	)

212 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

213 
uöt32_t
 
	mΩos
;

214 
uöt32_t
 
	mwpos
;

215 } 
	gc⁄s
;

222 
c⁄s_öå
((*
¥oc
)()) {

223 
c
;

224 (
c
 = (*
¥oc
)()) != -1) {

225 i‡(
c
 != 0) {

226 
c⁄s
.
buf
[c⁄s.
wpos
 ++] = 
c
;

227 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
) {

228 
c⁄s
.
wpos
 = 0;

232 
	}
}

236 
	$£rül_¥oc_d©a
() {

237 i‡(!(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_DATA
)) {

240 
c
 = 
	`öb
(
COM1
 + 
COM_RX
);

241 i‡(
c
 == 127) {

242 
c
 = '\b';

244  
c
;

245 
	}
}

249 
	$£rül_öå
() {

250 i‡(
£rül_exi°s
) {

251 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

253 
	}
}

257 
	#NO
 0

	)

259 
	#SHIFT
 (1<<0)

	)

260 
	#CTL
 (1<<1)

	)

261 
	#ALT
 (1<<2)

	)

263 
	#CAPSLOCK
 (1<<3)

	)

264 
	#NUMLOCK
 (1<<4)

	)

265 
	#SCROLLLOCK
 (1<<5)

	)

267 
	#E0ESC
 (1<<6)

	)

269 
uöt8_t
 
	gshi·code
[256] = {

270 [0x1D] 
CTL
,

271 [0x2A] 
SHIFT
,

272 [0x36] 
SHIFT
,

273 [0x38] 
ALT
,

274 [0x9D] 
CTL
,

275 [0xB8] 
ALT


278 
uöt8_t
 
	gtoggÀcode
[256] = {

279 [0x3A] 
CAPSLOCK
,

280 [0x45] 
NUMLOCK
,

281 [0x46] 
SCROLLLOCK


284 
uöt8_t
 
	gn‹mÆm≠
[256] = {

285 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

288 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

290 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

291 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

292 
NO
, ' ', NO, NO, NO, NO, NO, NO,

293 
NO
, NO, NO, NO, NO, NO, NO, '7',

295 '2', '3', '0', '.', 
NO
, NO, NO, NO,

296 [0xC7] 
KEY_HOME
, [0x9C] '\n' ,

297 [0xB5] '/' , [0xC8] 
KEY_UP
,

298 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

299 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

300 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

301 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


304 
uöt8_t
 
	gshi·m≠
[256] = {

305 
NO
, 033, '!', '@', '#', '$', '%', '^',

308 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

310 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

311 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

312 
NO
, ' ', NO, NO, NO, NO, NO, NO,

313 
NO
, NO, NO, NO, NO, NO, NO, '7',

315 '2', '3', '0', '.', 
NO
, NO, NO, NO,

316 [0xC7] 
KEY_HOME
, [0x9C] '\n' ,

317 [0xB5] '/' , [0xC8] 
KEY_UP
,

318 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

319 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

320 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

321 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


324 
	#C
(
x
Ë(x - '@')

	)

326 
uöt8_t
 
	g˘lm≠
[256] = {

327 
NO
, NO, NO, NO, NO, NO, NO, NO,

328 
NO
, NO, NO, NO, NO, NO, NO, NO,

329 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

330 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

331 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

332 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

333 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

334 [0x97] 
KEY_HOME
,

335 [0xB5] 
C
('/'), [0xC8] 
KEY_UP
,

336 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

337 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

338 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

339 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


342 
uöt8_t
 *
	gch¨code
[4] = {

343 
n‹mÆm≠
,

344 
shi·m≠
,

345 
˘lm≠
,

346 
˘lm≠


356 
	$kbd_¥oc_d©a
() {

357 
c
;

358 
uöt8_t
 
d©a
;

359 
uöt32_t
 
shi·
;

361 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0) {

365 
d©a
 = 
	`öb
(
KBDATAP
);

367 i‡(
d©a
 == 0xE0) {

369 
shi·
 |
E0ESC
;

371 } i‡(
d©a
 & 0x80) {

373 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

374 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

376 } i‡(
shi·
 & 
E0ESC
) {

378 
d©a
 |= 0x80;

379 
shi·
 &~
E0ESC
;

382 
shi·
 |
shi·code
[
d©a
];

383 
shi·
 ^
toggÀcode
[
d©a
];

385 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

386 i‡(
shi·
 & 
CAPSLOCK
) {

387 i‡('a' <
c
 && c <= 'z')

388 
c
 += 'A' - 'a';

389 i‡('A' <
c
 && c <= 'Z')

390 
c
 += 'a' - 'A';

395 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

396 
	`k¥ötf
("Rebooting!\n");

397 
	`outb
(0x92, 0x3);

399  
c
;

400 
	}
}

404 
	$kbd_öå
() {

405 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

406 
	}
}

409 
	$kbd_öô
() {

411 
	`kbd_öå
();

412 
	`pic_íabÀ
(
IRQ_KBD
);

413 
	}
}

417 
	$c⁄s_öô
() {

418 
	`cga_öô
();

419 
	`£rül_öô
();

420 
	`kbd_öô
();

421 i‡(!
£rül_exi°s
) {

422 
	`k¥ötf
("serialÖort doesÇotÉxist!!\n");

424 
	}
}

428 
	$c⁄s_putc
(
c
) {

429 
boﬁ
 
öå_Êag
;

430 
	`loˇl_öå_ßve
(
öå_Êag
);

432 
	`Õt_putc
(
c
);

433 
	`cga_putc
(
c
);

434 
	`£rül_putc
(
c
);

436 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

437 
	}
}

444 
	$c⁄s_gëc
() {

445 
c
 = 0;

446 
boﬁ
 
öå_Êag
;

447 
	`loˇl_öå_ßve
(
öå_Êag
);

452 
	`£rül_öå
();

453 
	`kbd_öå
();

456 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

457 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
 ++];

458 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
) {

459 
c⁄s
.
Ωos
 = 0;

463 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

464  
c
;

465 
	}
}

	@kern-ucore/arch/i386/driver/console.h

1 #i‚de‡
__KERN_DRIVER_CONSOLE_H__


2 
	#__KERN_DRIVER_CONSOLE_H__


	)

4 
c⁄s_öô
();

5 
c⁄s_putc
(
c
);

6 
c⁄s_gëc
();

7 
£rül_öå
();

8 
kbd_öå
();

	@kern-ucore/arch/i386/driver/ide.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<å≠.h
>

4 
	~<picúq.h
>

5 
	~<fs.h
>

6 
	~<ide.h
>

7 
	~<¨ch.h
>

8 
	~<£m.h
>

9 
	~<as£π.h
>

10 
	~<kio.h
>

12 
	#ISA_DATA
 0x00

	)

13 
	#ISA_ERROR
 0x01

	)

14 
	#ISA_PRECOMP
 0x01

	)

15 
	#ISA_CTRL
 0x02

	)

16 
	#ISA_SECCNT
 0x02

	)

17 
	#ISA_SECTOR
 0x03

	)

18 
	#ISA_CYL_LO
 0x04

	)

19 
	#ISA_CYL_HI
 0x05

	)

20 
	#ISA_SDH
 0x06

	)

21 
	#ISA_COMMAND
 0x07

	)

22 
	#ISA_STATUS
 0x07

	)

24 
	#IDE_BSY
 0x80

	)

25 
	#IDE_DRDY
 0x40

	)

26 
	#IDE_DF
 0x20

	)

27 
	#IDE_DRQ
 0x08

	)

28 
	#IDE_ERR
 0x01

	)

30 
	#IDE_CMD_READ
 0x20

	)

31 
	#IDE_CMD_WRITE
 0x30

	)

32 
	#IDE_CMD_IDENTIFY
 0xEC

	)

34 
	#IDE_IDENT_SECTORS
 20

	)

35 
	#IDE_IDENT_MODEL
 54

	)

36 
	#IDE_IDENT_CAPABILITIES
 98

	)

37 
	#IDE_IDENT_CMDSETS
 164

	)

38 
	#IDE_IDENT_MAX_LBA
 120

	)

39 
	#IDE_IDENT_MAX_LBA_EXT
 200

	)

41 
	#IO_BASE0
 0x1F0

	)

42 
	#IO_BASE1
 0x170

	)

43 
	#IO_CTRL0
 0x3F4

	)

44 
	#IO_CTRL1
 0x374

	)

46 
	#MAX_IDE
 4

	)

47 
	#MAX_NSECS
 128

	)

48 
	#MAX_DISK_NSECS
 0x10000000U

	)

49 
	#VALID_IDE
(
idío
Ë(((idíoË>0Ë&& ((idíoË< 
MAX_IDE
Ë&& (
ide_devi˚s
[idío].
vÆid
))

	)

52 c⁄° 
	mba£
;

53 c⁄° 
	m˘æ
;

54 
£m≠h‹e_t
 
	m£m
;

55 } 
	gch™√ls
[2] = {

56 {
IO_BASE0
, 
IO_CTRL0
},

57 {
IO_BASE1
, 
IO_CTRL1
},

61 
	$lock_ch™√l
(
idío
) {

62 
	`down
(&(
ch™√ls
[
idío
 >> 1].
£m
));

63 
	}
}

66 
	$u∆ock_ch™√l
(
idío
) {

67 
	`up
(&(
ch™√ls
[
idío
 >> 1].
£m
));

68 
	}
}

70 
	#IO_BASE
(
idío
Ë(
ch™√ls
[(idíoË>> 1].
ba£
)

	)

71 
	#IO_CTRL
(
idío
Ë(
ch™√ls
[(idíoË>> 1].
˘æ
)

	)

73 
	side_devi˚
 {

74 
	mvÆid
;

75 
	m£ts
;

76 
	msize
;

77 
	mmodñ
[41];

78 } 
	gide_devi˚s
[
MAX_IDE
];

81 
	$ide_waô_ªady
(
ioba£
, 
boﬁ
 
check_îr‹
) {

82 
r
;

83 (
r
 = 
	`öb
(
ioba£
 + 
ISA_STATUS
)Ë& 
IDE_BSY
)

85 i‡(
check_îr‹
 && (
r
 & (
IDE_DF
 | 
IDE_ERR
)) != 0) {

89 
	}
}

92 
	$ide_öô
() {

93 
	`°©ic_as£π
((
SECTSIZE
 % 4) == 0);

94 
idío
, 
ioba£
;

95 
idío
 = 0; idíÿ< 
MAX_IDE
; ideno ++) {

97 
ide_devi˚s
[
idío
].
vÆid
 = 0;

99 
ioba£
 = 
	`IO_BASE
(
idío
);

102 
	`ide_waô_ªady
(
ioba£
, 0);

105 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1) << 4));

106 
	`ide_waô_ªady
(
ioba£
, 0);

109 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_IDENTIFY
);

110 
	`ide_waô_ªady
(
ioba£
, 0);

113 i‡(
	`öb
(
ioba£
 + 
ISA_STATUS
Ë=0 || 
	`ide_waô_ªady
(iobase, 1) != 0) {

118 
ide_devi˚s
[
idío
].
vÆid
 = 1;

121 
buf„r
[128];

122 
	`ö¶
(
ioba£
 + 
ISA_DATA
, 
buf„r
, (buffer) / ());

124 *
idít
 = (*)
buf„r
;

125 
£˘‹s
;

126 
cmd£ts
 = *(*)(
idít
 + 
IDE_IDENT_CMDSETS
);

128 i‡(
cmd£ts
 & (1 << 26)) {

129 
£˘‹s
 = *(*)(
idít
 + 
IDE_IDENT_MAX_LBA_EXT
);

132 
£˘‹s
 = *(*)(
idít
 + 
IDE_IDENT_MAX_LBA
);

134 
ide_devi˚s
[
idío
].
£ts
 = 
cmd£ts
;

135 
ide_devi˚s
[
idío
].
size
 = 
£˘‹s
;

138 
	`as£π
((*(*)(
idít
 + 
IDE_IDENT_CAPABILITIES
) & 0x200) != 0);

140 *
modñ
 = 
ide_devi˚s
[
idío
].modñ, *
d©a
 = 
idít
 + 
IDE_IDENT_MODEL
;

141 
i
, 
Àngth
 = 40;

142 
i
 = 0; i < 
Àngth
; i += 2) {

143 
modñ
[
i
] = 
d©a
[i + 1], model[i + 1] = data[i];

146 
modñ
[
i
] = '\0';

147 } 
i
 -- > 0 && 
modñ
[i] == ' ');

149 
	`k¥ötf
("idê%d: %10u(£˘‹s), '%s'.\n", 
idío
, 
ide_devi˚s
[idío].
size
, ide_devi˚s[idío].
modñ
);

153 
	`pic_íabÀ
(
IRQ_IDE1
);

154 
	`pic_íabÀ
(
IRQ_IDE2
);

156 
	`£m_öô
(&(
ch™√ls
[0].
£m
), 1);

157 
	`£m_öô
(&(
ch™√ls
[1].
£m
), 1);

158 
	}
}

160 
boﬁ


161 
	$ide_devi˚_vÆid
(
idío
) {

162  
	`VALID_IDE
(
idío
);

163 
	}
}

165 
size_t


166 
	$ide_devi˚_size
(
idío
) {

167 i‡(
	`ide_devi˚_vÆid
(
idío
)) {

168  
ide_devi˚s
[
idío
].
size
;

171 
	}
}

174 
	$ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
) {

175 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

176 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

177 
ioba£
 = 
	`IO_BASE
(
idío
), 
io˘æ
 = 
	`IO_CTRL
(ideno);

179 
	`lock_ch™√l
(
idío
);

181 
	`ide_waô_ªady
(
ioba£
, 0);

184 
	`outb
(
io˘æ
 + 
ISA_CTRL
, 0);

185 
	`outb
(
ioba£
 + 
ISA_SECCNT
, 
n£cs
);

186 
	`outb
(
ioba£
 + 
ISA_SECTOR
, 
£˙o
 & 0xFF);

187 
	`outb
(
ioba£
 + 
ISA_CYL_LO
, (
£˙o
 >> 8) & 0xFF);

188 
	`outb
(
ioba£
 + 
ISA_CYL_HI
, (
£˙o
 >> 16) & 0xFF);

189 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1Ë<< 4Ë| ((
£˙o
 >> 24) & 0xF));

190 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_READ
);

192 
ªt
 = 0;

193 ; 
n£cs
 > 0;Ç£c†--, 
d°
 +
SECTSIZE
) {

194 i‡((
ªt
 = 
	`ide_waô_ªady
(
ioba£
, 1)) != 0) {

195 
out
;

197 
	`ö¶
(
ioba£
, 
d°
, 
SECTSIZE
 / (
uöt32_t
));

200 
out
:

201 
	`u∆ock_ch™√l
(
idío
);

202  
ªt
;

203 
	}
}

206 
	$ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
) {

207 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

208 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

209 
ioba£
 = 
	`IO_BASE
(
idío
), 
io˘æ
 = 
	`IO_CTRL
(ideno);

211 
	`lock_ch™√l
(
idío
);

213 
	`ide_waô_ªady
(
ioba£
, 0);

216 
	`outb
(
io˘æ
 + 
ISA_CTRL
, 0);

217 
	`outb
(
ioba£
 + 
ISA_SECCNT
, 
n£cs
);

218 
	`outb
(
ioba£
 + 
ISA_SECTOR
, 
£˙o
 & 0xFF);

219 
	`outb
(
ioba£
 + 
ISA_CYL_LO
, (
£˙o
 >> 8) & 0xFF);

220 
	`outb
(
ioba£
 + 
ISA_CYL_HI
, (
£˙o
 >> 16) & 0xFF);

221 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1Ë<< 4Ë| ((
£˙o
 >> 24) & 0xF));

222 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_WRITE
);

224 
ªt
 = 0;

225 ; 
n£cs
 > 0;Ç£c†--, 
§c
 +
SECTSIZE
) {

226 i‡((
ªt
 = 
	`ide_waô_ªady
(
ioba£
, 1)) != 0) {

227 
out
;

229 
	`out¶
(
ioba£
, 
§c
, 
SECTSIZE
 / (
uöt32_t
));

232 
out
:

233 
	`u∆ock_ch™√l
(
idío
);

234  
ªt
;

235 
	}
}

	@kern-ucore/arch/i386/driver/ide.h

1 #i‚de‡
__KERN_DRIVER_IDE_H__


2 
	#__KERN_DRIVER_IDE_H__


	)

4 
	~<ty≥s.h
>

6 
ide_öô
();

7 
boﬁ
 
ide_devi˚_vÆid
(
idío
);

8 
size_t
 
ide_devi˚_size
(
idío
);

10 
ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

11 
ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

	@kern-ucore/arch/i386/driver/intr.c

1 
	~<¨ch.h
>

2 
	~<öå.h
>

6 
	$öå_íabÀ
() {

7 
	`°i
();

8 
	}
}

12 
	$öå_dißbÀ
() {

13 
	`˛i
();

14 
	}
}

	@kern-ucore/arch/i386/driver/intr.h

1 #i‚de‡
__KERN_DRIVER_INTR_H__


2 
	#__KERN_DRIVER_INTR_H__


	)

4 
öå_íabÀ
();

5 
öå_dißbÀ
();

	@kern-ucore/arch/i386/driver/kbdreg.h

1 #i‚de‡
__KERN_DRIVER_KBDREG_H__


2 
	#__KERN_DRIVER_KBDREG_H__


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

20 
	#KBS_DIB
 0x01

21 
	#KBS_IBF
 0x02

22 
	#KBS_WARM
 0x04

23 
	#BS_OCMD
 0x08

24 
	#KBS_NOSEC
 0x10

25 
	#KBS_TERR
 0x20

26 
	#KBS_RERR
 0x40

27 
	#KBS_PERR
 0x80

28 

	)

29 
	#KBCMDP
 0x64

30 
	#KBC_RAMREAD
 0x20

31 
	#KBC_RAMWRITE
 0x60

32 
	#KBC_AUXDISABLE
 0xa7

33 
	#KBC_AUXENABLE
 0xa8

34 
	#KBC_AUXTEST
 0xa9

35 
	#KBC_KBDECHO
 0xd2

36 
	#KBC_AUXECHO
 0xd3

37 
	#KBC_AUXWRITE
 0xd4

38 
	#KBC_SELFTEST
 0xaa

39 
	#KBC_KBDTEST
 0xab

40 
	#KBC_KBDDISABLE
 0xad

41 
	#KBC_KBDENABLE
 0xae

42 
	#KBC_PULSE0
 0xfe

43 
	#KBC_PULSE1
 0xfd

44 
	#KBC_PULSE2
 0xfb

45 
	#KBC_PULSE3
 0xf7

46 

	)

47 
	#KBDATAP
 0x60

48 
	#KBOUTP
 0x60

49 

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

54 
	#KC8_MDISABLE
 0x20

55 
	#KC8_KDISABLE
 0x10

56 
	#KC8_IGNSEC
 0x08

57 
	#KC8_CPU
 0x04

58 
	#KC8_MENABLE
 0x02

59 
	#KC8_KENABLE
 0x01

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

64 
	#KBC_RESEND
 0xFE

65 
	#KBC_SETDEFAULT
 0xF6

66 
	#KBC_DISABLE
 0xF5

67 
	#KBC_ENABLE
 0xF4

68 
	#KBC_TYPEMATIC
 0xF3

69 
	#KBC_SETTABLE
 0xF0

70 
	#KBC_MODEIND
 0xED

71 
	#KBC_ECHO
 0xEE

72 

	)

74 
	#KBR_EXTENDED
 0xE0

75 
	#KBR_RESEND
 0xFE

76 
	#KBR_ACK
 0xFA

77 
	#KBR_OVERRUN
 0x00

78 
	#KBR_FAILURE
 0xFD

79 
	#KBR_BREAK
 0xF0

80 
	#KBR_RSTDONE
 0xAA

81 
	#KBR_ECHO
 0xEE

82 

	)

	@kern-ucore/arch/i386/driver/picirq.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<picúq.h
>

6 
	#IO_PIC1
 0x20

7 
	#IO_PIC2
 0xA0

8 

	)

9 
	#IRQ_SLAVE
 2

10 

	)

13 
uöt16_t
 
	gúq_mask
 = 0xFFFF & ~(1 << 
IRQ_SLAVE
);

14 
boﬁ
 
	gdid_öô
 = 0;

17 
	$pic_£tmask
(
uöt16_t
 
mask
) {

18 
úq_mask
 = 
mask
;

19 i‡(
did_öô
) {

20 
	`outb
(
IO_PIC1
 + 1, 
mask
);

21 
	`outb
(
IO_PIC2
 + 1, 
mask
 >> 8);

23 
	}
}

26 
	$pic_íabÀ
(
úq
) {

27 
	`pic_£tmask
(
úq_mask
 & ~(1 << 
úq
));

28 
	}
}

32 
	$pic_öô
() {

33 
did_öô
 = 1;

36 
	`outb
(
IO_PIC1
 + 1, 0xFF);

37 
	`outb
(
IO_PIC2
 + 1, 0xFF);

45 
	`outb
(
IO_PIC1
, 0x11);

48 
	`outb
(
IO_PIC1
 + 1, 
IRQ_OFFSET
);

52 
	`outb
(
IO_PIC1
 + 1, 1 << 
IRQ_SLAVE
);

62 
	`outb
(
IO_PIC1
 + 1, 0x3);

65 
	`outb
(
IO_PIC2
, 0x11);

66 
	`outb
(
IO_PIC2
 + 1, 
IRQ_OFFSET
 + 8);

67 
	`outb
(
IO_PIC2
 + 1, 
IRQ_SLAVE
);

70 
	`outb
(
IO_PIC2
 + 1, 0x3);

76 
	`outb
(
IO_PIC1
, 0x68);

77 
	`outb
(
IO_PIC1
, 0x0a);

79 
	`outb
(
IO_PIC2
, 0x68);

80 
	`outb
(
IO_PIC2
, 0x0a);

82 i‡(
úq_mask
 != 0xFFFF) {

83 
	`pic_£tmask
(
úq_mask
);

85 
	}
}

	@kern-ucore/arch/i386/driver/picirq.h

1 #i‚de‡
__KERN_DRIVER_PICIRQ_H__


2 
	#__KERN_DRIVER_PICIRQ_H__


	)

4 
pic_öô
();

5 
pic_íabÀ
(
úq
);

7 
	#IRQ_OFFSET
 32

	)

	@kern-ucore/arch/i386/glue-ucore/kio.c

1 
	~<kio.h
>

2 
	~<c⁄sﬁe.h
>

3 
	~<sync.h
>

4 
	~<glue_öå.h
>

5 
	~<°dio.h
>

6 
	~<•ölock.h
>

7 
	~<°d¨g.h
>

8 
	~<uni°d.h
>

15 
	$˝utch
(
c
, *
˙t
, 
fd
) {

16 
	`c⁄s_putc
(
c
);

17 (*
˙t
) ++;

18 
	}
}

20 
•ölock_s
 
	gk¥ötf_lock
 = {0};

32 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
) {

33 
˙t
 = 0;

34 
Êag
;

35 
	`loˇl_öå_ßve_hw
(
Êag
);

36 
	`•ölock_acquúe
(&
k¥ötf_lock
);

37 
	`v¥ötfmt
((*)
˝utch
, 
NO_FD
, &
˙t
, 
fmt
, 
≠
);

38 
	`•ölock_ªÀa£
(&
k¥ötf_lock
);

39 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

40  
˙t
;

41 
	}
}

50 
	$k¥ötf
(c⁄° *
fmt
, ...) {

51 
va_li°
 
≠
;

52 
˙t
;

53 
	`va_°¨t
(
≠
, 
fmt
);

54 
˙t
 = 
	`vk¥ötf
(
fmt
, 
≠
);

55 
	`va_íd
(
≠
);

56  
˙t
;

57 
	}
}

	@kern-ucore/arch/i386/glue-ucore/libs/arch.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<ty≥s.h
>

6 
	#do_div
(
n
, 
ba£
) ({ \

7 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

8 
__ba£
 = (
ba£
); \

9 
	`asm
("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

10 
__uµî
 = 
__high
; \

11 i‡(
__high
 != 0) { \

12 
__uµî
 = 
__high
 % 
__ba£
; \

13 
__high
 = __high / 
__ba£
; \

15 
	`asm
("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

16 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

17 
	`asm
("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

18 
__mod
; \

19 })

	)

21 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
uöt32_t
 
	$ªad_dr
(
ªgnum
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
	$wrôe_dr
(
ªgnum
, 
uöt32_t
 
vÆue
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
	sp£udodesc
 {

33 
uöt16_t
 
pd_lim
;

34 
uöçå_t
 
pd_ba£
;

35 } 
	`__©åibuã__
 ((
∑cked
));

37 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

42 
ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

43 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

44 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

45 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
uöçå_t
 
	$r¸1
(Ë
	`__©åibuã__
((
Æways_ölöe
));

47 
ölöe
 
uöçå_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

48 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

49 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

51 
ölöe
 
uöt8_t


52 
	$öb
(
uöt16_t
 
p‹t
) {

53 
uöt8_t
 
d©a
;

54 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
));

55  
d©a
;

56 
	}
}

58 
ölöe
 

59 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

60 
asm
 volatile (

63 : "=D" (
addr
), "=c" (
˙t
)

64 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

66 
	}
}

68 
ölöe
 

69 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

70 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
));

71 
	}
}

73 
ölöe
 

74 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

75 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
));

76 
	}
}

78 
ölöe
 

79 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
) {

80 
asm
 volatile (

83 : "=S" (
addr
), "=c" (
˙t
)

84 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

86 
	}
}

88 
ölöe
 
uöt32_t


89 
	$ªad_ebp
() {

90 
uöt32_t
 
ebp
;

91 
asm
 vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
ebp
));

92  
ebp
;

93 
	}
}

95 
ölöe
 

96 
	$bªakpoöt
() {

97 
asm
 volatile ("int $3");

98 
	}
}

100 
ölöe
 
uöt32_t


101 
	$ªad_dr
(
ªgnum
) {

102 
uöt32_t
 
vÆue
 = 0;

103 
ªgnum
) {

104 0: 
asm
 vﬁ©ûê("mov»%%db0, %0" : "Ù" (
vÆue
)); ;

105 1: 
asm
 vﬁ©ûê("mov»%%db1, %0" : "Ù" (
vÆue
)); ;

106 2: 
asm
 vﬁ©ûê("mov»%%db2, %0" : "Ù" (
vÆue
)); ;

107 3: 
asm
 vﬁ©ûê("mov»%%db3, %0" : "Ù" (
vÆue
)); ;

108 6: 
asm
 vﬁ©ûê("mov»%%db6, %0" : "Ù" (
vÆue
)); ;

109 7: 
asm
 vﬁ©ûê("mov»%%db7, %0" : "Ù" (
vÆue
)); ;

111  
vÆue
;

112 
	}
}

115 
	$wrôe_dr
(
ªgnum
, 
uöt32_t
 
vÆue
) {

116 
ªgnum
) {

117 0: 
asm
 vﬁ©ûê("mov»%0, %%db0" :: "r" (
vÆue
)); ;

118 1: 
asm
 vﬁ©ûê("mov»%0, %%db1" :: "r" (
vÆue
)); ;

119 2: 
asm
 vﬁ©ûê("mov»%0, %%db2" :: "r" (
vÆue
)); ;

120 3: 
asm
 vﬁ©ûê("mov»%0, %%db3" :: "r" (
vÆue
)); ;

121 6: 
asm
 vﬁ©ûê("mov»%0, %%db6" :: "r" (
vÆue
)); ;

122 7: 
asm
 vﬁ©ûê("mov»%0, %%db7" :: "r" (
vÆue
)); ;

124 
	}
}

126 
ölöe
 

127 
	$lidt
(
p£udodesc
 *
pd
) {

128 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
));

129 
	}
}

131 
ölöe
 

132 
	$°i
() {

133 
asm
 volatile ("sti");

134 
	}
}

136 
ölöe
 

137 
	$˛i
() {

138 
asm
 volatile ("cli");

139 
	}
}

141 
ölöe
 

142 
	$…r
(
uöt16_t
 
£l
) {

143 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
));

144 
	}
}

146 
ölöe
 
uöt32_t


147 
	$ªad_eÊags
() {

148 
uöt32_t
 
eÊags
;

149 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

150  
eÊags
;

151 
	}
}

153 
ölöe
 

154 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
) {

155 
asm
 vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
eÊags
));

156 
	}
}

158 
ölöe
 

159 
	$l¸0
(
uöçå_t
 
¸0
) {

160 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
));

161 
	}
}

163 
ölöe
 

164 
	$l¸3
(
uöçå_t
 
¸3
) {

165 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
));

166 
	}
}

168 
ölöe
 
uöçå_t


169 
	$r¸0
() {

170 
uöçå_t
 
¸0
;

171 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
));

172  
¸0
;

173 
	}
}

175 
ölöe
 
uöçå_t


176 
	$r¸1
() {

177 
uöçå_t
 
¸1
;

178 
asm
 vﬁ©ûê("mov %%¸1, %0" : "Ù" (
¸1
));

179  
¸1
;

180 
	}
}

182 
ölöe
 
uöçå_t


183 
	$r¸2
() {

184 
uöçå_t
 
¸2
;

185 
asm
 vﬁ©ûê("mov %%¸2, %0" : "Ù" (
¸2
));

186  
¸2
;

187 
	}
}

189 
ölöe
 
uöçå_t


190 
	$r¸3
() {

191 
uöçå_t
 
¸3
;

192 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
));

193  
¸3
;

194 
	}
}

196 
ölöe
 

197 
	$övÕg
(*
addr
) {

198 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

199 
	}
}

201 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

202 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

203 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

204 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

205 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

207 #i‚de‡
__HAVE_ARCH_STRCMP


208 
	#__HAVE_ARCH_STRCMP


	)

209 
ölöe
 

210 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

211 
d0
, 
d1
, 
ªt
;

212 
asm
 volatile (

223 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

224 : "1" (
s1
), "2" (
s2
)

226  
ªt
;

227 
	}
}

231 #i‚de‡
__HAVE_ARCH_STRCPY


232 
	#__HAVE_ARCH_STRCPY


	)

233 
ölöe
 *

234 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

235 
d0
, 
d1
, 
d2
;

236 
asm
 volatile (

241 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

242 : "0" (
§c
), "1" (
d°
) : "memory");

243  
d°
;

244 
	}
}

247 #i‚de‡
__HAVE_ARCH_MEMSET


248 
	#__HAVE_ARCH_MEMSET


	)

249 
ölöe
 *

250 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

251 
d0
, 
d1
;

252 
asm
 volatile (

254 : "=&c" (
d0
), "=&D" (
d1
)

255 : "0" (
n
), "a" (
c
), "1" (
s
)

257  
s
;

258 
	}
}

261 #i‚de‡
__HAVE_ARCH_MEMMOVE


262 
	#__HAVE_ARCH_MEMMOVE


	)

263 
ölöe
 *

264 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

265 i‡(
d°
 < 
§c
) {

266  
	`__mem˝y
(
d°
, 
§c
, 
n
);

268 
d0
, 
d1
, 
d2
;

269 
asm
 volatile (

273 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

274 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

276  
d°
;

277 
	}
}

280 #i‚de‡
__HAVE_ARCH_MEMCPY


281 
	#__HAVE_ARCH_MEMCPY


	)

282 
ölöe
 *

283 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

284 
d0
, 
d1
, 
d2
;

285 
asm
 volatile (

292 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

293 : "0" (
n
 / 4), "g" (n), "1" (
d°
), "2" (
§c
)

295  
d°
;

296 
	}
}

	@kern-ucore/arch/i386/glue-ucore/libs/asm.h

1 #i‚de‡
__BOOT_ASM_H__


2 
	#__BOOT_ASM_H__


	)

7 
	#SEG_NULLASM
 \

8 .
w‹d
 0, 0; \

9 .
byã
 0, 0, 0, 0

	)

11 
	#SEG_ASM
(
ty≥
,
ba£
,
lim
) \

12 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

13 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

14 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

18 
	#STA_X
 0x8

19 
	#STA_E
 0x4

20 
	#STA_C
 0x4

21 
	#STA_W
 0x2

22 
	#STA_R
 0x2

23 
	#STA_A
 0x1

24 

	)

	@kern-ucore/arch/i386/glue-ucore/libs/atomic.h

1 #i‚de‡
__ARCH_UM_INCLUDE_ATOMIC_H


2 
	#__ARCH_UM_INCLUDE_ATOMIC_H


	)

4 
	~<ty≥s.h
>

9 vﬁ©ûê
	mcou¡î
;

10 } 
	t©omic_t
;

12 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 

31 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

32  
v
->
cou¡î
;

33 
	}
}

42 
ölöe
 

43 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

44 
v
->
cou¡î
 = 
i
;

45 
	}
}

54 
ölöe
 

55 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

56 
asm
 vﬁ©ûê("add»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

57 
	}
}

66 
ölöe
 

67 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

68 
asm
 vﬁ©ûe("sub»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

69 
	}
}

79 
ölöe
 
boﬁ


80 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

81 
c
;

82 
asm
 vﬁ©ûe("sub»%2, %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
Ë: "ú" (
i
) : "memory");

83  
c
 != 0;

84 
	}
}

92 
ölöe
 

93 
	$©omic_öc
(
©omic_t
 *
v
) {

94 
asm
 vﬁ©ûe("ö˛ %0" : "+m" (
v
->
cou¡î
));

95 
	}
}

103 
ölöe
 

104 
	$©omic_dec
(
©omic_t
 *
v
) {

105 
asm
 vﬁ©ûe("de˛ %0" : "+m" (
v
->
cou¡î
));

106 
	}
}

115 
ölöe
 
boﬁ


116 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

117 
c
;

118 
asm
 vﬁ©ûe("ö˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

119  
c
 != 0;

120 
	}
}

129 
ölöe
 
boﬁ


130 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

131 
c
;

132 
asm
 vﬁ©ûe("de˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

133  
c
 != 0;

134 
	}
}

144 
ölöe
 

145 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

146 
__i
 = 
i
;

147 
asm
 vﬁ©ûe("xadd»%0, %1" : "+r" (
i
), "+m" (
v
->
cou¡î
) :: "memory");

148  
i
 + 
__i
;

149 
	}
}

158 
ölöe
 

159 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

160  
	`©omic_add_ªtu∫
(
v
, -
i
);

161 
	}
}

163 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

168 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

169 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

179 
ölöe
 

180 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

181 
asm
 vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

182 
	}
}

189 
ölöe
 

190 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

191 
asm
 vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

192 
	}
}

199 
ölöe
 

200 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

201 
asm
 vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

202 
	}
}

209 
ölöe
 
boﬁ


210 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

211 
ﬁdbô
;

212 
asm
 vﬁ©ûê("bt¶ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

213  
ﬁdbô
 != 0;

214 
	}
}

221 
ölöe
 
boﬁ


222 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

223 
ﬁdbô
;

224 
asm
 vﬁ©ûê("bå»%2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

225  
ﬁdbô
 != 0;

226 
	}
}

233 
ölöe
 
boﬁ


234 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

235 
ﬁdbô
;

236 
asm
 vﬁ©ûê("bt˛ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

237  
ﬁdbô
 != 0;

238 
	}
}

245 
ölöe
 
boﬁ


246 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

247 
ﬁdbô
;

248 
asm
 vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
ﬁdbô
Ë: "m" (*(vﬁ©ûê*)
addr
), "Ir" (
ƒ
));

249  
ﬁdbô
 != 0;

250 
	}
}

	@kern-ucore/arch/i386/glue-ucore/libs/spinlock.h

1 #i‚de‡
__SPINLOCK_H__


2 
	#__SPINLOCK_H__


	)

4 
	s•ölock_s
 {

5 vﬁ©ûê
	mlock
;

6 } 
	t•ölock_s
;

8 
•ölock_s
 *
	t•ölock_t
;

10 
	#•ölock_öô
(
x
Ëdÿ{ (x)->
lock
 = 0; } 0)

	)

12 
ölöe
 

13 
	$•ölock_acquúe
(
•ölock_t
 
lock
)

15 
	}
}

17 
ölöe
 

18 
	$•ölock_acquúe_åy
(
•ölock_t
 
lock
)

21 
	}
}

23 
ölöe
 

24 
	$•ölock_ªÀa£
(
•ölock_t
 
lock
)

26 
	}
}

	@kern-ucore/arch/i386/glue-ucore/mp.c

1 
	~<mp.h
>

2 
	~<pmm.h
>

3 
	~<å≠.h
>

4 
	~<•ölock.h
>

5 
	~<¥oc.h
>

6 
	~<kio.h
>

7 
	~<as£π.h
>

8 
	~<¨ch.h
>

9 
	~<vmm.h
>

11 
PLS
 
	g∂s_œpic_id
;

12 
PLS
 
	g∂s_l˝u_idx
;

13 
PLS
 
	g∂s_l˝u_cou¡
;

15 
PLS
 vﬁ©ûê
	g∂s_loˇl_kîn_lockög
;

17 vﬁ©ûê
	gùi_øi£
[
LAPIC_COUNT
] = {0};

20 
	#mp_debug
(
a
 ...Ë
	`k¥ötf
◊)

	)

22 
	#mp_debug
(
a
 ...)

	)

26 
	$mp_öô
()

28 
	`∂s_wrôe
 (
œpic_id
, 0);

29 
	`∂s_wrôe
 (
l˝u_idx
, 0);

30 
	`∂s_wrôe
 (
l˝u_cou¡
, 1);

33 
	}
}

36 
	$kîn_íãr
(
sour˚
)

38 
	}
}

41 
	$kîn_Àave
()

43 
	}
}

46 
	$mp_£t_mm_∑gëabÀ
(
mm_°ru˘
 *
mm
)

48 i‡(
mm
 !
NULL
 && mm->
pgdú
 != NULL)

49 
	`l¸3
(
	`PADDR
(
mm
->
pgdú
));

51 
	`l¸3
(
boŸ_¸3
);

52 
	}
}

55 
pgd_t
 *
	gm±i_pgdú
;

56 
uöçå_t
 
	gm±i_œ
;

57 vﬁ©ûê
	gm±i_íd
;

60 
	$mp_éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
)

62 
	`éb_övÆid©e
 (
pgdú
, 
œ
);

63 
	}
}

66 
	$mp_éb_upd©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
)

68 
	`éb_upd©e
 (
pgdú
, 
œ
);

69 
	}
}

	@kern-ucore/arch/i386/glue-ucore/pmm.c

1 
	~<pmm.h
>

2 
	~<°dio.h
>

3 
	~<mmu.h
>

4 
	~<memœyout.h
>

5 
	~<îr‹.h
>

6 
	~<buddy_pmm.h
>

7 
	~<°dio.h
>

8 
	~<sync.h
>

9 
	~<ty≥s.h
>

10 
	~<¶ab.h
>

11 
	~<sw≠.h
>

12 
	~<°rög.h
>

13 
	~<kio.h
>

14 
	~<glue_mp.h
>

16 
PLS
 
size_t
 
	g∂s_u£d_∑ges
;

17 
PLS
 
li°_íåy_t
 
	g∂s_∑ge_°ru˘_‰ì_li°
;

20 
Page
 *
	g∑ges
;

22 
size_t
 
	g≈age
 = 0;

25 
pde_t
 *
	gboŸ_pgdú
 = 
NULL
;

28 c⁄° 
pmm_m™agî
 *
	gpmm_m™agî
;

34 
	$öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

35 
pmm_m™agî
->
	`öô_memm≠
(
ba£
, 
n
);

36 
	}
}

46 
	$boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, uöçå_à
∑
, 
uöt32_t
 
≥rm
) {

47 
	`as£π
(
	`PGOFF
(
œ
Ë=PGOFF(
∑
));

48 
size_t
 
n
 = 
	`ROUNDUP
(
size
 + 
	`PGOFF
(
œ
), 
PGSIZE
) / PGSIZE;

49 
œ
 = 
	`ROUNDDOWN
÷a, 
PGSIZE
);

50 
∑
 = 
	`ROUNDDOWN
’a, 
PGSIZE
);

51 ; 
n
 > 0;Ç --, 
œ
 +
PGSIZE
, 
∑
 += PGSIZE) {

52 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 1);

53 
	`as£π
(
±ï
 !
NULL
);

55 
	`±ï_m≠
 (
±ï
, 
∑
);

56 
	`±ï_£t_≥rm
 (
±ï
, 
≥rm
);

58 
	}
}

60 
size_t


61 
	$ƒ_u£d_∑ges
()

63  
	`∂s_ªad
 (
u£d_∑ges
);

64 
	}
}

67 
	$pmm_öô_≠
()

69 
li°_íåy_t
 *
∑ge_°ru˘_‰ì_li°
 = 
	`∂s_gë_±r
(page_struct_free_list);

70 
	`li°_öô
(
∑ge_°ru˘_‰ì_li°
);

71 
	`∂s_wrôe
 (
u£d_∑ges
, 0);

72 
	}
}

82 
Page
 *

83 
	$Æloc_∑ges
(
size_t
 
n
) {

84 
Page
 *
∑ge
;

85 
boﬁ
 
öå_Êag
;

86 
åy_agaö
:

87 
	`loˇl_öå_ßve
(
öå_Êag
);

89 
∑ge
 = 
pmm_m™agî
->
	`Æloc_∑ges
(
n
);

91 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

92 i‡(
∑ge
 =
NULL
 && 
	`åy_‰ì_∑ges
(
n
)) {

93 
åy_agaö
;

96 
	`∂s_wrôe
(
u£d_∑ges
, 
	`∂s_ªad
(u£d_∑gesË+ 
n
);

97  
∑ge
;

98 
	}
}

107 
	$boŸ_Æloc_∑ge
() {

108 
Page
 *
p
 = 
	`Æloc_∑ge
();

109 i‡(
p
 =
NULL
) {

110 
	`∑nic
("boot_alloc_page failed.\n");

112  
	`∑ge2kva
(
p
);

113 
	}
}

121 
	$‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

122 
boﬁ
 
öå_Êag
;

123 
	`loˇl_öå_ßve
(
öå_Êag
);

125 
pmm_m™agî
->
	`‰ì_∑ges
(
ba£
, 
n
);

127 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

128 
	`∂s_wrôe
(
u£d_∑ges
, 
	`∂s_ªad
(u£d_∑gesË- 
n
);

129 
	}
}

135 
size_t


136 
	$ƒ_‰ì_∑ges
() {

137 
size_t
 
ªt
;

138 
boﬁ
 
öå_Êag
;

139 
	`loˇl_öå_ßve
(
öå_Êag
);

141 
ªt
 = 
pmm_m™agî
->
	`ƒ_‰ì_∑ges
();

143 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

144  
ªt
;

145 
	}
}

154 
	$check_Æloc_∑ge
() {

155 
pmm_m™agî
->
	`check
();

157 
	`k¥ötf
("check_alloc_page() succeeded.\n");

158 
	}
}

164 
	$check_pgdú
() {

165 
	`as£π
(
≈age
 <
KMEMSIZE
 / 
PGSIZE
);

166 
	`as£π
(
boŸ_pgdú
 !
NULL
 && (
uöt32_t
)
	`PGOFF
(boot_pgdir) == 0);

167 
	`as£π
(
	`gë_∑ge
(
boŸ_pgdú
, 
TEST_PAGE
, 
NULL
) == NULL);

169 
Page
 *
p1
, *
p2
;

170 
p1
 = 
	`Æloc_∑ge
();

171 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p1
, 
TEST_PAGE
, 0) == 0);

173 
±e_t
 *
±ï
, 
≥rm
;

174 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
, 0)Ë!
NULL
);

175 
	`as£π
(
	`∑2∑ge
(*
±ï
Ë=
p1
);

176 
	`as£π
(
	`∑ge_ªf
(
p1
) == 1);

178 
±ï
 = &((
±e_t
 *)
	`KADDR
(
	`PTE_ADDR
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])))[1];

179 
	`as£π
(
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0Ë=
±ï
);

181 
p2
 = 
	`Æloc_∑ge
();

182 
	`±ï_unm≠
 (&
≥rm
);

183 
	`±ï_£t_u_ªad
 (&
≥rm
);

184 
	`±ï_£t_u_wrôe
 (&
≥rm
);

185 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p2
, 
TEST_PAGE
 + 
PGSIZE
, 
≥rm
) == 0);

186 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0)Ë!
NULL
);

187 
	`as£π
(
	`±ï_u_ªad
 (
±ï
));

188 
	`as£π
(
	`±ï_u_wrôe
 (
±ï
));

189 
	`as£π
(
	`±ï_u_ªad
 (&(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])));

190 
	`as£π
(
	`∑ge_ªf
(
p2
) == 1);

192 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p1
, 
TEST_PAGE
 + 
PGSIZE
, 0) == 0);

193 
	`as£π
(
	`∑ge_ªf
(
p1
) == 2);

194 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

195 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0)Ë!
NULL
);

196 
	`as£π
(
	`∑2∑ge
(*
±ï
Ë=
p1
);

197 
	`as£π
–!
	`±ï_u_ªad
 (
±ï
) );

199 
	`∑ge_ªmove
(
boŸ_pgdú
, 
TEST_PAGE
);

200 
	`as£π
(
	`∑ge_ªf
(
p1
) == 1);

201 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

203 
	`∑ge_ªmove
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
);

204 
	`as£π
(
	`∑ge_ªf
(
p1
) == 0);

205 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

207 
	`as£π
(
	`∑ge_ªf
(
	`∑2∑ge
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])) == 1);

208 
	`‰ì_∑ge
(
	`∑2∑ge
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)]));

209 
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)] = 0;

210 
	`exô_ønge
 (
boŸ_pgdú
, 
TEST_PAGE
, TEST_PAGE + 
PGSIZE
);

212 
	`k¥ötf
("check_pgdir() succeeded.\n");

213 
	}
}

	@kern-ucore/arch/i386/glue-ucore/pmm.h

1 #i‚de‡
__KERN_MM_PMM_H__


2 
	#__KERN_MM_PMM_H__


	)

4 
	~<ty≥s.h
>

5 
	~<mmu.h
>

6 
	~<memœyout.h
>

7 
	~<©omic.h
>

8 
	~<as£π.h
>

9 
	~<glue_pgm≠.h
>

11 
	#TEST_PAGE
 0x80000000

	)

13 
	spmm_m™agî
 {

14 c⁄° *
	m«me
;

15 (*
	möô
)();

16 (*
	möô_memm≠
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

17 
	mPage
 *(*
	mÆloc_∑ges
)(
size_t
 
	mn
);

18 (*
	m‰ì_∑ges
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

19 
size_t
 (*
ƒ_‰ì_∑ges
)();

20 (*
	mcheck
)();

22 
	g¥oc_°ru˘
;

24 c⁄° 
pmm_m™agî
 *pmm_manager;

25 
pde_t
 *
boŸ_pgdú
;

26 
uöçå_t
 
boŸ_¸3
;

28 
check_pgdú
();

29 
check_boŸ_pgdú
();

31 
pmm_öô
();

32 
pmm_öô_≠
();

33 
boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, uöçå_à
∑
, 
uöt32_t
 
≥rm
);

35 
Page
 *
Æloc_∑ges
(
size_t
 
n
);

36 *
boŸ_Æloc_∑ge
();

37 
‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
);

38 
size_t
 
ƒ_u£d_∑ges
();

39 
size_t
 
ƒ_‰ì_∑ges
();

41 
	#Æloc_∑ge
(Ë
	`Æloc_∑ges
(1)

	)

42 
	#‰ì_∑ge
(
∑ge
Ë
	`‰ì_∑ges
’age, 1)

	)

44 
pgd_t
 *
gë_pgd
’gd_à*
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

45 
pud_t
 *
gë_pud
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

46 
pmd_t
 *
gë_pmd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

47 
±e_t
 *
gë_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

48 
Page
 *
gë_∑ge
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 **
±ï_°‹e
);

49 
∑ge_ªmove
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

50 
∑ge_ö£π
(
pde_t
 *
pgdú
, 
Page
 *
∑ge
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

52 
lﬂd_r•0
(
uöçå_t
 
r•0
);

53 
£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pde_t
 *
pgdú
);

54 
lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
);

55 
m≠_pgdú
 (
pde_t
 *
pgdú
);

57 
éb_upd©e
 (
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

58 
éb_övÆid©e
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

59 
éb_övÆid©e_u£r
 ();

61 
Page
 *
pgdú_Æloc_∑ge
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

62 
unm≠_ønge
(
pde_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

63 
exô_ønge
(
pde_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

64 
c›y_ønge
(
pde_t
 *
to
,Öde_à*
‰om
, 
uöçå_t
 
°¨t
, uöçå_à
íd
, 
boﬁ
 
sh¨e
);

66 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...));

73 
	#PADDR
(
kva
) ({ \

74 
uöçå_t
 
__m_kva
 = (uöçå_t)(
kva
); \

75 i‡(
__m_kva
 < 
KERNBASE
) { \

76 
	`∑nic
("PADDR cÆÀd wôh invÆid kv®%08lx", 
__m_kva
); \

78 
__m_kva
 - 
KERNBASE
; \

79 
	}
})

	)

85 
	#KADDR
(
∑
) ({ \

86 
uöçå_t
 
__m_∑
 = (
∑
); \

87 
size_t
 
__m_µn
 = 
	`PPN
(
__m_∑
); \

88 i‡(
__m_µn
 >
≈age
) { \

89 
	`∑nic
("KADDR cÆÀd wôh invÆidÖ®%08lx", 
__m_∑
); \

91 (*Ë(
__m_∑
 + 
KERNBASE
); \

92 })

	)

95 
	#VADDR_DIRECT
(
addr
Ë((*)((
uöçå_t
)◊ddrË+ 
KERNBASE
))

	)

96 
	#PADDR_DIRECT
(
addr
Ë((
uöçå_t
)◊ddrË- 
KERNBASE
)

	)

98 
	#NEXT_PAGE
(
pg
Ë’g + 1)

	)

100 
Page
 *
∑ges
;

101 
size_t
 
≈age
;

103 
ölöe
 
µn_t


104 
	$∑ge2gidx
(
Page
 *
∑ge
)

106  
∑ge
 - 
∑ges
;

107 
	}
}

109 
ölöe
 
µn_t


110 
	$∑ge2µn
(
Page
 *
∑ge
) {

111  
∑ge
 - 
∑ges
;

112 
	}
}

114 
ölöe
 
uöçå_t


115 
	$∑ge2∑
(
Page
 *
∑ge
) {

116  
	`∑ge2µn
(
∑ge
Ë<< 
PGSHIFT
;

117 
	}
}

119 
ölöe
 
Page
 *

120 
	$∑2∑ge
(
uöçå_t
 
∑
) {

121 i‡(
	`PPN
(
∑
Ë>
≈age
) {

122 
	`∑nic
("pa2page called with invalidÖa");

124  &
∑ges
[
	`PPN
(
∑
)];

125 
	}
}

127 
ölöe
 *

128 
	$∑ge2kva
(
Page
 *
∑ge
) {

129  
	`KADDR
(
	`∑ge2∑
(
∑ge
));

130 
	}
}

132 
ölöe
 
Page
 *

133 
	$kva2∑ge
(*
kva
) {

134  
	`∑2∑ge
(
	`PADDR
(
kva
));

135 
	}
}

137 
ölöe
 
Page
 *

138 
	$±e2∑ge
(
±e_t
 
±e
) {

139 i‡(!(
±e
 & 
PTE_P
)) {

140 
	`∑nic
("pte2page called with invalidÖte");

142  
	`∑2∑ge
(
	`PTE_ADDR
(
±e
));

143 
	}
}

145 
ölöe
 
Page
 *

146 
	$pde2∑ge
(
pde_t
 
pde
) {

147  
	`∑2∑ge
(
	`PDE_ADDR
(
pde
));

148 
	}
}

150 
ölöe
 
Page
 *

151 
	$pmd2∑ge
(
pmd_t
 
pmd
) {

152  
	`∑2∑ge
(
	`PMD_ADDR
(
pmd
));

153 
	}
}

155 
ölöe
 
Page
 *

156 
	$pud2∑ge
(
pud_t
 
pud
) {

157  
	`∑2∑ge
(
	`PUD_ADDR
(
pud
));

158 
	}
}

160 
ölöe
 
Page
 *

161 
	$pgd2∑ge
(
pgd_t
 
pgd
) {

162  
	`∑2∑ge
(
	`PGD_ADDR
(
pgd
));

163 
	}
}

165 
ölöe
 

166 
	$∑ge_ªf
(
Page
 *
∑ge
) {

167  
	`©omic_ªad
(&(
∑ge
->
ªf
));

168 
	}
}

170 
ölöe
 

171 
	$£t_∑ge_ªf
(
Page
 *
∑ge
, 
vÆ
) {

172 
	`©omic_£t
(&(
∑ge
->
ªf
), 
vÆ
);

173 
	}
}

175 
ölöe
 

176 
	$∑ge_ªf_öc
(
Page
 *
∑ge
) {

177  
	`©omic_add_ªtu∫
(&(
∑ge
->
ªf
), 1);

178 
	}
}

180 
ölöe
 

181 
	$∑ge_ªf_dec
(
Page
 *
∑ge
) {

182  
	`©omic_sub_ªtu∫
(&(
∑ge
->
ªf
), 1);

183 
	}
}

185 
ölöe
 
pgd_t
*

186 
	$öô_pgdú_gë
() {

187  
boŸ_pgdú
;

188 
	}
}

190 *
boŸ°ack
, *
boŸ°ackt›
;

	@kern-ucore/arch/i386/glue-ucore/trap.c

1 
	~<ty≥s.h
>

2 
	~<mmu.h
>

3 
	~<memœyout.h
>

4 
	~<˛ock.h
>

5 
	~<å≠.h
>

6 
	~<¨ch.h
>

7 
	~<°dio.h
>

8 
	~<kdebug.h
>

9 
	~<as£π.h
>

10 
	~<sync.h
>

11 
	~<m⁄ô‹.h
>

12 
	~<c⁄sﬁe.h
>

13 
	~<vmm.h
>

14 
	~<¥oc.h
>

15 
	~<sched.h
>

16 
	~<uni°d.h
>

17 
	~<sysˇŒ.h
>

18 
	~<îr‹.h
>

19 
	~<kio.h
>

20 
	~<glue_mp.h
>

22 
	#TICK_NUM
 30

	)

24 
g©edesc
 
	gidt
[256] = {{0}};

26 
p£udodesc
 
	gidt_pd
 = {

27 (
idt
Ë- 1, (
uöçå_t
)idt

31 
	$idt_öô
() {

32 
uöçå_t
 
__ve˘‹s
[];

33 
i
;

34 
i
 = 0; i < (
idt
Ë/ (
g©edesc
); i ++) {

35 
	`SETGATE
(
idt
[
i
], 1, 
GD_KTEXT
, 
__ve˘‹s
[i], 
DPL_KERNEL
);

37 
	`SETGATE
(
idt
[
T_SYSCALL
], 1, 
GD_KTEXT
, 
__ve˘‹s
[T_SYSCALL], 
DPL_USER
);

38 
	`lidt
(&
idt_pd
);

39 
	}
}

42 
	$å≠«me
(
å≠no
) {

43 c⁄° * c⁄° 
ex˙ames
[] = {

66 i‡(
å≠no
 < (
ex˙ames
)/(const * const)) {

67  
ex˙ames
[
å≠no
];

69 i‡(
å≠no
 =
T_SYSCALL
) {

72 i‡(
å≠no
 >
IRQ_OFFSET
 &&Årapno < IRQ_OFFSET + 16) {

76 
	}
}

78 
boﬁ


79 
	$å≠_ö_kî√l
(
å≠‰ame
 *
tf
) {

80  (
tf
->
tf_cs
 =(
uöt16_t
)
KERNEL_CS
);

81 
	}
}

83 c⁄° *
	gIA32Êags
[] = {

84 "CF", 
NULL
, "PF", NULL, "AF", NULL, "ZF", "SF",

85 "TF", "IF", "DF", "OF", 
NULL
, NULL, "NT", NULL,

86 "RF", "VM", "AC", "VIF", "VIP", "ID", 
NULL
, NULL,

90 
	$¥öt_å≠‰ame
(
å≠‰ame
 *
tf
) {

91 
	`k¥ötf
("å≠‰amê© %p\n", 
tf
);

92 
	`¥öt_ªgs
(&
tf
->
tf_ªgs
);

93 
	`k¥ötf
("É† 0x----%04x\n", 
tf
->
tf_es
);

94 
	`k¥ötf
(" d† 0x----%04x\n", 
tf
->
tf_ds
);

95 
	`k¥ötf
("Åø∞0x%08x %s\n", 
tf
->
tf_å≠no
, 
	`å≠«me
(tf->tf_trapno));

96 
	`k¥ötf
("Éº 0x%08x\n", 
tf
->
tf_îr
);

97 
	`k¥ötf
("Éù 0x%08x\n", 
tf
->
tf_eù
);

98 
	`k¥ötf
(" c† 0x----%04x\n", 
tf
->
tf_cs
);

99 
	`k¥ötf
(" fœg 0x%08x ", 
tf
->
tf_eÊags
);

101 
i
, 
j
;

102 
i
 = 0, 
j
 = 1; i < (
IA32Êags
) / (IA32flags[0]); i ++, j <<= 1) {

103 i‡((
tf
->
tf_eÊags
 & 
j
Ë&& 
IA32Êags
[
i
] !
NULL
) {

104 
	`k¥ötf
("%s,", 
IA32Êags
[
i
]);

107 
	`k¥ötf
("IOPL=%d\n", (
tf
->
tf_eÊags
 & 
FL_IOPL_MASK
) >> 12);

109 i‡(!
	`å≠_ö_kî√l
(
tf
)) {

110 
	`k¥ötf
("É• 0x%08x\n", 
tf
->
tf_e•
);

111 
	`k¥ötf
(" s† 0x----%04x\n", 
tf
->
tf_ss
);

113 
	}
}

116 
	$¥öt_ªgs
(
pushªgs
 *
ªgs
) {

117 
	`k¥ötf
("Édò 0x%08x\n", 
ªgs
->
ªg_edi
);

118 
	`k¥ötf
("Ésò 0x%08x\n", 
ªgs
->
ªg_esi
);

119 
	`k¥ötf
("Éb∞ 0x%08x\n", 
ªgs
->
ªg_ebp
);

120 
	`k¥ötf
(" oe• 0x%08x\n", 
ªgs
->
ªg_€•
);

121 
	`k¥ötf
("Ébx 0x%08x\n", 
ªgs
->
ªg_ebx
);

122 
	`k¥ötf
("Édx 0x%08x\n", 
ªgs
->
ªg_edx
);

123 
	`k¥ötf
("Écx 0x%08x\n", 
ªgs
->
ªg_ecx
);

124 
	`k¥ötf
("Éax 0x%08x\n", 
ªgs
->
ªg_óx
);

125 
	}
}

127 
ölöe
 

128 
	$¥öt_pgÁu…
(
å≠‰ame
 *
tf
) {

134 
	`k¥ötf
("∑gêÁu…áà0x%08x: %c/%¯[%s].\n", 
	`r¸2
(),

135 (
tf
->
tf_îr
 & 4) ? 'U' : 'K',

136 (
tf
->
tf_îr
 & 2) ? 'W' : 'R',

137 (
tf
->
tf_îr
 & 1) ? "protection fault" : "noÖage found");

138 
	}
}

141 
	$pgÁu…_h™dÀr
(
å≠‰ame
 *
tf
) {

142 
mm_°ru˘
 *
check_mm_°ru˘
;

143 
mm_°ru˘
 *
mm
;

144 i‡(
check_mm_°ru˘
 !
NULL
) {

145 
	`as£π
(
	`∂s_ªad
(
cuºít
Ë=∂s_ªad(
idÀ¥oc
));

146 
mm
 = 
check_mm_°ru˘
;

149 i‡(
	`∂s_ªad
(
cuºít
Ë=
NULL
) {

150 
	`¥öt_å≠‰ame
(
tf
);

151 
	`¥öt_pgÁu…
(
tf
);

152 
	`∑nic
("unhandledÖage fault.\n");

154 
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

156  
	`do_pgÁu…
(
mm
, 
tf
->
tf_îr
, 
	`r¸2
());

157 
	}
}

160 
	$å≠_di•©ch
(
å≠‰ame
 *
tf
) {

161 
c
;

163 
ªt
;

164 
tf
->
tf_å≠no
) {

165 
T_DEBUG
:

166 
T_BRKPT
:

167 
	`debug_m⁄ô‹
(
tf
);

169 
T_PGFLT
:

170 i‡((
ªt
 = 
	`pgÁu…_h™dÀr
(
tf
)) != 0) {

171 
	`¥öt_å≠‰ame
(
tf
);

172 i‡(
	`∂s_ªad
(
cuºít
Ë=
NULL
) {

173 
	`∑nic
("h™dÀÖgÁu… faûed. %e\n", 
ªt
);

176 i‡(
	`å≠_ö_kî√l
(
tf
)) {

177 
	`∑nic
("h™dÀÖgÁu… faûed i¿kî√»mode. %e\n", 
ªt
);

179 
	`k¥ötf
("killed by kernel.\n");

180 
	`do_exô
(-
E_KILLED
);

184 
T_SYSCALL
:

185 
	`sysˇŒ
();

187 
IRQ_OFFSET
 + 
IRQ_TIMER
:

188 
ticks
 ++;

189 
	`as£π
(
	`∂s_ªad
(
cuºít
Ë!
NULL
);

190 
	`run_timî_li°
();

192 
IRQ_OFFSET
 + 
IRQ_COM1
:

193 
IRQ_OFFSET
 + 
IRQ_KBD
:

194 i‡((
c
 = 
	`c⁄s_gëc
()) == 13) {

195 
	`debug_m⁄ô‹
(
tf
);

198 
	`dev_°dö_wrôe
(
c
);

199 
	`dev_°dö_wrôe
(
c
);

202 
IRQ_OFFSET
 + 
IRQ_IDE1
:

203 
IRQ_OFFSET
 + 
IRQ_IDE2
:

207 
	`¥öt_å≠‰ame
(
tf
);

208 i‡(
	`∂s_ªad
(
cuºít
Ë!
NULL
) {

209 
	`k¥ötf
("unhandledÅrap.\n");

210 
	`do_exô
(-
E_KILLED
);

212 
	`∑nic
("unexpectedÅrap in kernel.\n");

214 
	}
}

217 
	$å≠
(
å≠‰ame
 *
tf
) {

219 i‡(
	`∂s_ªad
(
cuºít
Ë=
NULL
) {

220 
	`å≠_di•©ch
(
tf
);

224 
å≠‰ame
 *
Ÿf
 = 
	`∂s_ªad
(
cuºít
)->
tf
;

225 
	`∂s_ªad
(
cuºít
)->
tf
 =Åf;

227 
boﬁ
 
ö_kî√l
 = 
	`å≠_ö_kî√l
(
tf
);

229 
	`å≠_di•©ch
(
tf
);

231 
	`∂s_ªad
(
cuºít
)->
tf
 = 
Ÿf
;

232 i‡(!
ö_kî√l
) {

233 
	`may_kûÀd
();

234 i‡(
	`∂s_ªad
(
cuºít
)->
√ed_ªsched
) {

235 
	`scheduÀ
();

239 
	}
}

	@kern-ucore/arch/i386/glue-ucore/trap.h

1 #i‚de‡
__KERN_TRAP_TRAP_H__


2 
	#__KERN_TRAP_TRAP_H__


	)

4 
	~<glue_öå.h
>

5 
	~<ty≥s.h
>

7 
idt_öô
();

8 
¥öt_å≠‰ame
(
å≠‰ame
 *
tf
);

9 
¥öt_ªgs
(
pushªgs
 *
ªgs
);

10 
boﬁ
 
å≠_ö_kî√l
(
å≠‰ame
 *
tf
);

	@kern-ucore/arch/i386/init/init.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<c⁄sﬁe.h
>

5 
	~<kdebug.h
>

6 
	~<picúq.h
>

7 
	~<å≠.h
>

8 
	~<˛ock.h
>

9 
	~<öå.h
>

10 
	~<pmm.h
>

11 
	~<vmm.h
>

12 
	~<ide.h
>

13 
	~<fs.h
>

14 
	~<sw≠.h
>

15 
	~<¥oc.h
>

16 
	~<sched.h
>

17 
	~<kio.h
>

18 
	~<mp.h
>

20 
	$kîn_öô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

23 
	$kîn_öô
() {

24 
ed©a
[], 
íd
[];

25 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

27 
	`c⁄s_öô
();

29 c⁄° *
mesßge
 = "(THU.CST) os isÜoading ...";

30 
	`k¥ötf
("%s\n\n", 
mesßge
);

32 
	`¥öt_kînöfo
();

35 
	`mp_öô
 ();

37 
	`debug_öô
();

38 
	`pmm_öô
();

39 
	`pmm_öô_≠
();

41 
	`pic_öô
();

42 
	`idt_öô
();

44 
	`vmm_öô
();

45 
	`sched_öô
();

46 
	`¥oc_öô
();

47 
	`sync_öô
();

49 
	`ide_öô
();

50 
	`sw≠_öô
();

51 
	`fs_öô
();

53 
	`˛ock_öô
();

54 
	`öå_íabÀ
();

57 
	`˝u_idÀ
();

58 
	}
}

	@kern-ucore/arch/i386/mm/buddy_pmm.c

1 
	~<pmm.h
>

2 
	~<li°.h
>

3 
	~<°rög.h
>

4 
	~<buddy_pmm.h
>

5 
	~<°dio.h
>

9 
	#MAX_ORDER
 10

	)

10 
‰ì_¨ó_t
 
	g‰ì_¨ó
[
MAX_ORDER
 + 1];

13 
	#‰ì_li°
(
x
Ë(
‰ì_¨ó
[x].
‰ì_li°
)

	)

14 
	#ƒ_‰ì
(
x
Ë(
‰ì_¨ó
[x].
ƒ_‰ì
)

	)

16 
	#MAX_ZONE_NUM
 10

	)

17 
	sZ⁄e
 {

18 
Page
 *
	mmem_ba£
;

19 } 
	gz⁄es
[
MAX_ZONE_NUM
] = {{
NULL
}};

23 
	$buddy_öô
() {

24 
i
;

25 
i
 = 0; i <
MAX_ORDER
; i ++) {

26 
	`li°_öô
(&
	`‰ì_li°
(
i
));

27 
	`ƒ_‰ì
(
i
) = 0;

29 
	}
}

33 
	$buddy_öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

34 
z⁄e_num
 = 0;

35 
	`as£π
(
n
 > 0 && 
z⁄e_num
 < 
MAX_ZONE_NUM
);

36 
Page
 *
p
 = 
ba£
;

37 ; 
p
 !
ba£
 + 
n
;Ö ++) {

38 
	`as£π
(
	`PageRe£rved
(
p
));

39 
p
->
Êags
 =Ö->
¥›îty
 = 0;

40 
p
->
z⁄e_num
 = zone_num;

41 
	`£t_∑ge_ªf
(
p
, 0);

43 
p
 = 
z⁄es
[
z⁄e_num
 ++].
mem_ba£
 = 
ba£
;

44 
size_t
 
‹dî
 = 
MAX_ORDER
, 
‹dî_size
 = (1 << order);

45 
n
 != 0) {

46 
n
 >
‹dî_size
) {

47 
p
->
¥›îty
 = 
‹dî
;

48 
	`SëPagePr›îty
(
p
);

49 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
p
->
∑ge_lök
));

50 
n
 -
‹dî_size
, 
p
 += order_size;

51 
	`ƒ_‰ì
(
‹dî
) ++;

53 
‹dî
 --;

54 
‹dî_size
 >>= 1;

56 
	}
}

59 
ölöe
 
size_t


60 
	$gë‹dî
(
size_t
 
n
) {

61 
size_t
 
‹dî
, 
‹dî_size
;

62 
‹dî
 = 0, 
‹dî_size
 = 1; ordî <
MAX_ORDER
; order ++, order_size <<= 1) {

63 i‡(
n
 <
‹dî_size
) {

64  
‹dî
;

67 
	`∑nic
("gë‹dî faûed. %d\n", 
n
);

68 
	}
}

72 
ölöe
 
Page
 *

73 
	$buddy_Æloc_∑ges_sub
(
size_t
 
‹dî
) {

74 
	`as£π
(
‹dî
 <
MAX_ORDER
);

75 
size_t
 
cur_‹dî
;

76 
cur_‹dî
 = 
‹dî
; cur_‹dî <
MAX_ORDER
; cur_order ++) {

77 i‡(!
	`li°_em±y
(&
	`‰ì_li°
(
cur_‹dî
))) {

78 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&
	`‰ì_li°
(
cur_‹dî
));

79 
Page
 *
∑ge
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

80 
	`ƒ_‰ì
(
cur_‹dî
) --;

81 
	`li°_dñ
(
À
);

82 
size_t
 
size
 = 1 << 
cur_‹dî
;

83 
cur_‹dî
 > 
‹dî
) {

84 
cur_‹dî
 --;

85 
size
 >>= 1;

86 
Page
 *
buddy
 = 
∑ge
 + 
size
;

87 
buddy
->
¥›îty
 = 
cur_‹dî
;

88 
	`SëPagePr›îty
(
buddy
);

89 
	`ƒ_‰ì
(
cur_‹dî
) ++;

90 
	`li°_add
(&
	`‰ì_li°
(
cur_‹dî
), &(
buddy
->
∑ge_lök
));

92 
	`CÀ¨PagePr›îty
(
∑ge
);

93  
∑ge
;

96  
NULL
;

97 
	}
}

100 
Page
 *

101 
	$buddy_Æloc_∑ges
(
size_t
 
n
) {

102 
	`as£π
(
n
 > 0);

103 
size_t
 
‹dî
 = 
	`gë‹dî
(
n
), 
‹dî_size
 = (1 << order);

104 
Page
 *
∑ge
 = 
	`buddy_Æloc_∑ges_sub
(
‹dî
);

105 i‡(
∑ge
 !
NULL
 && 
n
 !
‹dî_size
) {

106 
	`‰ì_∑ges
(
∑ge
 + 
n
, 
‹dî_size
 -Ç);

108  
∑ge
;

109 
	}
}

113 
ölöe
 
boﬁ


114 
	$∑ge_is_buddy
(
Page
 *
∑ge
, 
size_t
 
‹dî
, 
z⁄e_num
) {

115 i‡(
	`∑ge2µn
(
∑ge
Ë< 
≈age
) {

116 i‡(
∑ge
->
z⁄e_num
 == zone_num) {

117  !
	`PageRe£rved
(
∑ge
Ë&& 
	`PagePr›îty
’ageË&&Öage->
¥›îty
 =
‹dî
;

121 
	}
}

124 
ölöe
 
µn_t


125 
	$∑ge2idx
(
Page
 *
∑ge
) {

126  
∑ge
 - 
z⁄es
[∑ge->
z⁄e_num
].
mem_ba£
;

127 
	}
}

130 
ölöe
 
Page
 *

131 
	$idx2∑ge
(
z⁄e_num
, 
µn_t
 
idx
) {

132  
z⁄es
[
z⁄e_num
].
mem_ba£
 + 
idx
;

133 
	}
}

138 
	$buddy_‰ì_∑ges_sub
(
Page
 *
ba£
, 
size_t
 
‹dî
) {

139 
µn_t
 
buddy_idx
, 
∑ge_idx
 = 
	`∑ge2idx
(
ba£
);

140 
	`as£π
((
∑ge_idx
 & ((1 << 
‹dî
) - 1)) == 0);

141 
Page
 *
p
 = 
ba£
;

142 ; 
p
 !
ba£
 + (1 << 
‹dî
);Ö ++) {

143 
	`as£π
(!
	`PageRe£rved
(
p
Ë&& !
	`PagePr›îty
(p));

144 
p
->
Êags
 = 0;

145 
	`£t_∑ge_ªf
(
p
, 0);

147 
z⁄e_num
 = 
ba£
->zone_num;

148 
‹dî
 < 
MAX_ORDER
) {

149 
buddy_idx
 = 
∑ge_idx
 ^ (1 << 
‹dî
);

150 
Page
 *
buddy
 = 
	`idx2∑ge
(
z⁄e_num
, 
buddy_idx
);

151 i‡(!
	`∑ge_is_buddy
(
buddy
, 
‹dî
, 
z⁄e_num
)) {

154 
	`ƒ_‰ì
(
‹dî
) --;

155 
	`li°_dñ
(&(
buddy
->
∑ge_lök
));

156 
	`CÀ¨PagePr›îty
(
buddy
);

157 
∑ge_idx
 &
buddy_idx
;

158 
‹dî
 ++;

160 
Page
 *
∑ge
 = 
	`idx2∑ge
(
z⁄e_num
, 
∑ge_idx
);

161 
∑ge
->
¥›îty
 = 
‹dî
;

162 
	`SëPagePr›îty
(
∑ge
);

163 
	`ƒ_‰ì
(
‹dî
) ++;

164 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
∑ge
->
∑ge_lök
));

165 
	}
}

169 
	$buddy_‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

170 
	`as£π
(
n
 > 0);

171 i‡(
n
 == 1) {

172 
	`buddy_‰ì_∑ges_sub
(
ba£
, 0);

175 
size_t
 
‹dî
 = 0, 
‹dî_size
 = 1;

176 
n
 >
‹dî_size
) {

177 
	`as£π
(
‹dî
 <
MAX_ORDER
);

178 i‡((
	`∑ge2idx
(
ba£
Ë& 
‹dî_size
) != 0) {

179 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

180 
ba£
 +
‹dî_size
;

181 
n
 -
‹dî_size
;

183 
‹dî
 ++;

184 
‹dî_size
 <<= 1;

186 
n
 != 0) {

187 
n
 < 
‹dî_size
) {

188 
‹dî
 --;

189 
‹dî_size
 >>= 1;

191 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

192 
ba£
 +
‹dî_size
;

193 
n
 -
‹dî_size
;

196 
	}
}

199 
size_t


200 
	$buddy_ƒ_‰ì_∑ges
() {

201 
size_t
 
ªt
 = 0, 
‹dî
 = 0;

202 ; 
‹dî
 <
MAX_ORDER
; order ++) {

203 
ªt
 +
	`ƒ_‰ì
(
‹dî
) * (1 << order);

205  
ªt
;

206 
	}
}

210 
	$buddy_check
() {

212 
i
;

213 
cou¡
 = 0, 
tŸÆ
 = 0;

214 
i
 = 0; i <
MAX_ORDER
; i ++) {

215 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

216 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

217 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

218 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

219 
cou¡
 ++, 
tŸÆ
 +(1 << 
i
);

222 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

224 
Page
 *
p0
 = 
	`Æloc_∑ges
(8), *
buddy
 =áŒoc_∑ges(8), *
p1
;

226 
	`as£π
(
p0
 !
NULL
);

227 
	`as£π
((
	`∑ge2idx
(
p0
) & 7) == 0);

228 
	`as£π
(!
	`PagePr›îty
(
p0
));

230 
li°_íåy_t
 
‰ì_li°s_°‹e
[
MAX_ORDER
 + 1];

231 
ƒ_‰ì_°‹e
[
MAX_ORDER
 + 1];

233 
i
 = 0; i <
MAX_ORDER
; i ++) {

234 
‰ì_li°s_°‹e
[
i
] = 
	`‰ì_li°
(i);

235 
	`li°_öô
(&
	`‰ì_li°
(
i
));

236 
	`as£π
(
	`li°_em±y
(&
	`‰ì_li°
(
i
)));

237 
ƒ_‰ì_°‹e
[
i
] = 
	`ƒ_‰ì
(i);

238 
	`ƒ_‰ì
(
i
) = 0;

241 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

242 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
);

243 
	`‰ì_∑ges
(
p0
, 8);

244 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 8);

245 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

246 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
 && !
	`PagePr›îty
’0Ë&& 
	`ƒ_‰ì_∑ges
() == 2);

248 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
 &&Ö1 =
p0
 + 6);

249 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

251 
	`‰ì_∑ges
(
p0
, 3);

252 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 1);

253 
	`as£π
(
	`PagePr›îty
(
p0
 + 2Ë&&Ö0[2].
¥›îty
 == 0);

255 
	`‰ì_∑ges
(
p0
 + 3, 3);

256 
	`‰ì_∑ges
(
p1
, 2);

258 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

260 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
);

261 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
);

262 
	`‰ì_∑ges
(
p0
 + 4, 2);

263 
	`‰ì_∑ges
(
p1
, 2);

265 
p1
 = 
p0
 + 4;

266 
	`as£π
(
	`PagePr›îty
(
p1
Ë&&Ö1->
¥›îty
 == 2);

267 
	`‰ì_∑ges
(
p0
, 4);

268 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

270 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(8)Ë!
NULL
);

271 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
 && 
	`ƒ_‰ì_∑ges
() == 0);

273 
i
 = 0; i <
MAX_ORDER
; i ++) {

274 
	`‰ì_li°
(
i
Ë
‰ì_li°s_°‹e
[i];

275 
	`ƒ_‰ì
(
i
Ë
ƒ_‰ì_°‹e
[i];

278 
	`‰ì_∑ges
(
p0
, 8);

279 
	`‰ì_∑ges
(
buddy
, 8);

281 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

283 
i
 = 0; i <
MAX_ORDER
; i ++) {

284 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

285 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

286 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

287 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

288 
cou¡
 --, 
tŸÆ
 -(1 << 
i
);

291 
	`as£π
(
cou¡
 == 0);

292 
	`as£π
(
tŸÆ
 == 0);

293 
	}
}

296 c⁄° 
pmm_m™agî
 
	gbuddy_pmm_m™agî
 = {

297 .
«me
 = "buddy_pmm_manager",

298 .
	göô
 = 
buddy_öô
,

299 .
	göô_memm≠
 = 
buddy_öô_memm≠
,

300 .
	gÆloc_∑ges
 = 
buddy_Æloc_∑ges
,

301 .
	g‰ì_∑ges
 = 
buddy_‰ì_∑ges
,

302 .
	gƒ_‰ì_∑ges
 = 
buddy_ƒ_‰ì_∑ges
,

303 .
	gcheck
 = 
buddy_check
,

	@kern-ucore/arch/i386/mm/buddy_pmm.h

1 #i‚de‡
__KERN_MM_BUDDY_PMM_H__


2 
	#__KERN_MM_BUDDY_PMM_H__


	)

4 
	~<pmm.h
>

6 c⁄° 
pmm_m™agî
 
buddy_pmm_m™agî
;

	@kern-ucore/arch/i386/mm/memlayout.h

1 #i‚de‡
__GLUE_UCORE_MEMLAYOUT_H__


2 
	#__GLUE_UCORE_MEMLAYOUT_H__


	)

4 
	~<glue_memœyout.h
>

	@kern-ucore/arch/i386/mm/pmm.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<mmu.h
>

6 
	~<memœyout.h
>

7 
	~<pmm.h
>

8 
	~<buddy_pmm.h
>

9 
	~<sync.h
>

10 
	~<¶ab.h
>

11 
	~<îr‹.h
>

12 
	~<¥oc.h
>

13 
	~<kio.h
>

35 
èsk°©e
 
	gts
 = {0};

38 
uöçå_t
 
	gboŸ_¸3
;

53 
±e_t
 * c⁄° 
	gv±
 = (±e_à*)
VPT
;

54 
pde_t
 * c⁄° 
	gvpd
 = (pde_à*)
PGADDR
(
PDX
(
VPT
), PDX(VPT), 0);

69 
£gdesc
 
	ggdt
[] = {

70 
SEG_NULL
,

71 [
SEG_KTEXT
] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xFFFFFFFF, 
DPL_KERNEL
),

72 [
SEG_KDATA
] = 
SEG
(
STA_W
, 0x0, 0xFFFFFFFF, 
DPL_KERNEL
),

73 [
SEG_UTEXT
] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xFFFFFFFF, 
DPL_USER
),

74 [
SEG_UDATA
] = 
SEG
(
STA_W
, 0x0, 0xFFFFFFFF, 
DPL_USER
),

75 [
SEG_TSS
] = 
SEG_NULL
,

78 
p£udodesc
 
	ggdt_pd
 = {

79 (
gdt
Ë- 1, (
uöçå_t
)gdt

86 
ölöe
 

87 
	$lgdt
(
p£udodesc
 *
pd
) {

88 
asm
 vﬁ©ûê("lgdà(%0)" :: "r" (
pd
));

89 
asm
 vﬁ©ûê("movw %%ax, %%gs" :: "a" (
USER_DS
));

90 
asm
 vﬁ©ûê("movw %%ax, %%fs" :: "a" (
USER_DS
));

91 
asm
 vﬁ©ûê("movw %%ax, %%es" :: "a" (
KERNEL_DS
));

92 
asm
 vﬁ©ûê("movw %%ax, %%ds" :: "a" (
KERNEL_DS
));

93 
asm
 vﬁ©ûê("movw %%ax, %%ss" :: "a" (
KERNEL_DS
));

95 
asm
 vﬁ©ûê("ljm∞%0, $1f\¿1:\n" :: "i" (
KERNEL_CS
));

96 
	}
}

107 
	$öô_pmm_m™agî
() {

108 
pmm_m™agî
 = &
buddy_pmm_m™agî
;

109 
	`k¥ötf
("mem‹y m™agmít: %s\n", 
pmm_m™agî
->
«me
);

110 
pmm_m™agî
->
	`öô
();

111 
	}
}

115 
	$öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

116 
pmm_m™agî
->
	`öô_memm≠
(
ba£
, 
n
);

117 
	}
}

120 
	$check_Æloc_∑ge
() {

121 
pmm_m™agî
->
	`check
();

122 
	`k¥ötf
("check_alloc_page() succeeded!\n");

123 
	}
}

131 
	$lﬂd_r•0
(
uöçå_t
 
r•0
) {

132 
ts
.
ts_e•0
 = 
r•0
;

133 
	}
}

139 
	$£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pde_t
 *
pgdú
) {

140 
	`as£π
 (
¥oc
 !
NULL
);

141 
¥oc
->
¸3
 = 
	`PADDR
(
pgdú
);

142 
	}
}

148 
	$lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
) {

149 i‡(
¥oc
 !
NULL
)

150 
	`l¸3
(
¥oc
->
¸3
);

152 
	`l¸3
 (
boŸ_¸3
);

153 
	}
}

159 
	$m≠_pgdú
 (
pde_t
 *
pgdú
) {

160 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_W
;

161 
	}
}

165 
	$gdt_öô
() {

167 
	`lﬂd_r•0
((
uöçå_t
)
boŸ°ackt›
);

168 
ts
.
ts_ss0
 = 
KERNEL_DS
;

171 
gdt
[
SEG_TSS
] = 
	`SEGTSS
(
STS_T32A
, (
uöçå_t
)&
ts
, —s), 
DPL_KERNEL
);

174 
	`lgdt
(&
gdt_pd
);

177 
	`…r
(
GD_TSS
);

178 
	}
}

182 
	$∑ge_öô
() {

183 
e820m≠
 *
memm≠
 = (e820m≠ *)(0x8000 + 
KERNBASE
);

184 
uöt64_t
 
max∑
 = 0;

186 
	`k¥ötf
("e820map:\n");

187 
i
;

188 
i
 = 0; i < 
memm≠
->
ƒ_m≠
; i ++) {

189 
uöt64_t
 
begö
 = 
memm≠
->
m≠
[
i
].
addr
, 
íd
 = begö + memm≠->m≠[i].
size
;

190 
	`k¥ötf
(" memory: %08llx, [%08llx, %08llx],Åype = %d.\n",

191 
memm≠
->
m≠
[
i
].
size
, 
begö
, 
íd
 - 1, memm≠->m≠[i].
ty≥
);

192 i‡(
memm≠
->
m≠
[
i
].
ty≥
 =
E820_ARM
) {

193 i‡(
max∑
 < 
íd
 && 
begö
 < 
KMEMSIZE
) {

194 
max∑
 = 
íd
;

198 i‡(
max∑
 > 
KMEMSIZE
) {

199 
max∑
 = 
KMEMSIZE
;

202 
íd
[];

204 
≈age
 = 
max∑
 / 
PGSIZE
;

205 
∑ges
 = (
Page
 *)
	`ROUNDUP
((*)
íd
, 
PGSIZE
);

207 
i
 = 0; i < 
≈age
; i ++) {

208 
	`SëPageRe£rved
(
∑ges
 + 
i
);

211 
uöçå_t
 
‰ìmem
 = 
	`PADDR
((uöçå_t)
∑ges
 + (
Page
Ë* 
≈age
);

213 
i
 = 0; i < 
memm≠
->
ƒ_m≠
; i ++) {

214 
uöt64_t
 
begö
 = 
memm≠
->
m≠
[
i
].
addr
, 
íd
 = begö + memm≠->m≠[i].
size
;

215 i‡(
memm≠
->
m≠
[
i
].
ty≥
 =
E820_ARM
) {

216 i‡(
begö
 < 
‰ìmem
) {

217 
begö
 = 
‰ìmem
;

219 i‡(
íd
 > 
KMEMSIZE
) {

220 
íd
 = 
KMEMSIZE
;

222 i‡(
begö
 < 
íd
) {

223 
begö
 = 
	`ROUNDUP
(begö, 
PGSIZE
);

224 
íd
 = 
	`ROUNDDOWN
”nd, 
PGSIZE
);

225 i‡(
begö
 < 
íd
) {

226 
	`öô_memm≠
(
	`∑2∑ge
(
begö
), (
íd
 - begöË/ 
PGSIZE
);

231 
	}
}

234 
	$íabÀ_∑gög
() {

235 
	`l¸3
(
boŸ_¸3
);

238 
uöt32_t
 
¸0
 = 
	`r¸0
();

239 
¸0
 |
CR0_PE
 | 
CR0_PG
 | 
CR0_AM
 | 
CR0_WP
 | 
CR0_NE
 | 
CR0_TS
 | 
CR0_EM
 | 
CR0_MP
;

240 
¸0
 &~(
CR0_TS
 | 
CR0_EM
);

241 
	`l¸0
(
¸0
);

242 
	}
}

247 
	$pmm_öô
() {

253 
	`öô_pmm_m™agî
();

257 
	`∑ge_öô
();

260 
	`check_Æloc_∑ge
();

263 
boŸ_pgdú
 = 
	`boŸ_Æloc_∑ge
();

264 
	`mem£t
(
boŸ_pgdú
, 0, 
PGSIZE
);

265 
boŸ_¸3
 = 
	`PADDR
(
boŸ_pgdú
);

267 
	`check_pgdú
();

269 
	`°©ic_as£π
(
KERNBASE
 % 
PTSIZE
 =0 && 
KERNTOP
 % PTSIZE == 0);

273 
boŸ_pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
(boŸ_pgdúË| 
PTE_P
 | 
PTE_W
;

278 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
, 
KERNBASE
, 
KMEMSIZE
, 0, 
PTE_W
);

282 
boŸ_pgdú
[0] = boŸ_pgdú[
	`PDX
(
KERNBASE
)];

283 
boŸ_pgdú
[1] = boŸ_pgdú[
	`PDX
(
KERNBASE
) + 1];

285 
	`íabÀ_∑gög
();

290 
	`gdt_öô
();

293 
boŸ_pgdú
[0] = boot_pgdir[1] = 0;

297 
	`check_boŸ_pgdú
();

299 
	`¥öt_pgdú
(
k¥ötf
);

301 
	`¶ab_öô
();

302 
	}
}

308 
	$éb_upd©e
 (
pde_t
 *
pgdú
, 
uöçå_t
 
œ
) {

309 
	`éb_övÆid©e
 (
pgdú
, 
œ
);

310 
	}
}

313 
	$éb_övÆid©e
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
) {

314 i‡(
	`r¸3
(Ë=
	`PADDR
(
pgdú
)) {

315 
	`övÕg
((*)
œ
);

317 
	}
}

320 
	$check_boŸ_pgdú
() {

321 
±e_t
 *
±ï
;

322 
i
;

323 
i
 = 0; i < 
≈age
; i +
PGSIZE
) {

324 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, (
uöçå_t
)
	`KADDR
(
i
), 0)Ë!
NULL
);

325 
	`as£π
(
	`PTE_ADDR
(*
±ï
Ë=
i
);

328 
	`as£π
(
	`PDE_ADDR
(
boŸ_pgdú
[
	`PDX
(
VPT
)]Ë=
	`PADDR
(boot_pgdir));

330 
	`as£π
(
boŸ_pgdú
[0] == 0);

332 
Page
 *
p
;

333 
p
 = 
	`Æloc_∑ge
();

334 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 0x100, 
PTE_W
) == 0);

335 
	`as£π
(
	`∑ge_ªf
(
p
) == 1);

336 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 0x100 + 
PGSIZE
, 
PTE_W
) == 0);

337 
	`as£π
(
	`∑ge_ªf
(
p
) == 2);

339 c⁄° *
°r
 = "ucore: Hello world!!";

340 
	`°r˝y
((*)0x100, 
°r
);

341 
	`as£π
(
	`°rcmp
((*)0x100, (*)(0x100 + 
PGSIZE
)) == 0);

343 *(*)(
	`∑ge2kva
(
p
) + 0x100) = '\0';

344 
	`as£π
(
	`°æí
((const *)0x100) == 0);

346 
	`‰ì_∑ge
(
p
);

347 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PDE_ADDR
(
boŸ_pgdú
[0])));

348 
boŸ_pgdú
[0] = 0;

350 
	`k¥ötf
("check_boot_pgdir() succeeded!\n");

351 
	}
}

355 
	$≥rm2°r
(
≥rm
) {

356 
°r
[4];

357 
°r
[0] = (
≥rm
 & 
PTE_U
) ? 'u' : '-';

358 
°r
[1] = 'r';

359 
°r
[2] = (
≥rm
 & 
PTE_W
) ? 'w' : '-';

360 
°r
[3] = '\0';

361  
°r
;

362 
	}
}

376 
	$gë_pgèbÀ_ôems
(
size_t
 
À·
, size_à
right
, size_à
°¨t
, 
uöçå_t
 *
èbÀ
, size_à*
À·_°‹e
, size_à*
right_°‹e
) {

377 i‡(
°¨t
 >
right
) {

380 
°¨t
 < 
right
 && !(
èbÀ
[°¨t] & 
PTE_P
)) {

381 
°¨t
 ++;

383 i‡(
°¨t
 < 
right
) {

384 i‡(
À·_°‹e
 !
NULL
) {

385 *
À·_°‹e
 = 
°¨t
;

387 
≥rm
 = (
èbÀ
[
°¨t
 ++] & 
PTE_USER
);

388 
°¨t
 < 
right
 && (
èbÀ
[°¨t] & 
PTE_USER
Ë=
≥rm
) {

389 
°¨t
 ++;

391 i‡(
right_°‹e
 !
NULL
) {

392 *
right_°‹e
 = 
°¨t
;

394  
≥rm
;

397 
	}
}

401 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...)) {

402 
	`¥ötf
("-------------------- BEGIN --------------------\n");

403 
size_t
 
À·
, 
right
 = 0, 
≥rm
;

404 (
≥rm
 = 
	`gë_pgèbÀ_ôems
(0, 
NPDEENTRY
, 
right
, 
vpd
, &
À·
, &right)) != 0) {

405 
	`¥ötf
("PDE(%03xË%08x-%08x %08x %s\n", 
right
 - 
À·
,

406 
À·
 * 
PTSIZE
, 
right
 * PTSIZE, (righà-Üe·Ë* PTSIZE, 
	`≥rm2°r
(
≥rm
));

407 
size_t
 
l
, 
r
 = 
À·
 * 
NPTEENTRY
;

408 (
≥rm
 = 
	`gë_pgèbÀ_ôems
(
À·
 * 
NPTEENTRY
, 
right
 * NPTEENTRY, 
r
, 
v±
, &
l
, &r)) != 0) {

409 
	`¥ötf
(" |-- PTE(%05xË%08x-%08x %08x %s\n", 
r
 - 
l
,

410 
l
 * 
PGSIZE
, 
r
 * PGSIZE, (∏-ÜË* PGSIZE, 
	`≥rm2°r
(
≥rm
));

413 
	`¥ötf
("--------------------- END ---------------------\n");

414 
	}
}

	@kern-ucore/arch/i386/mm/swap.c

1 
	~<pmm.h
>

2 
	~<vmm.h
>

3 
	~<sw≠.h
>

4 
	~<sw≠fs.h
>

5 
	~<¶ab.h
>

6 
	~<as£π.h
>

7 
	~<°dio.h
>

8 
	~<vmm.h
>

9 
	~<îr‹.h
>

10 
	~<©omic.h
>

11 
	~<sync.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<kio.h
>

17 
li°_íåy_t
 
	msw≠_li°
;

18 
size_t
 
	mƒ_∑ges
;

19 } 
	tsw≠_li°_t
;

21 *
mem_m≠
;

22 
sw≠_li°_t
 
a˘ive_li°
;

23 
sw≠_li°_t
 
öa˘ive_li°
;

25 
	#ƒ_a˘ive_∑ges
 (
a˘ive_li°
.
ƒ_∑ges
)

	)

26 
	#ƒ_öa˘ive_∑ges
 (
öa˘ive_li°
.
ƒ_∑ges
)

	)

28 
	#SWAP_UNUSED
 0xFFFF

	)

30 
∑ge_œundî
();

31 
ªfûl_öa˘ive_sˇn
();

32 
sw≠_out_mm
(
mm_°ru˘
 *
mm
, 
size_t
 
ªquúe
);

35 
	$check_mm_sw≠
() {

36 
size_t
 
ƒ_‰ì_∑ges_°‹e
 = 
	`ƒ_‰ì_∑ges
();

37 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

39 
ªt
, 
i
, 
j
;

40 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

41 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

44 
mm_°ru˘
 *
check_mm_°ru˘
;

45 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

49 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

50 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

52 
uöçå_t
 
addr0
, 
addr1
;

54 
addr0
 = 0;

56 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 0, 
NULL
);

57 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PTSIZE
)Ë? 0 : -
E_INVAL
);

58 
addr0
 +
PTSIZE
;

59 } 
addr0
 != 0);

61 
addr0
 = 0;

62 
i
 = 0; i < 1024; i ++, 
addr0
 +
PTSIZE
) {

63 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

64 
	`as£π
(
ªt
 =-
E_INVAL
);

67 
	`mm_de°roy
(
mm0
);

70 
mm0
 = 
	`mm_¸óã
();

71 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

73 
addr0
 = 0, 
i
 = 0;

75 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
 - 
PGSIZE
, 0, 
NULL
);

76 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PTSIZE
)Ë? 0 : -
E_INVAL
);

77 i‡(
ªt
 == 0) {

78 
i
 ++;

80 
addr0
 +
PTSIZE
;

81 } 
addr0
 != 0);

83 
addr0
 = 0, 
j
 = 0;

85 
addr0
 +
PTSIZE
 - 
PGSIZE
;

86 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

87 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PGSIZE
)Ë? 0 : -
E_INVAL
);

88 i‡(
ªt
 == 0) {

89 
j
 ++;

91 
addr0
 +
PGSIZE
;

92 } 
addr0
 != 0);

94 
	`as£π
(
j
 + 1 >
i
);

96 
	`mm_de°roy
(
mm0
);

98 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

99 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

101 
	`k¥ötf
("check_mm_swap: step1, mm_map ok.\n");

105 
mm0
 = 
	`mm_¸óã
();

106 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

110 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

111 
	`as£π
(
∑ge
 !
NULL
);

112 
pde_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

113 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

114 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_W
;

118 
mm0
->
pgdú
 =Ögdir;

119 
check_mm_°ru˘
 = 
mm0
;

120 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

122 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

123 
vma_°ru˘
 *
vma
;

125 
addr0
 = 0;

127 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, &
vma
)) == 0) {

130 
addr0
 +
PTSIZE
;

131 } 
addr0
 != 0);

133 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

134 
	`as£π
(
vma
->
vm_°¨t
 =
addr0
 && vma->
vm_íd
 =addr0 + 
PTSIZE
);

138 
±e_t
 *
±ï
;

139 
addr1
 = 
addr0
;áddr1 <áddr0 + 
PTSIZE
;áddr1 +
PGSIZE
) {

140 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr1
, 0);

141 
	`as£π
(
±ï
 =
NULL
);

144 
	`mem£t
((*)
addr0
, 0xEF, 
PGSIZE
 * 2);

145 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

146 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

147 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

148 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

150 
ªt
 = 
	`mm_unm≠
(
mm0
, - 
PTSIZE
, PTSIZE);

151 
	`as£π
(
ªt
 =-
E_INVAL
);

152 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PTSIZE
, 
PGSIZE
);

153 
	`as£π
(
ªt
 == 0);

155 
addr1
 = 
addr0
 + 
PTSIZE
 / 2;

156 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
);

157 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

159 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4);

160 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 3);

162 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
 * 6, 0, 
NULL
);

163 
	`as£π
(
ªt
 =-
E_INVAL
);

164 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 0, 
NULL
);

165 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 4);

166 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4, 0, 
NULL
);

167 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 5);

169 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, 
PTSIZE
 / 2 - PGSIZE);

170 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 1);

172 
addr1
 = 
addr0
 + 
PGSIZE
;

173 
i
 = 0; i < 
PGSIZE
; i ++) {

174 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0xEF);

177 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, PGSIZE / 4);

178 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

179 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

180 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

181 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

182 
	`as£π
(
±ï
 !
NULL
 && *ptep == 0);

184 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 
vm_Êags
, 
NULL
);

185 
	`mem£t
((*)
addr1
, 0x88, 
PGSIZE
);

186 
	`as£π
(*(*)
addr1
 =()0x88 && 
mm0
->
m≠_cou¡
 == 3);

188 
i
 = 1; i < 16; i += 2) {

189 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE);

190 
	`as£π
(
ªt
 == 0);

191 i‡(
i
 < 8) {

192 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE, 0, 
NULL
);

193 
	`as£π
(
ªt
 == 0);

196 
	`as£π
(
mm0
->
m≠_cou¡
 == 13);

198 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 2, 
PTSIZE
 - PGSIZE * 2);

199 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

201 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PGSIZE
 * 2);

202 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

204 
	`k¥ötf
("check_mm_swap: step2, mm_unmap ok.\n");

208 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

209 
	`as£π
(
ªt
 == 0);

211 
i
 = 0, 
addr1
 = 
addr0
; i < 4; i ++,áddr1 +
PGSIZE
) {

212 *(*)
addr1
 = ()0xFF;

215 
	`exô_mm≠
(
mm0
);

216 
i
 = 0; i < 
	`PDX
(
KERNBASE
); i ++) {

217 
	`as£π
(
pgdú
[
i
] == 0);

220 
	`k¥ötf
("check_mm_swap: step3,Éxit_mmap ok.\n");

224 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

225 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

228 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

229 
	`as£π
(
ªt
 != 0);

231 
addr1
 = 
addr0
;

232 
i
 = 0; i < 4; i ++, 
addr1
 +
PGSIZE
) {

233 *(*)
addr1
 = ()(
i
 * i);

236 
ªt
 = 0;

237 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

238 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

239 
	`as£π
(
ªt
 == 4);

241 ; 
i
 < 8; i ++, 
addr1
 +
PGSIZE
) {

242 *(*)
addr1
 = ()(
i
 * i);

247 
mm1
 = 
	`mm_¸óã
();

248 
	`as£π
(
mm1
 !
NULL
);

250 
∑ge
 = 
	`Æloc_∑ge
();

251 
	`as£π
(
∑ge
 !
NULL
);

252 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

253 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

254 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_W
;

255 
mm1
->
pgdú
 =Ögdir;

257 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

258 
	`as£π
(
ªt
 == 0);

262 
check_mm_°ru˘
 = 
mm1
;

263 
	`l¸3
(
	`PADDR
(
mm1
->
pgdú
));

265 
addr1
 = 
addr0
;

266 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

267 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

268 *(*)
addr1
 = ()0x88;

273 
check_mm_°ru˘
 = 
mm0
;

274 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

276 
addr1
 = 
addr0
;

277 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

278 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

283 
check_mm_°ru˘
 = 
NULL
;

284 
	`l¸3
(
boŸ_¸3
);

288 
	`exô_mm≠
(
mm0
);

289 
	`exô_mm≠
(
mm1
);

291 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

292 
	`mm_de°roy
(
mm0
);

293 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

294 
	`mm_de°roy
(
mm1
);

296 
	`k¥ötf
("check_mm_swap: step4, dup_mmap ok.\n");

298 
	`ªfûl_öa˘ive_sˇn
();

299 
	`∑ge_œundî
();

300 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

301 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

304 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

305 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

307 
	`k¥ötf
("check_mm_swap() succeeded.\n");

308 
	}
}

311 
	$check_mm_shm_sw≠
() {

312 
size_t
 
ƒ_‰ì_∑ges_°‹e
 = 
	`ƒ_‰ì_∑ges
();

313 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

315 
ªt
, 
i
;

316 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

317 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

320 
mm_°ru˘
 *
check_mm_°ru˘
;

321 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

323 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

324 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

326 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

327 
	`as£π
(
∑ge
 !
NULL
);

328 
pde_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

329 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

330 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_W
;

332 
mm0
->
pgdú
 =Ögdir;

333 
check_mm_°ru˘
 = 
mm0
;

334 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

336 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

338 
uöçå_t
 
addr0
, 
addr1
;

340 
addr0
 = 0;

342 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4, 
vm_Êags
, 
NULL
)) == 0) {

345 
addr0
 +
PTSIZE
;

346 } 
addr0
 != 0);

348 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

350 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4);

351 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

353 
shmem_°ru˘
 *
shmem
 = 
	`shmem_¸óã
(
PTSIZE
 * 2);

354 
	`as£π
(
shmem
 !
NULL
 && 
	`shmem_ªf
(shmem) == 0);

358 
vma_°ru˘
 *
vma
;

360 
addr1
 = 
addr0
 + 
PTSIZE
 * 2;

361 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr0
, 
vm_Êags
, 
shmem
, &
vma
);

362 
	`as£π
(
ªt
 == 0);

363 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 1);

364 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr1
, 
vm_Êags
, 
shmem
, &
vma
);

365 
	`as£π
(
ªt
 == 0);

366 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 2);

370 
i
 = 0; i < 4; i ++) {

371 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(i * i);

373 
i
 = 0; i < 4; i ++) {

374 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(i * i));

377 
i
 = 0; i < 4; i ++) {

378 *(*)(
addr1
 + 
i
 * 
PGSIZE
) = ()(- i * i);

380 
i
 = 0; i < 4; i ++) {

381 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(- i * i));

386 
ªt
 = 
	`sw≠_out_mm
(
mm0
, 8) + swap_out_mm(mm0, 8);

387 
	`as£π
(
ªt
 =8 && 
ƒ_a˘ive_∑ges
 =4 && 
ƒ_öa˘ive_∑ges
 == 0);

389 
	`ªfûl_öa˘ive_sˇn
();

390 
	`as£π
(
ƒ_a˘ive_∑ges
 =0 && 
ƒ_öa˘ive_∑ges
 == 4);

394 
	`mem£t
((*)
addr0
, 0x77, 
PGSIZE
);

395 
i
 = 0; i < 
PGSIZE
; i ++) {

396 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0x77);

401 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
 * 4);

402 
	`as£π
(
ªt
 == 0);

404 
addr0
 +4 * 
PGSIZE
, 
addr1
 += 4 * PGSIZE;

405 *(*)(
addr0
) = ()(0xDC);

406 
	`as£π
(*(*)(
addr1
) == ()(0xDC));

407 *(*)(
addr1
 + 
PTSIZE
) = ()(0xDC);

408 
	`as£π
(*(*)(
addr0
 + 
PTSIZE
) == ()(0xDC));

410 
	`k¥ötf
("check_mm_shm_swap: step1, share memory ok.\n");

414 
mm1
 = 
	`mm_¸óã
();

415 
	`as£π
(
mm1
 !
NULL
);

418 
∑ge
 = 
	`Æloc_∑ge
();

419 
	`as£π
(
∑ge
 !
NULL
);

420 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

421 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

422 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_W
;

423 
mm1
->
pgdú
 =Ögdir;

426 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

427 
	`as£π
(
ªt
 =0 && 
	`shmem_ªf
(
shmem
) == 4);

431 
check_mm_°ru˘
 = 
mm1
;

432 
	`l¸3
(
	`PADDR
(
mm1
->
pgdú
));

434 
i
 = 0; i < 4; i ++) {

435 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(0x57 + i);

437 
i
 = 0; i < 4; i ++) {

438 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

441 
check_mm_°ru˘
 = 
mm0
;

442 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

444 
i
 = 0; i < 4; i ++) {

445 
	`as£π
(*(*)(
addr0
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

446 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

449 
	`sw≠_out_mm
(
mm1
, 4);

450 
	`exô_mm≠
(
mm1
);

452 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

453 
	`mm_de°roy
(
mm1
);

455 
	`as£π
(
	`shmem_ªf
(
shmem
) == 2);

457 
	`k¥ötf
("check_mm_shm_swap: step2, dup_mmap ok.\n");

461 
check_mm_°ru˘
 = 
NULL
;

462 
	`l¸3
(
boŸ_¸3
);

464 
	`exô_mm≠
(
mm0
);

465 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

466 
	`mm_de°roy
(
mm0
);

468 
	`ªfûl_öa˘ive_sˇn
();

469 
	`∑ge_œundî
();

470 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

471 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

474 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

475 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

477 
	`k¥ötf
("check_mm_shm_swap() succeeded.\n");

478 
	}
}

	@kern-ucore/arch/i386/mm/vmm.c

1 
	~<vmm.h
>

2 
	~<°rög.h
>

4 
boﬁ


5 
	$c›y_‰om_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
, 
boﬁ
 
wrôabÀ
) {

6 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
Àn
, 
wrôabÀ
)) {

9 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

11 
	}
}

13 
boﬁ


14 
	$c›y_to_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

15 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
d°
, 
Àn
, 1)) {

18 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

20 
	}
}

22 
boﬁ


23 
	$c›y_°rög
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
maxn
) {

24 
size_t
 
Æí
, 
∑π
 = 
	`ROUNDDOWN
((
uöçå_t
)
§c
 + 
PGSIZE
, PGSIZE) - (uintptr_t)src;

26 i‡(
∑π
 > 
maxn
) {

27 
∑π
 = 
maxn
;

29 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
∑π
, 0)) {

32 i‡((
Æí
 = 
	`°∫Àn
(
§c
, 
∑π
)) <Öart) {

33 
	`mem˝y
(
d°
, 
§c
, 
Æí
 + 1);

36 i‡(
∑π
 =
maxn
) {

39 
	`mem˝y
(
d°
, 
§c
, 
∑π
);

40 
d°
 +
∑π
, 
§c
 +∑π, 
maxn
 -=Öart;

41 
∑π
 = 
PGSIZE
;

43 
	}
}

	@kern-ucore/arch/i386/process/arch_proc.h

1 #i‚de‡
__ARCH_X86_INCLUDE_ARCH_PROC_H__


2 
	#__ARCH_X86_INCLUDE_ARCH_PROC_H__


	)

4 
	~<ty≥s.h
>

13 
	sc⁄ãxt
 {

14 
uöt32_t
 
	meù
;

15 
uöt32_t
 
	me•
;

16 
uöt32_t
 
	mebx
;

17 
uöt32_t
 
	mecx
;

18 
uöt32_t
 
	medx
;

19 
uöt32_t
 
	mesi
;

20 
uöt32_t
 
	medi
;

21 
uöt32_t
 
	mebp
;

24 
	s¨ch_¥oc_°ru˘
 {

	@kern-ucore/arch/i386/process/proc.c

1 
	~<¥oc.h
>

2 
	~<¶ab.h
>

3 
	~<°rög.h
>

4 
	~<sync.h
>

5 
	~<pmm.h
>

6 
	~<îr‹.h
>

7 
	~<sched.h
>

8 
	~<ñf.h
>

9 
	~<vmm.h
>

10 
	~<å≠.h
>

11 
	~<uni°d.h
>

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<as£π.h
>

15 
	~<sw≠.h
>

16 
	~<fs.h
>

18 
f‹kªts
(
å≠‰ame
 *
tf
);

21 
¥oc_°ru˘
 *

22 
	$Æloc_¥oc
() {

23 
¥oc_°ru˘
 *
¥oc
 = 
	`kmÆloc
((proc_struct));

24 i‡(
¥oc
 !
NULL
) {

25 
¥oc
->
°©e
 = 
PROC_UNINIT
;

26 
¥oc
->
pid
 = -1;

27 
¥oc
->
runs
 = 0;

28 
¥oc
->
k°ack
 = 0;

29 
¥oc
->
√ed_ªsched
 = 0;

30 
¥oc
->
∑ª¡
 = 
NULL
;

31 
¥oc
->
mm
 = 
NULL
;

32 
	`mem£t
(&(
¥oc
->
c⁄ãxt
), 0, (context));

33 
¥oc
->
tf
 = 
NULL
;

34 
¥oc
->
¸3
 = 
boŸ_¸3
;

35 
¥oc
->
Êags
 = 0;

36 
	`mem£t
(
¥oc
->
«me
, 0, 
PROC_NAME_LEN
);

37 
¥oc
->
waô_°©e
 = 0;

38 
¥oc
->
˝å
 =Öroc->
›å
 =Öroc->
y±r
 = 
NULL
;

39 
	`li°_öô
(&(
¥oc
->
thªad_group
));

40 
¥oc
->
rq
 = 
NULL
;

41 
	`li°_öô
(&(
¥oc
->
run_lök
));

42 
¥oc
->
time_¶i˚
 = 0;

43 
¥oc
->
£m_queue
 = 
NULL
;

44 
	`evít_box_öô
(&(
¥oc
->
evít_box
));

45 
¥oc
->
fs_°ru˘
 = 
NULL
;

47  
¥oc
;

48 
	}
}

54 
	$f‹kªt
() {

55 
	`f‹kªts
(
	`∂s_ªad
(
cuºít
)->
tf
);

56 
	}
}

62 
kî√l_thªad
((*
‚
)(*), *
¨g
, 
uöt32_t
 
˛⁄e_Êags
) {

63 
å≠‰ame
 
tf
;

64 
	`mem£t
(&
tf
, 0, (
å≠‰ame
));

65 
tf
.
tf_cs
 = 
KERNEL_CS
;

66 
tf
.
tf_ds
 =Åf.
tf_es
 =Åf.
tf_ss
 = 
KERNEL_DS
;

67 
tf
.
tf_ªgs
.
ªg_ebx
 = (
uöt32_t
)
‚
;

68 
tf
.
tf_ªgs
.
ªg_edx
 = (
uöt32_t
)
¨g
;

69 
tf
.
tf_eù
 = (
uöt32_t
)
kî√l_thªad_íåy
;

70  
	`do_f‹k
(
˛⁄e_Êags
 | 
CLONE_VM
, 0, &
tf
);

71 
	}
}

74 
	$de_thªad_¨ch_hook
 (
¥oc_°ru˘
 *
¥oc
Ë{
	}
}

79 
	$c›y_thªad
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
,

80 
uöçå_t
 
e•
, 
å≠‰ame
 *
tf
) {

81 
¥oc
->
tf
 = (
å≠‰ame
 *)’roc->
k°ack
 + 
KSTACKSIZE
) - 1;

82 *(
¥oc
->
tf
) = *tf;

83 
¥oc
->
tf
->
tf_ªgs
.
ªg_óx
 = 0;

84 
¥oc
->
tf
->
tf_e•
 = 
e•
;

85 
¥oc
->
tf
->
tf_eÊags
 |
FL_IF
;

87 
¥oc
->
c⁄ãxt
.
eù
 = (
uöçå_t
)
f‹kªt
;

88 
¥oc
->
c⁄ãxt
.
e•
 = (
uöçå_t
)’roc->
tf
);

91 
	}
}

94 
	$öô_√w_c⁄ãxt
 (
¥oc_°ru˘
 *
¥oc
, 
ñfhdr
 *
ñf
, 
¨gc
, ** 
k¨gv
) {

95 
uöçå_t
 
°ackt›
 = 
USTACKTOP
 - 
¨gc
 * 
PGSIZE
;

96 **
u¨gv
 = (**)(
°ackt›
 - 
¨gc
 * (*));

97 
i
;

98 
i
 = 0; i < 
¨gc
; i ++) {

99 
u¨gv
[
i
] = 
	`°r˝y
((*)(
°ackt›
 + i * 
PGSIZE
), 
k¨gv
[i]);

101 
°ackt›
 = (
uöçå_t
)
u¨gv
 - ();

102 *(*)
°ackt›
 = 
¨gc
;

104 
å≠‰ame
 *
tf
 = 
¥oc
->tf;

105 
	`mem£t
(
tf
, 0, (
å≠‰ame
));

106 
tf
->
tf_cs
 = 
USER_CS
;

107 
tf
->
tf_ds
 = 
USER_DS
;

108 
tf
->
tf_es
 = 
USER_DS
;

109 
tf
->
tf_ss
 = 
USER_DS
;

110 
tf
->
tf_e•
 = 
°ackt›
;

111 
tf
->
tf_eù
 = 
ñf
->
e_íåy
;

112 
tf
->
tf_eÊags
 = 
FL_IF
;

115 
	}
}

118 
	$do_execve_¨ch_hook
 (
¨gc
, ** 
k¨gv
) {

120 
	}
}

124 
	$kî√l_execve
(c⁄° *
«me
, c⁄° **
¨gv
) {

125 
¨gc
 = 0, 
ªt
;

126 
¨gv
[
¨gc
] !
NULL
) {

127 
¨gc
 ++;

129 
asm
 volatile (

131 : "˜" (
ªt
)

132 : "i" (
T_SYSCALL
), "0" (
SYS_exec
), "d" (
«me
), "c" (
¨gc
), "b" (
¨gv
)

134  
ªt
;

135 
	}
}

139 
	$˝u_idÀ
() {

141 i‡(
	`∂s_ªad
(
cuºít
)->
√ed_ªsched
) {

142 
	`scheduÀ
();

145 
	}
}

	@kern-ucore/arch/i386/sync/sync.h

1 #i‚de‡
__KERN_SYNC_SYNC_H__


2 
	#__KERN_SYNC_SYNC_H__


	)

4 
	~<¨ch.h
>

5 
	~<öå.h
>

6 
	~<mmu.h
>

7 
	~<as£π.h
>

8 
	~<©omic.h
>

9 
	~<sched.h
>

11 
ölöe
 
boﬁ


12 
	$__öå_ßve
() {

13 i‡(
	`ªad_eÊags
(Ë& 
FL_IF
) {

14 
	`öå_dißbÀ
();

18 
	}
}

20 
ölöe
 

21 
	$__öå_ª°‹e
(
boﬁ
 
Êag
) {

22 i‡(
Êag
) {

23 
	`öå_íabÀ
();

25 
	}
}

27 
	#loˇl_öå_ßve
(
x
Ëdÿ{ x = 
	`__öå_ßve
(); } 0)

	)

28 
	#loˇl_öå_ª°‹e
(
x
Ë
	`__öå_ª°‹e
(x);

	)

30 
sync_öô
();

	@kern-ucore/arch/i386/syscall/syscall.c

1 
	~<¥oc.h
>

2 
	~<sysˇŒ.h
>

3 
	~<å≠.h
>

4 
	~<°dio.h
>

5 
	~<pmm.h
>

6 
	~<˛ock.h
>

7 
	~<as£π.h
>

8 
	~<£m.h
>

9 
	~<evít.h
>

10 
	~<mbox.h
>

11 
	~<°©.h
>

12 
	~<dúít.h
>

13 
	~<sysfûe.h
>

14 
	~<îr‹.h
>

15 
	~<kio.h
>

17 
uöt32_t


18 
	$sys_exô
(
uöt32_t
 
¨g
[]) {

19 
îr‹_code
 = ()
¨g
[0];

20  
	`do_exô
(
îr‹_code
);

21 
	}
}

23 
uöt32_t


24 
	$sys_f‹k
(
uöt32_t
 
¨g
[]) {

25 
å≠‰ame
 *
tf
 = 
	`∂s_ªad
(
cuºít
)->tf;

26 
uöçå_t
 
°ack
 = 
tf
->
tf_e•
;

27  
	`do_f‹k
(0, 
°ack
, 
tf
);

28 
	}
}

30 
uöt32_t


31 
	$sys_waô
(
uöt32_t
 
¨g
[]) {

32 
pid
 = ()
¨g
[0];

33 *
°‹e
 = (*)
¨g
[1];

34  
	`do_waô
(
pid
, 
°‹e
);

35 
	}
}

37 
uöt32_t


38 
	$sys_exec
(
uöt32_t
 
¨g
[]) {

39 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

40 
¨gc
 = ()
¨g
[1];

41 c⁄° **
¨gv
 = (c⁄° **)
¨g
[2];

42  
	`do_execve
(
«me
, 
¨gc
, 
¨gv
);

43 
	}
}

45 
uöt32_t


46 
	$sys_˛⁄e
(
uöt32_t
 
¨g
[]) {

47 
å≠‰ame
 *
tf
 = 
	`∂s_ªad
(
cuºít
)->tf;

48 
uöt32_t
 
˛⁄e_Êags
 = (uöt32_t)
¨g
[0];

49 
uöçå_t
 
°ack
 = (uöçå_t)
¨g
[1];

50 i‡(
°ack
 == 0) {

51 
°ack
 = 
tf
->
tf_e•
;

53  
	`do_f‹k
(
˛⁄e_Êags
, 
°ack
, 
tf
);

54 
	}
}

56 
uöt32_t


57 
	$sys_exô_thªad
(
uöt32_t
 
¨g
[]) {

58 
îr‹_code
 = ()
¨g
[0];

59  
	`do_exô_thªad
(
îr‹_code
);

60 
	}
}

62 
uöt32_t


63 
	$sys_yõld
(
uöt32_t
 
¨g
[]) {

64  
	`do_yõld
();

65 
	}
}

67 
uöt32_t


68 
	$sys_¶ìp
(
uöt32_t
 
¨g
[]) {

69 
time
 = ()
¨g
[0];

70  
	`do_¶ìp
(
time
);

71 
	}
}

73 
uöt32_t


74 
	$sys_kûl
(
uöt32_t
 
¨g
[]) {

75 
pid
 = ()
¨g
[0];

76  
	`do_kûl
(
pid
, -
E_KILLED
);

77 
	}
}

79 
uöt32_t


80 
	$sys_gëtime
(
uöt32_t
 
¨g
[]) {

81  ()
ticks
;

82 
	}
}

84 
uöt32_t


85 
	$sys_gëpid
(
uöt32_t
 
¨g
[]) {

86  
	`∂s_ªad
(
cuºít
)->
pid
;

87 
	}
}

89 
uöt32_t


90 
	$sys_brk
(
uöt32_t
 
¨g
[]) {

91 
uöçå_t
 *
brk_°‹e
 = (uöçå_à*)
¨g
[0];

92  
	`do_brk
(
brk_°‹e
);

93 
	}
}

95 
uöt32_t


96 
	$sys_mm≠
(
uöt32_t
 
¨g
[]) {

97 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

98 
size_t
 
Àn
 = (size_t)
¨g
[1];

99 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

100  
	`do_mm≠
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

101 
	}
}

103 
uöt32_t


104 
	$sys_munm≠
(
uöt32_t
 
¨g
[]) {

105 
uöçå_t
 
addr
 = (uöçå_t)
¨g
[0];

106 
size_t
 
Àn
 = (size_t)
¨g
[1];

107  
	`do_munm≠
(
addr
, 
Àn
);

108 
	}
}

110 
uöt32_t


111 
	$sys_shmem
(
uöt32_t
 
¨g
[]) {

112 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

113 
size_t
 
Àn
 = (size_t)
¨g
[1];

114 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

115  
	`do_shmem
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

116 
	}
}

118 
uöt32_t


119 
	$sys_putc
(
uöt32_t
 
¨g
[]) {

120 
c
 = ()
¨g
[0];

121 
	`c⁄s_putc
(
c
);

123 
	}
}

125 
uöt32_t


126 
	$sys_pgdú
(
uöt32_t
 
¨g
[]) {

127 
	`¥öt_pgdú
(
k¥ötf
);

129 
	}
}

131 
uöt32_t


132 
	$sys_£m_öô
(
uöt32_t
 
¨g
[]) {

133 
vÆue
 = ()
¨g
[0];

134  
	`ùc_£m_öô
(
vÆue
);

135 
	}
}

137 
uöt32_t


138 
	$sys_£m_po°
(
uöt32_t
 
¨g
[]) {

139 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

140  
	`ùc_£m_po°
(
£m_id
);

141 
	}
}

143 
uöt32_t


144 
	$sys_£m_waô
(
uöt32_t
 
¨g
[]) {

145 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

146 
timeout
 = ()
¨g
[1];

147  
	`ùc_£m_waô
(
£m_id
, 
timeout
);

148 
	}
}

150 
uöt32_t


151 
	$sys_£m_‰ì
(
uöt32_t
 
¨g
[]) {

152 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

153  
	`ùc_£m_‰ì
(
£m_id
);

154 
	}
}

156 
uöt32_t


157 
	$sys_£m_gë_vÆue
(
uöt32_t
 
¨g
[]) {

158 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

159 *
vÆue_°‹e
 = (*)
¨g
[1];

160  
	`ùc_£m_gë_vÆue
(
£m_id
, 
vÆue_°‹e
);

161 
	}
}

163 
uöt32_t


164 
	$sys_evít_£nd
(
uöt32_t
 
¨g
[]) {

165 
pid
 = ()
¨g
[0];

166 
evít
 = ()
¨g
[1];

167 
timeout
 = ()
¨g
[2];

168  
	`ùc_evít_£nd
(
pid
, 
evít
, 
timeout
);

169 
	}
}

171 
uöt32_t


172 
	$sys_evít_ªcv
(
uöt32_t
 
¨g
[]) {

173 *
pid_°‹e
 = (*)
¨g
[0];

174 *
evít_°‹e
 = (*)
¨g
[1];

175 
timeout
 = ()
¨g
[2];

176  
	`ùc_evít_ªcv
(
pid_°‹e
, 
evít_°‹e
, 
timeout
);

177 
	}
}

179 
uöt32_t


180 
	$sys_mbox_öô
(
uöt32_t
 
¨g
[]) {

181 
max_¶Ÿs
 = ()
¨g
[0];

182  
	`ùc_mbox_öô
(
max_¶Ÿs
);

183 
	}
}

185 
uöt32_t


186 
	$sys_mbox_£nd
(
uöt32_t
 
¨g
[]) {

187 
id
 = ()
¨g
[0];

188 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

189 
timeout
 = ()
¨g
[2];

190  
	`ùc_mbox_£nd
(
id
, 
buf
, 
timeout
);

191 
	}
}

193 
uöt32_t


194 
	$sys_mbox_ªcv
(
uöt32_t
 
¨g
[]) {

195 
id
 = ()
¨g
[0];

196 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

197 
timeout
 = ()
¨g
[2];

198  
	`ùc_mbox_ªcv
(
id
, 
buf
, 
timeout
);

199 
	}
}

201 
uöt32_t


202 
	$sys_mbox_‰ì
(
uöt32_t
 
¨g
[]) {

203 
id
 = ()
¨g
[0];

204  
	`ùc_mbox_‰ì
(
id
);

205 
	}
}

207 
uöt32_t


208 
	$sys_mbox_öfo
(
uöt32_t
 
¨g
[]) {

209 
id
 = ()
¨g
[0];

210 
mboxöfo
 *
öfo
 = (mboxöfÿ*)
¨g
[1];

211  
	`ùc_mbox_öfo
(
id
, 
öfo
);

212 
	}
}

214 
uöt32_t


215 
	$sys_›í
(
uöt32_t
 
¨g
[]) {

216 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

217 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

218  
	`sysfûe_›í
(
∑th
, 
›í_Êags
);

219 
	}
}

221 
uöt32_t


222 
	$sys_˛o£
(
uöt32_t
 
¨g
[]) {

223 
fd
 = ()
¨g
[0];

224  
	`sysfûe_˛o£
(
fd
);

225 
	}
}

227 
uöt32_t


228 
	$sys_ªad
(
uöt32_t
 
¨g
[]) {

229 
fd
 = ()
¨g
[0];

230 *
ba£
 = (*)
¨g
[1];

231 
size_t
 
Àn
 = (size_t)
¨g
[2];

232  
	`sysfûe_ªad
(
fd
, 
ba£
, 
Àn
);

233 
	}
}

235 
uöt32_t


236 
	$sys_wrôe
(
uöt32_t
 
¨g
[]) {

237 
fd
 = ()
¨g
[0];

238 *
ba£
 = (*)
¨g
[1];

239 
size_t
 
Àn
 = (size_t)
¨g
[2];

240  
	`sysfûe_wrôe
(
fd
, 
ba£
, 
Àn
);

241 
	}
}

243 
uöt32_t


244 
	$sys_£ek
(
uöt32_t
 
¨g
[]) {

245 
fd
 = ()
¨g
[0];

246 
off_t
 
pos
 = (off_t)
¨g
[1];

247 
whí˚
 = ()
¨g
[2];

248  
	`sysfûe_£ek
(
fd
, 
pos
, 
whí˚
);

249 
	}
}

251 
uöt32_t


252 
	$sys_f°©
(
uöt32_t
 
¨g
[]) {

253 
fd
 = ()
¨g
[0];

254 
°©
 *°© = (°© *)
¨g
[1];

255  
	`sysfûe_f°©
(
fd
, 
°©
);

256 
	}
}

258 
uöt32_t


259 
	$sys_fsync
(
uöt32_t
 
¨g
[]) {

260 
fd
 = ()
¨g
[0];

261  
	`sysfûe_fsync
(
fd
);

262 
	}
}

264 
uöt32_t


265 
	$sys_chdú
(
uöt32_t
 
¨g
[]) {

266 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

267  
	`sysfûe_chdú
(
∑th
);

268 
	}
}

270 
uöt32_t


271 
	$sys_gëcwd
(
uöt32_t
 
¨g
[]) {

272 *
buf
 = (*)
¨g
[0];

273 
size_t
 
Àn
 = (size_t)
¨g
[1];

274  
	`sysfûe_gëcwd
(
buf
, 
Àn
);

275 
	}
}

277 
uöt32_t


278 
	$sys_mkdú
(
uöt32_t
 
¨g
[]) {

279 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

280  
	`sysfûe_mkdú
(
∑th
);

281 
	}
}

283 
uöt32_t


284 
	$sys_lök
(
uöt32_t
 
¨g
[]) {

285 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

286 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

287  
	`sysfûe_lök
(
∑th1
, 
∑th2
);

288 
	}
}

290 
uöt32_t


291 
	$sys_ª«me
(
uöt32_t
 
¨g
[]) {

292 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

293 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

294  
	`sysfûe_ª«me
(
∑th1
, 
∑th2
);

295 
	}
}

297 
uöt32_t


298 
	$sys_u∆ök
(
uöt32_t
 
¨g
[]) {

299 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

300  
	`sysfûe_u∆ök
(
«me
);

301 
	}
}

303 
uöt32_t


304 
	$sys_gëdúíåy
(
uöt32_t
 
¨g
[]) {

305 
fd
 = ()
¨g
[0];

306 
dúít
 *
dúíç
 = (dúíà*)
¨g
[1];

307  
	`sysfûe_gëdúíåy
(
fd
, 
dúíç
);

308 
	}
}

310 
uöt32_t


311 
	$sys_dup
(
uöt32_t
 
¨g
[]) {

312 
fd1
 = ()
¨g
[0];

313 
fd2
 = ()
¨g
[1];

314  
	`sysfûe_dup
(
fd1
, 
fd2
);

315 
	}
}

317 
uöt32_t


318 
	$sys_pùe
(
uöt32_t
 
¨g
[]) {

319 *
fd_°‹e
 = (*)
¨g
[0];

320  
	`sysfûe_pùe
(
fd_°‹e
);

321 
	}
}

323 
uöt32_t


324 
	$sys_mkfifo
(
uöt32_t
 
¨g
[]) {

325 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

326 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

327  
	`sysfûe_mkfifo
(
«me
, 
›í_Êags
);

328 
	}
}

330 
	$uöt32_t
 (*
sysˇŒs
[])(
uöt32_t
 
¨g
[]) = {

331 [
SYS_exô
] 
sys_exô
,

332 [
SYS_f‹k
] 
sys_f‹k
,

333 [
SYS_waô
] 
sys_waô
,

334 [
SYS_exec
] 
sys_exec
,

335 [
SYS_˛⁄e
] 
sys_˛⁄e
,

336 [
SYS_exô_thªad
] 
sys_exô_thªad
,

337 [
SYS_yõld
] 
sys_yõld
,

338 [
SYS_kûl
] 
sys_kûl
,

339 [
SYS_¶ìp
] 
sys_¶ìp
,

340 [
SYS_gëtime
] 
sys_gëtime
,

341 [
SYS_gëpid
] 
sys_gëpid
,

342 [
SYS_brk
] 
sys_brk
,

343 [
SYS_mm≠
] 
sys_mm≠
,

344 [
SYS_munm≠
] 
sys_munm≠
,

345 [
SYS_shmem
] 
sys_shmem
,

346 [
SYS_putc
] 
sys_putc
,

347 [
SYS_pgdú
] 
sys_pgdú
,

348 [
SYS_£m_öô
] 
sys_£m_öô
,

349 [
SYS_£m_po°
] 
sys_£m_po°
,

350 [
SYS_£m_waô
] 
sys_£m_waô
,

351 [
SYS_£m_‰ì
] 
sys_£m_‰ì
,

352 [
SYS_£m_gë_vÆue
] 
sys_£m_gë_vÆue
,

353 [
SYS_evít_£nd
] 
sys_evít_£nd
,

354 [
SYS_evít_ªcv
] 
sys_evít_ªcv
,

355 [
SYS_mbox_öô
] 
sys_mbox_öô
,

356 [
SYS_mbox_£nd
] 
sys_mbox_£nd
,

357 [
SYS_mbox_ªcv
] 
sys_mbox_ªcv
,

358 [
SYS_mbox_‰ì
] 
sys_mbox_‰ì
,

359 [
SYS_mbox_öfo
] 
sys_mbox_öfo
,

360 [
SYS_›í
] 
sys_›í
,

361 [
SYS_˛o£
] 
sys_˛o£
,

362 [
SYS_ªad
] 
sys_ªad
,

363 [
SYS_wrôe
] 
sys_wrôe
,

364 [
SYS_£ek
] 
sys_£ek
,

365 [
SYS_f°©
] 
sys_f°©
,

366 [
SYS_fsync
] 
sys_fsync
,

367 [
SYS_chdú
] 
sys_chdú
,

368 [
SYS_gëcwd
] 
sys_gëcwd
,

369 [
SYS_mkdú
] 
sys_mkdú
,

370 [
SYS_lök
] 
sys_lök
,

371 [
SYS_ª«me
] 
sys_ª«me
,

372 [
SYS_u∆ök
] 
sys_u∆ök
,

373 [
SYS_gëdúíåy
] 
sys_gëdúíåy
,

374 [
SYS_dup
] 
sys_dup
,

375 [
SYS_pùe
] 
sys_pùe
,

376 [
SYS_mkfifo
] 
sys_mkfifo
,

377 
	}
};

379 
	#NUM_SYSCALLS
 (((
sysˇŒs
)Ë/ ((sysˇŒs[0])))

	)

382 
	$sysˇŒ
() {

383 
å≠‰ame
 *
tf
 = 
	`∂s_ªad
(
cuºít
)->tf;

384 
uöt32_t
 
¨g
[5];

385 
num
 = 
tf
->
tf_ªgs
.
ªg_óx
;

386 i‡(
num
 >0 &&Çum < 
NUM_SYSCALLS
) {

387 i‡(
sysˇŒs
[
num
] !
NULL
) {

388 
¨g
[0] = 
tf
->
tf_ªgs
.
ªg_edx
;

389 
¨g
[1] = 
tf
->
tf_ªgs
.
ªg_ecx
;

390 
¨g
[2] = 
tf
->
tf_ªgs
.
ªg_ebx
;

391 
¨g
[3] = 
tf
->
tf_ªgs
.
ªg_edi
;

392 
¨g
[4] = 
tf
->
tf_ªgs
.
ªg_esi
;

393 
tf
->
tf_ªgs
.
ªg_óx
 = 
sysˇŒs
[
num
](
¨g
);

397 
	`¥öt_å≠‰ame
(
tf
);

398 
	`∑nic
("undefined syscall %d,Öid = %d,Çame = %s.\n",

399 
num
, 
	`∂s_ªad
(
cuºít
)->
pid
,Öls_ªad(cuºít)->
«me
);

400 
	}
}

	@kern-ucore/arch/i386/syscall/syscall.h

1 #i‚de‡
__KERN_SYSCALL_SYSCALL_H__


2 
	#__KERN_SYSCALL_SYSCALL_H__


	)

4 
sysˇŒ
();

	@kern-ucore/arch/or32/debug/panic.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<öå.h
>

4 
	~<kio.h
>

6 
boﬁ
 
	gis_∑nic
 = 0;

13 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

14 i‡(
is_∑nic
) {

15 
∑nic_dód
;

17 
is_∑nic
 = 1;

20 
va_li°
 
≠
;

21 
	`va_°¨t
(
≠
, 
fmt
);

22 
	`k¥ötf
("kî√»∑ni¯© %s:%d:\¿ ", 
fûe
, 
löe
);

23 
	`vk¥ötf
(
fmt
, 
≠
);

24 
	`k¥ötf
("\n");

25 
	`va_íd
(
≠
);

27 
∑nic_dód
:

28 
	`öå_dißbÀ
();

32 
	}
}

36 
	$__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

37 
va_li°
 
≠
;

38 
	`va_°¨t
(
≠
, 
fmt
);

39 
	`k¥ötf
("kî√»w¨nögáà%s:%d:\¿ ", 
fûe
, 
löe
);

40 
	`vk¥ötf
(
fmt
, 
≠
);

41 
	`k¥ötf
("\n");

42 
	`va_íd
(
≠
);

43 
	}
}

45 
boﬁ


46 
	$is_kî√l_∑nic
() {

47  
is_∑nic
;

48 
	}
}

	@kern-ucore/arch/or32/driver/board.h

1 #i‚de‡
__ARCH_OR32_DRIVERS_BOARD_H__


2 
	#__ARCH_OR32_DRIVERS_BOARD_H__


	)

7 #ifde‡
BOARD


8 
	#UART_BAUD_RATE
 9600

	)

10 
	#UART_BAUD_RATE
 115200

	)

12 
	#UART_PHYSICAL_BASE
 0x50000000

	)

13 
	#UART_IRQ
 2

	)

16 
	#IN_CLK
 50000000

17 #ifde‡
BOARD


	)

18 
	#TIMER_FREQ
 0x400000

	)

20 
	#TIMER_FREQ
 0x40000

	)

24 #ifde‡
BOARD


25 
	#RAM_SIZE
 0x4000000

26 #ñ£

	)

27 
	#RAM_SIZE
 0x400000

28 
	#DISK_FS_BASE
 
RAM_SIZE


	)

29 
	#DISK_FS_SIZE
 0x800000

	)

30 
	#SWAP_FS_BASE
 (
DISK_FS_BASE
 + 
DISK_FS_SIZE
)

	)

31 
	#SWAP_FS_SIZE
 0x400000

	)

34 
	#GPIO_PHYSICAL_BASE
 0x20000000

	)

35 
	#SPI_PHYSICAL_BASE
 0x70000000

	)

	@kern-ucore/arch/or32/driver/clock.c

1 
	~<˛ock.h
>

2 
	~<bﬂrd.h
>

3 
	~<°dio.h
>

4 
	~<kio.h
>

5 
	~<¨ch.h
>

6 
	~<‹32/•r_defs.h
>

8 vﬁ©ûê
size_t
 
	gticks
 = 0;

11 
	$˛ock_öô
 ()

13 
	`k¥ötf
 ("++ setupÅimer interrupts\n");

15 
	`mt•r
 (
SPR_TTMR
, 
TIMER_FREQ
 | 
SPR_TTMR_IE
 | 
SPR_TTMR_RT
);

16 
	`mt•r
 (
SPR_TTCR
, 0);

17 
	}
}

	@kern-ucore/arch/or32/driver/clock.h

1 #i‚de‡
__KERN_DRIVER_CLOCK_H__


2 
	#__KERN_DRIVER_CLOCK_H__


	)

4 
	~<ty≥s.h
>

6 vﬁ©ûê
size_t
 
ticks
;

8 
˛ock_öô
();

	@kern-ucore/arch/or32/driver/console.c

1 
	~<c⁄sﬁe.h
>

2 
	~<u¨t.h
>

6 
	$£rül_öå
() {

8 
	}
}

12 
	$kbd_öå
() {

14 
	}
}

18 
	$c⁄s_öô
() {

19 
	`u¨t_öô
 ();

20 
	}
}

24 
	$c⁄s_putc
(
c
) {

25 
	`u¨t_putc
 (
c
);

26 
	`asm
 ("l.nop;Ü.nop;");

27 
	}
}

34 
	$c⁄s_gëc
() {

35  
	`u¨t_gëc
 ();

36 
	}
}

	@kern-ucore/arch/or32/driver/console.h

1 #i‚de‡
__KERN_DRIVER_CONSOLE_H__


2 
	#__KERN_DRIVER_CONSOLE_H__


	)

4 
c⁄s_öô
();

5 
c⁄s_putc
(
c
);

6 
c⁄s_gëc
();

7 
£rül_öå
();

8 
kbd_öå
();

	@kern-ucore/arch/or32/driver/gpio.h

1 #i‚de‡
__ARCH_OR32_DRIVERS_GPIO_H__


2 
	#__ARCH_OR32_DRIVERS_GPIO_H__


	)

4 
	~<bﬂrd.h
>

6 
	#GPIO_BASE
 (0xf0000000 + (
GPIO_PHYSICAL_BASE
 >> 4))

	)

8 
	#GPIO_INPUT
 0x0

	)

9 
	#GPIO_OUTPUT
 0x4

	)

	@kern-ucore/arch/or32/driver/ide.c

1 
	~<ide.h
>

2 
	~<•i.h
>

3 
	~<£m.h
>

4 
	~<fs.h
>

5 
	~<bﬂrd.h
>

6 
	~<as£π.h
>

7 
	~<°dio.h
>

8 
	~<kio.h
>

9 
	~<°rög.h
>

11 
	#MAX_IDE
 4

	)

13 
	side_devi˚
 {

14 
	mvÆid
;

15 
	mba£
;

16 
	msize
;

17 
	mmodñ
[41];

18 
£m≠h‹e_t
 
	m£m
;

19 } 
	gide_devi˚s
[
MAX_IDE
];

22 
	$lock_devi˚
 (
idío
)

24 
	`down
 (&(
ide_devi˚s
[
idío
].
£m
));

25 
	}
}

28 
	$u∆ock_devi˚
 (
idío
)

30 
	`up
 (&(
ide_devi˚s
[
idío
].
£m
));

31 
	}
}

34 
	$ide_öô
() {

35 
i
;

36 
i
 = 0; i < 
MAX_IDE
; i++)

37 
ide_devi˚s
[
i
].
vÆid
 = 0;

39 #ifde‡
BOARD


40 
buf„r
[
BLOCK_SIZE
];

45 
	`REG8
(
SPI_BASE
 + 
SPI_MASTER_CONTROL_REG
Ë
SPI_RST
;

48 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_TYPE_REG
Ë
SPI_INIT_SD
;

49 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_CTRL_REG
Ë
SPI_TRANS_START
;

50 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_STS_REG
Ë=
SPI_TRANS_BUSY
)

52 i‡((
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_ERROR_REG
Ë& 
SPI_SD_INIT_ERROR
Ë!
SPI_NO_ERROR
)

53 
	`∑nic
 ("Mass storage deviceÇotávailable.\n");

56 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_7_0_REG
) = 0;

57 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_15_8_REG
) = 0;

58 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_23_16_REG
) = 0;

59 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_31_24_REG
) = 0;

60 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_TYPE_REG
Ë
SPI_RW_READ_SD_BLOCK
;

61 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_CTRL_REG
Ë
SPI_TRANS_START
;

62 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_STS_REG
Ë=
SPI_TRANS_BUSY
)

64 i‡((
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_ERROR_REG
Ë& 
SPI_SD_READ_ERROR
Ë!
SPI_NO_ERROR
)

65 
	`∑nic
 ("CannotÑeadÅhe first block ofÅhe device.\n");

66 
i
 = 0; i < 
BLOCK_SIZE
; i++)

67 
buf„r
[
i
] = 
	`REG8
(
SPI_BASE
 + 
SPI_RX_FIFO_DATA_REG
);

72 
∑πôi⁄_öfo_íåy
 *
íåõs
 = (partition_info_entry *)

73 ((
uöçå_t
)
buf„r
 + 
BLOCK_SIZE
 - 2 - 
MAX_PARTITION_NUM
 * (
∑πôi⁄_öfo_íåy
));

81 
i
 = 0; i < 
MAX_PARTITION_NUM
; i++, 
íåõs
 ++) {

82 i‡(! (
íåõs
->
Êag
 & 
PARTITION_ENTRY_FLAG_VALID
))

85 
ide_devi˚s
[
i
].
vÆid
 = 1;

86 
ide_devi˚s
[
i
].
ba£
 = 
íåõs
->
°¨t
 * 
BLOCK_SIZE
;

87 
ide_devi˚s
[
i
].
size
 = 
íåõs
->size;

88 
	`°r˝y
 (
ide_devi˚s
[
i
].
modñ
, "SPI-SDCARD");

89 
	`£m_öô
 (&(
ide_devi˚s
[
i
].
£m
), 1);

94 
ide_devi˚s
[
DISK0_DEV_NO
].
vÆid
 = 1;

95 
ide_devi˚s
[
DISK0_DEV_NO
].
ba£
 = 
DISK_BASE
 + 
DISK_FS_BASE
;

96 
ide_devi˚s
[
DISK0_DEV_NO
].
size
 = 
DISK_FS_SIZE
 / 
SECTSIZE
;

97 
	`°r˝y
 ((*)
ide_devi˚s
[
DISK0_DEV_NO
].
modñ
, "RAM fs");

98 
	`£m_öô
 (&(
ide_devi˚s
[
DISK0_DEV_NO
].
£m
), 1);

101 
ide_devi˚s
[
SWAP_DEV_NO
].
vÆid
 = 1;

102 
ide_devi˚s
[
SWAP_DEV_NO
].
ba£
 = 
DISK_BASE
 + 
SWAP_FS_BASE
;

103 
ide_devi˚s
[
SWAP_DEV_NO
].
size
 = 
SWAP_FS_SIZE
 / 
SECTSIZE
;

104 
	`°r˝y
 ((*)
ide_devi˚s
[
SWAP_DEV_NO
].
modñ
, "RAM swap fs");

105 
	`£m_öô
 (&(
ide_devi˚s
[
SWAP_DEV_NO
].
£m
), 1);

109 
i
 = 0; i < 
MAX_IDE
; i++) {

110 i‡(
ide_devi˚s
[
i
].
vÆid
)

111 
	`k¥ötf
 ("ide: %d: %10u(£˘‹s), '%s'.\n", 
i
, 
ide_devi˚s
[i].
size
, ide_devi˚s[i].
modñ
);

113 
	}
}

115 
boﬁ


116 
	$ide_devi˚_vÆid
(
idío
) {

117  (
idío
 < 
MAX_IDE
Ë? 
ide_devi˚s
[idío].
vÆid
 : 0;

118 
	}
}

120 
size_t


121 
	$ide_devi˚_size
(
idío
) {

122  (
idío
 < 
MAX_IDE
 && 
ide_devi˚s
[idío].
vÆid
Ë? ide_devi˚s[idío].
size
 : 0;

123 
	}
}

126 
	$ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
) {

127 
	`as£π
 (
ide_devi˚s
[
idío
].
vÆid
);

128 
	`as£π
 (
£˙o
 + 
n£cs
 < 
ide_devi˚s
[
idío
].
size
);

130 
ªt
 = 0;

132 
	`lock_devi˚
 (
idío
);

134 #ifde‡
BOARD


135 *
buf
 = (*)
d°
;

136 
uöçå_t
 
addªss
 = 
ide_devi˚s
[
idío
].
ba£
 + 
£˙o
 * 
BLOCK_SIZE
;

137 
i
, 
j
;

139 
i
 = 0; i < 
n£cs
; i++, 
addªss
 +
BLOCK_SIZE
, 
buf
 += BLOCK_SIZE) {

140 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_7_0_REG
Ë
addªss
 & 0xff;

141 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_15_8_REG
Ë(
addªss
 >> 8) & 0xff;

142 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_23_16_REG
Ë(
addªss
 >> 16) & 0xff;

143 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_31_24_REG
Ë(
addªss
 >> 24) & 0xff;

144 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_TYPE_REG
Ë
SPI_RW_READ_SD_BLOCK
;

145 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_CTRL_REG
Ë
SPI_TRANS_START
;

146 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_STS_REG
Ë=
SPI_TRANS_BUSY
)

148 i‡((
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_ERROR_REG
Ë& 
SPI_SD_READ_ERROR
Ë!
SPI_NO_ERROR
) {

149 
ªt
 = -1;

152 
j
 = 0; j < 
BLOCK_SIZE
; j++)

153 
buf
[
j
] = 
	`REG8
(
SPI_BASE
 + 
SPI_RX_FIFO_DATA_REG
);

156 
	`mem˝y
 (
d°
, (*)(
ide_devi˚s
[
idío
].
ba£
 + 
£˙o
 * 
SECTSIZE
), 
n£cs
 * SECTSIZE);

159 
	`u∆ock_devi˚
 (
idío
);

160  
ªt
;

161 
	}
}

164 
	$ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
) {

165 
	`as£π
 (
ide_devi˚s
[
idío
].
vÆid
);

166 
	`as£π
 (
£˙o
 + 
n£cs
 < 
ide_devi˚s
[
idío
].
size
);

168 
ªt
 = 0;

170 
	`lock_devi˚
 (
idío
);

172 #ifde‡
BOARD


173 *
buf
 = (*)
§c
;

174 
uöçå_t
 
addªss
 = 
ide_devi˚s
[
idío
].
ba£
 + 
£˙o
 * 
BLOCK_SIZE
;

175 
i
, 
j
;

177 
i
 = 0; i < 
n£cs
; i++, 
addªss
 +
BLOCK_SIZE
, 
buf
 += BLOCK_SIZE) {

178 
j
 = 0; j < 
BLOCK_SIZE
; j++)

179 
	`REG8
(
SPI_BASE
 + 
SPI_TX_FIFO_DATA_REG
Ë
buf
[
j
];

180 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_7_0_REG
Ë
addªss
 & 0xff;

181 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_15_8_REG
Ë(
addªss
 >> 8) & 0xff;

182 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_23_16_REG
Ë(
addªss
 >> 16) & 0xff;

183 
	`REG8
(
SPI_BASE
 + 
SPI_SD_ADDR_31_24_REG
Ë(
addªss
 >> 24) & 0xff;

184 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_TYPE_REG
Ë
SPI_RW_WRITE_SD_BLOCK
;

185 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_CTRL_REG
Ë
SPI_TRANS_START
;

186 
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_STS_REG
Ë=
SPI_TRANS_BUSY
)

188 i‡((
	`REG8
(
SPI_BASE
 + 
SPI_TRANS_ERROR_REG
Ë& 
SPI_SD_WRITE_ERROR
Ë!
SPI_NO_ERROR
) {

189 
ªt
 = -1;

194 
	`mem˝y
 ((*)(
ide_devi˚s
[
idío
].
ba£
 + 
£˙o
 * 
SECTSIZE
), 
§c
, 
n£cs
 * SECTSIZE);

197 
	`u∆ock_devi˚
 (
idío
);

198  
ªt
;

199 
	}
}

	@kern-ucore/arch/or32/driver/ide.h

1 #i‚de‡
__KERN_DRIVER_IDE_H__


2 
	#__KERN_DRIVER_IDE_H__


	)

4 
	~<ty≥s.h
>

6 
	#DISK_BASE
 0xf0000000

	)

8 
ide_öô
();

9 
boﬁ
 
ide_devi˚_vÆid
(
idío
);

10 
size_t
 
ide_devi˚_size
(
idío
);

12 
ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

13 
ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

	@kern-ucore/arch/or32/driver/intr.c

1 
	~<öå.h
>

2 
	~<¨ch.h
>

6 
	$öå_íabÀ
() {

7 
	`mt•r
 (
SPR_SR
, 
	`mf•r
 (SPR_SRË| 
SPR_SR_IEE
 | 
SPR_SR_TEE
);

8 
	}
}

12 
	$öå_dißbÀ
() {

13 
	`mt•r
 (
SPR_SR
, 
	`mf•r
 (SPR_SRË& (~(
SPR_SR_IEE
 | 
SPR_SR_TEE
)));

14 
	}
}

	@kern-ucore/arch/or32/driver/intr.h

1 #i‚de‡
__KERN_DRIVER_INTR_H__


2 
	#__KERN_DRIVER_INTR_H__


	)

4 
öå_íabÀ
();

5 
öå_dißbÀ
();

	@kern-ucore/arch/or32/driver/picirq.c

1 
	~<picúq.h
>

2 
	~<¨ch.h
>

5 
	$pic_íabÀ
(
úq
) {

6 
	`mt•r
 (
SPR_PICMR
, 
	`mf•r
 (SPR_PICMRË| (1 << 
úq
));

7 
	}
}

11 
	$pic_öô
() {

12 
	`pic_íabÀ
 (
IRQ_UART
);

13 
	`pic_íabÀ
 (
IRQ_TIMER
);

14 
	}
}

	@kern-ucore/arch/or32/driver/picirq.h

1 #i‚de‡
__KERN_DRIVER_PICIRQ_H__


2 
	#__KERN_DRIVER_PICIRQ_H__


	)

4 
pic_öô
();

5 
pic_íabÀ
(
úq
);

8 
	#IRQ_UART
 2

	)

9 
	#IRQ_TIMER
 3

	)

10 
	#IRQ_OFFSET
 32

	)

	@kern-ucore/arch/or32/driver/spi.h

1 #i‚de‡
__ARCH_OR32_DRIVERS_SPI_H__


2 
	#__ARCH_OR32_DRIVERS_SPI_H__


	)

4 
	~<bﬂrd.h
>

6 #i‚de‡
__ASSEMBLER__


7 
	~<ty≥s.h
>

9 
	#SPI_BASE
 (0xf0000000 + (
SPI_PHYSICAL_BASE
 >> 4))

	)

10 
	#BLOCK_SIZE
 512

	)

12 
	s∑πôi⁄_öfo_íåy


14 
uöt8_t
 
	mÊag
;

15 
uöt8_t
 
	m∑ddög1
;

16 
uöt32_t
 
	m°¨t
;

17 
uöt32_t
 
	msize
;

18 
uöt32_t
 
	m∑ddög2
;

19 
uöt16_t
 
	m∑ddög3
;

20 } 
__©åibuã__
((
∑cked
));

22 
	#PARTITION_ENTRY_FLAG_BOOTABLE
 0x80

	)

23 
	#PARTITION_ENTRY_FLAG_VALID
 0x1

	)

25 
	#MAX_PARTITION_NUM
 4

	)

32 
	#SPI_MASTER_VERSION_REG
 0x0

	)

33 
	#SPI_MASTER_CONTROL_REG
 0x1

	)

34 
	#SPI_TRANS_TYPE_REG
 0x2

	)

35 
	#SPI_TRANS_CTRL_REG
 0x3

	)

36 
	#SPI_TRANS_STS_REG
 0x4

	)

37 
	#SPI_TRANS_ERROR_REG
 0x5

	)

38 
	#SPI_DIRECT_ACCESS_DATA_REG
 0x6

	)

39 
	#SPI_SD_ADDR_7_0_REG
 0x7

	)

40 
	#SPI_SD_ADDR_15_8_REG
 0x8

	)

41 
	#SPI_SD_ADDR_23_16_REG
 0x9

	)

42 
	#SPI_SD_ADDR_31_24_REG
 0xa

	)

43 
	#SPI_CLK_DEL_REG
 0xb

	)

44 
	#SPI_RX_FIFO_DATA_REG
 0x10

	)

45 
	#SPI_RX_FIFO_DATA_COUNT_MSB
 0x12

	)

46 
	#SPI_RX_FIFO_DATA_COUNT_LSB
 0x13

	)

47 
	#SPI_RX_FIFO_CONTROL_REG
 0x14

	)

48 
	#SPI_TX_FIFO_DATA_REG
 0x20

	)

49 
	#SPI_TX_FIFO_CONTROL_REG
 0x24

	)

54 
	#SPI_VERSION_NUM_MAJOR_MASK
 0xf0

	)

55 
	#SPI_VERSION_NUM_MINOR_MASK
 0x0f

	)

60 
	#SPI_RST
 0x1

	)

65 
	#SPI_DIRECT_ACCESS
 0

	)

66 
	#SPI_INIT_SD
 1

	)

67 
	#SPI_RW_READ_SD_BLOCK
 2

	)

68 
	#SPI_RW_WRITE_SD_BLOCK
 3

	)

73 
	#SPI_TRANS_START
 1

	)

78 
	#SPI_TRANS_BUSY
 1

	)

83 
	#SPI_SD_INIT_ERROR
 0x3

	)

84 
	#SPI_SD_READ_ERROR
 0xc

	)

85 
	#SPI_SD_WRITE_ERROR
 0x30

	)

87 
	#SPI_NO_ERROR
 0

	)

88 
	#SPI_INIT_CMD0_ERROR
 0x1

	)

89 
	#SPI_INIT_CMD1_ERROR
 0x2

	)

90 
	#SPI_READ_CMD_ERROR
 0x4

	)

91 
	#SPI_READ_TOKEN_ERROR
 0x8

	)

92 
	#SPI_WRITE_CMD_ERROR
 0x10

	)

93 
	#SPI_WRITE_DATA_ERROR
 0x20

	)

94 
	#SPI_WRITE_BUSY_ERROR
 0x30

	)

	@kern-ucore/arch/or32/driver/uart.c

1 
	~<¨ch.h
>

2 
	~<bﬂrd.h
>

3 
	~<u¨t.h
>

5 
	#BOTH_EMPTY
 (
UART_LSR_TEMT
 | 
UART_LSR_THRE
)

	)

7 
	#WAIT_FOR_XMITR
 \

9 
l§
 = 
	`REG8
(
UART_BASE
 + 
UART_LSR
); \

10 } (
l§
 & 
BOTH_EMPTY
Ë!BOTH_EMPTY)

	)

12 
	#WAIT_FOR_THRE
 \

14 
l§
 = 
	`REG8
(
UART_BASE
 + 
UART_LSR
); \

15 } (
l§
 & 
UART_LSR_THRE
Ë!UART_LSR_THRE)

	)

17 
	#CHECK_FOR_CHAR
 (
	`REG8
(
UART_BASE
 + 
UART_LSR
Ë& 
UART_LSR_DR
)

	)

19 
	#WAIT_FOR_CHAR
 \

21 
l§
 = 
	`REG8
(
UART_BASE
 + 
UART_LSR
); \

22 } (
l§
 & 
UART_LSR_DR
Ë!UART_LSR_DR)

	)

24 
	#UART_TX_BUFF_LEN
 32

	)

25 
	#UART_TX_BUFF_MASK
 (
UART_TX_BUFF_LEN
 -1)

	)

27 
	gtx_buff
[
UART_TX_BUFF_LEN
];

28 vﬁ©ûê
	gtx_Àvñ
, 
	grx_Àvñ
;

30 
	$u¨t_öô
()

32 
devis‹
;

35 
	`REG8
(
UART_BASE
 + 
UART_FCR
Ë
UART_FCR_ENABLE_FIFO
 | 
UART_FCR_CLEAR_RCVR
 | 
UART_FCR_CLEAR_XMIT
 | 
UART_FCR_TRIGGER_1
;

38 
	`REG8
(
UART_BASE
 + 
UART_IER
Ë
UART_IER_RDI
;

41 
	`REG8
(
UART_BASE
 + 
UART_LCR
Ë
UART_LCR_WLEN8
 & ~(
UART_LCR_STOP
 | 
UART_LCR_PARITY
);

44 
devis‹
 = 
IN_CLK
/(16 * 
UART_BAUD_RATE
);

45 
	`REG8
(
UART_BASE
 + 
UART_LCR
Ë|
UART_LCR_DLAB
;

46 
	`REG8
(
UART_BASE
 + 
UART_DLL
Ë
devis‹
 & 0x000000ff;

47 
	`REG8
(
UART_BASE
 + 
UART_DLM
Ë(
devis‹
 >> 8) & 0x000000ff;

48 
	`REG8
(
UART_BASE
 + 
UART_LCR
Ë&~(
UART_LCR_DLAB
);

51 
	}
}

53 
	$u¨t_putc
(
c
)

55 
l§
;

57 
WAIT_FOR_THRE
;

58 
	`REG8
(
UART_BASE
 + 
UART_TX
Ë
c
;

59 if(
c
 == '\n') {

60 
WAIT_FOR_THRE
;

61 
	`REG8
(
UART_BASE
 + 
UART_TX
) = '\r';

63 
WAIT_FOR_XMITR
;

64 
	}
}

66 
	$u¨t_gëc
()

68 
l§
;

69 
c
;

71 
WAIT_FOR_CHAR
;

73 
c
 = 
	`REG8
(
UART_BASE
 + 
UART_RX
);

75  
c
;

76 
	}
}

	@kern-ucore/arch/or32/driver/uart.h

1 #i‚de‡
__ARCH_OR32_DRIVERS_UART_H__


2 
	#__ARCH_OR32_DRIVERS_UART_H__


	)

4 
	~<bﬂrd.h
>

6 
	#UART_BASE
 (0xf0000000 + (
UART_PHYSICAL_BASE
 >> 4))

	)

8 
	#UART_RX
 0

	)

9 
	#UART_TX
 0

	)

10 
	#UART_DLL
 0

	)

11 
	#UART_DLM
 1

	)

12 
	#UART_IER
 1

	)

13 
	#UART_IIR
 2

	)

14 
	#UART_FCR
 2

	)

15 
	#UART_EFR
 2

	)

17 
	#UART_LCR
 3

	)

18 
	#UART_MCR
 4

	)

19 
	#UART_LSR
 5

	)

20 
	#UART_MSR
 6

	)

21 
	#UART_SCR
 7

	)

27 
	#UART_FCR_ENABLE_FIFO
 0x01

	)

28 
	#UART_FCR_CLEAR_RCVR
 0x02

	)

29 
	#UART_FCR_CLEAR_XMIT
 0x04

	)

30 
	#UART_FCR_DMA_SELECT
 0x08

	)

31 
	#UART_FCR_TRIGGER_MASK
 0xC0

	)

32 
	#UART_FCR_TRIGGER_1
 0x00

	)

33 
	#UART_FCR_TRIGGER_4
 0x40

	)

34 
	#UART_FCR_TRIGGER_8
 0x80

	)

35 
	#UART_FCR_TRIGGER_14
 0xC0

	)

37 
	#UART_FCR6_R_TRIGGER_8
 0x00

	)

38 
	#UART_FCR6_R_TRIGGER_16
 0x40

	)

39 
	#UART_FCR6_R_TRIGGER_24
 0x80

	)

40 
	#UART_FCR6_R_TRIGGER_28
 0xC0

	)

41 
	#UART_FCR6_T_TRIGGER_16
 0x00

	)

42 
	#UART_FCR6_T_TRIGGER_8
 0x10

	)

43 
	#UART_FCR6_T_TRIGGER_24
 0x20

	)

44 
	#UART_FCR6_T_TRIGGER_30
 0x30

	)

52 
	#UART_LCR_DLAB
 0x80

	)

53 
	#UART_LCR_SBC
 0x40

	)

54 
	#UART_LCR_SPAR
 0x20

	)

55 
	#UART_LCR_EPAR
 0x10

	)

56 
	#UART_LCR_PARITY
 0x08

	)

57 
	#UART_LCR_STOP
 0x04

	)

58 
	#UART_LCR_WLEN5
 0x00

	)

59 
	#UART_LCR_WLEN6
 0x01

	)

60 
	#UART_LCR_WLEN7
 0x02

	)

61 
	#UART_LCR_WLEN8
 0x03

	)

66 
	#UART_LSR_TEMT
 0x40

	)

67 
	#UART_LSR_THRE
 0x20

	)

68 
	#UART_LSR_BI
 0x10

	)

69 
	#UART_LSR_FE
 0x08

	)

70 
	#UART_LSR_PE
 0x04

	)

71 
	#UART_LSR_OE
 0x02

	)

72 
	#UART_LSR_DR
 0x01

	)

77 
	#UART_IIR_NO_INT
 0x01

	)

78 
	#UART_IIR_ID
 0x06

	)

80 
	#UART_IIR_MSI
 0x00

	)

81 
	#UART_IIR_THRI
 0x02

	)

82 
	#UART_IIR_TOI
 0x0¯

	)

83 
	#UART_IIR_RDI
 0x04

	)

84 
	#UART_IIR_RLSI
 0x06

	)

89 
	#UART_IER_MSI
 0x08

	)

90 
	#UART_IER_RLSI
 0x04

	)

91 
	#UART_IER_THRI
 0x02

	)

92 
	#UART_IER_RDI
 0x01

	)

97 
	#UART_MCR_LOOP
 0x10

	)

98 
	#UART_MCR_OUT2
 0x08

	)

99 
	#UART_MCR_OUT1
 0x04

	)

100 
	#UART_MCR_RTS
 0x02

	)

101 
	#UART_MCR_DTR
 0x01

	)

106 
	#UART_MSR_DCD
 0x80

	)

107 
	#UART_MSR_RI
 0x40

	)

108 
	#UART_MSR_DSR
 0x20

	)

109 
	#UART_MSR_CTS
 0x10

	)

110 
	#UART_MSR_DDCD
 0x08

	)

111 
	#UART_MSR_TERI
 0x04

	)

112 
	#UART_MSR_DDSR
 0x02

	)

113 
	#UART_MSR_DCTS
 0x01

	)

114 
	#UART_MSR_ANY_DELTA
 0x0F

	)

120 
	#UART_EFR_CTS
 0x80

	)

121 
	#UART_EFR_RTS
 0x40

	)

122 
	#UART_EFR_SCD
 0x20

	)

123 
	#UART_EFR_ENI
 0x10

	)

125 
u¨t_öô
();

126 
u¨t_putc
();

127 
u¨t_gëc
();

	@kern-ucore/arch/or32/glue-ucore/kio.c

1 
	~<kio.h
>

2 
	~<c⁄sﬁe.h
>

3 
	~<glue_öå.h
>

4 
	~<°dio.h
>

5 
	~<•ölock.h
>

6 
	~<°d¨g.h
>

7 
	~<uni°d.h
>

14 
	$˝utch
(
c
, *
˙t
, 
fd
) {

15 
	`kc⁄s_putc
(
c
);

16 (*
˙t
) ++;

17 
	}
}

19 
•ölock_s
 
	gk¥ötf_lock
 = {0};

31 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
) {

32 
˙t
 = 0;

33 
Êag
;

34 
	`loˇl_öå_ßve_hw
(
Êag
);

35 
	`•ölock_acquúe
(&
k¥ötf_lock
);

36 
	`v¥ötfmt
((*)
˝utch
, 
NO_FD
, &
˙t
, 
fmt
, 
≠
);

37 
	`•ölock_ªÀa£
(&
k¥ötf_lock
);

38 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

39  
˙t
;

40 
	}
}

49 
	$k¥ötf
(c⁄° *
fmt
, ...) {

50 
va_li°
 
≠
;

51 
˙t
;

52 
	`va_°¨t
(
≠
, 
fmt
);

53 
˙t
 = 
	`vk¥ötf
(
fmt
, 
≠
);

54 
	`va_íd
(
≠
);

55  
˙t
;

56 
	}
}

	@kern-ucore/arch/or32/glue-ucore/libs/arch.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_H__


	)

4 
	~<ty≥s.h
>

5 
	~<‹32/•r_defs.h
>

7 
	#NR_GPRS
 32

	)

9 
	#REG8
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

10 
	#REG16
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

11 
	#REG32
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

17 
uöt32_t
 
__div64_32
(
uöt64_t
 *
dividíd
, uöt32_à
divis‹
);

22 
	#do_div
(
n
,
ba£
) ({ \

23 
uöt32_t
 
__ba£
 = (
ba£
); \

24 
uöt32_t
 
__ªm
; \

25 ()(((
	`ty≥of
((
n
)Ë*)0Ë=((
uöt64_t
 *)0)); \

26 i‡((((
n
) >> 32) == 0)) { \

27 
__ªm
 = (
uöt32_t
)(
n
Ë% 
__ba£
; \

28 (
n
Ë(
uöt32_t
)“Ë/ 
__ba£
; \

30 
__ªm
 = 
	`__div64_32
(&(
n
), 
__ba£
); \

31 
__ªm
; \

32 })

	)

38 
ölöe
 
uöt32_t
 
	$mf•r
 (
uöt16_t
 
addr
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

39 
ölöe
 
	$mt•r
 (
uöt16_t
 
addr
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

41 
ölöe
 
uöt32_t


42 
	$mf•r
 (
uöt16_t
 
addr
)

44 
uöt32_t
 
ªt
;

45 
asm
 vﬁ©ûê("l.mf•∏%0, %1, 0" : "Ù" (
ªt
Ë: "r" (
addr
));

46  
ªt
;

47 
	}
}

49 
ölöe
 

50 
	$mt•r
 (
uöt16_t
 
addr
, 
uöt32_t
 
d©a
)

52 
asm
 vﬁ©ûê("l.mt•∏%0, %1, 0" :: "r" (
addr
), "r" (
d©a
));

53 
	}
}

55 
ölöe
 
	$íabÀ_öãºu±
 (Ë
	`__©åibuã__
 ((
Æways_ölöe
));

57 
ölöe
 

58 
	$íabÀ_öãºu±
 ()

64 
	`mt•r
 (
SPR_SR
, 
	`mf•r
 (SPR_SRË| 
SPR_SR_IEE
);

65 
	}
}

	@kern-ucore/arch/or32/glue-ucore/libs/atomic.h

1 #i‚de‡
__ARCH_TEMPLATE_INCLUDE_ATOMIC_H


2 
	#__ARCH_TEMPLATE_INCLUDE_ATOMIC_H


	)

4 
	~<ty≥s.h
>

5 
	~<sync.h
>

10 vﬁ©ûê
	mcou¡î
;

11 } 
	t©omic_t
;

13 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 

32 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

33  
v
->
cou¡î
;

34 
	}
}

43 
ölöe
 

44 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

45 
v
->
cou¡î
 = 
i
;

46 
	}
}

55 
ölöe
 

56 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

57 
asm
 vﬁ©ûê("l.add %0, %0, %1" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

58 
	}
}

67 
ölöe
 

68 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

69 
asm
 vﬁ©ûê("l.sub %0, %0, %1" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

70 
	}
}

80 
ölöe
 
boﬁ


81 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

82 
c
 = 0;

83 
boﬁ
 
öå_Êag
;

84 
	`loˇl_öå_ßve
 (
öå_Êag
);

85 
v
->
cou¡î
 -
i
;

86 i‡(
v
->
cou¡î
 == 0)

87 
c
 = 1;

88 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

89  
c
 != 0;

90 
	}
}

98 
ölöe
 

99 
	$©omic_öc
(
©omic_t
 *
v
) {

100 
asm
 vﬁ©ûê("l.addò%0, %0, 1" : "+m" (
v
->
cou¡î
));

101 
	}
}

109 
ölöe
 

110 
	$©omic_dec
(
©omic_t
 *
v
) {

111 
asm
 vﬁ©ûê("l.addò%0, %0, -1" : "+m" (
v
->
cou¡î
));

112 
	}
}

121 
ölöe
 
boﬁ


122 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

123 
c
 = 0;

124 
boﬁ
 
öå_Êag
;

125 
	`loˇl_öå_ßve
 (
öå_Êag
);

126 
asm
 vﬁ©ûê("l.addò%0, %0, 1" : "+m" (
v
->
cou¡î
));

127 i‡(
v
->
cou¡î
 == 0)

128 
c
 = 1;

129 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

130  
c
 != 0;

131 
	}
}

140 
ölöe
 
boﬁ


141 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

142 
c
 = 0;

143 
boﬁ
 
öå_Êag
;

144 
	`loˇl_öå_ßve
 (
öå_Êag
);

145 
asm
 vﬁ©ûê("l.addò%0, %0, -1" : "+m" (
v
->
cou¡î
));

146 i‡(
v
->
cou¡î
 == 0)

147 
c
 = 1;

148 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

149  
c
 != 0;

150 
	}
}

160 
ölöe
 

161 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

162 
boﬁ
 
öå_Êag
;

163 
	`loˇl_öå_ßve
 (
öå_Êag
);

164 
v
->
cou¡î
 +
i
;

165 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

166  
v
->
cou¡î
;

167 
	}
}

176 
ölöe
 

177 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

178 
boﬁ
 
öå_Êag
;

179 
	`loˇl_öå_ßve
 (
öå_Êag
);

180 
v
->
cou¡î
 -
i
;

181 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

182  
v
->
cou¡î
;

183 
	}
}

185 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

186 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

187 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

188 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

189 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

190 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

191 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

201 
ölöe
 

202 
	$£t_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
) {

203 
boﬁ
 
öå_Êag
;

204 
	`loˇl_öå_ßve
 (
öå_Êag
);

205 *
addr
 |(1 << 
ƒ
);

206 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

207 
	}
}

214 
ölöe
 

215 
	$˛ór_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
) {

216 
boﬁ
 
öå_Êag
;

217 
	`loˇl_öå_ßve
 (
öå_Êag
);

218 *
addr
 &~(1 << 
ƒ
);

219 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

220 
	}
}

227 
ölöe
 

228 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
) {

229 
boﬁ
 
öå_Êag
;

230 
	`loˇl_öå_ßve
 (
öå_Êag
);

231 
asm
 vﬁ©ûê("l.x‹ %0, %0, %1" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (1 << 
ƒ
));

232 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

233 
	}
}

240 
ölöe
 
boﬁ


241 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
) {

242 
c
 = 0;

243 
boﬁ
 
öå_Êag
;

244 
	`loˇl_öå_ßve
 (
öå_Êag
);

245 i‡(*
addr
 & (1 << 
ƒ
))

246 
c
 = 1;

247 *
addr
 |(1 << 
ƒ
);

248 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

249  
c
 != 0;

250 
	}
}

257 
ölöe
 
boﬁ


258 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
) {

259 
c
 = 0;

260 
boﬁ
 
öå_Êag
;

261 
	`loˇl_öå_ßve
 (
öå_Êag
);

262 i‡(*
addr
 & (1 << 
ƒ
))

263 
c
 = 1;

264 *
addr
 &~(1 << 
ƒ
);

265 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

267 
	}
}

274 
ölöe
 
boﬁ


275 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
) {

276 
c
 = 0;

277 
boﬁ
 
öå_Êag
;

278 
	`loˇl_öå_ßve
 (
öå_Êag
);

279 i‡(*
addr
 & (1 << 
ƒ
))

280 
c
 = 1;

281 
asm
 vﬁ©ûê("l.x‹ %0, %0, %1" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (1 << 
ƒ
));

282 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

284 
	}
}

291 
ölöe
 
boﬁ


292 
	$ã°_bô
(
ƒ
, vﬁ©ûê
uöt32_t
 *
addr
) {

293 
c
 = 0;

294 
boﬁ
 
öå_Êag
;

295 
	`loˇl_öå_ßve
 (
öå_Êag
);

296 i‡(*
addr
 & (1 << 
ƒ
))

297 
c
 = 1;

298 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

299  
c
 != 0;

300 
	}
}

	@kern-ucore/arch/or32/glue-ucore/libs/div64.c

1 
	~<¨ch.h
>

2 
	~<ty≥s.h
>

5 
uöt32_t
 
__©åibuã__
((
wók
)Ë
	$__div64_32
(
uöt64_t
 *
n
, 
uöt32_t
 
ba£
)

7 
uöt64_t
 
ªm
 = *
n
;

8 
uöt64_t
 
b
 = 
ba£
;

9 
uöt64_t
 
ªs
, 
d
 = 1;

10 
uöt32_t
 
high
 = 
ªm
 >> 32;

13 
ªs
 = 0;

14 i‡(
high
 >
ba£
) {

15 
high
 /
ba£
;

16 
ªs
 = (
uöt64_t
Ë
high
 << 32;

17 
ªm
 -(
uöt64_t
Ë(
high
*
ba£
) << 32;

20 (
öt64_t
)
b
 > 0 && b < 
ªm
) {

21 
b
 = b+b;

22 
d
 = d+d;

26 i‡(
ªm
 >
b
) {

27 
ªm
 -
b
;

28 
ªs
 +
d
;

30 
b
 >>= 1;

31 
d
 >>= 1;

32 } 
d
);

34 *
n
 = 
ªs
;

35  
ªm
;

36 
	}
}

	@kern-ucore/arch/or32/glue-ucore/libs/or32/or32_func.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_OR32_FUNC_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_OR32_FUNC_H__


	)

4 
	~<‹32/•r_defs.h
>

5 
	~<memœyout.h
>

7 #ifde‡
__ASSEMBLER__


9 .
ma¸o
 
lﬂd32i
 
ªg
 const

10 
	gl
.
	gmovhi
 \
	gªg
,
hi
(\const)

11 
	gl
.
	g‹i
 \
	gªg
,\ªg,
lo
(\const)

12 .
	gídm


14 
	#SR_ENABLE_BITS
(
mask
, 
t1
, 
t2
) \

15 
l
.
mf•r
 
t2
, 
r0
, 
SPR_SR
 ;\

16 
lﬂd32i
 
t1
, (
mask
) ;\

17 
l
.
‹
 
t2
,Å2, 
t1
 ;\

18 
l
.
mt•r
 
r0
, 
t2
, 
SPR_SR


	)

20 
	#SR_DISABLE_BITS
(
mask
, 
t1
, 
t2
) \

21 
l
.
mf•r
 
t2
, 
r0
, 
SPR_SR
 ;\

22 
lﬂd32i
 
t1
, (~
mask
) ;\

23 
l
.
™d
 
t2
,Å2, 
t1
 ;\

24 
l
.
mt•r
 
r0
, 
t2
, 
SPR_SR


	)

26 
	#ENABLE_INTERRUPTS
(
t1
, 
t2
) \

27 
	`SR_ENABLE_BITS
((
SPR_SR_IEE
 | 
SPR_SR_TEE
), 
t1
, 
t2
)

	)

29 
	#DISABLE_INTERRUPTS
(
t1
, 
t2
) \

30 
	`SR_DISABLE_BITS
((
SPR_SR_IEE
 | 
SPR_SR_TEE
), 
t1
, 
t2
)

	)

32 
	#ENABLE_MMU
(
t1
, 
t2
) \

33 
	`SR_ENABLE_BITS
((
SPR_SR_IME
 | 
SPR_SR_DME
), 
t1
, 
t2
)

	)

38 
	#t›hys
(
t1
, 
t2
) \

39 
lﬂd32i
 
t1
, -
KERNBASE
 ;\

40 
l
.
add
 
t1
,Å1, 
t2


	)

45 
	#tovút
(
t1
, 
t2
) \

46 
lﬂd32i
 
t1
, 
KERNBASE
 ;\

47 
l
.
add
 
t1
,Å1, 
t2


	)

	@kern-ucore/arch/or32/glue-ucore/libs/or32/spr_defs.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_SPR_DEFS_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_SPR_DEFS_H__


	)

4 
	#MAX_GRPS
 (32)

	)

5 
	#MAX_SPRS_PER_GRP_BITS
 (11)

	)

6 
	#MAX_SPRS_PER_GRP
 (1 << 
MAX_SPRS_PER_GRP_BITS
)

	)

7 
	#MAX_SPRS
 (0x10000)

	)

10 
	#SPRGROUP_SYS
 (0<< 
MAX_SPRS_PER_GRP_BITS
)

	)

11 
	#SPRGROUP_DMMU
 (1<< 
MAX_SPRS_PER_GRP_BITS
)

	)

12 
	#SPRGROUP_IMMU
 (2<< 
MAX_SPRS_PER_GRP_BITS
)

	)

13 
	#SPRGROUP_DC
 (3<< 
MAX_SPRS_PER_GRP_BITS
)

	)

14 
	#SPRGROUP_IC
 (4<< 
MAX_SPRS_PER_GRP_BITS
)

	)

15 
	#SPRGROUP_MAC
 (5<< 
MAX_SPRS_PER_GRP_BITS
)

	)

16 
	#SPRGROUP_D
 (6<< 
MAX_SPRS_PER_GRP_BITS
)

	)

17 
	#SPRGROUP_PC
 (7<< 
MAX_SPRS_PER_GRP_BITS
)

	)

18 
	#SPRGROUP_PM
 (8<< 
MAX_SPRS_PER_GRP_BITS
)

	)

19 
	#SPRGROUP_PIC
 (9<< 
MAX_SPRS_PER_GRP_BITS
)

	)

20 
	#SPRGROUP_TT
 (10<< 
MAX_SPRS_PER_GRP_BITS
)

	)

23 
	#SPR_VR
 (
SPRGROUP_SYS
 + 0)

	)

24 
	#SPR_UPR
 (
SPRGROUP_SYS
 + 1)

	)

25 
	#SPR_CPUCFGR
 (
SPRGROUP_SYS
 + 2)

	)

26 
	#SPR_DMMUCFGR
 (
SPRGROUP_SYS
 + 3)

	)

27 
	#SPR_IMMUCFGR
 (
SPRGROUP_SYS
 + 4)

	)

28 
	#SPR_DCCFGR
 (
SPRGROUP_SYS
 + 5)

	)

29 
	#SPR_ICCFGR
 (
SPRGROUP_SYS
 + 6)

	)

30 
	#SPR_DCFGR
 (
SPRGROUP_SYS
 + 7)

	)

31 
	#SPR_PCCFGR
 (
SPRGROUP_SYS
 + 8)

	)

32 
	#SPR_NPC
 (
SPRGROUP_SYS
 + 16Ë

	)

33 
	#SPR_SR
 (
SPRGROUP_SYS
 + 17Ë

	)

34 
	#SPR_PPC
 (
SPRGROUP_SYS
 + 18Ë

	)

35 
	#SPR_EPCR_BASE
 (
SPRGROUP_SYS
 + 32Ë

	)

36 
	#SPR_EPCR_LAST
 (
SPRGROUP_SYS
 + 47Ë

	)

37 
	#SPR_EEAR_BASE
 (
SPRGROUP_SYS
 + 48)

	)

38 
	#SPR_EEAR_LAST
 (
SPRGROUP_SYS
 + 63)

	)

39 
	#SPR_ESR_BASE
 (
SPRGROUP_SYS
 + 64)

	)

40 
	#SPR_ESR_LAST
 (
SPRGROUP_SYS
 + 79)

	)

44 
	#SPR_DMMUCR
 (
SPRGROUP_DMMU
 + 0)

	)

45 
	#SPR_DTLBMR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x400 + (WAYË* 0x200)

	)

46 
	#SPR_DTLBMR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x47‡+ (WAYË* 0x200)

	)

47 
	#SPR_DTLBTR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x600 + (WAYË* 0x200)

	)

48 
	#SPR_DTLBTR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x67‡+ (WAYË* 0x200)

	)

51 
	#SPR_IMMUCR
 (
SPRGROUP_IMMU
 + 0)

	)

52 
	#SPR_ITLBMR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x400 + (WAYË* 0x200)

	)

53 
	#SPR_ITLBMR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x47‡+ (WAYË* 0x200)

	)

54 
	#SPR_ITLBTR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x600 + (WAYË* 0x200)

	)

55 
	#SPR_ITLBTR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x67‡+ (WAYË* 0x200)

	)

59 
	#SPR_DMMUCR
 (
SPRGROUP_DMMU
 + 0)

	)

60 
	#SPR_DTLBMR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x200 + (WAYË* 0x100)

	)

61 
	#SPR_DTLBMR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x23‡+ (WAYË* 0x100)

	)

62 
	#SPR_DTLBTR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x280 + (WAYË* 0x100)

	)

63 
	#SPR_DTLBTR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x2b‡+ (WAYË* 0x100)

	)

66 
	#SPR_IMMUCR
 (
SPRGROUP_IMMU
 + 0)

	)

67 
	#SPR_ITLBMR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x200 + (WAYË* 0x100)

	)

68 
	#SPR_ITLBMR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x23‡+ (WAYË* 0x100)

	)

69 
	#SPR_ITLBTR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x280 + (WAYË* 0x100)

	)

70 
	#SPR_ITLBTR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x2b‡+ (WAYË* 0x100)

	)

74 
	#SPR_DCCR
 (
SPRGROUP_DC
 + 0)

	)

75 
	#SPR_DCBPR
 (
SPRGROUP_DC
 + 1)

	)

76 
	#SPR_DCBFR
 (
SPRGROUP_DC
 + 2)

	)

77 
	#SPR_DCBIR
 (
SPRGROUP_DC
 + 3)

	)

78 
	#SPR_DCBWR
 (
SPRGROUP_DC
 + 4)

	)

79 
	#SPR_DCBLR
 (
SPRGROUP_DC
 + 5)

	)

80 
	#SPR_DCR_BASE
(
WAY
Ë(
SPRGROUP_DC
 + 0x200 + (WAYË* 0x200)

	)

81 
	#SPR_DCR_LAST
(
WAY
Ë(
SPRGROUP_DC
 + 0x3f‡+ (WAYË* 0x200)

	)

84 
	#SPR_ICCR
 (
SPRGROUP_IC
 + 0)

	)

85 
	#SPR_ICBPR
 (
SPRGROUP_IC
 + 1)

	)

86 
	#SPR_ICBIR
 (
SPRGROUP_IC
 + 2)

	)

87 
	#SPR_ICBLR
 (
SPRGROUP_IC
 + 3)

	)

88 
	#SPR_ICR_BASE
(
WAY
Ë(
SPRGROUP_IC
 + 0x200 + (WAYË* 0x200)

	)

89 
	#SPR_ICR_LAST
(
WAY
Ë(
SPRGROUP_IC
 + 0x3f‡+ (WAYË* 0x200)

	)

92 
	#SPR_MACLO
 (
SPRGROUP_MAC
 + 1)

	)

93 
	#SPR_MACHI
 (
SPRGROUP_MAC
 + 2)

	)

96 
	#SPR_DVR
(
N
Ë(
SPRGROUP_D
 + (N))

	)

97 
	#SPR_DCR
(
N
Ë(
SPRGROUP_D
 + 8 + (N))

	)

98 
	#SPR_DMR1
 (
SPRGROUP_D
 + 16)

	)

99 
	#SPR_DMR2
 (
SPRGROUP_D
 + 17)

	)

100 
	#SPR_DWCR0
 (
SPRGROUP_D
 + 18)

	)

101 
	#SPR_DWCR1
 (
SPRGROUP_D
 + 19)

	)

102 
	#SPR_DSR
 (
SPRGROUP_D
 + 20)

	)

103 
	#SPR_DRR
 (
SPRGROUP_D
 + 21)

	)

106 
	#SPR_PCCR
(
N
Ë(
SPRGROUP_PC
 + (N))

	)

107 
	#SPR_PCMR
(
N
Ë(
SPRGROUP_PC
 + 8 + (N))

	)

110 
	#SPR_PMR
 (
SPRGROUP_PM
 + 0)

	)

113 
	#SPR_PICMR
 (
SPRGROUP_PIC
 + 0)

	)

114 
	#SPR_PICPR
 (
SPRGROUP_PIC
 + 1)

	)

115 
	#SPR_PICSR
 (
SPRGROUP_PIC
 + 2)

	)

118 
	#SPR_TTMR
 (
SPRGROUP_TT
 + 0)

	)

119 
	#SPR_TTCR
 (
SPRGROUP_TT
 + 1)

	)

125 
	#SPR_VR_VER
 0xffff0000

	)

126 
	#SPR_VR_REV
 0x0000003‡

	)

132 
	#SPR_UPR_UP
 0x00000001

	)

133 
	#SPR_UPR_DCP
 0x00000002

	)

134 
	#SPR_UPR_ICP
 0x00000004

	)

135 
	#SPR_UPR_DMP
 0x00000008

	)

136 
	#SPR_UPR_IMP
 0x00000010

	)

137 
	#SPR_UPR_OB32P
 0x00000020

	)

138 
	#SPR_UPR_OB64P
 0x00000040

	)

139 
	#SPR_UPR_OF32P
 0x00000080

	)

140 
	#SPR_UPR_OF64P
 0x00000100

	)

141 
	#SPR_UPR_OV32P
 0x00000200

	)

142 
	#SPR_UPR_OV64P
 0x00000400

	)

143 
	#SPR_UPR_DUP
 0x00000800

	)

144 
	#SPR_UPR_PCUP
 0x00001000

	)

145 
	#SPR_UPR_PMP
 0x00002000

	)

146 
	#SPR_UPR_PICP
 0x00004000

	)

147 
	#SPR_UPR_TTP
 0x00008000

	)

148 
	#SPR_UPR_SRP
 0x00010000

	)

149 
	#SPR_UPR_RES
 0x00„0000

	)

150 
	#SPR_UPR_CUST
 0xff000000

	)

156 
	#SPR_SR_CID
 0xf0000000

	)

157 
	#SPR_SR_FO
 0x00008000

	)

158 
	#SPR_SR_EPH
 0x00004000

	)

159 
	#SPR_SR_DSX
 0x00002000

	)

160 
	#SPR_SR_OVE
 0x00001000

	)

161 
	#SPR_SR_OV
 0x00000800

	)

162 
	#SPR_SR_CY
 0x00000400

	)

163 
	#SPR_SR_F
 0x00000200

	)

164 
	#SPR_SR_CE
 0x00000100

	)

165 
	#SPR_SR_LEE
 0x00000080

	)

166 
	#SPR_SR_IME
 0x00000040

	)

167 
	#SPR_SR_DME
 0x00000020

	)

168 
	#SPR_SR_ICE
 0x00000010

	)

169 
	#SPR_SR_DCE
 0x00000008

	)

170 
	#SPR_SR_IEE
 0x00000004

	)

171 
	#SPR_SR_TEE
 0x00000002

	)

172 
	#SPR_SR_SM
 0x00000001

	)

178 
	#SPR_DMMUCR_P2S
 0x0000003ê

	)

179 
	#SPR_DMMUCR_P1S
 0x000007c0

	)

180 
	#SPR_DMMUCR_VADDR_WIDTH
 0x0000f800

	)

181 
	#SPR_DMMUCR_PADDR_WIDTH
 0x000f0000

	)

187 
	#SPR_IMMUCR_P2S
 0x0000003ê

	)

188 
	#SPR_IMMUCR_P1S
 0x000007c0

	)

189 
	#SPR_IMMUCR_VADDR_WIDTH
 0x0000f800

	)

190 
	#SPR_IMMUCR_PADDR_WIDTH
 0x000f0000

	)

196 
	#SPR_DTLBMR_V
 0x00000001

	)

197 
	#SPR_DTLBMR_PL1
 0x00000002

	)

198 
	#SPR_DTLBMR_CID
 0x0000003¯

	)

199 
	#SPR_DTLBMR_LRU
 0x000000c0

	)

200 
	#SPR_DTLBMR_VPN
 0xfffff000

	)

206 
	#SPR_DTLBTR_CC
 0x00000001

	)

207 
	#SPR_DTLBTR_CI
 0x00000002

	)

208 
	#SPR_DTLBTR_WBC
 0x00000004

	)

209 
	#SPR_DTLBTR_WOM
 0x00000008

	)

210 
	#SPR_DTLBTR_A
 0x00000010

	)

211 
	#SPR_DTLBTR_D
 0x00000020

	)

212 
	#SPR_DTLBTR_URE
 0x00000040

	)

213 
	#SPR_DTLBTR_UWE
 0x00000080

	)

214 
	#SPR_DTLBTR_SRE
 0x00000100

	)

215 
	#SPR_DTLBTR_SWE
 0x00000200

	)

216 
	#SPR_DTLBTR_PPN
 0xfffff000

	)

222 
	#SPR_ITLBMR_V
 0x00000001

	)

223 
	#SPR_ITLBMR_PL1
 0x00000002

	)

224 
	#SPR_ITLBMR_CID
 0x0000003¯

	)

225 
	#SPR_ITLBMR_LRU
 0x000000c0

	)

226 
	#SPR_ITLBMR_VPN
 0xfffff000

	)

232 
	#SPR_ITLBTR_CC
 0x00000001

	)

233 
	#SPR_ITLBTR_CI
 0x00000002

	)

234 
	#SPR_ITLBTR_WBC
 0x00000004

	)

235 
	#SPR_ITLBTR_WOM
 0x00000008

	)

236 
	#SPR_ITLBTR_A
 0x00000010

	)

237 
	#SPR_ITLBTR_D
 0x00000020

	)

238 
	#SPR_ITLBTR_SXE
 0x00000040

	)

239 
	#SPR_ITLBTR_UXE
 0x00000080

	)

240 
	#SPR_ITLBTR_PPN
 0xfffff000

	)

246 
	#SPR_DCCR_EW
 0x000000f‡

	)

252 
	#SPR_ICCR_EW
 0x000000f‡

	)

258 
	#SPR_DCR_DP
 0x00000001

	)

259 
	#SPR_DCR_CC
 0x0000000ê

	)

260 
	#SPR_DCR_SC
 0x00000010

	)

261 
	#SPR_DCR_CT
 0x000000e0

	)

264 
	#SPR_DCR_CC_MASKED
 0x00000000

	)

265 
	#SPR_DCR_CC_EQUAL
 0x00000001

	)

266 
	#SPR_DCR_CC_LESS
 0x00000002

	)

267 
	#SPR_DCR_CC_LESSE
 0x00000003

	)

268 
	#SPR_DCR_CC_GREAT
 0x00000004

	)

269 
	#SPR_DCR_CC_GREATE
 0x00000005

	)

270 
	#SPR_DCR_CC_NEQUAL
 0x00000006

	)

273 
	#SPR_DCR_CT_DISABLED
 0x00000000

	)

274 
	#SPR_DCR_CT_IFEA
 0x00000020

	)

275 
	#SPR_DCR_CT_LEA
 0x00000040

	)

276 
	#SPR_DCR_CT_SEA
 0x00000060

	)

277 
	#SPR_DCR_CT_LD
 0x00000080

	)

278 
	#SPR_DCR_CT_SD
 0x000000a0

	)

279 
	#SPR_DCR_CT_LSEA
 0x000000c0

	)

285 
	#SPR_DMR1_CW0
 0x00000003

	)

286 
	#SPR_DMR1_CW1
 0x0000000¯

	)

287 
	#SPR_DMR1_CW2
 0x00000030

	)

288 
	#SPR_DMR1_CW3
 0x000000c0

	)

289 
	#SPR_DMR1_CW4
 0x00000300

	)

290 
	#SPR_DMR1_CW5
 0x00000c00

	)

291 
	#SPR_DMR1_CW6
 0x00003000

	)

292 
	#SPR_DMR1_CW7
 0x0000c000

	)

293 
	#SPR_DMR1_CW8
 0x00030000

	)

294 
	#SPR_DMR1_CW9
 0x000c0000

	)

295 
	#SPR_DMR1_CW10
 0x00300000

	)

296 
	#SPR_DMR1_ST
 0x00400000

	)

297 
	#SPR_DMR1_BT
 0x00800000

	)

298 
	#SPR_DMR1_DXFW
 0x01000000

	)

304 
	#SPR_DMR2_WCE0
 0x00000001

	)

305 
	#SPR_DMR2_WCE1
 0x00000002

	)

306 
	#SPR_DMR2_AWTC
 0x00001ff¯

	)

307 
	#SPR_DMR2_WGB
 0x00f„000

	)

313 
	#SPR_DWCR_COUNT
 0x0000fff‡

	)

314 
	#SPR_DWCR_MATCH
 0xffff0000

	)

320 
	#SPR_DSR_RSTE
 0x00000001

	)

321 
	#SPR_DSR_BUSEE
 0x00000002

	)

322 
	#SPR_DSR_DPFE
 0x00000004

	)

323 
	#SPR_DSR_IPFE
 0x00000008

	)

324 
	#SPR_DSR_TTE
 0x00000010

	)

325 
	#SPR_DSR_AE
 0x00000020

	)

326 
	#SPR_DSR_IIE
 0x00000040

	)

327 
	#SPR_DSR_IE
 0x00000080

	)

328 
	#SPR_DSR_DME
 0x00000100

	)

329 
	#SPR_DSR_IME
 0x00000200

	)

330 
	#SPR_DSR_RE
 0x00000400

	)

331 
	#SPR_DSR_SCE
 0x00000800

	)

332 
	#SPR_DSR_SSE
 0x00001000

	)

333 
	#SPR_DSR_TE
 0x00002000

	)

339 
	#SPR_DRR_RSTE
 0x00000001

	)

340 
	#SPR_DRR_BUSEE
 0x00000002

	)

341 
	#SPR_DRR_DPFE
 0x00000004

	)

342 
	#SPR_DRR_IPFE
 0x00000008

	)

343 
	#SPR_DRR_TTE
 0x00000010

	)

344 
	#SPR_DRR_AE
 0x00000020

	)

345 
	#SPR_DRR_IIE
 0x00000040

	)

346 
	#SPR_DRR_IE
 0x00000080

	)

347 
	#SPR_DRR_DME
 0x00000100

	)

348 
	#SPR_DRR_IME
 0x00000200

	)

349 
	#SPR_DRR_RE
 0x00000400

	)

350 
	#SPR_DRR_SCE
 0x00000800

	)

351 
	#SPR_DRR_TE
 0x00001000

	)

357 
	#SPR_PCMR_CP
 0x00000001

	)

358 
	#SPR_PCMR_UMRA
 0x00000002

	)

359 
	#SPR_PCMR_CISM
 0x00000004

	)

360 
	#SPR_PCMR_CIUM
 0x00000008

	)

361 
	#SPR_PCMR_LA
 0x00000010

	)

362 
	#SPR_PCMR_SA
 0x00000020

	)

363 
	#SPR_PCMR_IF
 0x00000040

	)

364 
	#SPR_PCMR_DCM
 0x00000080

	)

365 
	#SPR_PCMR_ICM
 0x00000100

	)

366 
	#SPR_PCMR_IFS
 0x00000200

	)

367 
	#SPR_PCMR_LSUS
 0x00000400

	)

368 
	#SPR_PCMR_BS
 0x00000800

	)

369 
	#SPR_PCMR_DTLBM
 0x00001000

	)

370 
	#SPR_PCMR_ITLBM
 0x00002000

	)

371 
	#SPR_PCMR_DDS
 0x00004000

	)

372 
	#SPR_PCMR_WPE
 0x03ff8000

	)

378 
	#SPR_PMR_SDF
 0x0000000‡

	)

379 
	#SPR_PMR_DME
 0x00000010

	)

380 
	#SPR_PMR_SME
 0x00000020

	)

381 
	#SPR_PMR_DCGE
 0x00000040

	)

382 
	#SPR_PMR_SUME
 0x00000080

	)

388 
	#SPR_PICMR_IUM
 0xfffffff¯

	)

394 
	#SPR_PICPR_IPRIO
 0xfffffff¯

	)

400 
	#SPR_PICSR_IS
 0xfffffff‡

	)

406 
	#SPR_TTCR_PERIOD
 0x0ffffff‡

	)

407 
	#SPR_TTMR_PERIOD
 
SPR_TTCR_PERIOD


	)

408 
	#SPR_TTMR_IP
 0x10000000

	)

409 
	#SPR_TTMR_IE
 0x20000000

	)

410 
	#SPR_TTMR_RT
 0x40000000

	)

411 
	#SPR_TTMR_SR
 0x80000000

	)

412 
	#SPR_TTMR_CR
 0xc0000000

	)

413 
	#SPR_TTMR_M
 0xc0000000

	)

419 
	#NOP_NOP
 0x0000

	)

420 
	#NOP_EXIT
 0x0001

	)

421 
	#NOP_REPORT
 0x0002

	)

422 
	#NOP_PRINTF
 0x0003

	)

423 
	#NOP_REPORT_FIRST
 0x0400

	)

424 
	#NOP_REPORT_LAST
 0x03f‡

	)

	@kern-ucore/arch/or32/glue-ucore/libs/spinlock.h

1 #i‚de‡
__SPINLOCK_H__


2 
	#__SPINLOCK_H__


	)

4 
	s•ölock_s
 {

5 vﬁ©ûê
	mlock
;

6 } 
	t•ölock_s
;

8 
•ölock_s
 *
	t•ölock_t
;

10 
	#•ölock_öô
(
x
Ëdÿ{ (x)->
lock
 = 0; } 0)

	)

12 
ölöe
 

13 
	$•ölock_acquúe
(
•ölock_t
 
lock
)

15 
	}
}

17 
ölöe
 

18 
	$•ölock_acquúe_åy
(
•ölock_t
 
lock
)

21 
	}
}

23 
ölöe
 

24 
	$•ölock_ªÀa£
(
•ölock_t
 
lock
)

26 
	}
}

	@kern-ucore/arch/or32/glue-ucore/mp.c

1 
	~<mp.h
>

2 
	~<pmm.h
>

3 
	~<å≠.h
>

4 
	~<•ölock.h
>

5 
	~<¥oc.h
>

6 
	~<kio.h
>

7 
	~<as£π.h
>

8 
	~<vmm.h
>

10 
PLS
 
	g∂s_œpic_id
;

11 
PLS
 
	g∂s_l˝u_idx
;

12 
PLS
 
	g∂s_l˝u_cou¡
;

14 
PLS
 vﬁ©ûê
	g∂s_loˇl_kîn_lockög
;

16 vﬁ©ûê
	gùi_øi£
[
LAPIC_COUNT
] = {0};

19 
	#mp_debug
(
a
 ...Ë
	`k¥ötf
◊)

	)

21 
	#mp_debug
(
a
 ...)

	)

25 
	$mp_öô
()

27 
	`∂s_wrôe
 (
œpic_id
, 0);

28 
	`∂s_wrôe
 (
l˝u_idx
, 0);

29 
	`∂s_wrôe
 (
l˝u_cou¡
, 1);

32 
	}
}

35 
	$kîn_íãr
(
sour˚
)

37 
	}
}

40 
	$kîn_Àave
()

42 
	}
}

45 
	$mp_£t_mm_∑gëabÀ
(
mm_°ru˘
 *
mm
)

47 
uöçå_t
 
boŸ_pgdú_∑
;

48 
uöçå_t
 
cuºít_pgdú_∑
;

49 i‡(
mm
 !
NULL
)

50 
cuºít_pgdú_∑
 = 
	`PADDR
(
mm
->
pgdú
);

52 
cuºít_pgdú_∑
 = 
boŸ_pgdú_∑
;

53 
	`éb_övÆid©e_Æl
 ();

54 
	}
}

57 
pgd_t
 *
	gm±i_pgdú
;

58 
uöçå_t
 
	gm±i_œ
;

59 vﬁ©ûê
	gm±i_íd
;

62 
	$mp_éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
)

64 
	`éb_övÆid©e
 (
pgdú
, 
œ
);

65 
	}
}

68 
	$mp_éb_upd©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
)

70 
	`éb_upd©e
 (
pgdú
, 
œ
);

71 
	}
}

	@kern-ucore/arch/or32/glue-ucore/pmm.c

1 
	~<pmm.h
>

2 
	~<°dio.h
>

3 
	~<mmu.h
>

4 
	~<memœyout.h
>

5 
	~<îr‹.h
>

6 
	~<buddy_pmm.h
>

7 
	~<°dio.h
>

8 
	~<sync.h
>

9 
	~<ty≥s.h
>

10 
	~<¶ab.h
>

11 
	~<sw≠.h
>

12 
	~<°rög.h
>

13 
	~<kio.h
>

14 
	~<glue_mp.h
>

16 
PLS
 
size_t
 
	g∂s_u£d_∑ges
;

17 
PLS
 
li°_íåy_t
 
	g∂s_∑ge_°ru˘_‰ì_li°
;

20 
Page
 *
	g∑ges
;

22 
size_t
 
	g≈age
 = 0;

25 
pde_t
 *
	gboŸ_pgdú
 = 
NULL
;

28 c⁄° 
pmm_m™agî
 *
	gpmm_m™agî
;

34 
	$öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

35 
pmm_m™agî
->
	`öô_memm≠
(
ba£
, 
n
);

36 
	}
}

46 
	$boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, uöçå_à
∑
, 
uöt32_t
 
≥rm
) {

47 
	`as£π
(
	`PGOFF
(
œ
Ë=PGOFF(
∑
));

48 
size_t
 
n
 = 
	`ROUNDUP
(
size
 + 
	`PGOFF
(
œ
), 
PGSIZE
) / PGSIZE;

49 
œ
 = 
	`ROUNDDOWN
÷a, 
PGSIZE
);

50 
∑
 = 
	`ROUNDDOWN
’a, 
PGSIZE
);

51 ; 
n
 > 0;Ç --, 
œ
 +
PGSIZE
, 
∑
 += PGSIZE) {

52 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 1);

53 
	`as£π
(
±ï
 !
NULL
);

54 
	`±ï_m≠
 (
±ï
, 
∑
);

55 
	`±ï_£t_≥rm
 (
±ï
, 
≥rm
);

57 
	}
}

59 
size_t


60 
	$ƒ_u£d_∑ges
()

62  
	`∂s_ªad
 (
u£d_∑ges
);

63 
	}
}

66 
	$pmm_öô_≠
()

68 
li°_íåy_t
 *
∑ge_°ru˘_‰ì_li°
 = 
	`∂s_gë_±r
(page_struct_free_list);

69 
	`li°_öô
(
∑ge_°ru˘_‰ì_li°
);

70 
	`∂s_wrôe
 (
u£d_∑ges
, 0);

71 
	}
}

81 
Page
 *

82 
	$Æloc_∑ges
(
size_t
 
n
) {

83 
Page
 *
∑ge
;

84 
boﬁ
 
öå_Êag
;

85 
åy_agaö
:

86 
	`loˇl_öå_ßve
(
öå_Êag
);

88 
∑ge
 = 
pmm_m™agî
->
	`Æloc_∑ges
(
n
);

90 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

91 i‡(
∑ge
 =
NULL
 && 
	`åy_‰ì_∑ges
(
n
)) {

92 
åy_agaö
;

95 
	`∂s_wrôe
(
u£d_∑ges
, 
	`∂s_ªad
(u£d_∑gesË+ 
n
);

96  
∑ge
;

97 
	}
}

106 
	$boŸ_Æloc_∑ge
() {

107 
Page
 *
p
 = 
	`Æloc_∑ge
();

108 i‡(
p
 =
NULL
) {

109 
	`∑nic
("boot_alloc_page failed.\n");

111  
	`∑ge2kva
(
p
);

112 
	}
}

120 
	$‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

121 
boﬁ
 
öå_Êag
;

122 
	`loˇl_öå_ßve
(
öå_Êag
);

124 
pmm_m™agî
->
	`‰ì_∑ges
(
ba£
, 
n
);

126 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

127 
	`∂s_wrôe
(
u£d_∑ges
, 
	`∂s_ªad
(u£d_∑gesË- 
n
);

128 
	}
}

134 
size_t


135 
	$ƒ_‰ì_∑ges
() {

136 
size_t
 
ªt
;

137 
boﬁ
 
öå_Êag
;

138 
	`loˇl_öå_ßve
(
öå_Êag
);

140 
ªt
 = 
pmm_m™agî
->
	`ƒ_‰ì_∑ges
();

142 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

143  
ªt
;

144 
	}
}

153 
	$check_Æloc_∑ge
() {

154 
pmm_m™agî
->
	`check
();

156 
	`k¥ötf
("check_alloc_page() succeeded.\n");

157 
	}
}

163 
	$check_pgdú
() {

164 
	`as£π
(
≈age
 <
KMEMSIZE
 / 
PGSIZE
);

165 
	`as£π
(
boŸ_pgdú
 !
NULL
 && (
uöt32_t
)
	`PGOFF
(boot_pgdir) == 0);

166 
	`as£π
(
	`gë_∑ge
(
boŸ_pgdú
, 
TEST_PAGE
, 
NULL
) == NULL);

168 
Page
 *
p1
, *
p2
;

169 
p1
 = 
	`Æloc_∑ge
();

170 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p1
, 
TEST_PAGE
, 0) == 0);

172 
±e_t
 *
±ï
, 
≥rm
;

173 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
, 0)Ë!
NULL
);

174 
	`as£π
(
	`∑2∑ge
(*
±ï
Ë=
p1
);

175 
	`as£π
(
	`∑ge_ªf
(
p1
) == 1);

177 
±ï
 = &((
±e_t
 *)
	`KADDR
(
	`PTE_ADDR
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])))[1];

178 
	`as£π
(
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0Ë=
±ï
);

180 
p2
 = 
	`Æloc_∑ge
();

181 
	`±ï_unm≠
 (&
≥rm
);

182 
	`±ï_£t_u_ªad
 (&
≥rm
);

183 
	`±ï_£t_u_wrôe
 (&
≥rm
);

184 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p2
, 
TEST_PAGE
 + 
PGSIZE
, 
≥rm
) == 0);

185 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0)Ë!
NULL
);

186 
	`as£π
(
	`±ï_u_ªad
 (
±ï
));

187 
	`as£π
(
	`±ï_u_wrôe
 (
±ï
));

188 
	`as£π
(
	`±ï_u_ªad
 (&(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])));

189 
	`as£π
(
	`∑ge_ªf
(
p2
) == 1);

191 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p1
, 
TEST_PAGE
 + 
PGSIZE
, 0) == 0);

192 
	`as£π
(
	`∑ge_ªf
(
p1
) == 2);

193 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

194 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0)Ë!
NULL
);

195 
	`as£π
(
	`∑2∑ge
(*
±ï
Ë=
p1
);

196 
	`as£π
–!
	`±ï_u_ªad
 (
±ï
) );

198 
	`∑ge_ªmove
(
boŸ_pgdú
, 
TEST_PAGE
);

199 
	`as£π
(
	`∑ge_ªf
(
p1
) == 1);

200 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

202 
	`∑ge_ªmove
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
);

203 
	`as£π
(
	`∑ge_ªf
(
p1
) == 0);

204 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

206 
	`as£π
(
	`∑ge_ªf
(
	`∑2∑ge
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])) == 1);

207 
	`‰ì_∑ge
(
	`∑2∑ge
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)]));

208 
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)] = 0;

209 
	`exô_ønge
 (
boŸ_pgdú
, 
TEST_PAGE
, TEST_PAGE + 
PGSIZE
);

211 
	`k¥ötf
("check_pgdir() succeeded.\n");

212 
	}
}

	@kern-ucore/arch/or32/glue-ucore/pmm.h

1 #i‚de‡
__KERN_MM_PMM_H__


2 
	#__KERN_MM_PMM_H__


	)

4 
	~<ty≥s.h
>

5 
	~<mmu.h
>

6 
	~<memœyout.h
>

7 
	~<©omic.h
>

8 
	~<as£π.h
>

9 
	~<glue_pgm≠.h
>

11 
	#TEST_PAGE
 0x80000000

	)

13 
	spmm_m™agî
 {

14 c⁄° *
	m«me
;

15 (*
	möô
)();

16 (*
	möô_memm≠
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

17 
	mPage
 *(*
	mÆloc_∑ges
)(
size_t
 
	mn
);

18 (*
	m‰ì_∑ges
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

19 
size_t
 (*
ƒ_‰ì_∑ges
)();

20 (*
	mcheck
)();

22 
	g¥oc_°ru˘
;

24 c⁄° 
pmm_m™agî
 *pmm_manager;

25 
pde_t
 *
boŸ_pgdú
;

26 
uöçå_t
 
boŸ_¸3
;

28 
check_Æloc_∑ge
();

29 
check_pgdú
();

30 
check_boŸ_pgdú
();

32 
pmm_öô
 ();

33 
pmm_öô_≠
 ();

34 
öô_memm≠
 (
Page
 *
ba£
, 
size_t
 
n
);

35 
boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, uöçå_à
∑
, 
uöt32_t
 
≥rm
);

37 
Page
 *
Æloc_∑ges
(
size_t
 
n
);

38 *
boŸ_Æloc_∑ge
();

39 
‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
);

40 
size_t
 
ƒ_u£d_∑ges
();

41 
size_t
 
ƒ_‰ì_∑ges
();

43 
	#Æloc_∑ge
(Ë
	`Æloc_∑ges
(1)

	)

44 
	#‰ì_∑ge
(
∑ge
Ë
	`‰ì_∑ges
’age, 1)

	)

46 
pgd_t
 *
gë_pgd
’gd_à*
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

47 
pud_t
 *
gë_pud
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

48 
pmd_t
 *
gë_pmd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

49 
±e_t
 *
gë_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

50 
Page
 *
gë_∑ge
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 **
±ï_°‹e
);

51 
∑ge_ªmove
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

52 
∑ge_ªmove_±e
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 *
±ï
);

53 
∑ge_ö£π
(
pde_t
 *
pgdú
, 
Page
 *
∑ge
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

55 
Page
 *
pgdú_Æloc_∑ge
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

56 
unm≠_ønge
(
pde_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

57 
c›y_ønge
(
pde_t
 *
to
,Öde_à*
‰om
, 
uöçå_t
 
°¨t
, uöçå_à
íd
, 
boﬁ
 
sh¨e
);

59 
éb_upd©e
 (
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

60 
éb_övÆid©e
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

61 
éb_övÆid©e_u£r
 ();

62 
éb_övÆid©e_Æl
 ();

64 
lﬂd_r•0
 (
uöçå_t
 
e•0
);

65 
£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pde_t
 *
pgdú
);

66 
lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
);

67 
m≠_pgdú
 (
pde_t
 *
pgdú
);

69 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...));

71 
	`exô_ønge
(
pde_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

78 
	#PADDR
(
kva
) ({ \

79 
uöçå_t
 
__m_kva
 = (uöçå_t)(
kva
); \

80 i‡(
__m_kva
 < 
KERNBASE
) { \

81 
	`∑nic
("PADDR cÆÀd wôh invÆid kv®%08lx", 
__m_kva
); \

83 
__m_kva
 - 
KERNBASE
; \

84 
	}
})

	)

90 
	#KADDR
(
∑
) ({ \

91 
uöçå_t
 
__m_∑
 = (
∑
); \

92 
size_t
 
__m_µn
 = 
	`PPN
(
__m_∑
); \

93 i‡(
__m_µn
 >
≈age
) { \

94 
	`∑nic
("KADDR cÆÀd wôh invÆidÖ®%08lx", 
__m_∑
); \

96 (*Ë(
__m_∑
 + 
KERNBASE
); \

97 })

	)

99 
	#NEXT_PAGE
(
pg
Ë’g + 1)

	)

101 
Page
 *
∑ges
;

102 
size_t
 
≈age
;

104 
ölöe
 
µn_t


105 
	$∑ge2µn
(
Page
 *
∑ge
) {

106  
∑ge
 - 
∑ges
;

107 
	}
}

109 
ölöe
 
uöçå_t


110 
	$∑ge2∑
(
Page
 *
∑ge
) {

111  
	`∑ge2µn
(
∑ge
Ë<< 
PGSHIFT
;

112 
	}
}

114 
ölöe
 
Page
 *

115 
	$∑2∑ge
(
uöçå_t
 
∑
) {

116 i‡(
	`PPN
(
∑
Ë>
≈age
) {

117 
	`∑nic
("pa2page called with invalidÖa");

119  &
∑ges
[
	`PPN
(
∑
)];

120 
	}
}

122 
ölöe
 *

123 
	$∑ge2kva
(
Page
 *
∑ge
) {

124  
	`KADDR
(
	`∑ge2∑
(
∑ge
));

125 
	}
}

127 
ölöe
 
Page
 *

128 
	$kva2∑ge
(*
kva
) {

129  
	`∑2∑ge
(
	`PADDR
(
kva
));

130 
	}
}

132 
ölöe
 
Page
 *

133 
	$±e2∑ge
(
±e_t
 
±e
) {

134 i‡(! 
	`±ï_¥e£¡
(&
±e
)) {

135 
	`∑nic
("pte2page called with invalidÖte");

137  
	`∑2∑ge
(
	`PTE_ADDR
(
±e
));

138 
	}
}

140 
ölöe
 
Page
 *

141 
	$pde2∑ge
(
pde_t
 
pde
) {

142  
	`∑2∑ge
(
	`PDE_ADDR
(
pde
));

143 
	}
}

145 
ölöe
 
Page
 *

146 
	$pmd2∑ge
(
pmd_t
 
pmd
) {

147  
	`∑2∑ge
(
	`PMD_ADDR
(
pmd
));

148 
	}
}

150 
ölöe
 
Page
 *

151 
	$pud2∑ge
(
pud_t
 
pud
) {

152  
	`∑2∑ge
(
	`PUD_ADDR
(
pud
));

153 
	}
}

155 
ölöe
 
Page
 *

156 
	$pgd2∑ge
(
pgd_t
 
pgd
) {

157  
	`∑2∑ge
(
	`PGD_ADDR
(
pgd
));

158 
	}
}

160 
ölöe
 

161 
	$∑ge_ªf
(
Page
 *
∑ge
) {

162  
	`©omic_ªad
(&(
∑ge
->
ªf
));

163 
	}
}

165 
ölöe
 

166 
	$£t_∑ge_ªf
(
Page
 *
∑ge
, 
vÆ
) {

167 
	`©omic_£t
(&(
∑ge
->
ªf
), 
vÆ
);

168 
	}
}

170 
ölöe
 

171 
	$∑ge_ªf_öc
(
Page
 *
∑ge
) {

172  
	`©omic_add_ªtu∫
(&(
∑ge
->
ªf
), 1);

173 
	}
}

175 
ölöe
 

176 
	$∑ge_ªf_dec
(
Page
 *
∑ge
) {

177  
	`©omic_sub_ªtu∫
(&(
∑ge
->
ªf
), 1);

178 
	}
}

180 
ölöe
 
pgd_t
*

181 
	$öô_pgdú_gë
() {

182  
boŸ_pgdú
;

183 
	}
}

185 *
boŸ°ack
, *
boŸ°ackt›
;

	@kern-ucore/arch/or32/glue-ucore/trap.c

1 
	~<å≠.h
>

2 
	~<ty≥s.h
>

3 
	~<¨ch.h
>

4 
	~<u¨t.h
>

5 
	~<bﬂrd.h
>

6 
	~<˛ock.h
>

7 
	~<°dio.h
>

8 
	~<picúq.h
>

9 
	~<öå.h
>

10 
	~<mmu.h
>

11 
	~<pmm.h
>

12 
	~<memœyout.h
>

13 
	~<¥oc.h
>

14 
	~<vmm.h
>

15 
	~<ide.h
>

16 
	~<sysˇŒ.h
>

17 
	~<îr‹.h
>

18 
	~<sched.h
>

19 
	~<kio.h
>

22 
	$bus_îr‹_ex˚±i⁄
 (
å≠‰ame
 *
tf
)

24 
	`¥öt_å≠‰ame
 (
tf
);

25 
	`k¥ötf
 ("panic inássembly.\n");

27 
	}
}

29 
ölöe
 

30 
	$¥öt_pgÁu…
(
uöçå_t
 
addªss
, 
uöt32_t
 
îr‹_code
) {

36 
	`k¥ötf
("∑gêÁu…áà0x%08x: %c/%¯[%s].\n", 
addªss
,

37 (
îr‹_code
 & 4) ? 'U' : 'K',

38 (
îr‹_code
 & 2) ? 'W' : ((error_code & 8) ? 'E' : 'R'),

39 (
îr‹_code
 & 1) ? "protection fault" : "noÖage found");

40 
	}
}

43 
	$do_pgm¨k
 (
mm_°ru˘
 *
mm
, 
uöt32_t
 
îr‹_code
, 
uöçå_t
 
addªss
)

45 
uöt32_t
 
wrôe_acc
 = (
îr‹_code
 & 2) ? 1 : 0;

46 
vma_°ru˘
 *
vma
 = 
	`föd_vma
(
mm
, 
addªss
);

47 i‡(
vma
 =
NULL
 || vma->
vm_°¨t
 > 
addªss
) {

48 
Áûed
;

51 
±e_t
* 
±ï
 = 
	`gë_±e
 (
mm
->
pgdú
, 
addªss
, 0);

52 i‡(
±ï
 == 0) {

53 
	`k¥ötf
 ("pteÇotÉxists\n");

54 
Áûed
;

56 
uöt32_t
 
wrôe_≥rm
 = 0;

57 i‡(
îr‹_code
 & 0x4) {

58 
wrôe_≥rm
 = 
	`±ï_u_wrôe
 (
±ï
);

60 
wrôe_≥rm
 = 
	`±ï_s_wrôe
 (
±ï
);

62 i‡(
wrôe_acc
 && (
vma
->
vm_Êags
 & 
VM_WRITE
Ë&& !
wrôe_≥rm
) {

66 i‡((
	`do_pgÁu…
 (
mm
, 
îr‹_code
, 
addªss
)) != 0) {

67 
	`k¥ötf
 ("shared memory handle failed\n");

68 
Áûed
;

72 
	`±ï_£t_ac˚s£d
 (
±ï
);

73 
	`±ï_£t_≥rm
 (
±ï
, 
PTE_SPR_R
 | 
PTE_USER_R
 | 
PTE_E
);

74 i‡(
wrôe_acc
) {

75 
	`±ï_£t_dúty
 (
±ï
);

76 
	`±ï_£t_≥rm
 (
±ï
, 
PTE_SPR_W
 | 
PTE_USER_W
);

79 
	`éb_upd©e
 (
mm
->
pgdú
, 
addªss
);

83 
Áûed
:

85 
	}
}

88 
	$do_∑ge_Áu…
 (
å≠‰ame
 *
tf
, 
uöçå_t
 
addªss
, 
uöt32_t
 
ve˘‹
, uöt32_à
wrôe_acc
)

90 
îr
;

92 
mm_°ru˘
 *
check_mm_°ru˘
;

93 
mm_°ru˘
 *
mm
;

94 i‡(
check_mm_°ru˘
 !
NULL
) {

95 
	`as£π
(
	`∂s_ªad
(
cuºít
Ë=∂s_ªad(
idÀ¥oc
));

96 
mm
 = 
check_mm_°ru˘
;

98 i‡(
	`∂s_ªad
(
cuºít
Ë=
NULL
) {

99 
	`¥öt_å≠‰ame
(
tf
);

100 
	`∑nic
("unhandledÖage fault.\n");

102 
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

105 
±e_t
 *
±ï
 = 
	`gë_±e
 (
mm
->
pgdú
, 
addªss
, 0);

107 
uöt32_t
 
îr‹_code
 = 0;

108 i‡(! (
tf
->
§
 & 
SPR_SR_SM
))

109 
îr‹_code
 |= 0x4;

110 i‡(
wrôe_acc
 & 0x1)

111 
îr‹_code
 |= 0x2;

112 i‡(
wrôe_acc
 & 0x2)

113 
îr‹_code
 |= 0x8;

114 i‡(
±ï
 =0 || !(*±ï & 
PTE_P
)) {

116 
îr
 = 
	`do_pgÁu…
 (
mm
, 
îr‹_code
, 
addªss
);

118 
îr‹_code
 |= 0x1;

119 
îr
 = 
	`do_pgm¨k
 (
mm
, 
îr‹_code
, 
addªss
);

122  
îr
;

123 
	}
}

126 
	$tick_timî_ex˚±i⁄
 ()

128 
ticks
 ++;

131 
	`as£π
 (
	`∂s_ªad
(
cuºít
Ë!
NULL
);

132 
	`run_timî_li°
 ();

135 
	`mt•r
 (
SPR_TTMR
, 
	`mf•r
 (SPR_TTMRË& (~
SPR_TTMR_IP
));

136 
	`mt•r
 (
SPR_PICSR
, 
	`mf•r
 (SPR_PICSR) & (~0x8));

137 
	}
}

143 
uöt32_t


144 
	$pic_gë_úq
 ()

146 
úq
;

147 
mask
;

149 
≥nd
 = 
	`mf•r
(
SPR_PICSR
) & 0xfffffffc;

151 i‡(
≥nd
 & 0x0000ffff) {

152 i‡(
≥nd
 & 0x000000ff) {

153 i‡(
≥nd
 & 0x0000000f) {

154 
mask
 = 0x00000001;

155 
úq
 = 0;

157 
mask
 = 0x00000010;

158 
úq
 = 4;

161 i‡(
≥nd
 & 0x00000f00) {

162 
mask
 = 0x00000100;

163 
úq
 = 8;

165 
mask
 = 0x00001000;

166 
úq
 = 12;

169 } i‡(
≥nd
 & 0xffff0000) {

170 i‡(
≥nd
 & 0x00ff0000) {

171 i‡(
≥nd
 & 0x000f0000) {

172 
mask
 = 0x00010000;

173 
úq
 = 16;

175 
mask
 = 0x00100000;

176 
úq
 = 20;

179 i‡(
≥nd
 & 0x0f000000) {

180 
mask
 = 0x01000000;

181 
úq
 = 24;

183 
mask
 = 0x10000000;

184 
úq
 = 28;

191 ! (
mask
 & 
≥nd
)) {

192 
mask
 <<=1;

193 
úq
++;

197  
úq
;

198 
	}
}

200 
uöt32_t


201 
	$u¨t_úq_h™dÀr
 ()

203 
	`dev_°dö_wrôe
 (
c
);

204 
uöt8_t
 
c_iú
;

206 
	`dev_°dö_wrôe
 (
	`u¨t_gëc
 ());

209 
c_iú
 = 
	`REG8
 (
UART_BASE
 + 
UART_IIR
);

210 } (
c_iú
 & 
UART_IIR_NO_INT
) == 0);

212 
	`mt•r
 (
SPR_PICSR
, 
	`mf•r
 (SPR_PICSR) & (~0x4));

215 
	}
}

218 
	$exã∫Æ_ex˚±i⁄
 ()

220 
uöt32_t
 
úq
 = 
	`pic_gë_úq
 ();

221 
úq
) {

222 
IRQ_UART
:

223 
	`u¨t_úq_h™dÀr
 ();

226 
	`k¥ötf
 ("Unknow¿úq: 0x%x\n", 
úq
);

228 
	}
}

230 
boﬁ


231 
	$å≠_ö_kî√l
(
å≠‰ame
 *
tf
) {

232  (
tf
->
§
 & 
SPR_SR_SM
);

233 
	}
}

236 
	$¥öt_å≠‰ame
(
å≠‰ame
 *
tf
) {

237 
	`k¥ötf
 ("EPCR: %08x\n", 
tf
->
pc
);

238 
	`k¥ötf
 ("ESR: %08x\n", 
tf
->
§
);

239 
	`k¥ötf
 ("EEAR: %08x\n", 
tf
->
ó
);

240 
	`k¥ötf
 ("GPR01: %08x\n", 
tf
->
•
);

241 
	`¥öt_ªgs
 (&(
tf
->
ªgs
));

242 
	}
}

245 
	$¥öt_ªgs
(
pushªgs
 *
ªgs
) {

246 
i
, 
j
;

247 
i
 = 2, 
j
 = 1; i < 32; i ++, j ++) {

248 
	`k¥ötf
 ("GPR%02d: %08x", 
i
, 
ªgs
->
g¥s
[i-2]);

249 i‡(
j
 < 4)

250 
	`k¥ötf
 ("\t");

252 
	`k¥ötf
 ("\n");

253 
j
 = 0;

256 
	`k¥ötf
 ("\n");

257 
	}
}

260 
	$å≠_di•©ch
 (
å≠‰ame
 *
tf
, 
uöçå_t
 
addªss
, 
uöt32_t
 
ve˘‹
, uöt32_à
wrôe_acc
)

262 
ªt
;

264 
ve˘‹
) {

265 
EXCEPTION_BUS
:

266 
	`bus_îr‹_ex˚±i⁄
 (
tf
);

268 
EXCEPTION_DPAGE_FAULT
:

269 
EXCEPTION_IPAGE_FAULT
:

270 i‡((
ªt
 = 
	`do_∑ge_Áu…
 (
tf
, 
addªss
, 
ve˘‹
, 
wrôe_acc
)) != 0) {

271 
	`¥öt_å≠‰ame
 (
tf
);

272 i‡(
	`∂s_ªad
(
cuºít
Ë=
NULL
) {

273 
	`∑nic
 ("h™dÀÖgÁu… faûed %e.\n", 
ªt
);

275 i‡(
	`å≠_ö_kî√l
 (
tf
)) {

276 
	`∑nic
 ("h™dÀÖgÁu… faûed i¿kî√»mode. %e\n", 
ªt
);

278 
	`k¥ötf
 ("killed by kernel.\n");

279 
	`do_exô
 (-
E_KILLED
);

283 
EXCEPTION_TIMER
:

284 
	`tick_timî_ex˚±i⁄
 ();

286 
EXCEPTION_EXTERNAL
:

287 
	`exã∫Æ_ex˚±i⁄
 ();

289 
EXCEPTION_SYSCALL
:

290 
	`sysˇŒ
 ();

293 
	`¥öt_å≠‰ame
 (
tf
);

294 i‡(
	`∂s_ªad
(
cuºít
Ë!
NULL
) {

295 
	`k¥ötf
 ("unhandledÉxception\n");

296 
	`do_exô
 (-
E_KILLED
);

298 
	`∑nic
 ("unh™dÀdÉx˚±i⁄ i¿kî√l: 0x%x\n", 
ve˘‹
);

300 
	}
}

303 
	$å≠
 (
å≠‰ame
 *
tf
, 
uöçå_t
 
addªss
, 
uöt32_t
 
ve˘‹
, uöt32_à
wrôe_acc
)

305 
tf
->
ó
 = 
addªss
;

306 i‡(
	`∂s_ªad
(
cuºít
Ë=
NULL
) {

307 
	`å≠_di•©ch
 (
tf
, 
addªss
, 
ve˘‹
, 
wrôe_acc
);

309 
å≠‰ame
 *
Ÿf
 = 
	`∂s_ªad
(
cuºít
)->
tf
;

310 
	`∂s_ªad
(
cuºít
)->
tf
 =Åf;

312 
boﬁ
 
ö_kî√l
 = 
	`å≠_ö_kî√l
 (
tf
);

314 
	`å≠_di•©ch
 (
tf
, 
addªss
, 
ve˘‹
, 
wrôe_acc
);

316 
	`∂s_ªad
(
cuºít
)->
tf
 = 
Ÿf
;

317 i‡(!
ö_kî√l
) {

318 
	`may_kûÀd
();

319 i‡(
	`∂s_ªad
(
cuºít
)->
√ed_ªsched
) {

320 
	`scheduÀ
 ();

324 
	}
}

	@kern-ucore/arch/or32/glue-ucore/trap.h

1 #i‚de‡
__GLUE_UCORE_TRAP_H__


2 
	#__GLUE_UCORE_TRAP_H__


	)

4 
	~<glue_öå.h
>

6 #i‚de‡
__ASSEMBLER__


8 
	~<ty≥s.h
>

10 
¥öt_å≠‰ame
(
å≠‰ame
 *
tf
);

11 
¥öt_ªgs
(
pushªgs
 *
ªgs
);

12 
boﬁ
 
å≠_ö_kî√l
(
å≠‰ame
 *
tf
);

	@kern-ucore/arch/or32/init/init.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<c⁄sﬁe.h
>

5 
	~<gpio.h
>

6 
	~<picúq.h
>

7 
	~<å≠.h
>

8 
	~<˛ock.h
>

9 
	~<öå.h
>

10 
	~<mp.h
>

11 
	~<pmm.h
>

12 
	~<vmm.h
>

13 
	~<ide.h
>

14 
	~<fs.h
>

15 
	~<sw≠.h
>

16 
	~<¥oc.h
>

17 
	~<sched.h
>

18 
	~<¨ch.h
>

19 
	~<kio.h
>

21 
	$kîn_öô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

24 
	$kîn_öô
() {

25 
ed©a
[], 
íd
[];

26 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

28 
	`c⁄s_öô
();

30 c⁄° *
mesßge
 = "(THU.CST) os isÜoading ...";

31 
	`k¥ötf
 ("%s\n\n", 
mesßge
);

34 
	`mp_öô
 ();

36 
	`pmm_öô
();

37 
	`pmm_öô_≠
 ();

39 
	`pic_öô
();

41 
	`vmm_öô
();

42 
	`sched_öô
();

43 
	`¥oc_öô
();

44 
	`sync_öô
();

46 
	`ide_öô
();

47 
	`sw≠_öô
();

48 
	`fs_öô
();

50 
	`˛ock_öô
();

51 
	`öå_íabÀ
();

53 
	`˝u_idÀ
();

54 
	}
}

	@kern-ucore/arch/or32/mm/buddy_pmm.c

1 
	~<pmm.h
>

2 
	~<li°.h
>

3 
	~<°rög.h
>

4 
	~<buddy_pmm.h
>

5 
	~<°dio.h
>

9 
	#MAX_ORDER
 10

	)

10 
‰ì_¨ó_t
 
	g‰ì_¨ó
[
MAX_ORDER
 + 1];

13 
	#‰ì_li°
(
x
Ë(
‰ì_¨ó
[x].
‰ì_li°
)

	)

14 
	#ƒ_‰ì
(
x
Ë(
‰ì_¨ó
[x].
ƒ_‰ì
)

	)

16 
	#MAX_ZONE_NUM
 10

	)

17 
	sZ⁄e
 {

18 
Page
 *
	mmem_ba£
;

19 } 
	gz⁄es
[
MAX_ZONE_NUM
] = {{
NULL
}};

23 
	$buddy_öô
() {

24 
i
;

25 
i
 = 0; i <
MAX_ORDER
; i ++) {

26 
	`li°_öô
(&
	`‰ì_li°
(
i
));

27 
	`ƒ_‰ì
(
i
) = 0;

29 
	}
}

33 
	$buddy_öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

34 
z⁄e_num
 = 0;

35 
	`as£π
(
n
 > 0 && 
z⁄e_num
 < 
MAX_ZONE_NUM
);

36 
Page
 *
p
 = 
ba£
;

37 ; 
p
 !
ba£
 + 
n
;Ö ++) {

38 
	`as£π
(
	`PageRe£rved
(
p
));

39 
p
->
Êags
 =Ö->
¥›îty
 = 0;

40 
p
->
z⁄e_num
 = zone_num;

41 
	`£t_∑ge_ªf
(
p
, 0);

43 
p
 = 
z⁄es
[
z⁄e_num
 ++].
mem_ba£
 = 
ba£
;

44 
size_t
 
‹dî
 = 
MAX_ORDER
, 
‹dî_size
 = (1 << order);

45 
n
 != 0) {

46 
n
 >
‹dî_size
) {

47 
p
->
¥›îty
 = 
‹dî
;

48 
	`SëPagePr›îty
(
p
);

49 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
p
->
∑ge_lök
));

50 
n
 -
‹dî_size
, 
p
 += order_size;

51 
	`ƒ_‰ì
(
‹dî
) ++;

53 
‹dî
 --;

54 
‹dî_size
 >>= 1;

56 
	}
}

59 
ölöe
 
size_t


60 
	$gë‹dî
(
size_t
 
n
) {

61 
size_t
 
‹dî
, 
‹dî_size
;

62 
‹dî
 = 0, 
‹dî_size
 = 1; ordî <
MAX_ORDER
; order ++, order_size <<= 1) {

63 i‡(
n
 <
‹dî_size
) {

64  
‹dî
;

67 
	`∑nic
("gë‹dî faûed. %d\n", 
n
);

68 
	}
}

72 
ölöe
 
Page
 *

73 
	$buddy_Æloc_∑ges_sub
(
size_t
 
‹dî
) {

74 
	`as£π
(
‹dî
 <
MAX_ORDER
);

75 
size_t
 
cur_‹dî
;

76 
cur_‹dî
 = 
‹dî
; cur_‹dî <
MAX_ORDER
; cur_order ++) {

77 i‡(!
	`li°_em±y
(&
	`‰ì_li°
(
cur_‹dî
))) {

78 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&
	`‰ì_li°
(
cur_‹dî
));

79 
Page
 *
∑ge
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

80 
	`ƒ_‰ì
(
cur_‹dî
) --;

81 
	`li°_dñ
(
À
);

82 
size_t
 
size
 = 1 << 
cur_‹dî
;

83 
cur_‹dî
 > 
‹dî
) {

84 
cur_‹dî
 --;

85 
size
 >>= 1;

86 
Page
 *
buddy
 = 
∑ge
 + 
size
;

87 
buddy
->
¥›îty
 = 
cur_‹dî
;

88 
	`SëPagePr›îty
(
buddy
);

89 
	`ƒ_‰ì
(
cur_‹dî
) ++;

90 
	`li°_add
(&
	`‰ì_li°
(
cur_‹dî
), &(
buddy
->
∑ge_lök
));

92 
	`CÀ¨PagePr›îty
(
∑ge
);

93  
∑ge
;

96  
NULL
;

97 
	}
}

100 
Page
 *

101 
	$buddy_Æloc_∑ges
(
size_t
 
n
) {

102 
	`as£π
(
n
 > 0);

103 
size_t
 
‹dî
 = 
	`gë‹dî
(
n
), 
‹dî_size
 = (1 << order);

104 
Page
 *
∑ge
 = 
	`buddy_Æloc_∑ges_sub
(
‹dî
);

105 i‡(
∑ge
 !
NULL
 && 
n
 !
‹dî_size
) {

106 
	`‰ì_∑ges
(
∑ge
 + 
n
, 
‹dî_size
 -Ç);

108  
∑ge
;

109 
	}
}

113 
ölöe
 
boﬁ


114 
	$∑ge_is_buddy
(
Page
 *
∑ge
, 
size_t
 
‹dî
, 
z⁄e_num
) {

115 i‡(
	`∑ge2µn
(
∑ge
Ë< 
≈age
) {

116 i‡(
∑ge
->
z⁄e_num
 == zone_num) {

117  !
	`PageRe£rved
(
∑ge
Ë&& 
	`PagePr›îty
’ageË&&Öage->
¥›îty
 =
‹dî
;

121 
	}
}

124 
ölöe
 
µn_t


125 
	$∑ge2idx
(
Page
 *
∑ge
) {

126  
∑ge
 - 
z⁄es
[∑ge->
z⁄e_num
].
mem_ba£
;

127 
	}
}

130 
ölöe
 
Page
 *

131 
	$idx2∑ge
(
z⁄e_num
, 
µn_t
 
idx
) {

132  
z⁄es
[
z⁄e_num
].
mem_ba£
 + 
idx
;

133 
	}
}

138 
	$buddy_‰ì_∑ges_sub
(
Page
 *
ba£
, 
size_t
 
‹dî
) {

139 
µn_t
 
buddy_idx
, 
∑ge_idx
 = 
	`∑ge2idx
(
ba£
);

140 
	`as£π
((
∑ge_idx
 & ((1 << 
‹dî
) - 1)) == 0);

141 
Page
 *
p
 = 
ba£
;

142 ; 
p
 !
ba£
 + (1 << 
‹dî
);Ö ++) {

143 
	`as£π
(!
	`PageRe£rved
(
p
Ë&& !
	`PagePr›îty
(p));

144 
p
->
Êags
 = 0;

145 
	`£t_∑ge_ªf
(
p
, 0);

147 
z⁄e_num
 = 
ba£
->zone_num;

148 
‹dî
 < 
MAX_ORDER
) {

149 
buddy_idx
 = 
∑ge_idx
 ^ (1 << 
‹dî
);

150 
Page
 *
buddy
 = 
	`idx2∑ge
(
z⁄e_num
, 
buddy_idx
);

151 i‡(!
	`∑ge_is_buddy
(
buddy
, 
‹dî
, 
z⁄e_num
)) {

154 
	`ƒ_‰ì
(
‹dî
) --;

155 
	`li°_dñ
(&(
buddy
->
∑ge_lök
));

156 
	`CÀ¨PagePr›îty
(
buddy
);

157 
∑ge_idx
 &
buddy_idx
;

158 
‹dî
 ++;

160 
Page
 *
∑ge
 = 
	`idx2∑ge
(
z⁄e_num
, 
∑ge_idx
);

161 
∑ge
->
¥›îty
 = 
‹dî
;

162 
	`SëPagePr›îty
(
∑ge
);

163 
	`ƒ_‰ì
(
‹dî
) ++;

164 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
∑ge
->
∑ge_lök
));

165 
	}
}

169 
	$buddy_‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

170 
	`as£π
(
n
 > 0);

171 i‡(
n
 == 1) {

172 
	`buddy_‰ì_∑ges_sub
(
ba£
, 0);

175 
size_t
 
‹dî
 = 0, 
‹dî_size
 = 1;

176 
n
 >
‹dî_size
) {

177 
	`as£π
(
‹dî
 <
MAX_ORDER
);

178 i‡((
	`∑ge2idx
(
ba£
Ë& 
‹dî_size
) != 0) {

179 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

180 
ba£
 +
‹dî_size
;

181 
n
 -
‹dî_size
;

183 
‹dî
 ++;

184 
‹dî_size
 <<= 1;

186 
n
 != 0) {

187 
n
 < 
‹dî_size
) {

188 
‹dî
 --;

189 
‹dî_size
 >>= 1;

191 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

192 
ba£
 +
‹dî_size
;

193 
n
 -
‹dî_size
;

196 
	}
}

199 
size_t


200 
	$buddy_ƒ_‰ì_∑ges
() {

201 
size_t
 
ªt
 = 0, 
‹dî
 = 0;

202 ; 
‹dî
 <
MAX_ORDER
; order ++) {

203 
ªt
 +
	`ƒ_‰ì
(
‹dî
) * (1 << order);

205  
ªt
;

206 
	}
}

210 
	$buddy_check
() {

212 
i
;

213 
cou¡
 = 0, 
tŸÆ
 = 0;

214 
i
 = 0; i <
MAX_ORDER
; i ++) {

215 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

216 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

217 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

218 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

219 
cou¡
 ++, 
tŸÆ
 +(1 << 
i
);

222 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

224 
Page
 *
p0
 = 
	`Æloc_∑ges
(8), *
buddy
 =áŒoc_∑ges(8), *
p1
;

226 
	`as£π
(
p0
 !
NULL
);

227 
	`as£π
((
	`∑ge2idx
(
p0
) & 7) == 0);

228 
	`as£π
(!
	`PagePr›îty
(
p0
));

230 
li°_íåy_t
 
‰ì_li°s_°‹e
[
MAX_ORDER
 + 1];

231 
ƒ_‰ì_°‹e
[
MAX_ORDER
 + 1];

233 
i
 = 0; i <
MAX_ORDER
; i ++) {

234 
‰ì_li°s_°‹e
[
i
] = 
	`‰ì_li°
(i);

235 
	`li°_öô
(&
	`‰ì_li°
(
i
));

236 
	`as£π
(
	`li°_em±y
(&
	`‰ì_li°
(
i
)));

237 
ƒ_‰ì_°‹e
[
i
] = 
	`ƒ_‰ì
(i);

238 
	`ƒ_‰ì
(
i
) = 0;

241 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

242 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
);

243 
	`‰ì_∑ges
(
p0
, 8);

244 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 8);

245 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

246 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
 && !
	`PagePr›îty
’0Ë&& 
	`ƒ_‰ì_∑ges
() == 2);

248 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
 &&Ö1 =
p0
 + 6);

249 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

251 
	`‰ì_∑ges
(
p0
, 3);

252 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 1);

253 
	`as£π
(
	`PagePr›îty
(
p0
 + 2Ë&&Ö0[2].
¥›îty
 == 0);

255 
	`‰ì_∑ges
(
p0
 + 3, 3);

256 
	`‰ì_∑ges
(
p1
, 2);

258 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

260 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
);

261 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
);

262 
	`‰ì_∑ges
(
p0
 + 4, 2);

263 
	`‰ì_∑ges
(
p1
, 2);

265 
p1
 = 
p0
 + 4;

266 
	`as£π
(
	`PagePr›îty
(
p1
Ë&&Ö1->
¥›îty
 == 2);

267 
	`‰ì_∑ges
(
p0
, 4);

268 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

270 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(8)Ë!
NULL
);

271 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
 && 
	`ƒ_‰ì_∑ges
() == 0);

273 
i
 = 0; i <
MAX_ORDER
; i ++) {

274 
	`‰ì_li°
(
i
Ë
‰ì_li°s_°‹e
[i];

275 
	`ƒ_‰ì
(
i
Ë
ƒ_‰ì_°‹e
[i];

278 
	`‰ì_∑ges
(
p0
, 8);

279 
	`‰ì_∑ges
(
buddy
, 8);

281 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

283 
i
 = 0; i <
MAX_ORDER
; i ++) {

284 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

285 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

286 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

287 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

288 
cou¡
 --, 
tŸÆ
 -(1 << 
i
);

291 
	`as£π
(
cou¡
 == 0);

292 
	`as£π
(
tŸÆ
 == 0);

293 
	}
}

296 c⁄° 
pmm_m™agî
 
	gbuddy_pmm_m™agî
 = {

297 .
«me
 = "buddy_pmm_manager",

298 .
	göô
 = 
buddy_öô
,

299 .
	göô_memm≠
 = 
buddy_öô_memm≠
,

300 .
	gÆloc_∑ges
 = 
buddy_Æloc_∑ges
,

301 .
	g‰ì_∑ges
 = 
buddy_‰ì_∑ges
,

302 .
	gƒ_‰ì_∑ges
 = 
buddy_ƒ_‰ì_∑ges
,

303 .
	gcheck
 = 
buddy_check
,

	@kern-ucore/arch/or32/mm/buddy_pmm.h

1 #i‚de‡
__KERN_MM_BUDDY_PMM_H__


2 
	#__KERN_MM_BUDDY_PMM_H__


	)

4 
	~<pmm.h
>

6 c⁄° 
pmm_m™agî
 
buddy_pmm_m™agî
;

	@kern-ucore/arch/or32/mm/memlayout.h

1 #i‚de‡
__GLUE_UCORE_MEMLAYOUT_H__


2 
	#__GLUE_UCORE_MEMLAYOUT_H__


	)

4 
	~<glue_memœyout.h
>

	@kern-ucore/arch/or32/mm/pmm.c

1 
	~<pmm.h
>

2 
	~<mmu.h
>

3 
	~<ty≥s.h
>

4 
	~<°dio.h
>

5 
	~<buddy_pmm.h
>

6 
	~<memœyout.h
>

7 
	~<bﬂrd.h
>

8 
	~<sync.h
>

9 
	~<¶ab.h
>

10 
	~<¥oc.h
>

11 
	~<°rög.h
>

12 
	~<kio.h
>

14 
±e_t
 * c⁄° 
	gv±
 = (±e_à*)
VPT
;

15 
pde_t
 * c⁄° 
	gvpd
 = (pde_à*)
PGADDR
(
PDX
(
VPT
), PDX(VPT), 0);;

18 *
	gboŸ°ack
 = (*)0x0;

20 
uöçå_t
 
	gboŸ_pgdú_∑
;

21 
uöçå_t
 
	gcuºít_pgdú_∑
;

24 
	$éb_övÆid©e_Æl
 ()

26 
boﬁ
 
öå_Êag
;

28 
	`loˇl_öå_ßve
 (
öå_Êag
);

29 
i
;

30 
i
 = 0; i < 
NR_SETS
; i++) {

31 
	`mt•r
 (
	`SPR_DTLBMR_BASE
(0Ë+ 
i
, 0);

32 
	`mt•r
 (
	`SPR_ITLBMR_BASE
(0Ë+ 
i
, 0);

33 
	`asm
 ("l.nop;l.nop;");

35 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

36 
	}
}

44 
	$lﬂd_r•0
(
uöçå_t
 
e•0
) {

45 
	}
}

51 
	$£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pde_t
 *
pgdú
) {

52 
	`as£π
 (
¥oc
 !
NULL
);

53 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_SPR_R
 | 
PTE_SPR_W
 | 
PTE_A
 | 
PTE_D
;

54 
¥oc
->
¸3
 = 
	`PADDR
 (
pgdú
);

55 
	}
}

61 
	$lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
) {

62 i‡(
¥oc
 !
NULL
)

63 
cuºít_pgdú_∑
 = 
¥oc
->
¸3
;

65 
cuºít_pgdú_∑
 = 
boŸ_pgdú_∑
;

66 
	`éb_övÆid©e_Æl
 ();

67 
	}
}

73 
	$m≠_pgdú
 (
pde_t
 *
pgdú
) {

74 
	}
}

78 
	$öô_pmm_m™agî
() {

79 
pmm_m™agî
 = &
buddy_pmm_m™agî
;

80 
	`k¥ötf
("mem‹y m™agmít: %s\n", 
pmm_m™agî
->
«me
);

81 
pmm_m™agî
->
	`öô
();

82 
	}
}

85 
	$∑ge_öô
() {

86 
i
;

106 
íd
[];

108 
≈age
 = 
RAM_SIZE
 / 
PGSIZE
;

109 
∑ges
 = (
Page
 *)
	`ROUNDUP
((*)
íd
, 
PGSIZE
);

111 
i
 = 0; i < 
≈age
; i ++) {

112 
	`SëPageRe£rved
(
∑ges
 + 
i
);

115 
uöçå_t
 
‰ìmem
 = 
	`PADDR
((uöçå_t)
∑ges
 + (
Page
Ë* 
≈age
);

116 
uöt32_t
 
‰ì_begö
 = 
	`ROUNDUP
(
‰ìmem
, 
PGSIZE
), 
‰ì_íd
 = 
RAM_SIZE
;

117 
	`öô_memm≠
 (
	`∑2∑ge
(
‰ì_begö
), (
‰ì_íd
 - fªe_begöË/ 
PGSIZE
);

119 
	`k¥ötf
 ("‰ì mem‹y: [0x%x, 0x%x)\n", 
‰ì_begö
, 
‰ì_íd
);

139 
	}
}

145 
	$íabÀ_∑gög
() {

147 
__po°_boŸ_déb_miss
;

148 
__po°_boŸ_ôlb_miss
;

150 
uöt32_t
 *
déb_h™dÀr
 = (uint32_t*)(0x908);

151 
uöt32_t
 *
ôlb_h™dÀr
 = (uint32_t*)(0xa08);

153 *
déb_h™dÀr
 = ((
uöt32_t
)&
__po°_boŸ_déb_miss
 - (uint32_t)dtlb_handler) >> 2;

154 *
ôlb_h™dÀr
 = ((
uöt32_t
)&
__po°_boŸ_ôlb_miss
 - (uint32_t)itlb_handler) >> 2;

157 
	`éb_övÆid©e_Æl
 ();

158 
	}
}

163 
	$pmm_öô
() {

164 
	`öô_pmm_m™agî
 ();

165 
	`∑ge_öô
 ();

167 #i‚de‡
NOCHECK


171 
boŸ_pgdú
 = 
	`boŸ_Æloc_∑ge
 ();

172 
	`mem£t
 (
boŸ_pgdú
, 0, 
PGSIZE
);

173 
boŸ_pgdú_∑
 = 
	`PADDR
 (
boŸ_pgdú
);

174 
cuºít_pgdú_∑
 = 
boŸ_pgdú_∑
;

176 #i‚de‡
NOCHECK


180 
	`°©ic_as£π
(
KERNBASE
 % 
PTSIZE
 =0 && 
KERNTOP
 % PTSIZE == 0);

182 
boŸ_pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
(boŸ_pgdúË| 
PTE_P
 | 
PTE_SPR_R
 | 
PTE_SPR_W
 | 
PTE_A
 | 
PTE_D
;

183 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
, 
KERNBASE
, 
RAM_SIZE
, 0, 
PTE_SPR_R
 | 
PTE_SPR_W
 | 
PTE_A
 | 
PTE_D
);

185 
	`íabÀ_∑gög
 ();

186 #i‚de‡
NOCHECK


190 
	`¥öt_pgdú
 (
k¥ötf
);

192 
	`¶ab_öô
 ();

193 
	}
}

199 
	$éb_upd©e
 (
pde_t
 *
pgdú
, 
uöçå_t
 
œ
) {

200 
uöt32_t
 
£t
 = (
œ
 >> 
PGSHIFT
Ë& (
NR_SETS
 - 1);

201 
	`mt•r
 (
	`SPR_DTLBMR_BASE
(0Ë+ 
£t
, 0);

202 
	`mt•r
 (
	`SPR_ITLBMR_BASE
(0Ë+ 
£t
, 0);

203 
	`asm
 ("l.nop;l.nop;");

204 
	}
}

207 
	$éb_övÆid©e
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
) {

208 
uöt32_t
 
£t
 = (
œ
 >> 
PGSHIFT
Ë& (
NR_SETS
 - 1);

209 
	`mt•r
 (
	`SPR_DTLBMR_BASE
(0Ë+ 
£t
, 0);

210 
	`mt•r
 (
	`SPR_ITLBMR_BASE
(0Ë+ 
£t
, 0);

211 
	`asm
 ("l.nop;l.nop;");

212 
	}
}

215 
	$check_boŸ_pgdú
() {

216 
±e_t
 *
±ï
;

217 
i
;

218 
i
 = 0; i < 
≈age
; i +
PGSIZE
) {

219 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, (
uöçå_t
)
	`KADDR
(
i
), 0)Ë!
NULL
);

220 
	`as£π
(
	`PTE_ADDR
(*
±ï
Ë=
i
);

223 
	`as£π
(
	`PDE_ADDR
(
boŸ_pgdú
[
	`PDX
(
VPT
)]Ë=
	`PADDR
(boot_pgdir));

225 
	`as£π
(
boŸ_pgdú
[0] == 0);

227 
Page
 *
p
;

228 
p
 = 
	`Æloc_∑ge
();

229 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 0x100, 
PTE_SPR_W
 | 
PTE_SPR_R
 | 
PTE_A
 | 
PTE_D
) == 0);

230 
	`as£π
(
	`∑ge_ªf
(
p
) == 1);

231 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 0x100 + 
PGSIZE
, 
PTE_SPR_W
 | 
PTE_SPR_R
 | 
PTE_A
 | 
PTE_D
) == 0);

232 
	`as£π
(
	`∑ge_ªf
(
p
) == 2);

234 c⁄° *
°r
 = "ucore: Hello world!!";

235 
	`°r˝y
((*)0x100, 
°r
);

237 
	`as£π
(
	`°rcmp
((*)0x100, (*)(0x100 + 
PGSIZE
)) == 0);

239 *(*)(
	`∑ge2kva
(
p
) + 0x100) = '\0';

240 
	`as£π
(
	`°æí
((const *)0x100) == 0);

242 
	`‰ì_∑ge
(
p
);

243 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PDE_ADDR
(
boŸ_pgdú
[0])));

244 
boŸ_pgdú
[0] = 0;

246 
	`k¥ötf
("check_boot_pgdir() succeeded!\n");

247 
	}
}

251 
	$≥rm2°r
(
≥rm
) {

252 
°r
[6];

253 
°r
[0] = (
≥rm
 & 
PTE_E
) ? 'E' : '-';

254 
°r
[1] = (
≥rm
 & 
PTE_SPR_R
) ? 'R' : '-';

255 
°r
[2] = (
≥rm
 & 
PTE_SPR_W
) ? 'W' : '-';

256 
°r
[3] = (
≥rm
 & 
PTE_USER_R
) ? 'r' : '-';

257 
°r
[4] = (
≥rm
 & 
PTE_USER_W
) ? 'w' : '-';

258 
°r
[5] = '\0';

259  
°r
;

260 
	}
}

274 
	$gë_pgèbÀ_ôems
(
size_t
 
À·
, size_à
right
, size_à
°¨t
, 
uöçå_t
 *
èbÀ
, size_à*
À·_°‹e
, size_à*
right_°‹e
) {

275 i‡(
°¨t
 >
right
) {

278 
°¨t
 < 
right
 && !(
èbÀ
[°¨t] & 
PTE_P
)) {

279 
°¨t
 ++;

281 i‡(
°¨t
 < 
right
) {

282 i‡(
À·_°‹e
 !
NULL
) {

283 *
À·_°‹e
 = 
°¨t
;

285 
≥rm
 = (
èbÀ
[
°¨t
 ++] & 
PTE_PERM
);

286 
°¨t
 < 
right
 && (
èbÀ
[°¨t] & 
PTE_PERM
Ë=
≥rm
) {

287 
°¨t
 ++;

289 i‡(
right_°‹e
 !
NULL
) {

290 *
right_°‹e
 = 
°¨t
;

292  
≥rm
;

295 
	}
}

299 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...)) {

300 
	`¥ötf
("--------------------- BEGIN ---------------------\n");

301 
size_t
 
À·
, 
right
 = 0, 
≥rm
;

302 (
≥rm
 = 
	`gë_pgèbÀ_ôems
(0, 
NPDEENTRY
, 
right
, 
vpd
, &
À·
, &right)) != 0) {

303 
	`¥ötf
("PDE(%03xË%08x-%08x %08x %s\n", 
right
 - 
À·
,

304 
À·
 * 
PTSIZE
, 
right
 * PTSIZE, (righà-Üe·Ë* PTSIZE, 
	`≥rm2°r
(
≥rm
));

305 
size_t
 
l
, 
r
 = 
À·
 * 
NPTEENTRY
;

306 (
≥rm
 = 
	`gë_pgèbÀ_ôems
(
À·
 * 
NPTEENTRY
, 
right
 * NPTEENTRY, 
r
, 
v±
, &
l
, &r)) != 0) {

307 
	`¥ötf
(" |-- PTE(%05xË%08x-%08x %08x %s\n", 
r
 - 
l
,

308 
l
 * 
PGSIZE
, 
r
 * PGSIZE, (∏-ÜË* PGSIZE, 
	`≥rm2°r
(
≥rm
));

311 
	`¥ötf
("---------------------- END ----------------------\n");

312 
	}
}

	@kern-ucore/arch/or32/mm/swap.c

1 
	~<sw≠.h
>

2 
	~<pmm.h
>

3 
	~<mmu.h
>

4 
	~<vmm.h
>

5 
	~<memœyout.h
>

6 
	~<sw≠fs.h
>

7 
	~<as£π.h
>

8 
	~<°dio.h
>

9 
	~<©omic.h
>

10 
	~<sync.h
>

11 
	~<¶ab.h
>

12 
	~<°rög.h
>

13 
	~<îr‹.h
>

14 
	~<kio.h
>

17 
li°_íåy_t
 
	msw≠_li°
;

18 
size_t
 
	mƒ_∑ges
;

19 } 
	tsw≠_li°_t
;

21 *
mem_m≠
;

22 
sw≠_li°_t
 
a˘ive_li°
;

23 
sw≠_li°_t
 
öa˘ive_li°
;

25 
	#ƒ_a˘ive_∑ges
 (
a˘ive_li°
.
ƒ_∑ges
)

	)

26 
	#ƒ_öa˘ive_∑ges
 (
öa˘ive_li°
.
ƒ_∑ges
)

	)

28 
	#SWAP_UNUSED
 0xFFFF

	)

30 
∑ge_œundî
();

31 
ªfûl_öa˘ive_sˇn
();

32 
sw≠_out_mm
(
mm_°ru˘
 *
mm
, 
size_t
 
ªquúe
);

35 
	$check_mm_sw≠
() {

36 
size_t
 
ƒ_‰ì_∑ges_°‹e
 = 
	`ƒ_‰ì_∑ges
();

37 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

39 
ªt
, 
i
, 
j
;

40 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

41 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

44 
mm_°ru˘
 *
check_mm_°ru˘
;

45 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

49 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

50 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

52 
uöçå_t
 
addr0
, 
addr1
;

54 
addr0
 = 0;

56 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 0, 
NULL
);

57 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PTSIZE
)Ë? 0 : -
E_INVAL
);

58 
addr0
 +
PTSIZE
;

59 } 
addr0
 != 0);

61 
addr0
 = 0;

62 
i
 = 0; i < 1024; i ++, 
addr0
 +
PTSIZE
) {

63 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

64 
	`as£π
(
ªt
 =-
E_INVAL
);

67 
	`mm_de°roy
(
mm0
);

69 
mm0
 = 
	`mm_¸óã
();

70 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

72 
addr0
 = 0, 
i
 = 0;

74 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
 - 
PGSIZE
, 0, 
NULL
);

75 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PTSIZE
)Ë? 0 : -
E_INVAL
);

76 i‡(
ªt
 == 0) {

77 
i
 ++;

79 
addr0
 +
PTSIZE
;

80 } 
addr0
 != 0);

82 
addr0
 = 0, 
j
 = 0;

84 
addr0
 +
PTSIZE
 - 
PGSIZE
;

85 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

86 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PGSIZE
)Ë? 0 : -
E_INVAL
);

87 i‡(
ªt
 == 0) {

88 
j
 ++;

90 
addr0
 +
PGSIZE
;

91 } 
addr0
 != 0);

93 
	`as£π
(
j
 + 1 >
i
);

95 
	`mm_de°roy
(
mm0
);

97 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

98 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

100 
	`k¥ötf
("check_mm_swap: step1, mm_map ok.\n");

104 
mm0
 = 
	`mm_¸óã
();

105 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

109 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

110 
	`as£π
(
∑ge
 !
NULL
);

111 
pde_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

112 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

113 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_SPR_W
 | 
PTE_SPR_R
;

117 
mm0
->
pgdú
 =Ögdir;

118 
check_mm_°ru˘
 = 
mm0
;

119 
cuºít_pgdú_∑
 = 
	`PADDR
 (
mm0
->
pgdú
);

120 
	`éb_övÆid©e_Æl
 ();

122 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

123 
vma_°ru˘
 *
vma
;

125 
addr0
 = 0;

127 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, &
vma
)) == 0) {

130 
addr0
 +
PTSIZE
;

131 } 
addr0
 != 0);

133 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

134 
	`as£π
(
vma
->
vm_°¨t
 =
addr0
 && vma->
vm_íd
 =addr0 + 
PTSIZE
);

138 
±e_t
 *
±ï
;

139 
addr1
 = 
addr0
;áddr1 <áddr0 + 
PTSIZE
;áddr1 +
PGSIZE
) {

140 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr1
, 0);

141 
	`as£π
(
±ï
 =
NULL
);

144 
	`mem£t
((*)
addr0
, 0xEF, 
PGSIZE
 * 2);

145 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

146 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

147 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

148 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

150 
ªt
 = 
	`mm_unm≠
(
mm0
, - 
PTSIZE
, PTSIZE);

151 
	`as£π
(
ªt
 =-
E_INVAL
);

152 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PTSIZE
, 
PGSIZE
);

153 
	`as£π
(
ªt
 == 0);

155 
addr1
 = 
addr0
 + 
PTSIZE
 / 2;

156 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
);

157 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

159 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4);

160 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 3);

162 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
 * 6, 0, 
NULL
);

163 
	`as£π
(
ªt
 =-
E_INVAL
);

164 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 0, 
NULL
);

165 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 4);

166 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4, 0, 
NULL
);

167 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 5);

169 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, 
PTSIZE
 / 2 - PGSIZE);

170 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 1);

172 
addr1
 = 
addr0
 + 
PGSIZE
;

173 
i
 = 0; i < 
PGSIZE
; i ++) {

174 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0xEF);

177 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, PGSIZE / 4);

178 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

179 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

180 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

181 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

182 
	`as£π
(
±ï
 !
NULL
 && *ptep == 0);

184 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 
vm_Êags
, 
NULL
);

185 
	`mem£t
((*)
addr1
, 0x88, 
PGSIZE
);

186 
	`as£π
(*(*)
addr1
 =()0x88 && 
mm0
->
m≠_cou¡
 == 3);

188 
i
 = 1; i < 16; i += 2) {

189 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE);

190 
	`as£π
(
ªt
 == 0);

191 i‡(
i
 < 8) {

192 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE, 0, 
NULL
);

193 
	`as£π
(
ªt
 == 0);

196 
	`as£π
(
mm0
->
m≠_cou¡
 == 13);

198 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 2, 
PTSIZE
 - PGSIZE * 2);

199 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

201 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PGSIZE
 * 2);

202 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

204 
	`k¥ötf
("check_mm_swap: step2, mm_unmap ok.\n");

208 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

209 
	`as£π
(
ªt
 == 0);

211 
i
 = 0, 
addr1
 = 
addr0
; i < 4; i ++,áddr1 +
PGSIZE
) {

212 *(*)
addr1
 = ()0xFF;

215 
	`exô_mm≠
(
mm0
);

216 
i
 = 0; i < 
	`PDX
(
KERNBASE
); i ++) {

217 
	`as£π
(
pgdú
[
i
] == 0);

220 
	`k¥ötf
("check_mm_swap: step3,Éxit_mmap ok.\n");

224 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

225 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

228 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

229 
	`as£π
(
ªt
 != 0);

231 
addr1
 = 
addr0
;

232 
i
 = 0; i < 4; i ++, 
addr1
 +
PGSIZE
) {

233 *(*)
addr1
 = ()(
i
 * i);

236 
ªt
 = 0;

237 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

238 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

239 
	`as£π
(
ªt
 == 4);

241 ; 
i
 < 8; i ++, 
addr1
 +
PGSIZE
) {

242 *(*)
addr1
 = ()(
i
 * i);

247 
mm1
 = 
	`mm_¸óã
();

248 
	`as£π
(
mm1
 !
NULL
);

250 
∑ge
 = 
	`Æloc_∑ge
();

251 
	`as£π
(
∑ge
 !
NULL
);

252 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

253 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

254 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_PERM
;

255 
mm1
->
pgdú
 =Ögdir;

257 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

258 
	`as£π
(
ªt
 == 0);

262 
check_mm_°ru˘
 = 
mm1
;

263 
cuºít_pgdú_∑
 = 
	`PADDR
 (
mm1
->
pgdú
);

264 
	`éb_övÆid©e_Æl
 ();

266 
addr1
 = 
addr0
;

267 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

268 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

269 *(*)
addr1
 = ()0x88;

274 
check_mm_°ru˘
 = 
mm0
;

275 
cuºít_pgdú_∑
 = 
	`PADDR
 (
mm0
->
pgdú
);

276 
	`éb_övÆid©e_Æl
 ();

278 
addr1
 = 
addr0
;

279 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

280 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

285 
check_mm_°ru˘
 = 
NULL
;

286 
cuºít_pgdú_∑
 = 
boŸ_pgdú_∑
;

287 
	`éb_övÆid©e_Æl
 ();

291 
	`exô_mm≠
(
mm0
);

292 
	`exô_mm≠
(
mm1
);

294 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

295 
	`mm_de°roy
(
mm0
);

296 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

297 
	`mm_de°roy
(
mm1
);

299 
	`k¥ötf
("check_mm_swap: step4, dup_mmap ok.\n");

301 
	`ªfûl_öa˘ive_sˇn
();

302 
	`∑ge_œundî
();

303 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

304 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

307 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

308 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

310 
	`k¥ötf
("check_mm_swap() succeeded.\n");

311 
	}
}

314 
	$check_mm_shm_sw≠
() {

315 
size_t
 
ƒ_‰ì_∑ges_°‹e
 = 
	`ƒ_‰ì_∑ges
();

316 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

318 
ªt
, 
i
;

319 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

320 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

323 
mm_°ru˘
 *
check_mm_°ru˘
;

324 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

326 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

327 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

329 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

330 
	`as£π
(
∑ge
 !
NULL
);

331 
pde_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

332 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

333 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_PERM
;

335 
mm0
->
pgdú
 =Ögdir;

336 
check_mm_°ru˘
 = 
mm0
;

337 
cuºít_pgdú_∑
 = 
	`PADDR
 (
mm0
->
pgdú
);

338 
	`éb_övÆid©e_Æl
 ();

340 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

342 
uöçå_t
 
addr0
, 
addr1
;

344 
addr0
 = 0;

346 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4, 
vm_Êags
, 
NULL
)) == 0) {

349 
addr0
 +
PTSIZE
;

350 } 
addr0
 != 0);

352 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

354 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4);

355 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

357 
shmem_°ru˘
 *
shmem
 = 
	`shmem_¸óã
(
PTSIZE
 * 2);

358 
	`as£π
(
shmem
 !
NULL
 && 
	`shmem_ªf
(shmem) == 0);

362 
vma_°ru˘
 *
vma
;

364 
addr1
 = 
addr0
 + 
PTSIZE
 * 2;

365 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr0
, 
vm_Êags
, 
shmem
, &
vma
);

366 
	`as£π
(
ªt
 == 0);

367 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 1);

368 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr1
, 
vm_Êags
, 
shmem
, &
vma
);

369 
	`as£π
(
ªt
 == 0);

370 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 2);

374 
i
 = 0; i < 4; i ++) {

375 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(i * i);

377 
i
 = 0; i < 4; i ++) {

378 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(i * i));

380 
i
 = 0; i < 4; i ++) {

381 *(*)(
addr1
 + 
i
 * 
PGSIZE
) = ()(- i * i);

383 
i
 = 0; i < 4; i ++) {

384 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(- i * i));

389 
ªt
 = 
	`sw≠_out_mm
(
mm0
, 8) + swap_out_mm(mm0, 8);

390 
	`as£π
(
ªt
 =8 && 
ƒ_a˘ive_∑ges
 =4 && 
ƒ_öa˘ive_∑ges
 == 0);

392 
	`ªfûl_öa˘ive_sˇn
();

393 
	`as£π
(
ƒ_a˘ive_∑ges
 =0 && 
ƒ_öa˘ive_∑ges
 == 4);

397 
	`mem£t
((*)
addr0
, 0x77, 
PGSIZE
);

398 
i
 = 0; i < 
PGSIZE
; i ++) {

399 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0x77);

404 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
 * 4);

405 
	`as£π
(
ªt
 == 0);

407 
addr0
 +4 * 
PGSIZE
, 
addr1
 += 4 * PGSIZE;

408 *(*)(
addr0
) = ()(0xDC);

409 
	`as£π
(*(*)(
addr1
) == ()(0xDC));

410 *(*)(
addr1
 + 
PTSIZE
) = ()(0xDC);

411 
	`as£π
(*(*)(
addr0
 + 
PTSIZE
) == ()(0xDC));

413 
	`k¥ötf
("check_mm_shm_swap: step1, share memory ok.\n");

417 
mm1
 = 
	`mm_¸óã
();

418 
	`as£π
(
mm1
 !
NULL
);

421 
∑ge
 = 
	`Æloc_∑ge
();

422 
	`as£π
(
∑ge
 !
NULL
);

423 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

424 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

425 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdúË| 
PTE_P
 | 
PTE_PERM
;

426 
mm1
->
pgdú
 =Ögdir;

428 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

429 
	`as£π
(
ªt
 =0 && 
	`shmem_ªf
(
shmem
) == 4);

433 
check_mm_°ru˘
 = 
mm1
;

434 
cuºít_pgdú_∑
 = 
	`PADDR
 (
mm1
->
pgdú
);

435 
	`éb_övÆid©e_Æl
 ();

437 
i
 = 0; i < 4; i ++) {

438 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(0x57 + i);

440 
i
 = 0; i < 4; i ++) {

441 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

444 
check_mm_°ru˘
 = 
mm0
;

445 
cuºít_pgdú_∑
 = 
	`PADDR
 (
mm0
->
pgdú
);

446 
	`éb_övÆid©e_Æl
 ();

448 
i
 = 0; i < 4; i ++) {

449 
	`as£π
(*(*)(
addr0
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

450 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

453 
	`sw≠_out_mm
(
mm1
, 4);

454 
	`exô_mm≠
(
mm1
);

456 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

457 
	`mm_de°roy
(
mm1
);

459 
	`as£π
(
	`shmem_ªf
(
shmem
) == 2);

461 
	`k¥ötf
("check_mm_shm_swap: step2, dup_mmap ok.\n");

465 
check_mm_°ru˘
 = 
NULL
;

466 
cuºít_pgdú_∑
 = 
boŸ_pgdú_∑
;

467 
	`éb_övÆid©e_Æl
 ();

469 
	`exô_mm≠
(
mm0
);

470 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

471 
	`mm_de°roy
(
mm0
);

473 
	`ªfûl_öa˘ive_sˇn
();

474 
	`∑ge_œundî
();

475 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

476 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

479 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

480 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

482 
	`k¥ötf
("check_mm_shm_swap() succeeded.\n");

483 
	}
}

	@kern-ucore/arch/or32/mm/vmm.c

1 
	~<vmm.h
>

2 
	~<°rög.h
>

3 
	~<mmu.h
>

4 
	~<°dio.h
>

5 
	~<kio.h
>

7 
boﬁ


8 
	$c›y_‰om_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
, 
boﬁ
 
wrôabÀ
) {

9 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
Àn
, 
wrôabÀ
)) {

12 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

15 
	}
}

17 
boﬁ


18 
	$c›y_to_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

19 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
d°
, 
Àn
, 1)) {

22 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

24 
	}
}

26 
boﬁ


27 
	$c›y_°rög
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
maxn
) {

28 
size_t
 
Æí
, 
∑π
 = 
	`ROUNDDOWN
((
uöçå_t
)
§c
 + 
PGSIZE
, PGSIZE) - (uintptr_t)src;

30 i‡(
∑π
 > 
maxn
) {

31 
∑π
 = 
maxn
;

33 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
∑π
, 0)) {

36 i‡((
Æí
 = 
	`°∫Àn
(
§c
, 
∑π
)) <Öart) {

38 
	`mem˝y
(
d°
, 
§c
, 
Æí
 + 1);

42 i‡(
∑π
 =
maxn
) {

45 
	`mem˝y
(
d°
, 
§c
, 
∑π
);

46 
d°
 +
∑π
, 
§c
 +∑π, 
maxn
 -=Öart;

47 
∑π
 = 
PGSIZE
;

49 
	}
}

	@kern-ucore/arch/or32/process/arch_proc.h

1 #i‚de‡
__ARCH_TEMPLATE_INCLUDE_ARCH_PROC_H__


2 
	#__ARCH_TEMPLATE_INCLUDE_ARCH_PROC_H__


	)

4 
	~<ty≥s.h
>

7 
	sc⁄ãxt
 {

8 
uöt32_t
 
	mg¥s
[31];

12 
	s¨ch_¥oc_°ru˘
 {

	@kern-ucore/arch/or32/process/proc.c

1 
	~<¥oc.h
>

2 
	~<mmu.h
>

3 
	~<vmm.h
>

4 
	~<¶ab.h
>

5 
	~<å≠.h
>

6 
	~<¨ch.h
>

7 
	~<uni°d.h
>

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<sched.h
>

12 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

14 
f‹kªts
 (
å≠‰ame
 *
tf
);

17 
	$f‹kªt
 ()

19 
	`f‹kªts
 (
cuºít
->
tf
);

20 
	}
}

23 
¥oc_°ru˘
 *

24 
	$Æloc_¥oc
() {

25 
¥oc_°ru˘
 *
¥oc
 = (¥oc_°ru˘ *)
	`kmÆloc
((proc_struct));

26 i‡(
¥oc
 !
NULL
) {

27 
¥oc
->
°©e
 = 
PROC_UNINIT
;

28 
¥oc
->
pid
 = -1;

29 
¥oc
->
runs
 = 0;

30 
¥oc
->
k°ack
 = 0;

31 
¥oc
->
√ed_ªsched
 = 0;

32 
¥oc
->
∑ª¡
 = 
NULL
;

33 
¥oc
->
mm
 = 
NULL
;

34 
	`mem£t
(&(
¥oc
->
c⁄ãxt
), 0, (context));

35 
¥oc
->
tf
 = 
NULL
;

36 
¥oc
->
¸3
 = 
boŸ_pgdú_∑
;

37 
¥oc
->
Êags
 = 0;

38 
	`mem£t
(
¥oc
->
«me
, 0, 
PROC_NAME_LEN
);

39 
¥oc
->
waô_°©e
 = 0;

40 
¥oc
->
˝å
 =Öroc->
›å
 =Öroc->
y±r
 = 
NULL
;

41 
	`li°_öô
(&(
¥oc
->
thªad_group
));

42 
¥oc
->
rq
 = 
NULL
;

43 
	`li°_öô
(&(
¥oc
->
run_lök
));

44 
¥oc
->
time_¶i˚
 = 0;

45 
¥oc
->
£m_queue
 = 
NULL
;

46 
	`evít_box_öô
(&(
¥oc
->
evít_box
));

47 
¥oc
->
fs_°ru˘
 = 
NULL
;

49  
¥oc
;

50 
	}
}

56 
kî√l_thªad
 ((*
‚
)(*), *
¨g
, 
uöt32_t
 
˛⁄e_Êags
)

58 
å≠‰ame
 
tf
;

59 
	`mem£t
 (&
tf
, 0,  (
å≠‰ame
));

60 
tf
.
ªgs
.
g¥s
[1] = (
uöt32_t
Ë
‚
;

61 
tf
.
ªgs
.
g¥s
[2] = (
uöt32_t
Ë
¨g
;

62 
tf
.
pc
 = (
uöt32_t
)
kî√l_thªad_íåy
;

63 
tf
.
§
 = 
SPR_SR_SM
;

64  
	`do_f‹k
 (
˛⁄e_Êags
 | 
CLONE_VM
, 0, &
tf
);

65 
	}
}

68 
	$de_thªad_¨ch_hook
 (
¥oc_°ru˘
 *
¥oc
) {

69 
	}
}

74 
	$c›y_thªad
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
,

75 
uöçå_t
 
e•
, 
å≠‰ame
 *
tf
) {

76 
¥oc
->
tf
 = (
å≠‰ame
 *)’roc->
k°ack
 + 
KSTACKSIZE
) - 1;

77 *(
¥oc
->
tf
) = *tf;

78 
¥oc
->
tf
->
ªgs
.
g¥s
[9] = 0;

79 
¥oc
->
tf
->
§
 = 
SPR_SR_IME
 | 
SPR_SR_DME
 | 
SPR_SR_TEE
 | 
SPR_SR_IEE
;

80 i‡(
tf
->
§
 & 
SPR_SR_SM
) {

81 
¥oc
->
tf
->
•
 = (
uöçå_t
)(proc->tf) +  (proc->tf);

82 
¥oc
->
tf
->
§
 |
SPR_SR_SM
;

84 
¥oc
->
tf
->
•
 = 
e•
;

87 
¥oc
->
c⁄ãxt
.
g¥s
[8] = (
uöçå_t
)
f‹kªt
;

88 
¥oc
->
c⁄ãxt
.
g¥s
[0] = (
uöçå_t
)’roc->
tf
);

91 
	}
}

93 
	~<kio.h
>

96 
	$öô_√w_c⁄ãxt
 (
¥oc_°ru˘
 *
¥oc
, 
ñfhdr
 *
ñf
, 
¨gc
, ** 
k¨gv
)

98 
uöçå_t
 
°ackt›
 = 
USTACKTOP
 - 
¨gc
 * 
PGSIZE
;

99 **
u¨gv
 = (**)(
°ackt›
 - 
¨gc
 * (*));

100 
i
;

101 
i
 = 0; i < 
¨gc
; i ++) {

102 
u¨gv
[
i
] = (*Ë
	`°r˝y
((*)(
°ackt›
 + i * 
PGSIZE
), 
k¨gv
[i]);

104 
°ackt›
 = (
uöçå_t
)
u¨gv
;

107 
å≠‰ame
 *
tf
 = 
¥oc
->tf;

108 
	`mem£t
(
tf
, 0, (
å≠‰ame
));

109 
tf
->
•
 = 
°ackt›
;

110 
tf
->
pc
 = 
ñf
->
e_íåy
;

111 
tf
->
§
 = 
SPR_SR_IME
 | 
SPR_SR_DME
 | 
SPR_SR_TEE
 | 
SPR_SR_IEE
;

113 
tf
->
ªgs
.
g¥s
[1] = 
¨gc
;

114 
tf
->
ªgs
.
g¥s
[2] = (
uöçå_t
)
u¨gv
;

117 
	}
}

120 
	$do_execve_¨ch_hook
 (
¨gc
, ** 
k¨gv
) {

122 
	}
}

126 
	$kî√l_execve
(c⁄° *
«me
, c⁄° **
¨gv
) {

127 
¨gc
 = 0;

128 
¨gv
[
¨gc
] !
NULL
)

129 
¨gc
 ++;

131 
uöt32_t
 
ªt
;

132 
uöt32_t
 
_r3
 
	`asm
("r3"Ë
SYS_exec
;

133 
uöt32_t
 
_r4
 
	`asm
("r4"Ë(uöt32_t)
«me
;

134 
uöt32_t
 
_r5
 
	`asm
("r5"Ë
¨gc
;

135 
uöt32_t
 
_r6
 
	`asm
("r6"Ë(uöt32_t)
¨gv
;

136 
asm
 volatile (

138 : "Ù" (
ªt
)

139 : "r" (
_r3
),

140 "r" (
_r4
),

141 "r" (
_r5
),

142 "r" (
_r6
));

145 
	}
}

149 
	$˝u_idÀ
() {

151 i‡(
cuºít
->
√ed_ªsched
) {

152 
	`scheduÀ
();

155 
	}
}

	@kern-ucore/arch/or32/sync/sync.h

1 #i‚de‡
__ARCH_TEMPLATE_INCLUDE_SYNC_H__


2 
	#__ARCH_TEMPLATE_INCLUDE_SYNC_H__


	)

4 
	~<öå.h
>

5 
	~<ty≥s.h
>

6 
	~<¨ch.h
>

7 
	~<as£π.h
>

12 
ölöe
 
boﬁ


13 
	$__öå_ßve
() {

14 
uöt32_t
 
§
;

15 
§
 = 
	`mf•r
 (
SPR_SR
);

16 
c
 = 0;

17 i‡(
§
 & 
SPR_SR_IEE
)

18 
c
 = 1;

19 
	`mt•r
 (
SPR_SR
, 
§
 & ~(
SPR_SR_IEE
 | 
SPR_SR_TEE
));

20  
c
;

21 
	}
}

25 
ölöe
 

26 
	$__öå_ª°‹e
(
boﬁ
 
Êag
) {

27 i‡(
Êag
) {

28 
	`öå_íabÀ
();

30 
	}
}

32 
	#loˇl_öå_ßve
(
x
Ëdÿ{ x = 
	`__öå_ßve
(); } 0)

	)

33 
	#loˇl_öå_ª°‹e
(
x
Ë
	`__öå_ª°‹e
(x);

	)

35 
sync_öô
();

	@kern-ucore/arch/or32/syscall/syscall.c

1 
	~<¥oc.h
>

2 
	~<sysˇŒ.h
>

3 
	~<å≠.h
>

4 
	~<°dio.h
>

5 
	~<pmm.h
>

6 
	~<˛ock.h
>

7 
	~<as£π.h
>

8 
	~<£m.h
>

9 
	~<evít.h
>

10 
	~<mbox.h
>

11 
	~<°©.h
>

12 
	~<dúít.h
>

13 
	~<sysfûe.h
>

14 
	~<kio.h
>

15 
	~<îr‹.h
>

17 
uöt32_t


18 
	$sys_exô
(
uöt32_t
 
¨g
[]) {

19 
îr‹_code
 = ()
¨g
[0];

20  
	`do_exô
(
îr‹_code
);

21 
	}
}

23 
uöt32_t


24 
	$sys_f‹k
(
uöt32_t
 
¨g
[]) {

25 
å≠‰ame
 *
tf
 = 
	`∂s_ªad
(
cuºít
)->tf;

26 
uöçå_t
 
°ack
 = 
tf
->
•
;

27  
	`do_f‹k
(0, 
°ack
, 
tf
);

28 
	}
}

30 
uöt32_t


31 
	$sys_waô
(
uöt32_t
 
¨g
[]) {

32 
pid
 = ()
¨g
[0];

33 *
°‹e
 = (*)
¨g
[1];

34  
	`do_waô
(
pid
, 
°‹e
);

35 
	}
}

37 
uöt32_t


38 
	$sys_exec
(
uöt32_t
 
¨g
[]) {

39 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

40 
¨gc
 = ()
¨g
[1];

41 c⁄° **
¨gv
 = (c⁄° **)
¨g
[2];

42  
	`do_execve
(
«me
, 
¨gc
, 
¨gv
);

43 
	}
}

45 
uöt32_t


46 
	$sys_˛⁄e
(
uöt32_t
 
¨g
[]) {

47 
å≠‰ame
 *
tf
 = 
	`∂s_ªad
(
cuºít
)->tf;

48 
uöt32_t
 
˛⁄e_Êags
 = (uöt32_t)
¨g
[0];

49 
uöçå_t
 
°ack
 = (uöçå_t)
¨g
[1];

50 i‡(
°ack
 == 0) {

51 
°ack
 = 
tf
->
•
;

53  
	`do_f‹k
(
˛⁄e_Êags
, 
°ack
, 
tf
);

54 
	}
}

56 
uöt32_t


57 
	$sys_exô_thªad
(
uöt32_t
 
¨g
[]) {

58 
îr‹_code
 = ()
¨g
[0];

59  
	`do_exô_thªad
(
îr‹_code
);

60 
	}
}

62 
uöt32_t


63 
	$sys_yõld
(
uöt32_t
 
¨g
[]) {

64  
	`do_yõld
();

65 
	}
}

67 
uöt32_t


68 
	$sys_¶ìp
(
uöt32_t
 
¨g
[]) {

69 
time
 = ()
¨g
[0];

70  
	`do_¶ìp
(
time
);

71 
	}
}

73 
uöt32_t


74 
	$sys_kûl
(
uöt32_t
 
¨g
[]) {

75 
pid
 = ()
¨g
[0];

76  
	`do_kûl
(
pid
, -
E_KILLED
);

77 
	}
}

79 
uöt32_t


80 
	$sys_gëtime
(
uöt32_t
 
¨g
[]) {

81  ()
ticks
;

82 
	}
}

84 
uöt32_t


85 
	$sys_gëpid
(
uöt32_t
 
¨g
[]) {

86  
	`∂s_ªad
(
cuºít
)->
pid
;

87 
	}
}

89 
uöt32_t


90 
	$sys_brk
(
uöt32_t
 
¨g
[]) {

91 
uöçå_t
 *
brk_°‹e
 = (uöçå_à*)
¨g
[0];

92  
	`do_brk
(
brk_°‹e
);

93 
	}
}

95 
uöt32_t


96 
	$sys_mm≠
(
uöt32_t
 
¨g
[]) {

97 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

98 
size_t
 
Àn
 = (size_t)
¨g
[1];

99 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

100  
	`do_mm≠
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

101 
	}
}

103 
uöt32_t


104 
	$sys_munm≠
(
uöt32_t
 
¨g
[]) {

105 
uöçå_t
 
addr
 = (uöçå_t)
¨g
[0];

106 
size_t
 
Àn
 = (size_t)
¨g
[1];

107  
	`do_munm≠
(
addr
, 
Àn
);

108 
	}
}

110 
uöt32_t


111 
	$sys_shmem
(
uöt32_t
 
¨g
[]) {

112 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

113 
size_t
 
Àn
 = (size_t)
¨g
[1];

114 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

115  
	`do_shmem
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

116 
	}
}

118 
uöt32_t


119 
	$sys_putc
(
uöt32_t
 
¨g
[]) {

120 
c
 = ()
¨g
[0];

121 
	`kc⁄s_putc
(
c
);

123 
	}
}

125 
uöt32_t


126 
	$sys_pgdú
(
uöt32_t
 
¨g
[]) {

127 
	`¥öt_pgdú
(
k¥ötf
);

129 
	}
}

131 
uöt32_t


132 
	$sys_£m_öô
(
uöt32_t
 
¨g
[]) {

133 
vÆue
 = ()
¨g
[0];

134  
	`ùc_£m_öô
(
vÆue
);

135 
	}
}

137 
uöt32_t


138 
	$sys_£m_po°
(
uöt32_t
 
¨g
[]) {

139 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

140  
	`ùc_£m_po°
(
£m_id
);

141 
	}
}

143 
uöt32_t


144 
	$sys_£m_waô
(
uöt32_t
 
¨g
[]) {

145 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

146 
timeout
 = ()
¨g
[1];

147  
	`ùc_£m_waô
(
£m_id
, 
timeout
);

148 
	}
}

150 
uöt32_t


151 
	$sys_£m_‰ì
(
uöt32_t
 
¨g
[]) {

152 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

153  
	`ùc_£m_‰ì
(
£m_id
);

154 
	}
}

156 
uöt32_t


157 
	$sys_£m_gë_vÆue
(
uöt32_t
 
¨g
[]) {

158 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

159 *
vÆue_°‹e
 = (*)
¨g
[1];

160  
	`ùc_£m_gë_vÆue
(
£m_id
, 
vÆue_°‹e
);

161 
	}
}

163 
uöt32_t


164 
	$sys_evít_£nd
(
uöt32_t
 
¨g
[]) {

165 
pid
 = ()
¨g
[0];

166 
evít
 = ()
¨g
[1];

167 
timeout
 = ()
¨g
[2];

168  
	`ùc_evít_£nd
(
pid
, 
evít
, 
timeout
);

169 
	}
}

171 
uöt32_t


172 
	$sys_evít_ªcv
(
uöt32_t
 
¨g
[]) {

173 *
pid_°‹e
 = (*)
¨g
[0];

174 *
evít_°‹e
 = (*)
¨g
[1];

175 
timeout
 = ()
¨g
[2];

176  
	`ùc_evít_ªcv
(
pid_°‹e
, 
evít_°‹e
, 
timeout
);

177 
	}
}

179 
uöt32_t


180 
	$sys_mbox_öô
(
uöt32_t
 
¨g
[]) {

181 
max_¶Ÿs
 = ()
¨g
[0];

182  
	`ùc_mbox_öô
(
max_¶Ÿs
);

183 
	}
}

185 
uöt32_t


186 
	$sys_mbox_£nd
(
uöt32_t
 
¨g
[]) {

187 
id
 = ()
¨g
[0];

188 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

189 
timeout
 = ()
¨g
[2];

190  
	`ùc_mbox_£nd
(
id
, 
buf
, 
timeout
);

191 
	}
}

193 
uöt32_t


194 
	$sys_mbox_ªcv
(
uöt32_t
 
¨g
[]) {

195 
id
 = ()
¨g
[0];

196 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

197 
timeout
 = ()
¨g
[2];

198  
	`ùc_mbox_ªcv
(
id
, 
buf
, 
timeout
);

199 
	}
}

201 
uöt32_t


202 
	$sys_mbox_‰ì
(
uöt32_t
 
¨g
[]) {

203 
id
 = ()
¨g
[0];

204  
	`ùc_mbox_‰ì
(
id
);

205 
	}
}

207 
uöt32_t


208 
	$sys_mbox_öfo
(
uöt32_t
 
¨g
[]) {

209 
id
 = ()
¨g
[0];

210 
mboxöfo
 *
öfo
 = (mboxöfÿ*)
¨g
[1];

211  
	`ùc_mbox_öfo
(
id
, 
öfo
);

212 
	}
}

214 
uöt32_t


215 
	$sys_›í
(
uöt32_t
 
¨g
[]) {

216 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

217 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

218  
	`sysfûe_›í
(
∑th
, 
›í_Êags
);

219 
	}
}

221 
uöt32_t


222 
	$sys_˛o£
(
uöt32_t
 
¨g
[]) {

223 
fd
 = ()
¨g
[0];

224  
	`sysfûe_˛o£
(
fd
);

225 
	}
}

227 
uöt32_t


228 
	$sys_ªad
(
uöt32_t
 
¨g
[]) {

229 
fd
 = ()
¨g
[0];

230 *
ba£
 = (*)
¨g
[1];

231 
size_t
 
Àn
 = (size_t)
¨g
[2];

232  
	`sysfûe_ªad
(
fd
, 
ba£
, 
Àn
);

233 
	}
}

235 
uöt32_t


236 
	$sys_wrôe
(
uöt32_t
 
¨g
[]) {

237 
fd
 = ()
¨g
[0];

238 *
ba£
 = (*)
¨g
[1];

239 
size_t
 
Àn
 = (size_t)
¨g
[2];

240  
	`sysfûe_wrôe
(
fd
, 
ba£
, 
Àn
);

241 
	}
}

243 
uöt32_t


244 
	$sys_£ek
(
uöt32_t
 
¨g
[]) {

245 
fd
 = ()
¨g
[0];

246 
off_t
 
pos
 = (off_t)
¨g
[1];

247 
whí˚
 = ()
¨g
[2];

248  
	`sysfûe_£ek
(
fd
, 
pos
, 
whí˚
);

249 
	}
}

251 
uöt32_t


252 
	$sys_f°©
(
uöt32_t
 
¨g
[]) {

253 
fd
 = ()
¨g
[0];

254 
°©
 *°© = (°© *)
¨g
[1];

255  
	`sysfûe_f°©
(
fd
, 
°©
);

256 
	}
}

258 
uöt32_t


259 
	$sys_fsync
(
uöt32_t
 
¨g
[]) {

260 
fd
 = ()
¨g
[0];

261  
	`sysfûe_fsync
(
fd
);

262 
	}
}

264 
uöt32_t


265 
	$sys_chdú
(
uöt32_t
 
¨g
[]) {

266 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

267  
	`sysfûe_chdú
(
∑th
);

268 
	}
}

270 
uöt32_t


271 
	$sys_gëcwd
(
uöt32_t
 
¨g
[]) {

272 *
buf
 = (*)
¨g
[0];

273 
size_t
 
Àn
 = (size_t)
¨g
[1];

274  
	`sysfûe_gëcwd
(
buf
, 
Àn
);

275 
	}
}

277 
uöt32_t


278 
	$sys_mkdú
(
uöt32_t
 
¨g
[]) {

279 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

280  
	`sysfûe_mkdú
(
∑th
);

281 
	}
}

283 
uöt32_t


284 
	$sys_lök
(
uöt32_t
 
¨g
[]) {

285 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

286 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

287  
	`sysfûe_lök
(
∑th1
, 
∑th2
);

288 
	}
}

290 
uöt32_t


291 
	$sys_ª«me
(
uöt32_t
 
¨g
[]) {

292 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

293 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

294  
	`sysfûe_ª«me
(
∑th1
, 
∑th2
);

295 
	}
}

297 
uöt32_t


298 
	$sys_u∆ök
(
uöt32_t
 
¨g
[]) {

299 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

300  
	`sysfûe_u∆ök
(
«me
);

301 
	}
}

303 
uöt32_t


304 
	$sys_gëdúíåy
(
uöt32_t
 
¨g
[]) {

305 
fd
 = ()
¨g
[0];

306 
dúít
 *
dúíç
 = (dúíà*)
¨g
[1];

307  
	`sysfûe_gëdúíåy
(
fd
, 
dúíç
);

308 
	}
}

310 
uöt32_t


311 
	$sys_dup
(
uöt32_t
 
¨g
[]) {

312 
fd1
 = ()
¨g
[0];

313 
fd2
 = ()
¨g
[1];

314  
	`sysfûe_dup
(
fd1
, 
fd2
);

315 
	}
}

317 
uöt32_t


318 
	$sys_pùe
(
uöt32_t
 
¨g
[]) {

319 *
fd_°‹e
 = (*)
¨g
[0];

320  
	`sysfûe_pùe
(
fd_°‹e
);

321 
	}
}

323 
uöt32_t


324 
	$sys_mkfifo
(
uöt32_t
 
¨g
[]) {

325 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

326 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

327  
	`sysfûe_mkfifo
(
«me
, 
›í_Êags
);

328 
	}
}

330 
	$uöt32_t
 (*
sysˇŒs
[])(
uöt32_t
 
¨g
[]) = {

331 [
SYS_exô
] 
sys_exô
,

332 [
SYS_f‹k
] 
sys_f‹k
,

333 [
SYS_waô
] 
sys_waô
,

334 [
SYS_exec
] 
sys_exec
,

335 [
SYS_˛⁄e
] 
sys_˛⁄e
,

336 [
SYS_exô_thªad
] 
sys_exô_thªad
,

337 [
SYS_yõld
] 
sys_yõld
,

338 [
SYS_kûl
] 
sys_kûl
,

339 [
SYS_¶ìp
] 
sys_¶ìp
,

340 [
SYS_gëtime
] 
sys_gëtime
,

341 [
SYS_gëpid
] 
sys_gëpid
,

342 [
SYS_brk
] 
sys_brk
,

343 [
SYS_mm≠
] 
sys_mm≠
,

344 [
SYS_munm≠
] 
sys_munm≠
,

345 [
SYS_shmem
] 
sys_shmem
,

346 [
SYS_putc
] 
sys_putc
,

347 [
SYS_pgdú
] 
sys_pgdú
,

348 [
SYS_£m_öô
] 
sys_£m_öô
,

349 [
SYS_£m_po°
] 
sys_£m_po°
,

350 [
SYS_£m_waô
] 
sys_£m_waô
,

351 [
SYS_£m_‰ì
] 
sys_£m_‰ì
,

352 [
SYS_£m_gë_vÆue
] 
sys_£m_gë_vÆue
,

353 [
SYS_evít_£nd
] 
sys_evít_£nd
,

354 [
SYS_evít_ªcv
] 
sys_evít_ªcv
,

355 [
SYS_mbox_öô
] 
sys_mbox_öô
,

356 [
SYS_mbox_£nd
] 
sys_mbox_£nd
,

357 [
SYS_mbox_ªcv
] 
sys_mbox_ªcv
,

358 [
SYS_mbox_‰ì
] 
sys_mbox_‰ì
,

359 [
SYS_mbox_öfo
] 
sys_mbox_öfo
,

360 [
SYS_›í
] 
sys_›í
,

361 [
SYS_˛o£
] 
sys_˛o£
,

362 [
SYS_ªad
] 
sys_ªad
,

363 [
SYS_wrôe
] 
sys_wrôe
,

364 [
SYS_£ek
] 
sys_£ek
,

365 [
SYS_f°©
] 
sys_f°©
,

366 [
SYS_fsync
] 
sys_fsync
,

367 [
SYS_chdú
] 
sys_chdú
,

368 [
SYS_gëcwd
] 
sys_gëcwd
,

369 [
SYS_mkdú
] 
sys_mkdú
,

370 [
SYS_lök
] 
sys_lök
,

371 [
SYS_ª«me
] 
sys_ª«me
,

372 [
SYS_u∆ök
] 
sys_u∆ök
,

373 [
SYS_gëdúíåy
] 
sys_gëdúíåy
,

374 [
SYS_dup
] 
sys_dup
,

375 [
SYS_pùe
] 
sys_pùe
,

376 [
SYS_mkfifo
] 
sys_mkfifo
,

377 
	}
};

379 
	#NUM_SYSCALLS
 (((
sysˇŒs
)Ë/ ((sysˇŒs[0])))

	)

382 
	$sysˇŒ
() {

383 
å≠‰ame
 *
tf
 = 
	`∂s_ªad
(
cuºít
)->tf;

384 
uöt32_t
 
¨g
[5];

385 
num
 = 
tf
->
ªgs
.
g¥s
[1];

386 i‡(
num
 >0 &&Çum < 
NUM_SYSCALLS
) {

387 i‡(
sysˇŒs
[
num
] !
NULL
) {

388 
¨g
[0] = 
tf
->
ªgs
.
g¥s
[2];

389 
¨g
[1] = 
tf
->
ªgs
.
g¥s
[3];

390 
¨g
[2] = 
tf
->
ªgs
.
g¥s
[4];

391 
¨g
[3] = 
tf
->
ªgs
.
g¥s
[5];

392 
¨g
[4] = 
tf
->
ªgs
.
g¥s
[6];

393 
tf
->
ªgs
.
g¥s
[12] = 
sysˇŒs
[
num
](
¨g
);

397 
	`¥öt_å≠‰ame
(
tf
);

398 
	`∑nic
("undefined syscall %d,Öid = %d,Çame = %s.\n",

399 
num
, 
	`∂s_ªad
(
cuºít
)->
pid
,Öls_ªad(cuºít)->
«me
);

400 
	}
}

	@kern-ucore/arch/or32/syscall/syscall.h

1 #i‚de‡
__ARCH_TEMPLATE_INCLUDE_SYSCALL_H__


2 
	#__ARCH_TEMPLATE_INCLUDE_SYSCALL_H__


	)

4 
sysˇŒ
();

	@kern-ucore/arch/um/debug/panic.c

1 
	~<°dio.h
>

2 
	~<kio.h
>

3 
	~<°d¨g.h
>

4 
	~<¨ch.h
>

10 
	$__∑nic
 (c⁄° * 
fûe
, c⁄° * 
löe
, c⁄° * 
fmt
, ...)

12 
va_li°
 
≠
;

13 
	`va_°¨t
(
≠
, 
fmt
);

14 
	`k¥ötf
("kî√»∑ni¯© %s:%d:\¿ ", 
fûe
, 
löe
);

15 
	`vk¥ötf
(
fmt
, 
≠
);

16 
	`k¥ötf
("\n");

17 
	`va_íd
(
≠
);

19 
	`ho°_exô
 (
SIGINT
);

20 
	}
}

26 
	$__w¨n
 (c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

27 
va_li°
 
≠
;

28 
	`va_°¨t
(
≠
, 
fmt
);

29 
	`k¥ötf
("kî√»w¨nögáà%s:%d:\¿ ", 
fûe
, 
löe
);

30 
	`vk¥ötf
(
fmt
, 
≠
);

31 
	`k¥ötf
("\n");

32 
	`va_íd
(
≠
);

33 
	}
}

	@kern-ucore/arch/um/driver/console.c

1 
	~<c⁄sﬁe.h
>

3 
	~<¨ch.h
>

4 
	~<as£π.h
>

5 
	~<¥oc.h
>

7 
	gây
;

8 
ãrmios
 
	gdeÁu…_£âögs
;

10 
	gaio_d´m⁄_pid
;

11 
	gbuf„r
[
CONSOLE_BUFFER_SIZE
];

12 
	ghód_±r
, 
	gèû_±r
;

18 
	$c⁄s_d´m⁄
 ()

21 
	`sysˇŒ3
 (
__NR_ªad
, 
ây
, (Ë&(
buf„r
[
hód_±r
]), 1);

22 
hód_±r
 = (hód_±∏+ 1Ë% 
CONSOLE_BUFFER_SIZE
;

23 i‡(
	`∂s_ªad
(
cuºít
)->
¨ch
.
ho°
 =
NULL
) {

24 
	`sysˇŒ2
 (
__NR_kûl
, 
	`sysˇŒ0
(
__NR_gëµid
), 
SIGIO
);

26 
	`sysˇŒ2
 (
__NR_kûl
, 
	`∂s_ªad
(
cuºít
)->
¨ch
.
ho°
->
ho°_pid
, 
SIGIO
);

29 
	}
}

35 
	$c⁄s_öô
()

37 
ãrmios
 
øw_£âögs
;

39 
ây_«me
[] = "/dev/tty";

40 
ây
 = 
	`sysˇŒ2
 (
__NR_›í
, ()
ây_«me
, 
HOST_O_RDWR
);

42 i‡(
ây
 == -1) {

43 
	`sysˇŒ1
 (
__NR_exô
, 1);

46 
	`sysˇŒ3
 (
__NR_io˘l
, 
ây
, 
TCGETS
, ()&
deÁu…_£âögs
);

48 
øw_£âögs
 = 
deÁu…_£âögs
;

49 
øw_£âögs
.
c_iÊag
 &~(
IGNBRK
 | 
BRKINT
 | 
INLCR
 | 
IGNCR
 | 
IXON
);

50 
øw_£âögs
.
c_lÊag
 |
ISIG
;

51 
øw_£âögs
.
c_lÊag
 &~(
ECHO
 | 
ECHONL
 | 
ECHOE
 | 
ICANON
 | 
IEXTEN
);

52 
øw_£âögs
.
c_cÊag
 &~(
CSIZE
 | 
PARENB
);

53 
øw_£âögs
.
c_cÊag
 |
CS8
;

54 
øw_£âögs
.
c_cc
[
VQUIT
] = 034;

55 
øw_£âögs
.
c_cc
[
VINTR
] = 0;

56 
øw_£âögs
.
c_cc
[
VERASE
] = 0;

57 
øw_£âögs
.
c_cc
[
VWERASE
] = 0;

58 
	`sysˇŒ3
 (
__NR_io˘l
, 
ây
, 
TCSETS
, ()&
øw_£âögs
);

60 
hód_±r
 = 
èû_±r
 = 0;

61 
pid
 = 
	`sysˇŒ0
 (
__NR_f‹k
);

62 i‡(
pid
 < 0)

63 
	`∑nic
 ("cannot startáio daemon");

64 i‡(
pid
 == 0)

65 
	`c⁄s_d´m⁄
 ();

67 
aio_d´m⁄_pid
 = 
pid
;

68 
	}
}

74 
	$c⁄s_dt‹
 ()

76 
	`sysˇŒ2
 (
__NR_kûl
, 
aio_d´m⁄_pid
, 
SIGKILL
);

77 
	`sysˇŒ3
 (
__NR_io˘l
, 
ây
, 
TCSETS
, ()&
deÁu…_£âögs
);

78 
	`sysˇŒ1
 (
__NR_˛o£
, 
ây
);

79 
	}
}

88 
	$c⁄s_putc
(
c
)

90 
buf
 = ()
c
;

91 
	`sysˇŒ3
 (
__NR_wrôe
, 
ây
, ()&
buf
, 1);

92 
	}
}

99 
	$c⁄s_gëc
()

101 i‡(
hód_±r
 =
èû_±r
)

104 
c
;

105 
c
 = ()
buf„r
[
èû_±r
];

106 
èû_±r
 = (èû_±∏+ 1Ë% 
CONSOLE_BUFFER_SIZE
;

107  
c
;

108 
	}
}

114 
	$£rül_öå
()

116 
	}
}

122 
	$kbd_öå
()

124 
	}
}

	@kern-ucore/arch/um/driver/console.h

1 #i‚de‡
__KERN_DRIVER_CONSOLE_H__


2 
	#__KERN_DRIVER_CONSOLE_H__


	)

4 
c⁄s_öô
();

5 
c⁄s_putc
(
c
);

6 
c⁄s_gëc
();

7 
£rül_öå
();

8 
kbd_öå
();

12 
c⁄s_dt‹
();

15 
	#CONSOLE_BUFFER_SIZE
 10

	)

	@kern-ucore/arch/um/driver/ide.c

1 
	~<ide.h
>

2 
	~<ty≥s.h
>

3 
	~<°dio.h
>

4 
	~<å≠.h
>

5 
	~<fs.h
>

6 
	~<as£π.h
>

7 
	~<memœyout.h
>

8 
	~<¨ch.h
>

9 
	~<£m.h
>

10 
	~<kio.h
>

12 
	#MAX_IDE
 4

	)

13 
	#MAX_NSECS
 128

	)

14 
	#MAX_DISK_NSECS
 0x10000000U

	)

15 
	#VALID_IDE
(
idío
Ë(((idíoË>0Ë&& ((idíoË< 
MAX_IDE
Ë&& (
ide_devi˚s
[idío].
vÆid
))

	)

18 
£m≠h‹e_t
 
	m£m
;

19 } 
	gch™√ls
[2];

22 
	$lock_ch™√l
(
idío
) {

23 
	`down
(&(
ch™√ls
[
idío
 >> 1].
£m
));

24 
	}
}

27 
	$u∆ock_ch™√l
(
idío
) {

28 
	`up
(&(
ch™√ls
[
idío
 >> 1].
£m
));

29 
	}
}

31 
	side_devi˚
 {

32 
	mfd
;

33 
	mvÆid
;

34 
	msize
;

35 } 
	gide_devi˚s
[
MAX_IDE
];

38 
	$ide_öô
() {

39 i‡(
göfo
->
disk_fd
 > 0) {

40 
ide_devi˚s
[
DISK0_DEV_NO
].
fd
 = 
göfo
->
disk_fd
;

41 
ide_devi˚s
[
DISK0_DEV_NO
].
vÆid
 = 1;

42 
ide_devi˚s
[
DISK0_DEV_NO
].
size
 = 
göfo
->
disk_size
;

43 
	`k¥ötf
 ("disk fûêsize: %d (£˘‹s)\n", 
göfo
->
sw≠_size
);

45 
ide_devi˚s
[
DISK0_DEV_NO
].
vÆid
 = 0;

48 i‡(
göfo
->
sw≠_fd
 > 0) {

49 
ide_devi˚s
[
SWAP_DEV_NO
].
fd
 = 
göfo
->
sw≠_fd
;

50 
ide_devi˚s
[
SWAP_DEV_NO
].
vÆid
 = 1;

51 
ide_devi˚s
[
SWAP_DEV_NO
].
size
 = 
göfo
->
sw≠_size
;

52 
	`k¥ötf
 ("sw≠ fûêsize: %d (£˘‹s)\n", 
göfo
->
sw≠_size
);

54 
ide_devi˚s
[
SWAP_DEV_NO
].
vÆid
 = 0;

57 
	`£m_öô
(&(
ch™√ls
[0].
£m
), 1);

58 
	`£m_öô
(&(
ch™√ls
[1].
£m
), 1);

59 
	}
}

61 
boﬁ


62 
	$ide_devi˚_vÆid
(
idío
) {

63  
	`VALID_IDE
(
idío
);

64 
	}
}

66 
size_t


67 
	$ide_devi˚_size
(
idío
) {

68 i‡(
	`ide_devi˚_vÆid
(
idío
)) {

69  
ide_devi˚s
[
idío
].
size
;

72 
	}
}

75 
	$ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
) {

76 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

77 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

79 
ªt
;

80 
	`lock_ch™√l
(
idío
);

81 
ªt
 = 
	`sysˇŒ3
 (
__NR_l£ek
, 
ide_devi˚s
[
idío
].
fd
, 
£˙o
 * 
SECTSIZE
, 
SEEK_SET
);

82 i‡(
ªt
 != -1)

83 
ªt
 = 
	`sysˇŒ3
 (
__NR_ªad
, 
ide_devi˚s
[
idío
].
fd
, ()
d°
, 
n£cs
 * 
SECTSIZE
);

84 
	`u∆ock_ch™√l
(
idío
);

86 i‡(
ªt
 > 0)

88  
ªt
;

89 
	}
}

92 
	$ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
) {

93 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

94 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

96 
ªt
;

97 
	`lock_ch™√l
(
idío
);

98 
ªt
 = 
	`sysˇŒ3
 (
__NR_l£ek
, 
ide_devi˚s
[
idío
].
fd
, 
£˙o
 * 
SECTSIZE
, 
SEEK_SET
);

99 i‡(
ªt
 != -1)

100 
ªt
 = 
	`sysˇŒ3
 (
__NR_wrôe
, 
ide_devi˚s
[
idío
].
fd
, ()
§c
, 
n£cs
 * 
SECTSIZE
);

101 
	`u∆ock_ch™√l
(
idío
);

103 i‡(
ªt
 > 0)

105  
ªt
;

106 
	}
}

	@kern-ucore/arch/um/driver/ide.h

1 #i‚de‡
__ARCH_UM_DRIVERS_IDE_H__


2 
	#__ARCH_UM_DRIVERS_IDE_H__


	)

4 
	~<ty≥s.h
>

6 
ide_öô
();

7 
boﬁ
 
ide_devi˚_vÆid
(
idío
);

8 
size_t
 
ide_devi˚_size
(
idío
);

10 
ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

11 
ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

	@kern-ucore/arch/um/driver/intr.c

1 
	~<öå.h
>

2 
	~<¨ch.h
>

3 
	~<as£π.h
>

4 
	~<°dio.h
>

5 
	~<kio.h
>

7 
sig£t_t
 
	gdißbÀd
;

16 
	$öå_íabÀ
 ()

18 
	`sysˇŒ3
 (
__NR_sig¥ocmask
, 
SIG_UNBLOCK
, ()&
dißbÀd
, 0);

24 
	}
}

32 
	$öå_dißbÀ
 ()

34 
	`sysˇŒ3
 (
__NR_sig¥ocmask
, 
SIG_BLOCK
, ()&
dißbÀd
, 0);

35 
	}
}

37 
	gsigcou¡
 = 0;

44 
	$öå_check_h™dÀr
 (
sig
)

46 
	`as£π
 (
sig
 =
SIGIO
);

47 
sigcou¡
 ++;

48 
	}
}

54 
	$öå_check
 ()

57 
siga˘i⁄
 
siga˘
, 
deÁu…a˘
;

58 
siga˘
.
ß_h™dÀr
 = 
öå_check_h™dÀr
;

59 
	`sigem±y£t
 (&
siga˘
.
ß_mask
);

60 
siga˘
.
ß_Êags
 = 0;

61 
	`sysˇŒ3
 (
__NR_siga˘i⁄
, 
SIGIO
, ()&
siga˘
, ()&
deÁu…a˘
);

63 
	`as£π
 (
sigcou¡
 == 0);

65 
	`øi£
 (
SIGIO
);

66 
	`as£π
 (
sigcou¡
 == 1);

67 
	`øi£
 (
SIGIO
);

68 
	`as£π
 (
sigcou¡
 == 2);

70 
	`öå_dißbÀ
 ();

71 
	`øi£
 (
SIGIO
);

72 
	`as£π
 (
sigcou¡
 == 2);

73 
	`øi£
 (
SIGIO
);

74 
	`as£π
 (
sigcou¡
 == 2);

76 
	`öå_íabÀ
 ();

77 
	`as£π
 (
sigcou¡
 == 3);

78 
	`øi£
 (
SIGIO
);

79 
	`as£π
 (
sigcou¡
 == 4);

81 
	`sysˇŒ3
 (
__NR_siga˘i⁄
, 
SIGIO
, ()&
deÁu…a˘
, 0);

83 
	`k¥ötf
 ("intr_check() succeeded.\n");

84 
	}
}

92 
	$öå_öô
 ()

94 
	`sigem±y£t
 (&
dißbÀd
);

95 
	`sigadd£t
 (&
dißbÀd
, 
SIGIO
);

97 
	`öå_check
 ();

98 
	}
}

	@kern-ucore/arch/um/driver/intr.h

1 #i‚de‡
__ARCH_UM_DRIVERS_INTR_H__


2 
	#__ARCH_UM_DRIVERS_INTR_H__


	)

4 
öå_öô
 ();

5 
öå_íabÀ
 ();

6 
öå_dißbÀ
 ();

	@kern-ucore/arch/um/driver/umclock.c

1 
	~<um˛ock.h
>

2 
	~<¨ch.h
>

3 
	~<°dio.h
>

5 vﬁ©ûê
size_t
 
	gticks
;

12 
	$um˛ock_öô
 ()

14  
	`um˛ock_£t_öãrvÆ
 (
DEFAULT_TV_SEC
, 
DEFAULT_TV_USEC
);

15 
	}
}

24 
	$um˛ock_£t_öãrvÆ
 (
£c
, 
u£c
)

26 
ôimîvÆ
 
öãrvÆ
 = ((ôimîvÆË{{
£c
, 
u£c
}, {sec, usec}});

27  
	`sysˇŒ3
 (
__NR_£tôimî
, 
ITIMER_VIRTUAL
, ()&
öãrvÆ
, 0);

28 
	}
}

	@kern-ucore/arch/um/driver/umclock.h

1 #i‚de‡
__ARCH_UM_DRIVERS_CLOCK_H__


2 
	#__ARCH_UM_DRIVERS_CLOCK_H__


	)

4 
	~<ty≥s.h
>

6 
	#DEFAULT_TV_SEC
 0

	)

7 
	#DEFAULT_TV_USEC
 5000

	)

9 
	#TICK_NUM
 30

	)

11 vﬁ©ûê
size_t
 
ticks
;

13 
um˛ock_öô
 ();

14 
um˛ock_£t_öãrvÆ
 (
£c
, 
u£c
);

	@kern-ucore/arch/um/glue-ucore/kio.c

1 
	~<kio.h
>

2 
	~<c⁄sﬁe.h
>

3 
	~<glue_öå.h
>

4 
	~<°dio.h
>

5 
	~<•ölock.h
>

6 
	~<°d¨g.h
>

7 
	~<uni°d.h
>

14 
	$˝utch
(
c
, *
˙t
, 
fd
) {

15 
	`c⁄s_putc
(
c
);

16 (*
˙t
) ++;

17 
	}
}

19 
•ölock_s
 
	gk¥ötf_lock
 = {0};

31 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
) {

32 
˙t
 = 0;

33 
Êag
;

34 
	`loˇl_öå_ßve_hw
(
Êag
);

35 
	`•ölock_acquúe
(&
k¥ötf_lock
);

36 
	`v¥ötfmt
((*)
˝utch
, 
NO_FD
, &
˙t
, 
fmt
, 
≠
);

37 
	`•ölock_ªÀa£
(&
k¥ötf_lock
);

38 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

39  
˙t
;

40 
	}
}

49 
	$k¥ötf
(c⁄° *
fmt
, ...) {

50 
va_li°
 
≠
;

51 
˙t
;

52 
	`va_°¨t
(
≠
, 
fmt
);

53 
˙t
 = 
	`vk¥ötf
(
fmt
, 
≠
);

54 
	`va_íd
(
≠
);

55  
˙t
;

56 
	}
}

	@kern-ucore/arch/um/glue-ucore/libs/arch.h

1 #i‚de‡
__ARCH_UM_INCLUDE_ARCH_H__


2 
	#__ARCH_UM_INCLUDE_ARCH_H__


	)

4 
	~<löux/sysˇŒ.h
>

5 
	~<löux/sig«l.h
>

6 
	~<löux/±ø˚.h
>

7 
	~<löux/waô.h
>

8 
	~<löux/f˙é.h
>

9 
	~<löux/io˘l.h
>

10 
	~<löux/mm≠.h
>

11 
	~<löux/time.h
>

12 
	~<löux/£tjmp.h
>

13 
	~<löux/¥o˚ss.h
>

15 #i‚de‡
__ASSEMBLER__


18 
	#do_div
(
n
, 
ba£
) ({ \

19 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

20 
__ba£
 = (
ba£
); \

21 
	`asm
("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

22 
__uµî
 = 
__high
; \

23 i‡(
__high
 != 0) { \

24 
__uµî
 = 
__high
 % 
__ba£
; \

25 
__high
 = __high / 
__ba£
; \

27 
	`asm
("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

28 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

29 
	`asm
("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

30 
__mod
; \

31 })

	)

33 
ho°_exô
 (
sig
);

	@kern-ucore/arch/um/glue-ucore/libs/atomic.h

1 #i‚de‡
__ARCH_UM_INCLUDE_ATOMIC_H


2 
	#__ARCH_UM_INCLUDE_ATOMIC_H


	)

4 
	~<ty≥s.h
>

9 vﬁ©ûê
	mcou¡î
;

10 } 
	t©omic_t
;

12 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 

31 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

32  
v
->
cou¡î
;

33 
	}
}

42 
ölöe
 

43 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

44 
v
->
cou¡î
 = 
i
;

45 
	}
}

54 
ölöe
 

55 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

56 
asm
 vﬁ©ûê("add»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

57 
	}
}

66 
ölöe
 

67 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

68 
asm
 vﬁ©ûe("sub»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

69 
	}
}

79 
ölöe
 
boﬁ


80 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

81 
c
;

82 
asm
 vﬁ©ûe("sub»%2, %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
Ë: "ú" (
i
) : "memory");

83  
c
 != 0;

84 
	}
}

92 
ölöe
 

93 
	$©omic_öc
(
©omic_t
 *
v
) {

94 
asm
 vﬁ©ûe("ö˛ %0" : "+m" (
v
->
cou¡î
));

95 
	}
}

103 
ölöe
 

104 
	$©omic_dec
(
©omic_t
 *
v
) {

105 
asm
 vﬁ©ûe("de˛ %0" : "+m" (
v
->
cou¡î
));

106 
	}
}

115 
ölöe
 
boﬁ


116 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

117 
c
;

118 
asm
 vﬁ©ûe("ö˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

119  
c
 != 0;

120 
	}
}

129 
ölöe
 
boﬁ


130 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

131 
c
;

132 
asm
 vﬁ©ûe("de˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

133  
c
 != 0;

134 
	}
}

144 
ölöe
 

145 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

146 
__i
 = 
i
;

147 
asm
 vﬁ©ûe("xadd»%0, %1" : "+r" (
i
), "+m" (
v
->
cou¡î
) :: "memory");

148  
i
 + 
__i
;

149 
	}
}

158 
ölöe
 

159 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

160  
	`©omic_add_ªtu∫
(
v
, -
i
);

161 
	}
}

163 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

168 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

169 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

179 
ölöe
 

180 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

181 
asm
 vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

182 
	}
}

189 
ölöe
 

190 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

191 
asm
 vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

192 
	}
}

199 
ölöe
 

200 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

201 
asm
 vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

202 
	}
}

209 
ölöe
 
boﬁ


210 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

211 
ﬁdbô
;

212 
asm
 vﬁ©ûê("bt¶ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

213  
ﬁdbô
 != 0;

214 
	}
}

221 
ölöe
 
boﬁ


222 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

223 
ﬁdbô
;

224 
asm
 vﬁ©ûê("bå»%2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

225  
ﬁdbô
 != 0;

226 
	}
}

233 
ölöe
 
boﬁ


234 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

235 
ﬁdbô
;

236 
asm
 vﬁ©ûê("bt˛ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

237  
ﬁdbô
 != 0;

238 
	}
}

245 
ölöe
 
boﬁ


246 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

247 
ﬁdbô
;

248 
asm
 vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
ﬁdbô
Ë: "m" (*(vﬁ©ûê*)
addr
), "Ir" (
ƒ
));

249  
ﬁdbô
 != 0;

250 
	}
}

	@kern-ucore/arch/um/glue-ucore/libs/host_signal.h

1 #i‚de‡
__ARCH_UM_INCLUDE_HOST_SIGNAL_H__


2 
	#__ARCH_UM_INCLUDE_HOST_SIGNAL_H__


	)

4 
	~<¨ch.h
>

5 
	~<ty≥s.h
>

11 
	s_Âx_sw_byãs
 {

12 
uöt32_t
 
	mmagic1
;

13 
uöt32_t
 
	mexãnded_size
;

16 
uöt64_t
 
	mx°©e_bv
;

21 
uöt32_t
 
	mx°©e_size
;

26 
uöt32_t
 
	m∑ddög
[7];

29 
	s_Âªg
 {

30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg
 {

35 
	msignifiˇnd
[4];

36 
	mexp⁄ít
;

37 
	m∑ddög
[3];

40 
	s_xmmªg
 {

41 
	mñemít
[4];

44 
	s_Â°©e
 {

46 
	mcw
;

47 
	msw
;

48 
	mèg
;

49 
	mùoff
;

50 
	mcs£l
;

51 
	md©aoff
;

52 
	md©a£l
;

53 
_Âªg
 
	m_°
[8];

54 
	m°©us
;

55 
	mmagic
;

58 
	m_fx§_ív
[6];

59 
	mmxc§
;

60 
	mª£rved
;

61 
_Âxªg
 
	m_fx§_°
[8];

62 
_xmmªg
 
	m_xmm
[8];

63 
	m∑ddög1
[44];

66 
	m∑ddög2
[12];

67 
_Âx_sw_byãs
 
	msw_ª£rved
;

71 
	ssigc⁄ãxt
 {

72 
	mgs
, 
	m__gsh
;

73 
	mfs
, 
	m__fsh
;

74 
	mes
, 
	m__esh
;

75 
	mds
, 
	m__dsh
;

76 
	medi
;

77 
	mesi
;

78 
	mebp
;

79 
	me•
;

80 
	mebx
;

81 
	medx
;

82 
	mecx
;

83 
	móx
;

84 
	må≠no
;

85 
	mîr
;

86 
	meù
;

87 
	mcs
, 
	m__csh
;

88 
	meÊags
;

89 
	me•_©_sig«l
;

90 
	mss
, 
	m__ssh
;

91 
_Â°©e
 *
	mÂ°©e
;

92 
	mﬁdmask
;

93 
	m¸2
;

100 
£gv_h™dÀr
 (
sig
, 
um_±_ªgs
 *
ªgs
);

101 
io_h™dÀr
 (
sig
, 
um_±_ªgs
 *
ªgs
);

102 
vtimî_h™dÀr
 (
sig
, 
um_±_ªgs
 *
ªgs
);

104 
ho°_sig«l_öô
 ();

	@kern-ucore/arch/um/glue-ucore/libs/host_syscall.h

1 #i‚de‡
__ARCH_UM_INCLUDE_HOST_SYSCALL_H__


2 
	#__ARCH_UM_INCLUDE_HOST_SYSCALL_H__


	)

4 
	~<ty≥s.h
>

6 
	g¥oc_°ru˘
;

8 
ho°_mm≠
 (
¥oc_°ru˘
 *
¥oc
,

9 *
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
,

10 
fd
, 
uöt32_t
 
off£t
);

11 
ho°_munm≠
 (
¥oc_°ru˘
 *
¥oc
,

12 *
addr
, 
size_t
 
Àngth
);

13 
ho°_assign
 (
¥oc_°ru˘
 *
¥oc
,

14 
uöçå_t
 
addr
, 
uöt32_t
 
d©a
);

15 
ho°_gëvÆue
 (
¥oc_°ru˘
 *
¥oc
,

16 
uöçå_t
 
addr
, 
uöt32_t
* 
d©a
);

17 
ho°_m≠_u£r
 (
¥oc_°ru˘
 *
¥oc
,

18 
uöçå_t
 
addr
, 
size_t
 
Àn
,

19 
is_wrôe
);

	@kern-ucore/arch/um/glue-ucore/libs/linux/fcntl.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_FCNTL_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_FCNTL_H__


	)

4 
	#HOST_O_ACCMODE
 00000003

	)

5 
	#HOST_O_RDONLY
 00000000

	)

6 
	#HOST_O_WRONLY
 00000001

	)

7 
	#HOST_O_RDWR
 00000002

	)

10 
	#SEEK_SET
 0

	)

11 
	#SEEK_CUR
 1

	)

12 
	#SEEK_END
 2

	)

	@kern-ucore/arch/um/glue-ucore/libs/linux/ioctl.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_IONTL_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_IONTL_H__


	)

4 
	tcc_t
;

5 
	ttcÊag_t
;

7 
	#NCCS
 19

	)

8 
	sãrmios
 {

9 
tcÊag_t
 
	mc_iÊag
;

10 
tcÊag_t
 
	mc_oÊag
;

11 
tcÊag_t
 
	mc_cÊag
;

12 
tcÊag_t
 
	mc_lÊag
;

13 
cc_t
 
	mc_löe
;

14 
cc_t
 
	mc_cc
[
NCCS
];

18 
	#IGNBRK
 0000001

	)

19 
	#BRKINT
 0000002

	)

20 
	#IGNPAR
 0000004

	)

21 
	#PARMRK
 0000010

	)

22 
	#INPCK
 0000020

	)

23 
	#ISTRIP
 0000040

	)

24 
	#INLCR
 0000100

	)

25 
	#IGNCR
 0000200

	)

26 
	#ICRNL
 0000400

	)

27 
	#IUCLC
 0001000

	)

28 
	#IXON
 0002000

	)

29 
	#IXANY
 0004000

	)

30 
	#IXOFF
 0010000

	)

31 
	#IMAXBEL
 0020000

	)

32 
	#IUTF8
 0040000

	)

35 
	#OPOST
 0000001

	)

36 
	#OLCUC
 0000002

	)

37 
	#ONLCR
 0000004

	)

38 
	#OCRNL
 0000010

	)

39 
	#ONOCR
 0000020

	)

40 
	#ONLRET
 0000040

	)

41 
	#OFILL
 0000100

	)

42 
	#OFDEL
 0000200

	)

43 
	#NLDLY
 0000400

	)

44 
	#NL0
 0000000

	)

45 
	#NL1
 0000400

	)

46 
	#CRDLY
 0003000

	)

47 
	#CR0
 0000000

	)

48 
	#CR1
 0001000

	)

49 
	#CR2
 0002000

	)

50 
	#CR3
 0003000

	)

51 
	#TABDLY
 0014000

	)

52 
	#TAB0
 0000000

	)

53 
	#TAB1
 0004000

	)

54 
	#TAB2
 0010000

	)

55 
	#TAB3
 0014000

	)

56 
	#XTABS
 0014000

	)

57 
	#BSDLY
 0020000

	)

58 
	#BS0
 0000000

	)

59 
	#BS1
 0020000

	)

60 
	#VTDLY
 0040000

	)

61 
	#VT0
 0000000

	)

62 
	#VT1
 0040000

	)

63 
	#FFDLY
 0100000

	)

64 
	#FF0
 0000000

	)

65 
	#FF1
 0100000

	)

68 
	#CBAUD
 0010017

	)

69 
	#B0
 0000000

	)

70 
	#B50
 0000001

	)

71 
	#B75
 0000002

	)

72 
	#B110
 0000003

	)

73 
	#B134
 0000004

	)

74 
	#B150
 0000005

	)

75 
	#B200
 0000006

	)

76 
	#B300
 0000007

	)

77 
	#B600
 0000010

	)

78 
	#B1200
 0000011

	)

79 
	#B1800
 0000012

	)

80 
	#B2400
 0000013

	)

81 
	#B4800
 0000014

	)

82 
	#B9600
 0000015

	)

83 
	#B19200
 0000016

	)

84 
	#B38400
 0000017

	)

85 
	#EXTA
 
B19200


	)

86 
	#EXTB
 
B38400


	)

87 
	#CSIZE
 0000060

	)

88 
	#CS5
 0000000

	)

89 
	#CS6
 0000020

	)

90 
	#CS7
 0000040

	)

91 
	#CS8
 0000060

	)

92 
	#CSTOPB
 0000100

	)

93 
	#CREAD
 0000200

	)

94 
	#PARENB
 0000400

	)

95 
	#PARODD
 0001000

	)

96 
	#HUPCL
 0002000

	)

97 
	#CLOCAL
 0004000

	)

98 
	#CBAUDEX
 0010000

	)

99 
	#BOTHER
 0010000

	)

100 
	#B57600
 0010001

	)

101 
	#B115200
 0010002

	)

102 
	#B230400
 0010003

	)

103 
	#B460800
 0010004

	)

104 
	#B500000
 0010005

	)

105 
	#B576000
 0010006

	)

106 
	#B921600
 0010007

	)

107 
	#B1000000
 0010010

	)

108 
	#B1152000
 0010011

	)

109 
	#B1500000
 0010012

	)

110 
	#B2000000
 0010013

	)

111 
	#B2500000
 0010014

	)

112 
	#B3000000
 0010015

	)

113 
	#B3500000
 0010016

	)

114 
	#B4000000
 0010017

	)

115 
	#CIBAUD
 002003600000

	)

116 
	#CMSPAR
 010000000000

	)

117 
	#CRTSCTS
 020000000000

	)

119 
	#IBSHIFT
 16

	)

122 
	#ISIG
 0000001

	)

123 
	#ICANON
 0000002

	)

124 
	#XCASE
 0000004

	)

125 
	#ECHO
 0000010

	)

126 
	#ECHOE
 0000020

	)

127 
	#ECHOK
 0000040

	)

128 
	#ECHONL
 0000100

	)

129 
	#NOFLSH
 0000200

	)

130 
	#TOSTOP
 0000400

	)

131 
	#ECHOCTL
 0001000

	)

132 
	#ECHOPRT
 0002000

	)

133 
	#ECHOKE
 0004000

	)

134 
	#FLUSHO
 0010000

	)

135 
	#PENDIN
 0040000

	)

136 
	#IEXTEN
 0100000

	)

139 
	#VINTR
 0

	)

140 
	#VQUIT
 1

	)

141 
	#VERASE
 2

	)

142 
	#VKILL
 3

	)

143 
	#VEOF
 4

	)

144 
	#VTIME
 5

	)

145 
	#VMIN
 6

	)

146 
	#VSWTC
 7

	)

147 
	#VSTART
 8

	)

148 
	#VSTOP
 9

	)

149 
	#VSUSP
 10

	)

150 
	#VEOL
 11

	)

151 
	#VREPRINT
 12

	)

152 
	#VDISCARD
 13

	)

153 
	#VWERASE
 14

	)

154 
	#VLNEXT
 15

	)

155 
	#VEOL2
 16

	)

158 
	#TCGETS
 0x5401

	)

159 
	#TCSETS
 0x5402

	)

	@kern-ucore/arch/um/glue-ucore/libs/linux/mmap.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_MMAP_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_MMAP_H__


	)

4 
	#PROT_READ
 0x1

	)

5 
	#PROT_WRITE
 0x2

	)

6 
	#PROT_EXEC
 0x4

	)

7 
	#PROT_SEM
 0x8

	)

8 
	#PROT_NONE
 0x0

	)

9 
	#PROT_GROWSDOWN
 0x01000000

	)

10 
	#PROT_GROWSUP
 0x02000000

	)

12 
	#MAP_SHARED
 0x01

	)

13 
	#MAP_PRIVATE
 0x02

	)

14 
	#MAP_TYPE
 0x0‡

	)

15 
	#MAP_FIXED
 0x10

	)

16 
	#MAP_ANONYMOUS
 0x20

	)

18 
	#MAP_FAILED
 (-1)

	)

	@kern-ucore/arch/um/glue-ucore/libs/linux/process.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_PROCESS_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_PROCESS_H__


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#OS_CLONE_VM
 0x00000100

	)

9 
	#OS_CLONE_FS
 0x00000200

	)

10 
	#OS_CLONE_FILES
 0x00000400

	)

11 
	#OS_CLONE_SIGHAND
 0x00000800

	)

12 
	#OS_CLONE_PTRACE
 0x00002000

	)

13 
	#OS_CLONE_VFORK
 0x00004000

	)

14 
	#OS_CLONE_PARENT
 0x00008000

	)

15 
	#OS_CLONE_THREAD
 0x00010000

	)

16 
	#OS_CLONE_NEWNS
 0x00020000

	)

17 
	#OS_CLONE_SYSVSEM
 0x00040000

	)

18 
	#OS_CLONE_SETTLS
 0x00080000

	)

19 
	#OS_CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#OS_CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#OS_CLONE_DETACHED
 0x00400000

	)

22 
	#OS_CLONE_UNTRACED
 0x00800000

	)

23 
	#OS_CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#OS_CLONE_STOPPED
 0x02000000

	)

25 
	#OS_CLONE_NEWUTS
 0x04000000

	)

26 
	#OS_CLONE_NEWIPC
 0x08000000

	)

27 
	#OS_CLONE_NEWUSER
 0x10000000

	)

28 
	#OS_CLONE_NEWPID
 0x20000000

	)

29 
	#OS_CLONE_NEWNET
 0x40000000

	)

30 
	#OS_CLONE_IO
 0x80000000

	)

	@kern-ucore/arch/um/glue-ucore/libs/linux/ptrace.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_PTRACE_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_PTRACE_H__


	)

4 
	#PTRACE_TRACEME
 0

	)

5 
	#PTRACE_PEEKTEXT
 1

	)

6 
	#PTRACE_PEEKDATA
 2

	)

7 
	#PTRACE_PEEKUSR
 3

	)

8 
	#PTRACE_POKETEXT
 4

	)

9 
	#PTRACE_POKEDATA
 5

	)

10 
	#PTRACE_POKEUSR
 6

	)

11 
	#PTRACE_CONT
 7

	)

12 
	#PTRACE_KILL
 8

	)

13 
	#PTRACE_SINGLESTEP
 9

	)

14 
	#PTRACE_GETREGS
 12

	)

15 
	#PTRACE_SETREGS
 13

	)

16 
	#PTRACE_GETFPREGS
 14

	)

17 
	#PTRACE_SETFPREGS
 15

	)

18 
	#PTRACE_ATTACH
 16

	)

19 
	#PTRACE_DETACH
 17

	)

20 
	#PTRACE_OLDSETOPTIONS
 21

	)

21 
	#PTRACE_SYSCALL
 24

	)

22 
	#PTRACE_SYSEMU
 31

	)

23 
	#PTRACE_SYSEMU_SINGLESTEP
 32

	)

26 
	#PTRACE_SETOPTIONS
 0x4200

	)

27 
	#PTRACE_GETEVENTMSG
 0x4201

	)

28 
	#PTRACE_GETSIGINFO
 0x4202

	)

29 
	#PTRACE_SETSIGINFO
 0x4203

	)

31 
	e__±ø˚_£t›ti⁄s
 {

32 
	mPTRACE_O_TRACESYSGOOD
 = 0x00000001,

33 
	mPTRACE_O_TRACEFORK
 = 0x00000002,

34 
	mPTRACE_O_TRACEVFORK
 = 0x00000004,

35 
	mPTRACE_O_TRACECLONE
 = 0x00000008,

36 
	mPTRACE_O_TRACEEXEC
 = 0x00000010,

37 
	mPTRACE_O_TRACEVFORKDONE
 = 0x00000020,

38 
	mPTRACE_O_TRACEEXIT
 = 0x00000040,

39 
	mPTRACE_O_MASK
 = 0x0000007f

43 
	su£r_ªgs_°ru˘


45 
	mebx
;

46 
	mecx
;

47 
	medx
;

48 
	mesi
;

49 
	medi
;

50 
	mebp
;

51 
	móx
;

52 
	mxds
;

53 
	mxes
;

54 
	mxfs
;

55 
	mxgs
;

56 
	m‹ig_óx
;

57 
	meù
;

58 
	mxcs
;

59 
	meÊags
;

60 
	me•
;

61 
	mxss
;

64 
	#FAULT_P
 0x1

	)

65 
	#FAULT_W
 0x2

	)

67 
	sÁu…öfo
 {

68 
	mîr‹_code
;

69 
	m¸2
;

70 
	må≠_no
;

73 
	sum_±_ªgs
 {

74 
u£r_ªgs_°ru˘
 
	mªgs
;

75 
Áu…öfo
 
	mÁu…öfo
;

76 
	msysˇŒ
;

77 
	mis_u£r
;

	@kern-ucore/arch/um/glue-ucore/libs/linux/setjmp.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_SETJMP_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_SETJMP_H__


	)

4 #i‚de‡
__ASSEMBLER__


6 
	~<ty≥s.h
>

8 
	s__jmp_buf
 {

9 
uöt32_t
 
	m__ebx
;

10 
uöt32_t
 
	m__e•
;

11 
uöt32_t
 
	m__ebp
;

12 
uöt32_t
 
	m__esi
;

13 
uöt32_t
 
	m__edi
;

14 
uöt32_t
 
	m__eù
;

17 
__jmp_buf
 
	tjmp_buf
[1];

19 
£tjmp
 (
jmp_buf
);

20 
l⁄gjmp
 (
jmp_buf
, );

	@kern-ucore/arch/um/glue-ucore/libs/linux/signal.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_SIGNAL_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_SIGNAL_H__


	)

5 #i‚de‡
SIGKILL


6 
	#NSIG
 32

	)

7 
	#SIGHUP
 1

	)

8 
	#SIGINT
 2

	)

9 
	#SIGQUIT
 3

	)

10 
	#SIGILL
 4

	)

11 
	#SIGTRAP
 5

	)

12 
	#SIGABRT
 6

	)

13 
	#SIGIOT
 6

	)

14 
	#SIGBUS
 7

	)

15 
	#SIGFPE
 8

	)

16 
	#SIGKILL
 9

	)

17 
	#SIGUSR1
 10

	)

18 
	#SIGSEGV
 11

	)

19 
	#SIGUSR2
 12

	)

20 
	#SIGPIPE
 13

	)

21 
	#SIGALRM
 14

	)

22 
	#SIGTERM
 15

	)

23 
	#SIGSTKFLT
 16

	)

24 
	#SIGCHLD
 17

	)

25 
	#SIGCONT
 18

	)

26 
	#SIGSTOP
 19

	)

27 
	#SIGTSTP
 20

	)

28 
	#SIGTTIN
 21

	)

29 
	#SIGTTOU
 22

	)

30 
	#SIGURG
 23

	)

31 
	#SIGXCPU
 24

	)

32 
	#SIGXFSZ
 25

	)

33 
	#SIGVTALRM
 26

	)

34 
	#SIGPROF
 27

	)

35 
	#SIGWINCH
 28

	)

36 
	#SIGIO
 29

	)

37 
	#SIGPOLL
 
SIGIO


	)

38 
	#SIGPWR
 30

	)

39 
	#SIGSYS
 31

	)

40 
	#SIGUNUSED
 31

	)

41 
	#SIGRTMIN
 32

	)

42 
	#SIGRTMAX
 
_NSIG


	)

46 
	#SA_NOCLDSTOP
 1

	)

47 
	#SA_NOCLDWAIT
 2

	)

48 
	#SA_SIGINFO
 4

	)

50 
	#SA_ONSTACK
 0x08000000

	)

51 
	#SA_RESTART
 0x10000000

	)

52 
	#SA_NODEFER
 0x40000000

	)

54 
	#SA_RESETHAND
 0x80000000

	)

57 
	#SIG_BLOCK
 0

	)

58 
	#SIG_UNBLOCK
 1

	)

59 
	#SIG_SETMASK
 2

	)

61 #i‚de‡
__ASSEMBLER__


63 
	~<°rög.h
>

64 
	~<ty≥s.h
>

66 
	#__SI_MAX_SIZE
 128

	)

67 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

68 
	usigvÆ
 {

69 
	msivÆ_öt
;

70 *
	msivÆ_±r
;

71 } 
	tsigvÆ_t
;

72 
	ssigöfo
 {

73 
	msi_signo
;

74 
	msi_î∫o
;

76 
	msi_code
;

79 
	m_∑d
[
__SI_PAD_SIZE
];

83 
öt32_t
 
	msi_pid
;

84 
öt32_t
 
	msi_uid
;

85 } 
	m_kûl
;

89 
	msi_tid
;

90 
	msi_ovîrun
;

91 
sigvÆ_t
 
	msi_sigvÆ
;

92 } 
	m_timî
;

96 
öt32_t
 
	msi_pid
;

97 
öt32_t
 
	msi_uid
;

98 
sigvÆ_t
 
	msi_sigvÆ
;

99 } 
	m_π
;

103 
öt32_t
 
	msi_pid
;

104 
öt32_t
 
	msi_uid
;

105 
	msi_°©us
;

106 
	msi_utime
;

107 
	msi_°ime
;

108 } 
	m_sigchld
;

112 *
	msi_addr
;

113 
	m_å≠no
;

114 } 
	m_sigÁu…
;

118 
	msi_b™d
;

119 
	msi_fd
;

120 } 
	m_sigpﬁl
;

121 } 
	m_sifõlds
;

122 } 
	tsigöfo_t
;

124 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

125 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

126 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

127 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

128 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

129 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

130 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

131 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

132 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

133 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

134 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

135 
	#si_å≠no
 
_sifõlds
.
_sigÁu…
.
_å≠no


	)

136 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

137 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

142 
	mSEGV_MAPERR
 = 1,

143 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

144 
	mSEGV_ACCERR


145 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

149 
	#_NSIG
 1024

	)

150 
	#_NSIG_BPW
 (8 *  ())

	)

151 
	#_NSIG_WORDS
 (
_NSIG
 / 
_NSIG_BPW
)

	)

153 
	msig
[
_NSIG_WORDS
];

154 } 
	tsig£t_t
;

157 (*
	t__sigh™dÀr_t
) ();

159 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

160 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

161 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

163 
	ssiga˘i⁄
 {

165 
__sigh™dÀr_t
 
_ß_h™dÀr
;

166 (*
_ß_siga˘i⁄
)(, 
sigöfo
 *, *);

167 } 
_u
;

168 
sig£t_t
 
ß_mask
;

169 
ß_Êags
;

170 (*
ß_ª°‹î
)();

172 
	#ß_h™dÀr
 
_u
.
_ß_h™dÀr


	)

173 
	#ß_siga˘i⁄
 
_u
.
_ß_siga˘i⁄


	)

175 
	ssigÆt°ack
 {

176 *
ss_•
;

177 
uöt32_t
 
ss_Êags
;

178 
size_t
 
ss_size
;

179 } 
	t°ack_t
;

182 * 
sig_«mes
[];

184 
	`øi£
 (
signum
);

185 
	`sigem±y£t
 (
sig£t_t
 *
£t
);

186 
	`sigadd£t
 (
sig£t_t
 *
£t
, 
_sig
);

187 
	`sigismembî
 (
sig£t_t
 *
£t
, 
_sig
);

	@kern-ucore/arch/um/glue-ucore/libs/linux/syscall.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_SYSCALL_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_SYSCALL_H__


	)

4 
	#__NR_exô
 1

	)

5 
	#__NR_f‹k
 2

	)

6 
	#__NR_ªad
 3

	)

7 
	#__NR_wrôe
 4

	)

8 
	#__NR_›í
 5

	)

9 
	#__NR_˛o£
 6

	)

10 
	#__NR_waôpid
 7

	)

11 
	#__NR_u∆ök
 10

	)

12 
	#__NR_l£ek
 19

	)

13 
	#__NR_gëpid
 20

	)

14 
	#__NR_±ø˚
 26

	)

15 
	#__NR_kûl
 37

	)

16 
	#__NR_sys_sig«l
 48

	)

17 
	#__NR_io˘l
 54

	)

18 
	#__NR_gëµid
 64

	)

19 
	#__NR_siga˘i⁄
 67

	)

20 
	#__NR_sig≥ndög
 73

	)

21 
	#__NR_mm≠
 90

	)

22 
	#__NR_munm≠
 91

	)

23 
	#__NR_£tôimî
 104

	)

24 
	#__NR_sig¥ocmask
 126

	)

25 
	#__NR_«no¶ìp
 162

	)

26 
	#__NR_sigÆt°ack
 186

	)

28 #i‚de‡
__ASSEMBLER__


31 
	smm≠_¨g_°ru˘
 {

32 
	maddr
;

33 
	mÀn
;

34 
	m¥Ÿ
;

35 
	mÊags
;

36 
	mfd
;

37 
	moff£t
;

40 
ölöe
 
	$sysˇŒ0
(
sysˇŒ
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
	$sysˇŒ1
(
sysˇŒ
, 
¨g1
Ë
	`__©åibuã__
((
Æways_ölöe
));

42 
ölöe
 
	$sysˇŒ2
(
sysˇŒ
, 
¨g1
, 
¨g2
Ë
	`__©åibuã__
((
Æways_ölöe
));

43 
ölöe
 
	$sysˇŒ3
(
sysˇŒ
, 
¨g1
, 
¨g2
,

44 
¨g3
Ë
	`__©åibuã__
((
Æways_ölöe
));

45 
ölöe
 
	$sysˇŒ4
(
sysˇŒ
, 
¨g1
, 
¨g2
,

46 
¨g3
, 
¨g4
Ë
	`__©åibuã__
((
Æways_ölöe
));

47 
ölöe
 
	$sysˇŒ5
(
sysˇŒ
, 
¨g1
, 
¨g2
,

48 
¨g3
, 
¨g4
, 
¨g5
Ë
	`__©åibuã__
((
Æways_ölöe
));

49 
ölöe
 
	$å≠_my£lf
(Ë
	`__©åibuã__
((
Æways_ölöe
));

53 
ölöe
 
	$sysˇŒ0
(
sysˇŒ
)

55 
ªt
;

56 
__asm__
 vﬁ©ûê("öà$0x80" : "˜" (
ªt
Ë: "0" (
sysˇŒ
));

57  
ªt
;

58 
	}
}

60 
ölöe
 
	$sysˇŒ1
(
sysˇŒ
, 
¨g1
)

62 
ªt
;

63 
__asm__
 vﬁ©ûê("öà$0x80" : "˜" (
ªt
Ë: "0" (
sysˇŒ
), "b" (
¨g1
));

64  
ªt
;

65 
	}
}

67 
ölöe
 
	$sysˇŒ2
(
sysˇŒ
, 
¨g1
, 
¨g2
)

69 
ªt
;

70 
__asm__
 vﬁ©ûê("öà$0x80" : "˜" (
ªt
Ë: "0" (
sysˇŒ
), "b" (
¨g1
),

71 "c" (
¨g2
));

72  
ªt
;

73 
	}
}

75 
ölöe
 
	$sysˇŒ3
(
sysˇŒ
, 
¨g1
, 
¨g2
, 
¨g3
)

77 
ªt
;

78 
__asm__
 vﬁ©ûê("öà$0x80" : "˜" (
ªt
Ë: "0" (
sysˇŒ
), "b" (
¨g1
),

79 "c" (
¨g2
), "d" (
¨g3
));

80  
ªt
;

81 
	}
}

83 
ölöe
 
	$sysˇŒ4
(
sysˇŒ
, 
¨g1
, 
¨g2
, 
¨g3
,

84 
¨g4
)

86 
ªt
;

87 
__asm__
 vﬁ©ûê("öà$0x80" : "˜" (
ªt
Ë: "0" (
sysˇŒ
), "b" (
¨g1
),

88 "c" (
¨g2
), "d" (
¨g3
), "S" (
¨g4
));

89  
ªt
;

90 
	}
}

92 
ölöe
 
	$sysˇŒ5
(
sysˇŒ
, 
¨g1
, 
¨g2
, 
¨g3
,

93 
¨g4
, 
¨g5
)

95 
ªt
;

96 
__asm__
 vﬁ©ûê("öà$0x80" : "˜" (
ªt
Ë: "0" (
sysˇŒ
), "b" (
¨g1
),

97 "c" (
¨g2
), "d" (
¨g3
), "S" (
¨g4
), "D" (
¨g5
));

98  
ªt
;

99 
	}
}

101 
ölöe
 
	$å≠_my£lf
()

103 
	`__asm
("int3");

104 
	}
}

106 
ölöe
 
	$∑u£
 ()

108 
	`asm
 ("movl $29, %eax; int $0x80;");

109 
	}
}

	@kern-ucore/arch/um/glue-ucore/libs/linux/time.h

1 #i‚de‡
__ARCH_UM_DIRVERS_TIME_H__


2 
	#__ARCH_UM_DIRVERS_TIME_H__


	)

4 
	#ITIMER_REAL
 0

	)

5 
	#ITIMER_VIRTUAL
 1

	)

6 
	#ITIMER_PROF
 2

	)

8 
	t__kî√l_time_t
;

9 
	t__kî√l_su£c⁄ds_t
;

11 
	stimevÆ
 {

12 
__kî√l_time_t
 
	mtv_£c
;

13 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

16 
	sôimîvÆ
 {

17 
timevÆ
 
	mô_öãrvÆ
;

18 
timevÆ
 
	mô_vÆue
;

	@kern-ucore/arch/um/glue-ucore/libs/linux/wait.h

1 #i‚de‡
__ARCH_UM_INCLUDE_LINUX_WAIT_H__


2 
	#__ARCH_UM_INCLUDE_LINUX_WAIT_H__


	)

4 #i‚de‡
__ASSEMBLER__


8 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


9 
	#__WAIT_INT
(
°©us
) \

10 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

11 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

13 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

19 
	#WNOHANG
 1

	)

20 
	#WUNTRACED
 2

	)

23 
	#WSTOPPED
 2

	)

24 
	#WEXITED
 4

	)

25 
	#WCONTINUED
 8

	)

26 
	#WNOWAIT
 0x01000000

	)

28 
	#__WNOTHREAD
 0x20000000

	)

30 
	#__WALL
 0x40000000

	)

31 
	#__WCLONE
 0x80000000

	)

37 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

40 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

43 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

46 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

49 
	#__WIFSIGNALED
(
°©us
) \

50 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

53 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

57 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

60 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

63 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

64 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

65 
	#__W_CONTINUED
 0xffff

	)

66 
	#__WCOREFLAG
 0x80

	)

68 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

69 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

70 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

71 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

72 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

73 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

74 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

	@kern-ucore/arch/um/glue-ucore/libs/signal.c

1 
	~<löux/sig«l.h
>

3 
	~<¨ch.h
>

5 * 
	gsig_«mes
[] = {

46 
	$øi£
 (
signum
)

48 
	`sysˇŒ2
 (
__NR_kûl
, 
	`sysˇŒ0
 (
__NR_gëpid
), 
signum
);

50 
	}
}

57 
ölöe
 

58 
	$sigem±y£t
(
sig£t_t
 *
£t
)

60 
_NSIG_WORDS
) {

62 
	`mem£t
(
£t
, 0, (
sig£t_t
));

64 2: 
£t
->
sig
[1] = 0;

65 1: 
£t
->
sig
[0] = 0;

68 
	}
}

75 
ölöe
 

76 
	$sigadd£t
(
sig£t_t
 *
£t
, 
_sig
)

78 
sig
 = 
_sig
 - 1;

79 i‡(
_NSIG_WORDS
 == 1)

80 
£t
->
sig
[0] |= 1UL << sig;

82 
£t
->
sig
[sig / 
_NSIG_BPW
] |= 1UL << (sig % _NSIG_BPW);

83 
	}
}

92 
ölöe
 

93 
	$sigismembî
(
sig£t_t
 *
£t
, 
_sig
)

95 
sig
 = 
_sig
 - 1;

96 i‡(
_NSIG_WORDS
 == 1)

97  1 & (
£t
->
sig
[0] >> sig);

99  1 & (
£t
->
sig
[sig / 
_NSIG_BPW
] >> (sig % _NSIG_BPW));

100 
	}
}

	@kern-ucore/arch/um/glue-ucore/libs/spinlock.h

1 #i‚de‡
__SPINLOCK_H__


2 
	#__SPINLOCK_H__


	)

4 
	s•ölock_s
 {

5 vﬁ©ûê
	mlock
;

6 } 
	t•ölock_s
;

8 
•ölock_s
 *
	t•ölock_t
;

10 
	#•ölock_öô
(
x
Ëdÿ{ (x)->
lock
 = 0; } 0)

	)

12 
ölöe
 

13 
	$•ölock_acquúe
(
•ölock_t
 
lock
)

15 
	}
}

17 
ölöe
 

18 
	$•ölock_acquúe_åy
(
•ölock_t
 
lock
)

21 
	}
}

23 
ölöe
 

24 
	$•ölock_ªÀa£
(
•ölock_t
 
lock
)

26 
	}
}

	@kern-ucore/arch/um/glue-ucore/libs/stub.h

1 #i‚de‡
__ARCH_UM_INCLUDE_STUB_H__


2 
	#__ARCH_UM_INCLUDE_STUB_H__


	)

4 
	~<ty≥s.h
>

46 
	s°ub_‰ame
 {

47 
uöt32_t
 
	móx
;

48 
uöt32_t
 
	mebx
;

49 
uöt32_t
 
	mecx
;

50 
uöt32_t
 
	medx
;

51 
uöt32_t
 
	mesi
;

52 
uöt32_t
 
	medi
;

53 
uöt32_t
 
	md©a
[10];

56 
	s°ub_°ack
 {

57 
uöçå_t
 
	mcuºít_addr
;

58 
uöt32_t
 
	mcuºít_no
;

59 * 
	m‰ames
;

62 
	#cuºít_°ub_‰ame
(
°ack
) \

63 ((
°ub_‰ame
 *)&(
°ack
->
‰ames
Ë+ sèck->
cuºít_no
)

	)

65 * 
__sysˇŒ_°ub_°¨t
;

66 * 
__sysˇŒ_°ub_íd
;

68 
°ub_íåy
 ();

69 
°ub_°¨t
 ();

70 
°ub_£gv_h™dÀr
 (
sig
);

71 
°ub_exec_sysˇŒ
 ();

73 
°ub_push_‰ame
 (
°ub_°ack
* 
°ack
);

74 
°ub_p›_‰ame
 (
°ub_°ack
* 
°ack
);

	@kern-ucore/arch/um/glue-ucore/mp.c

1 
	~<mp.h
>

2 
	~<pmm.h
>

3 
	~<å≠.h
>

4 
	~<•ölock.h
>

5 
	~<¥oc.h
>

6 
	~<kio.h
>

7 
	~<as£π.h
>

9 
PLS
 
	g∂s_œpic_id
;

10 
PLS
 
	g∂s_l˝u_idx
;

11 
PLS
 
	g∂s_l˝u_cou¡
;

13 
PLS
 vﬁ©ûê
	g∂s_loˇl_kîn_lockög
;

15 vﬁ©ûê
	gùi_øi£
[
LAPIC_COUNT
] = {0};

18 
	#mp_debug
(
a
 ...Ë
	`k¥ötf
◊)

	)

20 
	#mp_debug
(
a
 ...)

	)

24 
	$mp_öô
()

26 
	`∂s_wrôe
 (
œpic_id
, 0);

27 
	`∂s_wrôe
 (
l˝u_idx
, 0);

28 
	`∂s_wrôe
 (
l˝u_cou¡
, 1);

31 
	}
}

34 
	$kîn_íãr
(
sour˚
)

36 
	}
}

39 
	$kîn_Àave
()

41 
	}
}

44 
	$mp_£t_mm_∑gëabÀ
(
mm_°ru˘
 *
mm
)

46 
	}
}

49 
pgd_t
 *
	gm±i_pgdú
;

50 
uöçå_t
 
	gm±i_œ
;

51 vﬁ©ûê
	gm±i_íd
;

54 
	$mp_éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
)

56 
	`éb_övÆid©e
 (
pgdú
, 
œ
);

57 
	}
}

60 
	$mp_éb_upd©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
)

62 
	`éb_upd©e
 (
pgdú
, 
œ
);

63 
	}
}

	@kern-ucore/arch/um/glue-ucore/pmm.c

1 
	~<pmm.h
>

2 
	~<°dio.h
>

3 
	~<mmu.h
>

4 
	~<memœyout.h
>

5 
	~<îr‹.h
>

6 
	~<buddy_pmm.h
>

7 
	~<°dio.h
>

8 
	~<sync.h
>

9 
	~<ty≥s.h
>

10 
	~<¶ab.h
>

11 
	~<sw≠.h
>

12 
	~<°rög.h
>

13 
	~<kio.h
>

14 
	~<glue_mp.h
>

16 
PLS
 
size_t
 
	g∂s_u£d_∑ges
;

17 
PLS
 
li°_íåy_t
 
	g∂s_∑ge_°ru˘_‰ì_li°
;

20 
Page
 *
	g∑ges
;

22 
size_t
 
	g≈age
 = 0;

25 
pde_t
 *
	gboŸ_pgdú
 = 
NULL
;

28 c⁄° 
pmm_m™agî
 *
	gpmm_m™agî
;

34 
	$öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

35 
pmm_m™agî
->
	`öô_memm≠
(
ba£
, 
n
);

36 
	}
}

46 
	$boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, uöçå_à
∑
, 
uöt32_t
 
≥rm
) {

47 
	`as£π
(
	`PGOFF
(
œ
Ë=PGOFF(
∑
));

48 
size_t
 
n
 = 
	`ROUNDUP
(
size
 + 
	`PGOFF
(
œ
), 
PGSIZE
) / PGSIZE;

49 
œ
 = 
	`ROUNDDOWN
÷a, 
PGSIZE
);

50 
∑
 = 
	`ROUNDDOWN
’a, 
PGSIZE
);

51 ; 
n
 > 0;Ç --, 
œ
 +
PGSIZE
, 
∑
 += PGSIZE) {

52 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 1);

53 
	`as£π
(
±ï
 !
NULL
);

54 *
±ï
 = 
∑
 | 
PTE_P
 | 
≥rm
;

56 
	}
}

58 
size_t


59 
	$ƒ_u£d_∑ges
()

61  
	`∂s_ªad
 (
u£d_∑ges
);

62 
	}
}

65 
	$pmm_öô_≠
()

67 
li°_íåy_t
 *
∑ge_°ru˘_‰ì_li°
 = 
	`∂s_gë_±r
(page_struct_free_list);

68 
	`li°_öô
(
∑ge_°ru˘_‰ì_li°
);

69 
	`∂s_wrôe
 (
u£d_∑ges
, 0);

70 
	}
}

80 
Page
 *

81 
	$Æloc_∑ges
(
size_t
 
n
) {

82 
Page
 *
∑ge
;

83 
boﬁ
 
öå_Êag
;

84 
åy_agaö
:

85 
	`loˇl_öå_ßve
(
öå_Êag
);

87 
∑ge
 = 
pmm_m™agî
->
	`Æloc_∑ges
(
n
);

89 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

90 i‡(
∑ge
 =
NULL
 && 
	`åy_‰ì_∑ges
(
n
)) {

91 
åy_agaö
;

94 
	`∂s_wrôe
(
u£d_∑ges
, 
	`∂s_ªad
(u£d_∑gesË+ 
n
);

95  
∑ge
;

96 
	}
}

105 
	$boŸ_Æloc_∑ge
() {

106 
Page
 *
p
 = 
	`Æloc_∑ge
();

107 i‡(
p
 =
NULL
) {

108 
	`∑nic
("boot_alloc_page failed.\n");

110  
	`∑ge2kva
(
p
);

111 
	}
}

119 
	$‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

120 
boﬁ
 
öå_Êag
;

121 
	`loˇl_öå_ßve
(
öå_Êag
);

123 
pmm_m™agî
->
	`‰ì_∑ges
(
ba£
, 
n
);

125 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

126 
	`∂s_wrôe
(
u£d_∑ges
, 
	`∂s_ªad
(u£d_∑gesË- 
n
);

127 
	}
}

133 
size_t


134 
	$ƒ_‰ì_∑ges
() {

135 
size_t
 
ªt
;

136 
boﬁ
 
öå_Êag
;

137 
	`loˇl_öå_ßve
(
öå_Êag
);

139 
ªt
 = 
pmm_m™agî
->
	`ƒ_‰ì_∑ges
();

141 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

142  
ªt
;

143 
	}
}

152 
	$check_Æloc_∑ge
() {

153 
pmm_m™agî
->
	`check
();

155 
	`k¥ötf
("check_alloc_page() succeeded.\n");

156 
	}
}

162 
	$check_pgdú
() {

163 
	`as£π
(
≈age
 <
KMEMSIZE
 / 
PGSIZE
);

164 
	`as£π
(
boŸ_pgdú
 !
NULL
 && (
uöt32_t
)
	`PGOFF
(boot_pgdir) == 0);

165 
	`as£π
(
	`gë_∑ge
(
boŸ_pgdú
, 
TEST_PAGE
, 
NULL
) == NULL);

167 
Page
 *
p1
, *
p2
;

168 
p1
 = 
	`Æloc_∑ge
();

169 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p1
, 
TEST_PAGE
, 0) == 0);

171 
±e_t
 *
±ï
;

172 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
, 0)Ë!
NULL
);

173 
	`as£π
(
	`∑2∑ge
(*
±ï
Ë=
p1
);

174 
	`as£π
(
	`∑ge_ªf
(
p1
) == 1);

176 
±ï
 = &((
±e_t
 *)
	`KADDR
(
	`PTE_ADDR
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])))[1];

177 
	`as£π
(
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0Ë=
±ï
);

179 
p2
 = 
	`Æloc_∑ge
();

180 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p2
, 
TEST_PAGE
 + 
PGSIZE
, 
PTE_U
 | 
PTE_W
) == 0);

181 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0)Ë!
NULL
);

182 
	`as£π
(*
±ï
 & 
PTE_U
);

183 
	`as£π
(*
±ï
 & 
PTE_W
);

184 
	`as£π
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)] & 
PTE_U
);

185 
	`as£π
(
	`∑ge_ªf
(
p2
) == 1);

187 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p1
, 
TEST_PAGE
 + 
PGSIZE
, 0) == 0);

188 
	`as£π
(
	`∑ge_ªf
(
p1
) == 2);

189 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

190 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0)Ë!
NULL
);

191 
	`as£π
(
	`∑2∑ge
(*
±ï
Ë=
p1
);

192 
	`as£π
((*
±ï
 & 
PTE_U
) == 0);

194 
	`∑ge_ªmove
(
boŸ_pgdú
, 
TEST_PAGE
);

195 
	`as£π
(
	`∑ge_ªf
(
p1
) == 1);

196 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

198 
	`∑ge_ªmove
(
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
);

199 
	`as£π
(
	`∑ge_ªf
(
p1
) == 0);

200 
	`as£π
(
	`∑ge_ªf
(
p2
) == 0);

202 
	`as£π
(
	`∑ge_ªf
(
	`∑2∑ge
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])) == 1);

203 
	`‰ì_∑ge
(
	`∑2∑ge
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)]));

204 
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)] = 0;

206 
	`k¥ötf
("check_pgdir() succeeded.\n");

207 
	}
}

	@kern-ucore/arch/um/glue-ucore/pmm.h

1 #i‚de‡
__KERN_MM_PMM_H__


2 
	#__KERN_MM_PMM_H__


	)

4 
	~<ty≥s.h
>

5 
	~<mmu.h
>

6 
	~<memœyout.h
>

7 
	~<©omic.h
>

8 
	~<as£π.h
>

9 
	~<glue_pgm≠.h
>

11 
	#TEST_PAGE
 0x80000000

	)

13 
	spmm_m™agî
 {

14 c⁄° *
	m«me
;

15 (*
	möô
)();

16 (*
	möô_memm≠
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

17 
	mPage
 *(*
	mÆloc_∑ges
)(
size_t
 
	mn
);

18 (*
	m‰ì_∑ges
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

19 
size_t
 (*
ƒ_‰ì_∑ges
)();

20 (*
	mcheck
)();

22 
	g¥oc_°ru˘
;

24 c⁄° 
pmm_m™agî
 *pmm_manager;

25 
pde_t
 *
boŸ_pgdú
;

26 
uöçå_t
 
boŸ_¸3
;

28 
check_pgdú
();

29 
check_boŸ_pgdú
();

31 
pmm_öô
();

32 
pmm_öô_≠
();

33 
boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, uöçå_à
∑
, 
uöt32_t
 
≥rm
);

35 
Page
 *
Æloc_∑ges
(
size_t
 
n
);

36 *
boŸ_Æloc_∑ge
();

37 
‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
);

38 
size_t
 
ƒ_u£d_∑ges
();

39 
size_t
 
ƒ_‰ì_∑ges
();

41 
	#Æloc_∑ge
(Ë
	`Æloc_∑ges
(1)

	)

42 
	#‰ì_∑ge
(
∑ge
Ë
	`‰ì_∑ges
’age, 1)

	)

44 
pgd_t
 *
gë_pgd
’gd_à*
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

45 
pud_t
 *
gë_pud
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

46 
pmd_t
 *
gë_pmd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

47 
±e_t
 *
gë_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

48 
Page
 *
gë_∑ge
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 **
±ï_°‹e
);

49 
∑ge_ªmove
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

50 
∑ge_ö£π
(
pde_t
 *
pgdú
, 
Page
 *
∑ge
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

52 
lﬂd_r•0
(
uöçå_t
 
r•0
);

53 
£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pde_t
 *
pgdú
);

54 
lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
);

55 
m≠_pgdú
 (
pde_t
 *
pgdú
);

57 
éb_upd©e
 (
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

58 
éb_övÆid©e
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
);

59 
éb_övÆid©e_u£r
 ();

61 
Page
 *
pgdú_Æloc_∑ge
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

62 
unm≠_ønge
(
pde_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

63 
exô_ønge
(
pde_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

64 
c›y_ønge
(
pde_t
 *
to
,Öde_à*
‰om
, 
uöçå_t
 
°¨t
, uöçå_à
íd
, 
boﬁ
 
sh¨e
);

66 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...));

73 
	#PADDR
(
kva
) ({ \

74 
uöçå_t
 
__m_kva
 = (uöçå_t)(
kva
); \

75 i‡(
__m_kva
 < 
KERNBASE
) { \

76 
	`∑nic
("PADDR cÆÀd wôh invÆid kv®%08lx", 
__m_kva
); \

78 
__m_kva
 - 
KERNBASE
; \

79 
	}
})

	)

85 
	#KADDR
(
∑
) ({ \

86 
uöçå_t
 
__m_∑
 = (
∑
); \

87 
size_t
 
__m_µn
 = 
	`PPN
(
__m_∑
); \

88 i‡(
__m_µn
 >
≈age
) { \

89 
	`∑nic
("KADDR cÆÀd wôh invÆidÖ®%08lx", 
__m_∑
); \

91 (*Ë(
__m_∑
 + 
KERNBASE
); \

92 })

	)

95 
	#VADDR_DIRECT
(
addr
Ë((*)((
uöçå_t
)◊ddrË+ 
KERNBASE
))

	)

96 
	#PADDR_DIRECT
(
addr
Ë((
uöçå_t
)◊ddrË- 
KERNBASE
)

	)

98 
	#NEXT_PAGE
(
pg
Ë’g + 1)

	)

100 
Page
 *
∑ges
;

101 
size_t
 
≈age
;

103 
ölöe
 
µn_t


104 
	$∑ge2gidx
(
Page
 *
∑ge
)

106  
∑ge
 - 
∑ges
;

107 
	}
}

109 
ölöe
 
µn_t


110 
	$∑ge2µn
(
Page
 *
∑ge
) {

111  
∑ge
 - 
∑ges
;

112 
	}
}

114 
ölöe
 
uöçå_t


115 
	$∑ge2∑
(
Page
 *
∑ge
) {

116  
	`∑ge2µn
(
∑ge
Ë<< 
PGSHIFT
;

117 
	}
}

119 
ölöe
 
Page
 *

120 
	$∑2∑ge
(
uöçå_t
 
∑
) {

121 i‡(
	`PPN
(
∑
Ë>
≈age
) {

122 
	`∑nic
("pa2page called with invalidÖa");

124  &
∑ges
[
	`PPN
(
∑
)];

125 
	}
}

127 
ölöe
 *

128 
	$∑ge2kva
(
Page
 *
∑ge
) {

129  
	`KADDR
(
	`∑ge2∑
(
∑ge
));

130 
	}
}

132 
ölöe
 
Page
 *

133 
	$kva2∑ge
(*
kva
) {

134  
	`∑2∑ge
(
	`PADDR
(
kva
));

135 
	}
}

137 
ölöe
 
Page
 *

138 
	$±e2∑ge
(
±e_t
 
±e
) {

139 i‡(!(
±e
 & 
PTE_P
)) {

140 
	`∑nic
("pte2page called with invalidÖte");

142  
	`∑2∑ge
(
	`PTE_ADDR
(
±e
));

143 
	}
}

145 
ölöe
 
Page
 *

146 
	$pde2∑ge
(
pde_t
 
pde
) {

147  
	`∑2∑ge
(
	`PDE_ADDR
(
pde
));

148 
	}
}

150 
ölöe
 
Page
 *

151 
	$pmd2∑ge
(
pmd_t
 
pmd
) {

152  
	`∑2∑ge
(
	`PMD_ADDR
(
pmd
));

153 
	}
}

155 
ölöe
 
Page
 *

156 
	$pud2∑ge
(
pud_t
 
pud
) {

157  
	`∑2∑ge
(
	`PUD_ADDR
(
pud
));

158 
	}
}

160 
ölöe
 
Page
 *

161 
	$pgd2∑ge
(
pgd_t
 
pgd
) {

162  
	`∑2∑ge
(
	`PGD_ADDR
(
pgd
));

163 
	}
}

165 
ölöe
 

166 
	$∑ge_ªf
(
Page
 *
∑ge
) {

167  
	`©omic_ªad
(&(
∑ge
->
ªf
));

168 
	}
}

170 
ölöe
 

171 
	$£t_∑ge_ªf
(
Page
 *
∑ge
, 
vÆ
) {

172 
	`©omic_£t
(&(
∑ge
->
ªf
), 
vÆ
);

173 
	}
}

175 
ölöe
 

176 
	$∑ge_ªf_öc
(
Page
 *
∑ge
) {

177  
	`©omic_add_ªtu∫
(&(
∑ge
->
ªf
), 1);

178 
	}
}

180 
ölöe
 

181 
	$∑ge_ªf_dec
(
Page
 *
∑ge
) {

182  
	`©omic_sub_ªtu∫
(&(
∑ge
->
ªf
), 1);

183 
	}
}

185 
ölöe
 
pgd_t
*

186 
	$öô_pgdú_gë
() {

187  
boŸ_pgdú
;

188 
	}
}

190 *
boŸ°ack
, *
boŸ°ackt›
;

	@kern-ucore/arch/um/glue-ucore/trap.c

1 
	~<å≠.h
>

2 
	~<¨ch.h
>

3 
	~<¥oc.h
>

4 
	~<°dio.h
>

5 
	~<°ub.h
>

6 
	~<memœyout.h
>

7 
	~<mmu.h
>

8 
	~<pmm.h
>

9 
	~<vmm.h
>

10 
	~<kio.h
>

12 
	#cuºít
 
	`∂s_ªad
(
cuºít
)

	)

18 
	#STUB_SIG_MASK
 ((1 << 
SIGVTALRM
Ë| (1 << 
SIGWINCH
))

	)

21 
	#STUB_DONE_MASK
 (1 << 
SIGTRAP
)

	)

29 
	$waô_°ub_d⁄e
(
pid
)

31 
n
, 
°©us
, 
îr
;

33 
um_±_ªgs
 
ªgs
;

36 
n
 = 
	`sysˇŒ3
 (
__NR_waôpid
, 
pid
, ()&
°©us
, 
WUNTRACED
 | 
__WALL
);

37 i‡(
	`WIFEXITED
 (
°©us
)) {

38 
	`k¥ötf
 ("°ub: sètu†0x%x\n", 
°©us
);

39 
	`k¥ötf
 ("°ub:Éº = %d\n", 
îr
);

40 
	`k¥ötf
 ("°ub:Éù = 0x%x\n", 
ªgs
.ªgs.
eù
);

43 i‡((
n
 < 0Ë|| !
	`WIFSTOPPED
(
°©us
))

44 
bad_waô
;

46 i‡(
	`WSTOPSIG
(
°©us
Ë=
SIGSEGV
) {

48 
	`°ub_push_‰ame
 (
cuºít
->
¨ch
.
ho°
->
°ub_°ack
);

49 i‡–(
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_GETREGS
, 
pid
, 0, ()&(
ªgs
.regs))) < 0) {

53 i‡(
	`u£r_£gv
 (
pid
, &
ªgs
) < 0)

54 
bad_waô
;

56 
	`°ub_p›_‰ame
 (
cuºít
->
¨ch
.
ho°
->
°ub_°ack
);

57 i‡–(
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_SETREGS
, 
pid
, 0, ()&(
ªgs
.regs))) < 0) {

60 } i‡(((1 << 
	`WSTOPSIG
(
°©us
)Ë& 
STUB_SIG_MASK
) == 0)

63 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_CONT
, 
pid
, 0, 0);

64 i‡(
îr
) {

69 i‡(((1 << 
	`WSTOPSIG
(
°©us
)Ë& 
STUB_DONE_MASK
) != 0)

72  -
	`WSTOPSIG
(
°©us
);

74 
bad_waô
:

76 
	}
}

90 
	$gë_Áu…öfo
 (
pid
, 
Áu…öfo
* 
fi
)

92 
îr
;

94 
sigöfo_t
 
sigöfo
;

95 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_GETSIGINFO
, 
pid
, 0, ()&
sigöfo
);

96 i‡(
îr
 != 0)

99 
fi
->
¸2
 = ()
sigöfo
.
si_addr
;

100 
fi
->
å≠_no
 = 
sigöfo
.
si_å≠no
;

101 
±e_t
* 
±e
;

102 
sigöfo
.
si_code
) {

103 
SEGV_MAPERR
:

105 
fi
->
îr‹_code
 = 4;

107 
SEGV_ACCERR
:

109 
±e
 = 
	`gë_±e
 (
cuºít
->
mm
->
pgdú
, 
fi
->
¸2
, 0);

110 i‡(*
±e
 & 
PTE_A
)

112 
fi
->
îr‹_code
 = 7;

114 
fi
->
îr‹_code
 = 5;

129 
	}
}

145 
	$nuŒify_sysˇŒ
 (
pid
, 
um_±_ªgs
 *
ªgs
)

147 
îr
, 
°©us
;

150 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_POKEUSR
, 
pid
, 44, 
__NR_gëpid
);

151 i‡(
îr
 < 0) {

152 
	`k¥ötf
 ("nullify_syscall: cannotÇullify\n");

156 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_SYSCALL
, 
pid
, 0, 0);

157 i‡(
îr
 < 0) {

158 
	`k¥ötf
 ("nullify_syscall: cannot continue syscall\n");

162 
îr
 = 
	`sysˇŒ3
 (
__NR_waôpid
, 
pid
, ()&
°©us
, 
WUNTRACED
 | 
__WALL
);

163 i‡(
îr
 < 0 || !
	`WIFSTOPPED
 (
°©us
Ë|| (
	`WSTOPSIG
(°©usË!(
SIGTRAP
 | 0x80))) {

164 
	`k¥ötf
 ("nullify_syscall: waitÉrror\n");

165 
	`k¥ötf
 ("\ãº = %d\n", 
îr
);

166 
	`k¥ötf
 ("\ti†°›≥d = %d\n", 
	`WIFSTOPPED
 (
°©us
));

167 
	`k¥ötf
 ("\t°› sig = %d\n", 
	`WSTOPSIG
(
°©us
));

172 
	}
}

	@kern-ucore/arch/um/glue-ucore/trap.h

1 #i‚de‡
__GLUE_UCORE_TRAP_H__


2 
	#__GLUE_UCORE_TRAP_H__


	)

4 
	~<¨ch.h
>

5 
	~<ty≥s.h
>

6 
	~<glue_öå.h
>

8 
waô_°ub_d⁄e
(
pid
);

9 
gë_Áu…öfo
 (
pid
, 
Áu…öfo
* 
fi
);

10 
nuŒify_sysˇŒ
 (
pid
, 
um_±_ªgs
 *
ªgs
);

12 
å≠_öô
();

13 
å≠_öô_≠
();

14 
¥öt_å≠‰ame
(
å≠‰ame
 *
tf
);

15 
boﬁ
 
å≠_ö_kî√l
(
å≠‰ame
 *
tf
);

	@kern-ucore/arch/um/init/host_signal.c

1 
	~<ho°_sig«l.h
>

3 
	~<¨ch.h
>

4 
	~<as£π.h
>

5 
	~<°dio.h
>

6 
	~<pmm.h
>

7 
	~<vmm.h
>

8 
	~<˛ock.h
>

9 
	~<sched.h
>

10 
	~<c⁄sﬁe.h
>

11 
	~<kio.h
>

12 
	~<¥oc.h
>

14 
	#cuºít
 
	`∂s_ªad
(
cuºít
)

	)

15 
	#idÀ¥oc
 
	`∂s_ªad
(
idÀ¥oc
)

	)

17 
£gv_h™dÀr
 (, 
um_±_ªgs
*);

18 
io_h™dÀr
 (, 
um_±_ªgs
*);

19 
vtimî_h™dÀr
 (, 
um_±_ªgs
*);

21 (*
sig_h™dÀrs
[
NSIG
])(
sig
, 
um_±_ªgs
* 
ªgs
) = {

22 [
SIGSEGV
] = 
£gv_h™dÀr
,

23 [
SIGIO
] = 
io_h™dÀr
,

24 [
SIGVTALRM
] = 
vtimî_h™dÀr


25 
	}
};

34 
	$c›y_sc
 (
um_±_ªgs
* 
ªgs
, 
sigc⁄ãxt
* 
‰om
)

36 
ªgs
->ªgs.
óx
 = 
‰om
->eax;

37 
ªgs
->ªgs.
ebx
 = 
‰om
->ebx;

38 
ªgs
->ªgs.
ecx
 = 
‰om
->ecx;

39 
ªgs
->ªgs.
edx
 = 
‰om
->edx;

40 
ªgs
->ªgs.
eù
 = 
‰om
->eip;

42 
ªgs
->
Áu…öfo
.
¸2
 = 
‰om
->cr2;

44 
ªgs
->
Áu…öfo
.
îr‹_code
 = 
‰om
->
îr
 & ~(0x4);

45 
ªgs
->
Áu…öfo
.
å≠_no
 = 
‰om
->
å≠no
;

46 
	}
}

55 
	$h™dÀ_sig«l
 (
sig
, 
sigc⁄ãxt
 *
sc
)

57 
um_±_ªgs
 
r
;

58 
r
.
is_u£r
 = 0;

59 i‡(
sig
 =
SIGSEGV
)

60 
	`c›y_sc
 (&
r
, 
sc
);

61 (*
sig_h™dÀrs
[
sig
]Ë(sig, &
r
);

62 
	}
}

70 
	$h¨d_h™dÀr
 (
sig
)

72 
	`h™dÀ_sig«l
 (
sig
, (
sigc⁄ãxt
*)(&sig+1));

73 
	}
}

83 
£t_h™dÀr
 (
sig
, (*
h™dÀr
)(), 
Êags
)

85 
siga˘i⁄
 
a˘i⁄
;

86 i‡(
h™dÀr
 =
NULL
)

87 
a˘i⁄
.
ß_h™dÀr
 = 
h¨d_h™dÀr
;

89 
a˘i⁄
.
ß_h™dÀr
 = 
h™dÀr
;

90 
	`sigem±y£t
 (&
a˘i⁄
.
ß_mask
);

91 
a˘i⁄
.
ß_Êags
 = 
Êags
;

92 
a˘i⁄
.
ß_ª°‹î
 = 
NULL
;

93 i‡(
	`sysˇŒ3
 (
__NR_siga˘i⁄
, 
sig
, ()&
a˘i⁄
, 0) < 0)

94 
	`∑nic
 ("sigaction failed\n");

95 
	}
}

102 
	$check_å≠
 ()

107 
	`k¥ötf
 ("check_trap() succeeded.\n");

108 
	}
}

115 
	$ho°_sig«l_öô
 ()

117 
	`£t_h™dÀr
 (
SIGSEGV
, 
NULL
, 0);

118 
	`£t_h™dÀr
 (
SIGVTALRM
, 
NULL
, 0);

119 
	`£t_h™dÀr
 (
SIGIO
, 
NULL
, 0);

121 
	`£t_h™dÀr
 (
SIGQUIT
, 
ho°_exô
, 0);

122 
	}
}

133 
	$bad_£gv
 (
loc
)

135 i‡(
cuºít
 =
NULL
 || !cuºít->
¨ch
.
ªgs
.
is_u£r
)

136 
	`∑nic
 ("Kî√»£gmíèti⁄ fau…áà%d\n", 
loc
);

138 
	}
}

140 
ölöe
 

141 
	$¥öt_pgÁu…
(
addr
, 
îr‹_code
) {

149 
	`k¥ötf
("∑gêÁu…áà0x%08x: %c/%¯[%s].\n", 
addr
,

150 (
îr‹_code
 & 4) ? 'U' : 'K',

151 (
îr‹_code
 & 2) ? 'W' : 'R',

152 (
îr‹_code
 & 1) ? "protection fault" : "noÖage found");

153 
	}
}

162 
	$do_pgm¨k
 (
mm_°ru˘
* 
mm
, 
uöt32_t
 
îr‹_code
, 
uöçå_t
 
addr
)

164 
uöt32_t
 
is_wrôe
 = (
îr‹_code
 & 
FAULT_W
) ? 1 : 0;

165 
vma_°ru˘
 *
vma
 = 
	`föd_vma
(
mm
, 
addr
);

166 i‡(
vma
 =
NULL
 || vma->
vm_°¨t
 > 
addr
) {

167 
	`k¥ötf
 ("övÆidáddªss: 0x%x\n", 
addr
);

168 
Áûed
;

171 
±e_t
* 
±e
 = 
	`gë_±e
 (
mm
->
pgdú
, 
addr
, 0);

172 i‡(
±e
 == 0) {

173 
	`k¥ötf
 ("pteÇotÉxists\n");

174 
Áûed
;

176 i‡(
is_wrôe
 && 
	`Gë_PTE_W
(
±e
) == 0) {

179 
	`¥öt_pgÁu…
 (
addr
, 
îr‹_code
);

180 i‡((
	`do_pgÁu…
 (
mm
, 
îr‹_code
, 
addr
)) != 0) {

181 
	`k¥ötf
 ("shared memory handle failed\n");

182 
Áûed
;

186 
	`Së_PTE_A
 (
±e
);

187 i‡(
is_wrôe
) {

188 
	`Së_PTE_D
 (
±e
);

191 
	`éb_upd©e
 (
mm
->
pgdú
, 
addr
);

195 
Áûed
:

196  
	`bad_£gv
 (-1);

197 
	}
}

206 
	$£gv_h™dÀr
 (
sig
, 
um_±_ªgs
 *
ªgs
)

208 
îr
;

210 i‡(
ªgs
->
Áu…öfo
.
¸2
 < 0x10000)

211  
	`bad_£gv
 (
ªgs
->
Áu…öfo
.
¸2
);

213 
mm_°ru˘
 *
check_mm_°ru˘
;

214 
mm_°ru˘
 * 
mm
;

215 i‡(
check_mm_°ru˘
 !
NULL
) {

216 
	`as£π
 (
cuºít
 =
idÀ¥oc
);

217 
mm
 = 
check_mm_°ru˘
;

219 i‡(
cuºít
 =
NULL
) {

220  
	`bad_£gv
 (-2);

222 
mm
 = 
cuºít
->mm;

225 
±e_t
* 
±e
 = 
	`gë_±e
 (
mm
->
pgdú
, 
ªgs
->
Áu…öfo
.
¸2
, 0);

226 i‡(
±e
 =0 || 
	`Gë_PTE_P
(pte) == 0) {

227 
	`¥öt_pgÁu…
 (
ªgs
->
Áu…öfo
.
¸2
,Ñegs->Áu…öfo.
îr‹_code
);

228 i‡((
îr
 = 
	`do_pgÁu…
 (
mm
, 
ªgs
->
Áu…öfo
.
îr‹_code
,Ñegs->Áu…öfo.
¸2
)) != 0)

229  
	`bad_£gv
 (
ªgs
->
Áu…öfo
.
¸2
);

231 
	`¥öt_pgÁu…
 (
ªgs
->
Áu…öfo
.
¸2
,Ñegs->Áu…öfo.
îr‹_code
);

232 
ªt
 = 
	`do_pgm¨k
 (
mm
, 
ªgs
->
Áu…öfo
.
îr‹_code
,Ñegs->Áu…öfo.
¸2
);

239  
ªt
;

242 
	}
}

252 
	$io_h™dÀr
 (
sig
, 
um_±_ªgs
 *
ªgs
)

254 
c
 = 
	`c⁄s_gëc
();

256 
	`dev_°dö_wrôe
(
c
);

257 
	`dev_°dö_wrôe
(
c
);

260 
	}
}

263 
	$vtimî_h™dÀr
 (
sig
, 
um_±_ªgs
 *
ªgs
)

265 
ticks
 ++;

266 
	`as£π
 (
cuºít
 !
NULL
);

267 
	`run_timî_li°
();

269 
	}
}

	@kern-ucore/arch/um/init/host_syscall.c

1 
	~<ho°_sysˇŒ.h
>

2 
	~<¥oc.h
>

3 
	~<memœyout.h
>

4 
	~<°dio.h
>

5 
	~<°ub.h
>

6 
	~<å≠.h
>

7 
	~<pmm.h
>

8 
	~<vmm.h
>

9 
	~<¨ch.h
>

10 
	~<kio.h
>

18 
	$ho°_sysˇŒ_ö_chûd
 (
¥oc_°ru˘
 *
¥oc
)

20 
u£r_ªgs_°ru˘
 
ªgs
;

21 
îr
, 
pid
 = 
¥oc
->
¨ch
.
ho°
->
ho°_pid
;

23 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_GETREGS
, 
pid
, 0, ()&
ªgs
);

24 i‡(
îr
 < 0) {

25 
	`k¥ötf
 ("host_syscall_in_child: cannot getÑegs\n");

30 
ªgs
.
eù
 = 
STUB_CODE
 + ()
°ub_exec_sysˇŒ
 - (Ë&
__sysˇŒ_°ub_°¨t
;

31 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_SETREGS
, 
pid
, 0, ()&
ªgs
);

32 i‡(
îr
 < 0) {

33 
	`k¥ötf
 ("host_syscall_in_child: cannot setÑegs\n");

36 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_CONT
, 
pid
, 0, 0);

37 i‡(
îr
 < 0) {

38 
	`k¥ötf
 ("host_syscall_in_child: cannot continueÅhe child\n");

41 
îr
 = 
	`waô_°ub_d⁄e
 (
pid
);

42 i‡(
îr
 < 0) {

43 
	`k¥ötf
 ("ho°_sysˇŒ_ö_chûd: waô stub d⁄êÁûed wôhÉº = %d\n", 
îr
);

46 
îr
 = 
	`cuºít_°ub_‰ame
(
¥oc
->
¨ch
.
ho°
->
°ub_°ack
)->
óx
;

47  
îr
;

48 
	}
}

62 
	$ho°_mm≠
 (
¥oc_°ru˘
 *
¥oc
,

63 *
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
,

64 
fd
, 
uöt32_t
 
off£t
)

66 
°ub_°ack
 *°ub_°ack = 
¥oc
->
¨ch
.
ho°
->stub_stack;

67 
°ub_‰ame
 *
‰ame
 = (
	`cuºít_°ub_‰ame
 (
°ub_°ack
));

69 
‰ame
->
óx
 = 
__NR_mm≠
;

70 
‰ame
->
ebx
 = 
STUB_DATA
 + ()‰ame->
d©a
 - ()(
°ub_°ack
);

71 
mm≠_¨g_°ru˘
* 
¨gs
 = (mm≠_¨g_°ru˘ *)
‰ame
->
d©a
;

72 
¨gs
->
addr
 = ()addr;

73 
¨gs
->
Àn
 = 
Àngth
;

74 
¨gs
->
¥Ÿ
 =Örot;

75 
¨gs
->
Êags
 = flags;

76 
¨gs
->
fd
 = fd;

77 
¨gs
->
off£t
 = offset;

78  
	`ho°_sysˇŒ_ö_chûd
 (
¥oc
);

79 
	}
}

88 
	$ho°_munm≠
 (
¥oc_°ru˘
 *
¥oc
,

89 *
addr
, 
size_t
 
Àngth
)

91 
°ub_°ack
 *°ub_°ack = 
¥oc
->
¨ch
.
ho°
->stub_stack;

92 
°ub_‰ame
 *
‰ame
 = 
	`cuºít_°ub_‰ame
 (
°ub_°ack
);

94 
‰ame
->
óx
 = 
__NR_munm≠
;

95 
‰ame
->
ebx
 = ()
addr
;

96 
‰ame
->
ecx
 = 
Àngth
;

97  
	`ho°_sysˇŒ_ö_chûd
 (
¥oc
);

98 
	}
}

110 
	$ho°_assign
 (
¥oc_°ru˘
 *
¥oc
,

111 
uöçå_t
 
addr
, 
uöt32_t
 
d©a
)

113 i‡(!
	`u£r_mem_check
(
¥oc
->
mm
, 
addr
,  (
uöçå_t
), 1)) {

114 
	`k¥ötf
 ("åyássignög invÆidáddªss: 0x%x\n", 
addr
);

119 
°ub_°ack
 *°ub_°ack = 
¥oc
->
¨ch
.
ho°
->stub_stack;

120 
°ub_‰ame
 *
‰ame
 = 
	`cuºít_°ub_‰ame
 (
°ub_°ack
);

121 
‰ame
->
óx
 = -1;

122 
‰ame
->
ebx
 = 
addr
;

123 
‰ame
->
ecx
 = 
d©a
;

125  
	`ho°_sysˇŒ_ö_chûd
 (
¥oc
);

126 
	}
}

138 
	$ho°_gëvÆue
 (
¥oc_°ru˘
 *
¥oc
,

139 
uöçå_t
 
addr
, 
uöt32_t
* 
d©a
)

141 i‡(!
	`u£r_mem_check
(
¥oc
->
mm
, 
addr
,  (
uöçå_t
), 0)) {

145 
°ub_°ack
 *°ub_°ack = 
¥oc
->
¨ch
.
ho°
->stub_stack;

146 
°ub_‰ame
 *
‰ame
 = 
	`cuºít_°ub_‰ame
 (
°ub_°ack
);

147 
‰ame
->
óx
 = 0;

148 
‰ame
->
ebx
 = 
addr
;

149 
ªt
 = 
	`ho°_sysˇŒ_ö_chûd
 (
¥oc
);

150 i‡(
d©a
 !
NULL
)

151 *
d©a
 = 
ªt
;

153 
	}
}

166 
	$ho°_m≠_u£r
 (
¥oc_°ru˘
 *
¥oc
, 
uöçå_t
 
addr
, 
size_t
 
Àn
, 
is_wrôe
)

168 i‡(
¥oc
->
mm
 =
NULL
)

170 
uöçå_t
 
°¨t
 = 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), 
íd
 = 
	`ROUNDUP
◊dd∏+ 
Àn
, PGSIZE);

171 
pde_t
 *
pgdú
 = 
¥oc
->
mm
->pgdir;

173 
i
, 
ªt
;

175 
mm≠_¨g_°ru˘
 
¨gs
 = {

176 .
Àn
 = 
PGSIZE
,

177 .
¥Ÿ
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
,

178 .
Êags
 = 
MAP_SHARED
 | 
MAP_FIXED
,

179 .
fd
 = 
göfo
->
mem_fd
,

181 
i
 = 
°¨t
; i < 
íd
; i +
PGSIZE
) {

183 i‡(
is_wrôe
)

184 
ªt
 = 
	`ho°_assign
 (
¥oc
, 
addr
, 0);

186 
ªt
 = 
	`ho°_gëvÆue
 (
¥oc
, 
addr
, 
NULL
);

187 i‡(
ªt
 < 0)

191 
±e_t
 *
±ï
 = 
	`gë_±e
 (
pgdú
, 
addr
, 0);

192 
	`as£π
 (
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

193 
¨gs
.
addr
 = 
i
;

194 
¨gs
.
off£t
 = 
	`PTE_ADDR
 (*
±ï
);

195 
	`sysˇŒ1
 (
__NR_mm≠
, ()&
¨gs
);

199 
	}
}

	@kern-ucore/arch/um/init/main.c

1 
	~<¨ch.h
>

2 
	~<c⁄sﬁe.h
>

3 
	~<öå.h
>

4 
	~<ide.h
>

5 
	~<um˛ock.h
>

6 
	~<ho°_sig«l.h
>

7 
	~<pmm.h
>

8 
	~<kio.h
>

9 
	~<vmm.h
>

10 
	~<¥oc.h
>

11 
	~<sched.h
>

12 
	~<sw≠.h
>

13 
	~<fs.h
>

14 
	~<mp.h
>

17 
	$ho°_exô
 (
sig
)

19 
	`c⁄s_dt‹
 ();

20 
	`sysˇŒ1
 (
__NR_exô
, 0);

21 
	}
}

26 
	$maö
 (
¨gc
, * 
¨gv
[], * 
ívp
[])

28 i‡(
göfo
->
°©us
 =
STATUS_DEBUG
)

29 
	`øi£
 (
SIGTRAP
);

31 
	`c⁄s_öô
 ();

33 c⁄° *
mesßge
 = "(THU.CST) os isÜoading ...";

34 
	`k¥ötf
("%s\n\n", 
mesßge
);

36 
	`öå_öô
 ();

37 
	`ide_öô
 ();

39 
	`ho°_sig«l_öô
 ();

42 
	`mp_öô
 ();

44 
	`pmm_öô
 ();

45 
	`pmm_öô_≠
 ();

46 
	`vmm_öô
 ();

47 
	`sched_öô
();

48 
	`¥oc_öô
 ();

50 
	`sw≠_öô
 ();

51 
	`fs_öô
 ();

52 
	`sync_öô
();

54 
	`um˛ock_öô
 ();

55 
	`˝u_idÀ
 ();

57 
	`ho°_exô
 (
SIGINT
);

60 
	}
}

	@kern-ucore/arch/um/mm/buddy_pmm.c

1 
	~<pmm.h
>

2 
	~<li°.h
>

3 
	~<°rög.h
>

4 
	~<buddy_pmm.h
>

5 
	~<°dio.h
>

9 
	#MAX_ORDER
 10

	)

10 
‰ì_¨ó_t
 
	g‰ì_¨ó
[
MAX_ORDER
 + 1];

13 
	#‰ì_li°
(
x
Ë(
‰ì_¨ó
[x].
‰ì_li°
)

	)

14 
	#ƒ_‰ì
(
x
Ë(
‰ì_¨ó
[x].
ƒ_‰ì
)

	)

16 
	#MAX_ZONE_NUM
 10

	)

17 
	sZ⁄e
 {

18 
Page
 *
	mmem_ba£
;

19 } 
	gz⁄es
[
MAX_ZONE_NUM
] = {{
NULL
}};

23 
	$buddy_öô
() {

24 
i
;

25 
i
 = 0; i <
MAX_ORDER
; i ++) {

26 
	`li°_öô
(&
	`‰ì_li°
(
i
));

27 
	`ƒ_‰ì
(
i
) = 0;

29 
	}
}

33 
	$buddy_öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

34 
z⁄e_num
 = 0;

35 
	`as£π
(
n
 > 0 && 
z⁄e_num
 < 
MAX_ZONE_NUM
);

36 
Page
 *
p
 = 
ba£
;

37 ; 
p
 !
ba£
 + 
n
;Ö ++) {

38 
	`as£π
(
	`PageRe£rved
(
p
));

39 
p
->
Êags
 =Ö->
¥›îty
 = 0;

40 
p
->
z⁄e_num
 = zone_num;

41 
	`£t_∑ge_ªf
(
p
, 0);

43 
p
 = 
z⁄es
[
z⁄e_num
 ++].
mem_ba£
 = 
ba£
;

44 
size_t
 
‹dî
 = 
MAX_ORDER
, 
‹dî_size
 = (1 << order);

45 
n
 != 0) {

46 
n
 >
‹dî_size
) {

47 
p
->
¥›îty
 = 
‹dî
;

48 
	`SëPagePr›îty
(
p
);

49 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
p
->
∑ge_lök
));

50 
n
 -
‹dî_size
, 
p
 += order_size;

51 
	`ƒ_‰ì
(
‹dî
) ++;

53 
‹dî
 --;

54 
‹dî_size
 >>= 1;

56 
	}
}

59 
ölöe
 
size_t


60 
	$gë‹dî
(
size_t
 
n
) {

61 
size_t
 
‹dî
, 
‹dî_size
;

62 
‹dî
 = 0, 
‹dî_size
 = 1; ordî <
MAX_ORDER
; order ++, order_size <<= 1) {

63 i‡(
n
 <
‹dî_size
) {

64  
‹dî
;

67 
	`∑nic
("gë‹dî faûed. %d\n", 
n
);

68 
	}
}

72 
ölöe
 
Page
 *

73 
	$buddy_Æloc_∑ges_sub
(
size_t
 
‹dî
) {

74 
	`as£π
(
‹dî
 <
MAX_ORDER
);

75 
size_t
 
cur_‹dî
;

76 
cur_‹dî
 = 
‹dî
; cur_‹dî <
MAX_ORDER
; cur_order ++) {

77 i‡(!
	`li°_em±y
(&
	`‰ì_li°
(
cur_‹dî
))) {

78 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&
	`‰ì_li°
(
cur_‹dî
));

79 
Page
 *
∑ge
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

80 
	`ƒ_‰ì
(
cur_‹dî
) --;

81 
	`li°_dñ
(
À
);

82 
size_t
 
size
 = 1 << 
cur_‹dî
;

83 
cur_‹dî
 > 
‹dî
) {

84 
cur_‹dî
 --;

85 
size
 >>= 1;

86 
Page
 *
buddy
 = 
∑ge
 + 
size
;

87 
buddy
->
¥›îty
 = 
cur_‹dî
;

88 
	`SëPagePr›îty
(
buddy
);

89 
	`ƒ_‰ì
(
cur_‹dî
) ++;

90 
	`li°_add
(&
	`‰ì_li°
(
cur_‹dî
), &(
buddy
->
∑ge_lök
));

92 
	`CÀ¨PagePr›îty
(
∑ge
);

93  
∑ge
;

96  
NULL
;

97 
	}
}

100 
Page
 *

101 
	$buddy_Æloc_∑ges
(
size_t
 
n
) {

102 
	`as£π
(
n
 > 0);

103 
size_t
 
‹dî
 = 
	`gë‹dî
(
n
), 
‹dî_size
 = (1 << order);

104 
Page
 *
∑ge
 = 
	`buddy_Æloc_∑ges_sub
(
‹dî
);

105 i‡(
∑ge
 !
NULL
 && 
n
 !
‹dî_size
) {

106 
	`‰ì_∑ges
(
∑ge
 + 
n
, 
‹dî_size
 -Ç);

108  
∑ge
;

109 
	}
}

113 
ölöe
 
boﬁ


114 
	$∑ge_is_buddy
(
Page
 *
∑ge
, 
size_t
 
‹dî
, 
z⁄e_num
) {

115 i‡(
	`∑ge2µn
(
∑ge
Ë< 
≈age
) {

116 i‡(
∑ge
->
z⁄e_num
 == zone_num) {

117  !
	`PageRe£rved
(
∑ge
Ë&& 
	`PagePr›îty
’ageË&&Öage->
¥›îty
 =
‹dî
;

121 
	}
}

124 
ölöe
 
µn_t


125 
	$∑ge2idx
(
Page
 *
∑ge
) {

126  
∑ge
 - 
z⁄es
[∑ge->
z⁄e_num
].
mem_ba£
;

127 
	}
}

130 
ölöe
 
Page
 *

131 
	$idx2∑ge
(
z⁄e_num
, 
µn_t
 
idx
) {

132  
z⁄es
[
z⁄e_num
].
mem_ba£
 + 
idx
;

133 
	}
}

138 
	$buddy_‰ì_∑ges_sub
(
Page
 *
ba£
, 
size_t
 
‹dî
) {

139 
µn_t
 
buddy_idx
, 
∑ge_idx
 = 
	`∑ge2idx
(
ba£
);

140 
	`as£π
((
∑ge_idx
 & ((1 << 
‹dî
) - 1)) == 0);

141 
Page
 *
p
 = 
ba£
;

142 ; 
p
 !
ba£
 + (1 << 
‹dî
);Ö ++) {

143 
	`as£π
(!
	`PageRe£rved
(
p
Ë&& !
	`PagePr›îty
(p));

144 
p
->
Êags
 = 0;

145 
	`£t_∑ge_ªf
(
p
, 0);

147 
z⁄e_num
 = 
ba£
->zone_num;

148 
‹dî
 < 
MAX_ORDER
) {

149 
buddy_idx
 = 
∑ge_idx
 ^ (1 << 
‹dî
);

150 
Page
 *
buddy
 = 
	`idx2∑ge
(
z⁄e_num
, 
buddy_idx
);

151 i‡(!
	`∑ge_is_buddy
(
buddy
, 
‹dî
, 
z⁄e_num
)) {

154 
	`ƒ_‰ì
(
‹dî
) --;

155 
	`li°_dñ
(&(
buddy
->
∑ge_lök
));

156 
	`CÀ¨PagePr›îty
(
buddy
);

157 
∑ge_idx
 &
buddy_idx
;

158 
‹dî
 ++;

160 
Page
 *
∑ge
 = 
	`idx2∑ge
(
z⁄e_num
, 
∑ge_idx
);

161 
∑ge
->
¥›îty
 = 
‹dî
;

162 
	`SëPagePr›îty
(
∑ge
);

163 
	`ƒ_‰ì
(
‹dî
) ++;

164 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
∑ge
->
∑ge_lök
));

165 
	}
}

169 
	$buddy_‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

170 
	`as£π
(
n
 > 0);

171 i‡(
n
 == 1) {

172 
	`buddy_‰ì_∑ges_sub
(
ba£
, 0);

175 
size_t
 
‹dî
 = 0, 
‹dî_size
 = 1;

176 
n
 >
‹dî_size
) {

177 
	`as£π
(
‹dî
 <
MAX_ORDER
);

178 i‡((
	`∑ge2idx
(
ba£
Ë& 
‹dî_size
) != 0) {

179 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

180 
ba£
 +
‹dî_size
;

181 
n
 -
‹dî_size
;

183 
‹dî
 ++;

184 
‹dî_size
 <<= 1;

186 
n
 != 0) {

187 
n
 < 
‹dî_size
) {

188 
‹dî
 --;

189 
‹dî_size
 >>= 1;

191 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

192 
ba£
 +
‹dî_size
;

193 
n
 -
‹dî_size
;

196 
	}
}

199 
size_t


200 
	$buddy_ƒ_‰ì_∑ges
() {

201 
size_t
 
ªt
 = 0, 
‹dî
 = 0;

202 ; 
‹dî
 <
MAX_ORDER
; order ++) {

203 
ªt
 +
	`ƒ_‰ì
(
‹dî
) * (1 << order);

205  
ªt
;

206 
	}
}

210 
	$buddy_check
() {

212 
i
;

213 
cou¡
 = 0, 
tŸÆ
 = 0;

214 
i
 = 0; i <
MAX_ORDER
; i ++) {

215 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

216 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

217 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

218 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

219 
cou¡
 ++, 
tŸÆ
 +(1 << 
i
);

222 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

224 
Page
 *
p0
 = 
	`Æloc_∑ges
(8), *
buddy
 =áŒoc_∑ges(8), *
p1
;

226 
	`as£π
(
p0
 !
NULL
);

227 
	`as£π
((
	`∑ge2idx
(
p0
) & 7) == 0);

228 
	`as£π
(!
	`PagePr›îty
(
p0
));

230 
li°_íåy_t
 
‰ì_li°s_°‹e
[
MAX_ORDER
 + 1];

231 
ƒ_‰ì_°‹e
[
MAX_ORDER
 + 1];

233 
i
 = 0; i <
MAX_ORDER
; i ++) {

234 
‰ì_li°s_°‹e
[
i
] = 
	`‰ì_li°
(i);

235 
	`li°_öô
(&
	`‰ì_li°
(
i
));

236 
	`as£π
(
	`li°_em±y
(&
	`‰ì_li°
(
i
)));

237 
ƒ_‰ì_°‹e
[
i
] = 
	`ƒ_‰ì
(i);

238 
	`ƒ_‰ì
(
i
) = 0;

241 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

242 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
);

243 
	`‰ì_∑ges
(
p0
, 8);

244 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 8);

245 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

246 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
 && !
	`PagePr›îty
’0Ë&& 
	`ƒ_‰ì_∑ges
() == 2);

248 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
 &&Ö1 =
p0
 + 6);

249 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

251 
	`‰ì_∑ges
(
p0
, 3);

252 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 1);

253 
	`as£π
(
	`PagePr›îty
(
p0
 + 2Ë&&Ö0[2].
¥›îty
 == 0);

255 
	`‰ì_∑ges
(
p0
 + 3, 3);

256 
	`‰ì_∑ges
(
p1
, 2);

258 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

260 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
);

261 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
);

262 
	`‰ì_∑ges
(
p0
 + 4, 2);

263 
	`‰ì_∑ges
(
p1
, 2);

265 
p1
 = 
p0
 + 4;

266 
	`as£π
(
	`PagePr›îty
(
p1
Ë&&Ö1->
¥›îty
 == 2);

267 
	`‰ì_∑ges
(
p0
, 4);

268 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

270 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(8)Ë!
NULL
);

271 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
 && 
	`ƒ_‰ì_∑ges
() == 0);

273 
i
 = 0; i <
MAX_ORDER
; i ++) {

274 
	`‰ì_li°
(
i
Ë
‰ì_li°s_°‹e
[i];

275 
	`ƒ_‰ì
(
i
Ë
ƒ_‰ì_°‹e
[i];

278 
	`‰ì_∑ges
(
p0
, 8);

279 
	`‰ì_∑ges
(
buddy
, 8);

281 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

283 
i
 = 0; i <
MAX_ORDER
; i ++) {

284 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

285 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

286 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

287 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

288 
cou¡
 --, 
tŸÆ
 -(1 << 
i
);

291 
	`as£π
(
cou¡
 == 0);

292 
	`as£π
(
tŸÆ
 == 0);

293 
	}
}

296 c⁄° 
pmm_m™agî
 
	gbuddy_pmm_m™agî
 = {

297 .
«me
 = "buddy_pmm_manager",

298 .
	göô
 = 
buddy_öô
,

299 .
	göô_memm≠
 = 
buddy_öô_memm≠
,

300 .
	gÆloc_∑ges
 = 
buddy_Æloc_∑ges
,

301 .
	g‰ì_∑ges
 = 
buddy_‰ì_∑ges
,

302 .
	gƒ_‰ì_∑ges
 = 
buddy_ƒ_‰ì_∑ges
,

303 .
	gcheck
 = 
buddy_check
,

	@kern-ucore/arch/um/mm/buddy_pmm.h

1 #i‚de‡
__KERN_MM_BUDDY_PMM_H__


2 
	#__KERN_MM_BUDDY_PMM_H__


	)

4 
	~<pmm.h
>

6 c⁄° 
pmm_m™agî
 
buddy_pmm_m™agî
;

	@kern-ucore/arch/um/mm/memlayout.h

1 #i‚de‡
__GLUE_UCORE_MEMLAYOUT_H__


2 
	#__GLUE_UCORE_MEMLAYOUT_H__


	)

4 
	~<glue_memœyout.h
>

	@kern-ucore/arch/um/mm/pmm.c

1 
	~<¨ch.h
>

2 
	~<pmm.h
>

3 
	~<mmu.h
>

4 
	~<vmm.h
>

5 
	~<memœyout.h
>

6 
	~<îr‹.h
>

7 
	~<buddy_pmm.h
>

8 
	~<°dio.h
>

9 
	~<sync.h
>

10 
	~<ty≥s.h
>

11 
	~<°ub.h
>

12 
	~<°rög.h
>

13 
	~<ho°_sysˇŒ.h
>

14 
	~<kio.h
>

15 
	~<glue_mp.h
>

16 
	~<¥oc.h
>

17 
	~<¶ab.h
>

19 
	#cuºít
 
	`∂s_ªad
(
cuºít
)

	)

21 
mm_°ru˘
 *
check_mm_°ru˘
;

24 
size_t
 
	gmem_size
 = 0;

25 *
	gboŸ°ack
 = (*)
KSTACK
, *
	gboŸ°ackt›
 = (*)
KSTACKTOP
;

40 
¥oc_°ru˘
*

41 
	$föd_¥oc_by_pgdú
 (
pde_t
 *
pgdú
) {

54 i‡(
cuºít
 !
ksw≠d
) {

55 i‡(
cuºít
 =
NULL
 || cuºít->
mm
 == NULL)

56  
NULL
;

57 i‡(
pgdú
 =
cuºít
->
mm
->pgdir)

58  
cuºít
;

64 
li°_íåy_t
 *
À
 = &
¥oc_li°
;

65 i‡(
	`li°_√xt
(
À
) == 0)

66  
NULL
;

67 
¥oc_°ru˘
 *
¥oc
;

68 –
À
 = 
	`li°_√xt
÷eËË!&
¥oc_li°
) {

69 
¥oc
 = 
	`À2¥oc
(
À
, 
li°_lök
);

70 i‡(
¥oc
->
mm
 !
NULL
 &&Öroc->mm->
pgdú
 ==Ögdir) {

71  
¥oc
;

74  
NULL
;

75 
	}
}

83 
	$éb_upd©e
 (
pde_t
 *
pgdú
, 
uöçå_t
 
œ
)

85 
œ
 = 
	`ROUNDDOWN
 (œ, 
PGSIZE
);

86 
±e_t
* 
±e
 = 
	`gë_±e
 (
pgdú
, 
œ
, 0);

87 i‡(
±e
 =0 || (*±ê& 
PTE_P
) == 0)

88 
	`∑nic
 ("invalidÅlb flushing\n");

89 
uöt32_t
 
∑
 = 
	`PDE_ADDR
(*
±e
);

94 
r
 = 1, 
w
 = 1, 
x
 = 1;

95 i‡(
	`Gë_PTE_A
(
±e
) == 0)

96 
r
 = 
x
 = 
w
 = 0;

97 i‡(
	`Gë_PTE_W
(
±e
Ë=0 || 
	`Gë_PTE_D
(pte) == 0)

98 
w
 = 0;

103 
	`éb_övÆid©e
 (
pgdú
, 
œ
);

105 
¥oc_°ru˘
 *
¥oc
 = 
	`föd_¥oc_by_pgdú
 (
pgdú
);

106 i‡(
cuºít
 !
NULL
 && 
¥oc
 != NULL) {

108 i‡(
	`ho°_mm≠
 (
¥oc
,

109 (*)
œ
, 
PGSIZE
, (
r
 ? 
PROT_READ
 : 0Ë| (
w
 ? 
PROT_WRITE
 : 0Ë| (
x
 ? 
PROT_EXEC
 : 0),

110 
MAP_SHARED
 | 
MAP_FIXED
, 
göfo
->
mem_fd
, 
∑
Ë=
MAP_FAILED
)

111 
	`∑nic
 ("map in child failed.\n");

114 
mm≠_¨g_°ru˘
 
¨gs
 = {

115 .
addr
 = 
œ
,

116 .
Àn
 = 
PGSIZE
,

117 .
¥Ÿ
 = (
r
 ? 
PROT_READ
 : 0Ë| (
w
 ? 
PROT_WRITE
 : 0Ë| (
x
 ? 
PROT_EXEC
 : 0),

118 .
Êags
 = 
MAP_SHARED
 | 
MAP_FIXED
,

119 .
fd
 = 
göfo
->
mem_fd
,

120 .
off£t
 = 
∑
,

122 
	`sysˇŒ1
 (
__NR_mm≠
, ()&
¨gs
);

124 
	}
}

132 
	$éb_övÆid©e
 (
pde_t
 *
pgdú
, 
uöçå_t
 
œ
) {

133 
¥oc_°ru˘
 *
¥oc
 = 
	`föd_¥oc_by_pgdú
 (
pgdú
);

134 i‡(
cuºít
 !
NULL
 && 
¥oc
 != NULL) {

135 i‡(
	`ho°_munm≠
 (
¥oc
, (*)
œ
, 
PGSIZE
) < 0)

136 
	`∑nic
 ("unmap in child failed\n");

138 
	`sysˇŒ2
 (
__NR_munm≠
, 
œ
, 
PGSIZE
);

140 
	}
}

147 
	$éb_övÆid©e_u£r
 ()

149 
	`sysˇŒ2
 (
__NR_munm≠
, 
USERBASE
, 
USERTOP
 - USERBASE);

150 
	}
}

160 
	$check_vpm
 ()

162 * 
p
;

163 
uöt32_t
 
‰ìmem
 = 
e820m≠
.
ƒ_m≠
-1;

164 
uöt32_t
 
‰ìmem_°¨t
 = (uöt32_t)
e820m≠
.
m≠
[
‰ìmem
].
addr
;

165 
uöt32_t
 
‰ìmem_size
 = (uöt32_t)
e820m≠
.
m≠
[
‰ìmem
].
size
;

168 
p
 = (*)
‰ìmem_°¨t
;

169 *
p
 = 55;

170 
	`as£π
 (*
p
 == 55);

173 
p
 = (*)(
‰ìmem_°¨t
 + 
‰ìmem_size
 / 2);

174 *
p
 = 1111;

175 
	`as£π
 (*
p
 == 1111);

178 
p
 = (*)((
uöt32_t
)(
‰ìmem_size
 + 
‰ìmem_°¨t
 - ()));

179 *
p
 = 101;

180 
	`as£π
 (*
p
 = 101);

182 
	`k¥ötf
 ("check_vpm() succeeded.\n");

183 
	}
}

192 
	$check_boŸ_pgdú
() {

193 
±e_t
 *
±ï
;

194 
i
;

195 
i
 = 0; i < 
≈age
; i +
PGSIZE
) {

196 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, (
uöçå_t
)
	`KADDR
(
i
), 0)Ë!
NULL
);

197 
	`as£π
(
	`PTE_ADDR
(*
±ï
Ë=
i
);

202 
	`as£π
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)] == 0);

204 
Page
 *
p
;

205 
p
 = 
	`Æloc_∑ge
();

206 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 
TEST_PAGE
, 
PTE_W
 | 
PTE_D
 | 
PTE_A
) == 0);

207 
	`as£π
(
	`∑ge_ªf
(
p
) == 1);

208 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 
TEST_PAGE
 + 
PGSIZE
, 
PTE_W
 | 
PTE_D
 | 
PTE_A
) == 0);

209 
	`as£π
(
	`∑ge_ªf
(
p
) == 2);

211 c⁄° *
°r
 = "ucore: Hello world!!";

212 
	`°r˝y
((*)
TEST_PAGE
, 
°r
);

213 
	`as£π
(
	`°rcmp
((*)
TEST_PAGE
, (*)(TEST_PAGE + 
PGSIZE
)) == 0);

215 *(*)(
	`∑ge2kva
(
p
)) = '\0';

216 
	`as£π
(
	`°æí
((c⁄° *)
TEST_PAGE
) == 0);

223 
	`éb_övÆid©e
 (
boŸ_pgdú
, 
TEST_PAGE
);

224 
	`éb_övÆid©e
 (
boŸ_pgdú
, 
TEST_PAGE
 + 
PGSIZE
);

226 
	`‰ì_∑ge
(
p
);

227 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PDE_ADDR
(
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)])));

228 
boŸ_pgdú
[
	`PDX
(
TEST_PAGE
)] = 0;

230 
	`k¥ötf
("check_boot_pgdir() succeeded.\n");

231 
	}
}

242 
	$öô_pmm_m™agî
() {

243 
pmm_m™agî
 = &
buddy_pmm_m™agî
;

244 
	`k¥ötf
("mem‹y m™agmít: %s\n", 
pmm_m™agî
->
«me
);

245 
pmm_m™agî
->
	`öô
();

246 
	}
}

250 
	$öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

251 
pmm_m™agî
->
	`öô_memm≠
(
ba£
, 
n
);

252 
	}
}

255 
	$check_Æloc_∑ge
() {

256 
pmm_m™agî
->
	`check
();

257 
	`k¥ötf
("check_alloc_page() succeeded!\n");

258 
	}
}

264 
	$lﬂd_r•0
 (
uöçå_t
 
r•0
Ë{
	}
}

265 
	$£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pde_t
 *
pgdú
Ë{
	}
}

266 
	$lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
Ë{
	}
}

267 
	$m≠_pgdú
 (
pde_t
 *
pgdú
Ë{
	}
}

273 
	$∑ge_öô
 ()

275 
i
;

276 
‰ìmem_size
 = 0;

284 
i
 = 0; i < 
e820m≠
.
ƒ_m≠
; i++) {

285 
mem_size
 +(
uöt32_t
)(
e820m≠
.
m≠
[
i
].
size
);

286 i‡(
e820m≠
.
m≠
[
i
].
ty≥
 =
E820_ARM
)

287 
‰ìmem_size
 +
e820m≠
.
m≠
[
i
].
size
;

290 
∑ges
 = (
Page
 *)(
uöt32_t
)(
e820m≠
.
m≠
[e820m≠.
ƒ_m≠
-1].
addr
);

291 
≈age
 = (
mem_size
Ë/ 
PGSIZE
;

292 
i
 = 0; i < 
≈age
; i++) {

293 
	`SëPageRe£rved
 (
∑ges
 + 
i
);

296 
uöçå_t
 
‰ìmem
 = 
	`PADDR
(
	`ROUNDUP
((uöçå_t)
∑ges
 + (
Page
Ë* 
≈age
, 
PGSIZE
));

297 
uöt32_t
 
‰ìmem_≈age
 = 
‰ìmem_size
 / 
PGSIZE
 - 
≈age
 *  (
Page
) / PGSIZE;

298 
	`öô_memm≠
(
	`∑2∑ge
(
‰ìmem
), 
‰ìmem_≈age
);

299 
	}
}

307 
	$≥rm2°r
(
≥rm
) {

308 
°r
[4];

309 
°r
[0] = (
≥rm
 & 
PTE_U
) ? 'u' : '-';

310 
°r
[1] = 'r';

311 
°r
[2] = (
≥rm
 & 
PTE_W
) ? 'w' : '-';

312 
°r
[3] = '\0';

313  
°r
;

314 
	}
}

320 
	$gë_pgèbÀ_ôems
(
size_t
 
À·
, size_à
right
, size_à
°¨t
, 
uöçå_t
 *
èbÀ
, size_à*
À·_°‹e
, size_à*
right_°‹e
) {

321 i‡(
°¨t
 >
right
) {

324 
°¨t
 < 
right
 && !(
èbÀ
[°¨t] & 
PTE_P
)) {

325 
°¨t
 ++;

327 i‡(
°¨t
 < 
right
) {

328 i‡(
À·_°‹e
 !
NULL
) {

329 *
À·_°‹e
 = 
°¨t
;

331 
≥rm
 = (
èbÀ
[
°¨t
 ++] & 
PTE_USER
);

332 
°¨t
 < 
right
 && (
èbÀ
[°¨t] & 
PTE_USER
Ë=
≥rm
) {

333 
°¨t
 ++;

335 i‡(
right_°‹e
 !
NULL
) {

336 *
right_°‹e
 = 
°¨t
;

338  
≥rm
;

341 
	}
}

348 
	$gë_pgèbÀ_ôems_2
 (
size_t
 
À·
, size_à
right
, size_à
°¨t
, 
uöçå_t
 *
pgdú
, size_à*
À·_°‹e
, size_à*
right_°‹e
)

350 
±e_t
 *
±e
;

352 i‡(
°¨t
 >
right
) {

355 
°¨t
 < 
right
 &&

356 ((
±e
 = 
	`gë_±e
(
pgdú
, 
°¨t
 * 
PGSIZE
, 0)Ë=
NULL
 || !(*±ê& 
PTE_P
) ))

357 
°¨t
 ++;

358 i‡(
°¨t
 < 
right
) {

359 i‡(
À·_°‹e
 !
NULL
)

360 *
À·_°‹e
 = 
°¨t
;

361 
≥rm
 = *
	`gë_±e
(
pgdú
, (
°¨t
 ++Ë* 
PGSIZE
, 0Ë& 
PTE_USER
;

362 
°¨t
 < 
right
 &&

363 (
±e
 = 
	`gë_±e
(
pgdú
, 
°¨t
 * 
PGSIZE
, 0)Ë!
NULL
 && (*±ê& 
PTE_USER
Ë=
≥rm
) {

364 
°¨t
 ++;

366 i‡(
right_°‹e
 !
NULL
) {

367 *
right_°‹e
 = 
°¨t
;

369  
≥rm
;

372 
	}
}

379 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...)) {

380 
	`¥ötf
("-------------------- BEGIN --------------------\n");

381 
size_t
 
À·
, 
right
 = 0, 
≥rm
;

382 
pde_t
* 
pgdú
 = 
boŸ_pgdú
;

383 i‡(
cuºít
 !
NULL
 && cuºít->
mm
 !NULL && cuºít->mm->
pgdú
 != NULL) {

384 
pgdú
 = 
cuºít
->
mm
->pgdir;

387 (
≥rm
 = 
	`gë_pgèbÀ_ôems
(0, 
NPDEENTRY
, 
right
, 
pgdú
, &
À·
, &right)) != 0) {

388 
	`¥ötf
("PDE(%03xË%08x-%08x %08x %s\n", 
right
 - 
À·
,

389 
À·
 * 
PTSIZE
, 
right
 * PTSIZE, (righà-Üe·Ë* PTSIZE, 
	`≥rm2°r
(
≥rm
));

390 
size_t
 
l
, 
r
 = 
À·
 * 
NPTEENTRY
;

391 (
≥rm
 = 
	`gë_pgèbÀ_ôems_2
 (
À·
 * 
NPTEENTRY
, 
right
 * NPTEENTRY, 
r
, 
pgdú
, &
l
, &r)) != 0) {

392 
	`¥ötf
(" |-- PTE(%05xË%08x-%08x %08x %s\n", 
r
 - 
l
,

393 
l
 * 
PGSIZE
, 
r
 * PGSIZE, (∏-ÜË* PGSIZE, 
	`≥rm2°r
(
≥rm
));

396 
	`¥ötf
("--------------------- END ---------------------\n");

397 
	}
}

405 
	$pmm_öô
 ()

407 
	`check_vpm
 ();

409 
	`öô_pmm_m™agî
 ();

411 
	`∑ge_öô
 ();

413 
	`check_Æloc_∑ge
 ();

415 
boŸ_pgdú
 = 
	`boŸ_Æloc_∑ge
();

416 
	`mem£t
(
boŸ_pgdú
, 0, 
PGSIZE
);

417 
	`check_pgdú
();

420 
	`boŸ_m≠_£gmít
 (
boŸ_pgdú
, 
KERNBASE
, 
mem_size
, 0, 
PTE_W
);

422 
	`check_boŸ_pgdú
 ();

423 
	`¥öt_pgdú
 (
k¥ötf
);

425 
	`¶ab_öô
 ();

426 
	}
}

	@kern-ucore/arch/um/mm/swap.c

1 
	~<pmm.h
>

2 
	~<vmm.h
>

3 
	~<sw≠.h
>

4 
	~<sw≠fs.h
>

5 
	~<¶ab.h
>

6 
	~<as£π.h
>

7 
	~<°dio.h
>

8 
	~<vmm.h
>

9 
	~<îr‹.h
>

10 
	~<©omic.h
>

11 
	~<sync.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<kio.h
>

17 
li°_íåy_t
 
	msw≠_li°
;

18 
size_t
 
	mƒ_∑ges
;

19 } 
	tsw≠_li°_t
;

21 *
mem_m≠
;

22 
sw≠_li°_t
 
a˘ive_li°
;

23 
sw≠_li°_t
 
öa˘ive_li°
;

25 
	#ƒ_a˘ive_∑ges
 (
a˘ive_li°
.
ƒ_∑ges
)

	)

26 
	#ƒ_öa˘ive_∑ges
 (
öa˘ive_li°
.
ƒ_∑ges
)

	)

28 
	#SWAP_UNUSED
 0xFFFF

	)

30 
∑ge_œundî
();

31 
ªfûl_öa˘ive_sˇn
();

32 
sw≠_out_mm
(
mm_°ru˘
 *
mm
, 
size_t
 
ªquúe
);

39 
	$check_mm_sw≠_chûd
 ()

41 
size_t
 
ƒ_‰ì_∑ges_°‹e
 = 
	`ƒ_‰ì_∑ges
();

42 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

44 
ªt
, 
i
, 
j
;

45 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

46 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

49 
mm_°ru˘
 *
check_mm_°ru˘
;

50 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

54 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

55 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

57 
uöçå_t
 
addr0
, 
addr1
;

59 
addr0
 = 0;

61 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 0, 
NULL
);

62 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PTSIZE
)Ë? 0 : -
E_INVAL
);

63 
addr0
 +
PTSIZE
;

64 } 
addr0
 != 0);

66 
addr0
 = 0;

67 
i
 = 0; i < 1024; i ++, 
addr0
 +
PTSIZE
) {

68 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

69 
	`as£π
(
ªt
 =-
E_INVAL
);

72 
	`mm_de°roy
(
mm0
);

74 
mm0
 = 
	`mm_¸óã
();

75 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

77 
addr0
 = 0, 
i
 = 0;

79 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
 - 
PGSIZE
, 0, 
NULL
);

80 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PTSIZE
)Ë? 0 : -
E_INVAL
);

81 i‡(
ªt
 == 0) {

82 
i
 ++;

84 
addr0
 +
PTSIZE
;

85 } 
addr0
 != 0);

87 
addr0
 = 0, 
j
 = 0;

89 
addr0
 +
PTSIZE
 - 
PGSIZE
;

90 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

91 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PGSIZE
)Ë? 0 : -
E_INVAL
);

92 i‡(
ªt
 == 0) {

93 
j
 ++;

95 
addr0
 +
PGSIZE
;

96 } 
addr0
 != 0);

98 
	`as£π
(
j
 + 1 >
i
);

100 
	`mm_de°roy
(
mm0
);

102 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

103 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

105 
	`k¥ötf
("check_mm_swap: step1, mm_map ok.\n");

109 
mm0
 = 
	`mm_¸óã
();

110 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

114 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

115 
	`as£π
(
∑ge
 !
NULL
);

116 
pde_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

117 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

121 
mm0
->
pgdú
 =Ögdir;

122 
check_mm_°ru˘
 = 
mm0
;

123 
	`éb_övÆid©e_u£r
 ();

125 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

126 
vma_°ru˘
 *
vma
;

128 
addr0
 = 0;

130 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, &
vma
)) == 0) {

133 
addr0
 +
PTSIZE
;

134 } 
addr0
 != 0);

136 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

137 
	`as£π
(
vma
->
vm_°¨t
 =
addr0
 && vma->
vm_íd
 =addr0 + 
PTSIZE
);

141 
±e_t
 *
±ï
;

142 
addr1
 = 
addr0
;áddr1 <áddr0 + 
PTSIZE
;áddr1 +
PGSIZE
) {

143 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr1
, 0);

144 
	`as£π
(
±ï
 =
NULL
);

147 
	`mem£t
((*)
addr0
, 0xEF, 
PGSIZE
 * 2);

148 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

149 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

150 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

151 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

153 
ªt
 = 
	`mm_unm≠
(
mm0
, - 
PTSIZE
, PTSIZE);

154 
	`as£π
(
ªt
 =-
E_INVAL
);

155 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PTSIZE
, 
PGSIZE
);

156 
	`as£π
(
ªt
 == 0);

158 
addr1
 = 
addr0
 + 
PTSIZE
 / 2;

159 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
);

160 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

162 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4);

163 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 3);

165 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
 * 6, 0, 
NULL
);

166 
	`as£π
(
ªt
 =-
E_INVAL
);

167 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 0, 
NULL
);

168 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 4);

169 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4, 0, 
NULL
);

170 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 5);

172 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, 
PTSIZE
 / 2 - PGSIZE);

173 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 1);

175 
addr1
 = 
addr0
 + 
PGSIZE
;

176 
i
 = 0; i < 
PGSIZE
; i ++) {

177 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0xEF);

180 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, PGSIZE / 4);

181 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

182 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

183 
	`as£π
(
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

184 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

185 
	`as£π
(
±ï
 !
NULL
 && *ptep == 0);

187 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 
vm_Êags
, 
NULL
);

188 
	`mem£t
((*)
addr1
, 0x88, 
PGSIZE
);

189 
	`as£π
(*(*)
addr1
 =()0x88 && 
mm0
->
m≠_cou¡
 == 3);

191 
i
 = 1; i < 16; i += 2) {

192 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE);

193 
	`as£π
(
ªt
 == 0);

194 i‡(
i
 < 8) {

195 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE, 0, 
NULL
);

196 
	`as£π
(
ªt
 == 0);

199 
	`as£π
(
mm0
->
m≠_cou¡
 == 13);

201 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 2, 
PTSIZE
 - PGSIZE * 2);

202 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

204 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PGSIZE
 * 2);

205 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

207 
	`k¥ötf
("check_mm_swap: step2, mm_unmap ok.\n");

211 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

212 
	`as£π
(
ªt
 == 0);

214 
i
 = 0, 
addr1
 = 
addr0
; i < 4; i ++,áddr1 +
PGSIZE
) {

215 *(*)
addr1
 = ()0xFF;

218 
	`exô_mm≠
(
mm0
);

219 
i
 = 0; i < 
	`PDX
(
KERNBASE
); i ++) {

220 
	`as£π
(
pgdú
[
i
] == 0);

223 
	`k¥ötf
("check_mm_swap: step3,Éxit_mmap ok.\n");

227 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

228 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

231 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

232 
	`as£π
(
ªt
 != 0);

234 
addr1
 = 
addr0
;

235 
i
 = 0; i < 4; i ++, 
addr1
 +
PGSIZE
) {

236 *(*)
addr1
 = ()(
i
 * i);

239 
ªt
 = 0;

240 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

241 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

242 
	`as£π
(
ªt
 == 4);

244 ; 
i
 < 8; i ++, 
addr1
 +
PGSIZE
) {

245 *(*)
addr1
 = ()(
i
 * i);

250 
mm1
 = 
	`mm_¸óã
();

251 
	`as£π
(
mm1
 !
NULL
);

253 
∑ge
 = 
	`Æloc_∑ge
();

254 
	`as£π
(
∑ge
 !
NULL
);

255 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

256 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

257 
mm1
->
pgdú
 =Ögdir;

259 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

260 
	`as£π
(
ªt
 == 0);

264 
check_mm_°ru˘
 = 
mm1
;

265 
	`éb_övÆid©e_u£r
 ();

267 
addr1
 = 
addr0
;

268 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

269 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

270 *(*)
addr1
 = ()0x88;

275 
check_mm_°ru˘
 = 
mm0
;

276 
	`éb_övÆid©e_u£r
 ();

278 
addr1
 = 
addr0
;

279 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

280 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

286 
check_mm_°ru˘
 = 
NULL
;

290 
	`exô_mm≠
(
mm0
);

291 
	`exô_mm≠
(
mm1
);

293 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

294 
	`mm_de°roy
(
mm0
);

295 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

296 
	`mm_de°roy
(
mm1
);

298 
	`k¥ötf
("check_mm_swap: step4, dup_mmap ok.\n");

300 
	`ªfûl_öa˘ive_sˇn
();

301 
	`∑ge_œundî
();

302 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

303 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

306 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

307 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

309 
	`k¥ötf
("check_mm_swap() succeeded.\n");

311 
	`sysˇŒ1
 (
__NR_exô
, 0);

312 
	}
}

315 
	$check_mm_sw≠
()

318 
pid
 = 
	`sysˇŒ0
 (
__NR_f‹k
);

319 i‡(
pid
 < 0) {

320 
	`∑nic
 ("forkÉrror.\n");

321 } i‡(
pid
 == 0) {

322 
	`check_mm_sw≠_chûd
 ();

324 
°©us
;

325 
	`sysˇŒ3
 (
__NR_waôpid
, -1, ()&
°©us
, 0);

326 
	}
}

333 
	$check_mm_shm_sw≠_chûd
 ()

335 
size_t
 
ƒ_‰ì_∑ges_°‹e
 = 
	`ƒ_‰ì_∑ges
();

336 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

338 
ªt
, 
i
;

339 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

340 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

343 
mm_°ru˘
 *
check_mm_°ru˘
;

344 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

346 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

347 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

349 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

350 
	`as£π
(
∑ge
 !
NULL
);

351 
pde_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

352 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

354 
mm0
->
pgdú
 =Ögdir;

355 
check_mm_°ru˘
 = 
mm0
;

356 
	`éb_övÆid©e_u£r
 ();

358 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

360 
uöçå_t
 
addr0
, 
addr1
;

362 
addr0
 = 0;

364 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4, 
vm_Êags
, 
NULL
)) == 0) {

367 
addr0
 +
PTSIZE
;

368 } 
addr0
 != 0);

370 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

372 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4);

373 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

375 
shmem_°ru˘
 *
shmem
 = 
	`shmem_¸óã
(
PTSIZE
 * 2);

376 
	`as£π
(
shmem
 !
NULL
 && 
	`shmem_ªf
(shmem) == 0);

380 
vma_°ru˘
 *
vma
;

382 
addr1
 = 
addr0
 + 
PTSIZE
 * 2;

383 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr0
, 
vm_Êags
, 
shmem
, &
vma
);

384 
	`as£π
(
ªt
 == 0);

385 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 1);

386 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr1
, 
vm_Êags
, 
shmem
, &
vma
);

387 
	`as£π
(
ªt
 == 0);

388 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 2);

392 
i
 = 0; i < 4; i ++) {

393 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(i * i);

395 
i
 = 0; i < 4; i ++) {

396 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(i * i));

399 
i
 = 0; i < 4; i ++) {

400 *(*)(
addr1
 + 
i
 * 
PGSIZE
) = ()(- i * i);

402 
i
 = 0; i < 4; i ++) {

403 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(- i * i));

408 
ªt
 = 
	`sw≠_out_mm
(
mm0
, 8) + swap_out_mm(mm0, 8);

409 
	`as£π
(
ªt
 =8 && 
ƒ_a˘ive_∑ges
 =4 && 
ƒ_öa˘ive_∑ges
 == 0);

411 
	`ªfûl_öa˘ive_sˇn
();

412 
	`as£π
(
ƒ_a˘ive_∑ges
 =0 && 
ƒ_öa˘ive_∑ges
 == 4);

416 
	`mem£t
((*)
addr0
, 0x77, 
PGSIZE
);

417 
i
 = 0; i < 
PGSIZE
; i ++) {

418 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0x77);

423 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
 * 4);

424 
	`as£π
(
ªt
 == 0);

426 
addr0
 +4 * 
PGSIZE
, 
addr1
 += 4 * PGSIZE;

427 *(*)(
addr0
) = ()(0xDC);

428 
	`as£π
(*(*)(
addr1
) == ()(0xDC));

429 *(*)(
addr1
 + 
PTSIZE
) = ()(0xDC);

430 
	`as£π
(*(*)(
addr0
 + 
PTSIZE
) == ()(0xDC));

432 
	`k¥ötf
("check_mm_shm_swap: step1, share memory ok.\n");

436 
mm1
 = 
	`mm_¸óã
();

437 
	`as£π
(
mm1
 !
NULL
);

439 
∑ge
 = 
	`Æloc_∑ge
();

440 
	`as£π
(
∑ge
 !
NULL
);

441 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

442 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

443 
mm1
->
pgdú
 =Ögdir;

445 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

446 
	`as£π
(
ªt
 =0 && 
	`shmem_ªf
(
shmem
) == 4);

450 
check_mm_°ru˘
 = 
mm1
;

451 
	`éb_övÆid©e_u£r
 ();

453 
i
 = 0; i < 4; i ++) {

454 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(0x57 + i);

456 
i
 = 0; i < 4; i ++) {

457 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

460 
check_mm_°ru˘
 = 
mm0
;

461 
	`éb_övÆid©e_u£r
 ();

463 
i
 = 0; i < 4; i ++) {

464 
	`as£π
(*(*)(
addr0
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

465 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

468 
	`sw≠_out_mm
(
mm1
, 4);

469 
	`exô_mm≠
(
mm1
);

471 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

472 
	`mm_de°roy
(
mm1
);

474 
	`as£π
(
	`shmem_ªf
(
shmem
) == 2);

476 
	`k¥ötf
("check_mm_shm_swap: step2, dup_mmap ok.\n");

480 
check_mm_°ru˘
 = 
NULL
;

481 
	`éb_övÆid©e_u£r
 ();

483 
	`exô_mm≠
(
mm0
);

484 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

485 
	`mm_de°roy
(
mm0
);

487 
	`ªfûl_öa˘ive_sˇn
();

488 
	`∑ge_œundî
();

489 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

490 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

493 
	`as£π
(
ƒ_‰ì_∑ges_°‹e
 =
	`ƒ_‰ì_∑ges
());

494 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

496 
	`k¥ötf
("check_mm_shm_swap() succeeded.\n");

498 
	`sysˇŒ1
 (
__NR_exô
, 0);

499 
	}
}

502 
	$check_mm_shm_sw≠
 ()

504 
pid
 = 
	`sysˇŒ0
 (
__NR_f‹k
);

505 i‡(
pid
 < 0) {

506 
	`∑nic
 ("forkÉrror.\n");

507 } i‡(
pid
 == 0) {

508 
	`check_mm_shm_sw≠_chûd
 ();

510 
°©us
;

511 
	`sysˇŒ3
 (
__NR_waôpid
, -1, ()&
°©us
, 0);

512 
	}
}

	@kern-ucore/arch/um/mm/vmm.c

1 
	~<vmm.h
>

2 
	~<ty≥s.h
>

3 
	~<ho°_sysˇŒ.h
>

4 
	~<¥oc.h
>

5 
	~<memœyout.h
>

6 
	~<pmm.h
>

7 
	~<mmu.h
>

8 
	~<°rög.h
>

19 
boﬁ


20 
	$c›y_‰om_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
, 
boﬁ
 
wrôabÀ
) {

22 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
Àn
, 
wrôabÀ
)) {

26 i‡(
mm
 =
NULL
) {

27 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

32 
Àn
 > 0) {

34 i‡(
	`ho°_gëvÆue
 (
	`∂s_ªad
(
cuºít
), (
uöçå_t
)
§c
, 
NULL
) < 0) {

39 
size_t
 
avaû
 = 
	`ROUNDUP
 (
§c
, 
PGSIZE
) - src;

40 i‡(
	`PGOFF
 (
§c
) == 0)

41 
avaû
 +
PGSIZE
;

42 i‡(
avaû
 > 
Àn
)

43 
avaû
 = 
Àn
;

46 
±e_t
 *
±ï
 = 
	`gë_±e
 (
mm
->
pgdú
, (
uöçå_t
)
§c
, 0);

47 
	`as£π
 (
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

48 
uöçå_t
 
addr
 = 
KERNBASE
 + 
	`PTE_ADDR
 (*
±ï
Ë+ 
	`PGOFF
 (
§c
);

51 
	`mem˝y
 (
d°
, (*)
addr
, 
avaû
);

53 
Àn
 -
avaû
;

54 
d°
 +
avaû
;

55 
§c
 +
avaû
;

59 
	}
}

69 
boﬁ


70 
	$c›y_to_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

72 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
d°
, 
Àn
, 1)) {

77 i‡(
mm
 =
NULL
) {

78 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

83 
Àn
 > 0) {

85 i‡(
	`ho°_assign
 (
	`∂s_ªad
(
cuºít
), (
uöçå_t
)
d°
, 0) < 0)

89 
size_t
 
avaû
 = 
	`ROUNDUP
 (
d°
, 
PGSIZE
) - dst;

90 i‡(
	`PGOFF
 (
d°
) == 0)

91 
avaû
 +
PGSIZE
;

92 i‡(
avaû
 > 
Àn
)

93 
avaû
 = 
Àn
;

96 
±e_t
 *
±ï
 = 
	`gë_±e
 (
mm
->
pgdú
, (
uöçå_t
)
d°
, 0);

97 
	`as£π
 (
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

98 
uöçå_t
 
addr
 = 
KERNBASE
 + 
	`PTE_ADDR
 (*
±ï
Ë+ 
	`PGOFF
 (
d°
);

101 
	`mem˝y
 ((*)
addr
, 
§c
, 
avaû
);

103 
Àn
 -
avaû
;

104 
d°
 +
avaû
;

105 
§c
 +
avaû
;

108 
	}
}

118 
boﬁ


119 
	$c›y_°rög
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
maxn
) {

121 i‡(
mm
 =
NULL
) {

122 
Æí
 = 
	`°∫Àn
 ((c⁄° *)
§c
, 
maxn
);

123 
	`mem˝y
 (
d°
, (*)
§c
, 
Æí
);

124 *(
d°
 + 
Æí
) = 0;

129 
maxn
 > 0) {

131 
size_t
 
avaû
 = 
	`ROUNDUP
 (
§c
, 
PGSIZE
) - src;

132 i‡(
	`PGOFF
 (
§c
) == 0)

133 
avaû
 +
PGSIZE
;

134 i‡(
avaû
 > 
maxn
)

135 
avaû
 = 
maxn
;

138 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
avaû
, 0))

139 
Áû
;

141 i‡(
	`ho°_gëvÆue
 (
	`∂s_ªad
(
cuºít
), (
uöçå_t
)
§c
, 
NULL
) < 0)

142 
Áû
;

145 
±e_t
 *
±ï
 = 
	`gë_±e
 (
mm
->
pgdú
, (
uöçå_t
)
§c
, 0);

146 
	`as£π
 (
±ï
 !
NULL
 && (*±ï & 
PTE_P
));

147 
uöçå_t
 
addr
 = 
KERNBASE
 + 
	`PTE_ADDR
 (*
±ï
Ë+ 
	`PGOFF
 (
§c
);

150 
size_t
 
Æí
 = 
	`°∫Àn
 ((c⁄° *)
addr
, 
avaû
);

151 
	`mem˝y
 (
d°
, (*)
addr
, 
Æí
);

153 
maxn
 -
Æí
;

154 
d°
 +
Æí
;

155 
§c
 +
Æí
;

156 i‡(
Æí
 < 
avaû
)

161 *
d°
 = 0;

164 
Áû
:

165 *
d°
 = 0;

167 
	}
}

	@kern-ucore/arch/um/process/arch_proc.h

1 #i‚de‡
__ARCH_UM_ARCH_PROC_H__


2 
	#__ARCH_UM_ARCH_PROC_H__


	)

4 
	~<¨ch.h
>

5 
	~<ty≥s.h
>

6 
	~<°ub.h
>

8 
	g¥oc_°ru˘
;

10 
	#RUN_AS_USER
 \

11 (
cuºít
 !
NULL
 && cuºít->
¨ch
.
ªgs
.
is_u£r
 =1)

	)

14 
	sc⁄ãxt
 {

15 
jmp_buf
 
	mswôch_buf
;

19 
	sho°_c⁄èöî
 {

20 
uöt32_t
 
	mho°_pid
;

21 
uöt32_t
 
	mƒ_thªads
;

22 
°ub_°ack
 *
	m°ub_°ack
;

26 
	s¨ch_¥oc_°ru˘
 {

27 
	mf‹kög
;

28 
ho°_c⁄èöî
 *
	mho°
;

29 
um_±_ªgs
 
	mªgs
;

32 
u£r_£gv
 (
pid
, 
um_±_ªgs
 *
ªgs
);

33 
°¨t_u£r•a˚
 (*
°ub_°ack
);

34 
u£r•a˚
 (
um_±_ªgs
 *
ªgs
);

35 
kûl_±ø˚d_¥o˚ss
 (
pid
, 
waô_d⁄e
);

	@kern-ucore/arch/um/process/proc.c

1 
	~<¥oc.h
>

2 
	~<¶ab.h
>

3 
	~<°rög.h
>

4 
	~<sync.h
>

5 
	~<pmm.h
>

6 
	~<îr‹.h
>

7 
	~<sched.h
>

8 
	~<ñf.h
>

9 
	~<vmm.h
>

10 
	~<å≠.h
>

11 
	~<uni°d.h
>

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<as£π.h
>

15 
	~<¨ch.h
>

16 
	~<°ub.h
>

17 
	~<ho°_sysˇŒ.h
>

18 
	~<sw≠.h
>

19 
	~<fs.h
>

20 
	~<kio.h
>

22 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

32 
	$swôch_to
(
c⁄ãxt
 *
‰om
, c⁄ãxà*
to
)

34 i‡(
	`£tjmp
 (
‰om
->
swôch_buf
) == 0)

35 
	`l⁄gjmp
 (
to
->
swôch_buf
, 1);

36 
	}
}

43 
¥oc_°ru˘
 *

44 
	$Æloc_¥oc
() {

45 
¥oc_°ru˘
 *
¥oc
 = 
	`kmÆloc
((proc_struct));

46 i‡(
¥oc
 !
NULL
) {

47 
¥oc
->
°©e
 = 
PROC_UNINIT
;

48 
¥oc
->
pid
 = -1;

49 
¥oc
->
runs
 = 0;

50 
¥oc
->
k°ack
 = 0;

51 
¥oc
->
√ed_ªsched
 = 0;

52 
¥oc
->
∑ª¡
 = 
NULL
;

53 
¥oc
->
mm
 = 
NULL
;

54 
	`mem£t
(
¥oc
->
«me
, 0, 
PROC_NAME_LEN
);

55 
¥oc
->
waô_°©e
 = 0;

56 
¥oc
->
˝å
 =Öroc->
›å
 =Öroc->
y±r
 = 
NULL
;

57 
	`li°_öô
(&(
¥oc
->
thªad_group
));

59 
	`mem£t
(&(
¥oc
->
c⁄ãxt
), 0, (context));

60 
¥oc
->
tf
 = 
NULL
;

61 
¥oc
->
Êags
 = 0;

63 
¥oc
->
rq
 = 
NULL
;

64 
	`li°_öô
(&(
¥oc
->
run_lök
));

65 
¥oc
->
time_¶i˚
 = 0;

68 
¥oc
->
¨ch
.
ho°
 = 
NULL
;

69 
¥oc
->
¨ch
.
f‹kög
 = 0;

70 
¥oc
->
£m_queue
 = 
NULL
;

71 
	`evít_box_öô
(&(
¥oc
->
evít_box
));

72 
¥oc
->
fs_°ru˘
 = 
NULL
;

74  
¥oc
;

75 
	}
}

86 
kî√l_thªad
((*
‚
)(*), *
¨g
, 
uöt32_t
 
˛⁄e_Êags
) {

87 
å≠‰ame
 
tf
;

88 
	`mem£t
 (&
tf
, 0,  (
å≠‰ame
));

89 
tf
.
‚
 = fn;

90 
tf
.
¨g
 =árg;

91  
	`do_f‹k
 (
˛⁄e_Êags
 | 
CLONE_VM
, 0, &
tf
);

92 
	}
}

103 
	$de_thªad_¨ch_hook
 (
¥oc_°ru˘
 *
¥oc
) {

104 i‡(
¥oc
->
¨ch
.
ho°
 !
NULL
) {

105 
	`as£π
 (
¥oc
->
¨ch
.
ho°
->
ƒ_thªads
 > 0);

106 
¥oc
->
¨ch
.
ho°
->
ƒ_thªads
 --;

107 i‡(
¥oc
->
¨ch
.
ho°
->
ƒ_thªads
 == 0) {

108 
	`‰ì_∑ge
 (
	`kva2∑ge
 (
cuºít
->
¨ch
.
ho°
->
°ub_°ack
));

109 
	`kûl_±ø˚d_¥o˚ss
 (
cuºít
->
¨ch
.
ho°
->
ho°_pid
, 1);

110 
	`k‰ì
 (
cuºít
->
¨ch
.
ho°
);

111 
cuºít
->
¨ch
.
ho°
 = 
NULL
;

114 
	}
}

126 
	$c›y_thªad
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
,

127 
uöçå_t
 
u£r_°ack
, 
å≠‰ame
 *
tf
) {

128 
pid
;

129 *
°ub_°ack
;

136 i‡(
RUN_AS_USER
) {

137 i‡(
˛⁄e_Êags
 & 
CLONE_VM
) {

139 
¥oc
->
¨ch
.
ho°
 = 
cuºít
->arch.host;

140 
¥oc
->
¨ch
.
ho°
->
ƒ_thªads
 ++;

143 
¥oc
->
¨ch
.
ho°
 = 
	`kmÆloc
 ( (
ho°_c⁄èöî
));

144 i‡(
¥oc
->
¨ch
.
ho°
 =
NULL
)

145 
exô
;

147 
°ub_°ack
 = 
	`boŸ_Æloc_∑ge
 ();

148 i‡(
°ub_°ack
 =
NULL
)

149 
exô_‰ì_ho°
;

150 
pid
 = 
	`°¨t_u£r•a˚
 (
°ub_°ack
);

152 i‡(
pid
 < 0)

153 
exô_‰ì_°ub
;

156 
¥oc
->
¨ch
.
f‹kög
 = 0;

157 
¥oc
->
¨ch
.
ho°
->
ho°_pid
 = 
pid
;

158 
¥oc
->
¨ch
.
ho°
->
ƒ_thªads
 = 1;

159 
¥oc
->
¨ch
.
ho°
->
°ub_°ack
 = (stub_stack *)stub_stack;

161 i‡(
	`ho°_munm≠
 (
¥oc
, (*)
KERNBASE
, 
KERNTOP
-KERNBASE) < 0)

162 
	`∑nic
 ("unmap kernelárea failed \n");

165 
	`mem˝y
 (&(
¥oc
->
¨ch
.
ªgs
.ªgs), &(
cuºít
->¨ch.ªgs.ªgs),  (
u£r_ªgs_°ru˘
));

168 
¥oc
->
¨ch
.
ªgs
.ªgs.
óx
 = 0;

170 
¥oc
->
¨ch
.
ªgs
.ªgs.
e•
 = 
u£r_°ack
;

173 
¥oc
->
c⁄ãxt
.
swôch_buf
->
__ebx
 = (
uöt32_t
)
u£r•a˚
;

174 
¥oc
->
c⁄ãxt
.
swôch_buf
->
__ebp
 = (
uöt32_t
)&’roc->
¨ch
.
ªgs
);

177 
¥oc
->
c⁄ãxt
.
swôch_buf
->
__ebx
 = (
uöt32_t
)(
tf
->
‚
);

178 
¥oc
->
c⁄ãxt
.
swôch_buf
->
__ebp
 = (
uöt32_t
)(
tf
->
¨g
);

183 
¥oc
->
c⁄ãxt
.
swôch_buf
->
__eù
 = (
uöt32_t
)
kî√l_thªad_íåy
;

184 
¥oc
->
c⁄ãxt
.
swôch_buf
->
__e•
 =Öroc->
k°ack
 + 
KSTACKSIZE
;

188 
exô_‰ì_°ub
:

189 
	`‰ì_∑ge
 (
	`kva2∑ge
 (
°ub_°ack
));

190 
exô_‰ì_ho°
:

191 
	`k‰ì
 (
¥oc
->
¨ch
.
ho°
);

192 
exô
:

194 
	}
}

205 
	$öô_√w_c⁄ãxt
 (
¥oc_°ru˘
 *
¥oc
, 
ñfhdr
 *
ñf
, 
¨gc
, **
k¨gv
) {

206 
uöçå_t
 
°ackt›
 = 
USTACKTOP
 - 
¨gc
 * 
PGSIZE
;

207 **
u¨gv
 = (**)(
°ackt›
 - 
¨gc
 * (*));

208 
°ackt›
 = (
uöçå_t
)
u¨gv
 - ();

210 
¥oc
->
¨ch
.
ªgs
.ªgs.
e•
 = 
°ackt›
;

211 
¥oc
->
¨ch
.
ªgs
.ªgs.
eù
 = 
ñf
->
e_íåy
;

212 
¥oc
->
¨ch
.
ªgs
.ªgs.
xcs
 = 0x73;

213 
¥oc
->
¨ch
.
ªgs
.ªgs.
xds
 =Öroc->¨ch.ªgs.ªgs.
xes
 =

214 
¥oc
->
¨ch
.
ªgs
.ªgs.
xfs
 =Öroc->¨ch.ªgs.ªgs.
xgs
 =

215 
¥oc
->
¨ch
.
ªgs
.ªgs.
xss
 = 0x7b;

218 
	}
}

233 
	$do_execve_¨ch_hook
 (
¨gc
, **
k¨gv
)

235 i‡(
cuºít
->
¨ch
.
ho°
 =
NULL
) {

236 
cuºít
->
¨ch
.
ho°
 = 
	`kmÆloc
 ( (
ho°_c⁄èöî
));

237 i‡(
cuºít
->
¨ch
.
ho°
 =
NULL
)

241 * 
°ub_°ack
 = 
	`boŸ_Æloc_∑ge
 ();

242 i‡(
°ub_°ack
 =
NULL
)

243 
‰ì_ho°
;

244 
ªt
 = 
	`°¨t_u£r•a˚
 (
°ub_°ack
);

245 i‡(
ªt
 <= 0)

246 
‰ì_°ub_°ack
;

248 
cuºít
->
¨ch
.
ho°
->
°ub_°ack
 = stub_stack;

249 
cuºít
->
¨ch
.
ho°
->
ho°_pid
 = 
ªt
;

250 
cuºít
->
¨ch
.
ho°
->
ƒ_thªads
 = 1;

253 i‡(
	`ho°_munm≠
 (
cuºít
, (*)
KERNBASE
, 
KERNTOP
-KERNBASE) < 0)

254 
	`∑nic
 ("unmap kernelárea failed\n");

257 
vÆid_size
 = 
KERNBASE
 / 
PTSIZE
 * (
±e_t
);

258 
	`mem£t
 ((*)(()(
cuºít
->
mm
->
pgdú
Ë+ 
vÆid_size
),

259 0, 
PGSIZE
 - 
vÆid_size
);

262 
cuºít
->
¨ch
.
ªgs
.
is_u£r
 = 1;

263 
uöçå_t
 
°ackt›
 = 
USTACKTOP
 - 
¨gc
 * 
PGSIZE
;

264 **
u¨gv
 = (**)(
°ackt›
 - 
¨gc
 * (*));

265 
i
, 
addr
;

266 
i
 = 0; i < 
¨gc
; i ++) {

267 
addr
 = 
°ackt›
 + 
i
 * 
PGSIZE
;

268 
	`as£π
 (
	`c›y_to_u£r
 (
cuºít
->
mm
, 
u¨gv
+
i
, &
addr
,  ()));

269 
	`as£π
 (
	`c›y_to_u£r
 (
cuºít
->
mm
, (*)
addr
, 
k¨gv
[
i
], 
	`°æí
 (kargv[i]) + 1));

271 
°ackt›
 = (
uöçå_t
)
u¨gv
 - ();

272 
	`c›y_to_u£r
 (
cuºít
->
mm
, (*)
°ackt›
, &
¨gc
,  ());

277 
¨gc
 > 0) {

278 
	`k‰ì
(
k¨gv
[-- 
¨gc
]);

280 
	`u£r•a˚
 (&(
cuºít
->
¨ch
.
ªgs
));

283 
‰ì_°ub_°ack
:

284 
	`‰ì_∑ge
 (
	`kva2∑ge
 (
°ub_°ack
));

285 
‰ì_ho°
:

286 
	`k‰ì
 (
cuºít
->
¨ch
.
ho°
);

287 
cuºít
->
¨ch
.
ho°
 = 
NULL
;

289 
	}
}

298 
	$kî√l_execve
(c⁄° *
«me
, c⁄° **
¨gv
) {

299 
¨gc
 = 0, 
ªt
;

300 
¨gv
[
¨gc
] !
NULL
) {

301 
¨gc
 ++;

303 
ªt
 = 
	`do_execve
 (
«me
, 
¨gc
, 
¨gv
);

304 
	`k¥ötf
 ("îr‹ wôh code: %d\n", 
ªt
);

305  
ªt
;

306 
	}
}

310 
	$˝u_idÀ
() {

312 i‡(
cuºít
->
√ed_ªsched
) {

313 
	`scheduÀ
();

316 
	}
}

	@kern-ucore/arch/um/process/process.c

1 
	~<¨ch.h
>

2 
	~<¥oc.h
>

3 
	~<ty≥s.h
>

4 
	~<mmu.h
>

5 
	~<°dio.h
>

6 
	~<memœyout.h
>

7 
	~<pmm.h
>

8 
	~<vmm.h
>

9 
	~<°ub.h
>

10 
	~<sched.h
>

11 
	~<îr‹.h
>

12 
	~<ho°_sig«l.h
>

13 
	~<ho°_sysˇŒ.h
>

14 
	~<sysˇŒ.h
>

15 
	~<kio.h
>

16 
	~<um˛ock.h
>

24 
	$dump_ªgs
 (
um_±_ªgs
* 
±_ªgs
)

26 
u£r_ªgs_°ru˘
* 
ªgs
 = &(
±_ªgs
->regs);

27 
	`k¥ötf
 ("syscall = %d\n"

30 
±_ªgs
->
sysˇŒ
,Öt_ªgs->
is_u£r
,Öt_ªgs->
Áu…öfo
.
¸2
);

31 
	`k¥ötf
 ("Éax\t0x%08x\n"

47 
ªgs
->
óx
,Ñegs->
‹ig_óx
,Ñegs->
ebx
,Ñegs->
ecx
,Ñegs->
edx
,

48 
ªgs
->
esi
,Ñegs->
edi
,Ñegs->
eù
,Ñegs->
e•
,Ñegs->
ebp
,

49 
ªgs
->
xcs
,Ñegs->
xds
,Ñegs->
xes
,Ñegs->
xfs
,Ñegs->
xgs
,Ñegs->
xss
);

50 
	}
}

58 
	$kûl_±ø˚d_¥o˚ss
 (
pid
, 
waô_d⁄e
)

60 
	`sysˇŒ2
 (
__NR_kûl
, 
pid
, 
SIGKILL
);

61 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_KILL
, 
pid
, 0, 0);

62 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_CONT
, 
pid
, 0, 0);

63 i‡(
waô_d⁄e
)

64 
	`sysˇŒ3
 (
__NR_waôpid
, 
pid
, 0, 
__WALL
);

65 
	}
}

75 
˛⁄e
 ((*
‚
)(*), * 
°ack
, * 
¨gs
)

77 
ªt
;

79 
ªt
 = 
	`sysˇŒ0
 (
__NR_f‹k
);

80 i‡(
ªt
 < 0) {

81  
ªt
;

82 } i‡(
ªt
 == 0) {

83 
	`asm
 ("movl %%ecx, %%ebp;"

86 :: "b" (
‚
), "c" (
¨gs
), "d" (
°ack
));

89  
ªt
;

90 
	}
}

98 
	$u£r•a˚_åamp
 (*
°ub_°ack
)

100 
	`um˛ock_öô
 ();

102 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_TRACEME
, 0, 0, 0);

105 
	`sysˇŒ2
 (
__NR_munm≠
, 
USERBASE
, 
USERTOP
 - USERBASE);

109 
mm≠_¨g_°ru˘
 
mm≠_¨gs
 = {

110 .
addr
 = 
STUB_CODE
,

111 .
Àn
 = 
PGSIZE
,

112 .
¥Ÿ
 = 
PROT_READ
 | 
PROT_EXEC
,

113 .
Êags
 = 
MAP_SHARED
 | 
MAP_FIXED
,

114 .
fd
 = 
göfo
->
mem_fd
,

115 .
off£t
 = 
	`PADDR
 (&
__sysˇŒ_°ub_°¨t
)

117 
ªt
 = 
	`sysˇŒ1
 (
__NR_mm≠
, ()&
mm≠_¨gs
);

118 i‡(
ªt
 < 0)

119 
	`sysˇŒ1
 (
__NR_exô
, 1);

122 
mm≠_¨g_°ru˘
 
mm≠_¨gs
 = {

123 .
addr
 = 
STUB_DATA
,

124 .
Àn
 = 
PGSIZE
,

125 .
¥Ÿ
 = 
PROT_READ
 | 
PROT_WRITE
,

126 .
Êags
 = 
MAP_SHARED
 | 
MAP_FIXED
,

127 .
fd
 = 
göfo
->
mem_fd
,

128 .
off£t
 = 
	`PADDR
 (
°ub_°ack
)

130 
ªt
 = 
	`sysˇŒ1
 (
__NR_mm≠
, ()&
mm≠_¨gs
);

131 i‡(
ªt
 < 0)

132 
	`sysˇŒ1
 (
__NR_exô
, 1);

136 
siga˘i⁄
 
ß
;

137 
v
 = 
STUB_CODE
 + (Ë
°ub_£gv_h™dÀr
 - (Ë&
__sysˇŒ_°ub_°¨t
;

138 
sigÆt°ack
 
ss
 = {

139 .
ss_Êags
 = 0,

140 .
ss_•
 = (*)(
STUB_DATA
),

141 .
ss_size
 = 
PGSIZE
 -  (*)

143 i‡(
	`sysˇŒ2
 (
__NR_sigÆt°ack
, ()&
ss
, 0) != 0)

144 
	`sysˇŒ1
 (
__NR_exô
, 1);

145 
	`sigem±y£t
(&
ß
.
ß_mask
);

146 
ß
.
ß_Êags
 = 
SA_ONSTACK
 | 
SA_NODEFER
;

147 
ß
.
ß_h™dÀr
 = (*Ë
v
;

148 
ß
.
ß_ª°‹î
 = 
NULL
;

149 i‡(
	`sysˇŒ3
 (
__NR_siga˘i⁄
, 
SIGSEGV
, ()&
ß
, 0) < 0) {

150 
	`sysˇŒ1
 (
__NR_exô
, 1);

153 
	`øi£
 (
SIGSTOP
);

156 
	}
}

164 
	$°¨t_u£r•a˚
 (*
°ub_°ack
)

166 
pid
, 
°©us
, 
n
;

167 
•
;

170 
•
 = ()
°ub_°ack
 + 
PGSIZE
 -  (*);

171 
pid
 = 
	`˛⁄e
 (
u£r•a˚_åamp
, (*)
•
, (*)
°ub_°ack
);

172 i‡(
pid
 < 0) {

173 
	`k¥ötf
 ("°¨àu£r•a˚: cl⁄êÁûed wôh %d\n", 
pid
);

179 
n
 = 
	`sysˇŒ3
 (
__NR_waôpid
, 
pid
, ()&
°©us
, 
WUNTRACED
 | 
__WALL
);

180 i‡(
n
 < 0) {

181 
	`k¥ötf
 ("start userspace: wait failed\n");

182 
out_kûl
;

184 } 
	`WIFSTOPPED
(
°©us
Ë&& (
	`WSTOPSIG
(°©usË=
SIGVTALRM
));

186 i‡(!
	`WIFSTOPPED
(
°©us
Ë|| (
	`WSTOPSIG
(°©usË!
SIGSTOP
)) {

187 
	`k¥ötf
 ("start userspace:Éxpected SIGSTOP\n");

188 
out_kûl
;

190 i‡(
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_OLDSETOPTIONS
, 
pid
, 0, 
PTRACE_O_TRACESYSGOOD
) < 0) {

191 
	`k¥ötf
 ("start userspace: cannotÅrace syscalls\n");

192 
out_kûl
;

196 
°ub_°ack
 *
°ack
 = (stub_stack *)stub_stack;

197 
°ack
->
cuºít_no
 = 0;

198 
°ack
->
cuºít_addr
 = (
uöçå_t
)&(°ack->
‰ames
Ë- (uöçå_t)°ack + 
STUB_DATA
;

200  
pid
;

202 
out_kûl
:

203 
	`kûl_±ø˚d_¥o˚ss
 (
pid
, 1);

205 
	}
}

213 
	$do_£gv
 (
um_±_ªgs
 *
ªgs
)

215 i‡(
	`£gv_h™dÀr
 (
SIGSEGV
, 
ªgs
) != 0) {

216 i‡(! 
ªgs
->
is_u£r
) {

217 
	`∑nic
 ("handleÖgfault failed in kernel mode. \n");

222 
	}
}

231 
	$u£r_£gv
 (
pid
, 
um_±_ªgs
 *
ªgs
)

234 
îr
 = 
	`gë_Áu…öfo
 (
pid
, &(
ªgs
->
Áu…öfo
));

235 i‡(
îr
 != 0) {

236 
	`k¥ötf
 ("u£r•a˚: c™nŸ gë fau… info.Éº = %d\n", 
îr
);

240 i‡(
	`do_£gv
 (
ªgs
) < 0) {

241 
	`k¥ötf
 ("Segmíèti⁄ fau…áà0x%x\n", 
ªgs
->
Áu…öfo
.
¸2
);

245 
	}
}

252 
	$u£r•a˚
 (
um_±_ªgs
 *
ªgs
)

254 
îr
, 
°©us
, 
pid
 = 
	`∂s_ªad
(
cuºít
)->
¨ch
.
ho°
->
ho°_pid
;

255 
	`∂s_ªad
(
cuºít
)->
¨ch
.
f‹kög
 = 0;

256 
ªgs
->
is_u£r
 = 1;

260 
ªgs
 = &(
	`∂s_ªad
(
cuºít
)->
¨ch
.regs);

262 
îr
 = 
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_SETREGS
, 
pid
, 0, ()&(
ªgs
->regs));

263 i‡(
îr
 != 0) {

264 
	`k¥ötf
 ("u£r•a˚: c™nŸ sëÑegs: %d\n", 
îr
);

265 
exô
;

271 i‡(
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_SYSCALL
, 
pid
, 0, 0) != 0) {

272 
	`k¥ötf
 ("userspace:Ötrace continue failed\n");

273 
exô
;

276 
îr
 = 
	`sysˇŒ3
 (
__NR_waôpid
, 
pid
, ()&
°©us
, 
WUNTRACED
 | 
__WALL
);

278 i‡(
îr
 < 0) {

279 
	`k¥ötf
 ("userspace: wait failed\n");

280 
exô
;

282 i‡(
	`sysˇŒ4
 (
__NR_±ø˚
, 
PTRACE_GETREGS
, 
pid
, 0, ()&(
ªgs
->regs)) != 0) {

283 
	`k¥ötf
 ("userspace: getÑegs failed\n");

284 
exô
;

289 
ªgs
->
sysˇŒ
 = -1;

290 i‡(
	`WIFSTOPPED
 (
°©us
)) {

291 
sig
 = 
	`WSTOPSIG
 (
°©us
);

292 
sig
) {

293 
SIGSEGV
:

294 i‡(
	`u£r_£gv
 (
pid
, 
ªgs
) < 0)

295 
exô
;

297 
SIGTRAP
 + 0x80:

298 i‡(
	`nuŒify_sysˇŒ
 (
pid
, 
ªgs
) < 0)

299 
exô
;

300 
ªgs
->
sysˇŒ
 =Ñegs->ªgs.
‹ig_óx
;

301 
ªgs
->ªgs.
óx
 = 
	`sysˇŒ
 (regs);

303 
SIGVTALRM
:

304 
	`vtimî_h™dÀr
 (
SIGVTALRM
, 
ªgs
);

306 
SIGIO
:

307 
	`io_h™dÀr
 (
SIGIO
, 
ªgs
);

309 
SIGFPE
:

310 
	`k¥ötf
 ("Floating Point Exception\n");

311 
exô
;

313 
	`k¥ötf
 ("u£r•a˚: unknow¿sig«»%d\n", 
sig
);

314 
exô
;

318 i‡(
	`∂s_ªad
(
cuºít
)->
Êags
 & 
PF_EXITING
) {

319 
	`do_exô_thªad
 (-
E_KILLED
);

321 i‡(
	`∂s_ªad
(
cuºít
)->
√ed_ªsched
) {

322 
	`scheduÀ
();

326 
exô
:

327 
	`k¥ötf
 ("¥o˚s†%d kûÀd by kî√l.\n", 
	`∂s_ªad
(
cuºít
)->
pid
);

328 
	`dump_ªgs
 (
ªgs
);

329 
°ack
 = 
ªgs
->ªgs.
e•
;

330 
±e_t
 *
±ï
 = 
	`gë_±e
 (
	`∂s_ªad
(
cuºít
)->
mm
->
pgdú
, 
°ack
, 0);

331 
uöt8_t
 *
addr
 = (uöt8_t*)(
	`PTE_ADDR
 (*
±ï
Ë+ 
	`PGOFF
(
°ack
Ë+ 
KERNBASE
);

332 
	`as£π
 (
±ï
 !
NULL
);

333 
i
, 
j
;

334 
i
 = 0; i < 2; i++) {

335 
	`k¥ötf
 ("0x%08x\t", 
°ack
);

336 
j
 = 0; j < 16; j++)

337 
	`k¥ötf
 ("%02x ", 
addr
[
j
]);

338 
	`k¥ötf
 ("\n");

339 
°ack
 += 16;

340 
addr
 += 16;

342 
	`do_exô_thªad
 (
îr
);

343 
	}
}

	@kern-ucore/arch/um/process/stub.c

1 
	~<°ub.h
>

2 
	~<ty≥s.h
>

3 
	~<memœyout.h
>

4 
	~<ho°_sig«l.h
>

5 
	~<¨ch.h
>

6 
	~<°dio.h
>

7 
	~<as£π.h
>

9 
__©åibuã__
 ((
__£˘i⁄__
 (".__syscall_stub")))

10 
	$°ub_£gv_h™dÀr
(
sig
)

12 
sigc⁄ãxt
 *
sc
 = (sigc⁄ãxà*Ë(&
sig
 + 1);

13 
Áu…öfo
* 
fi
 = (Áu…öfo*Ë(
STUB_DATA
 + 0x800);

15 
fi
->
îr‹_code
 = 
sc
->
îr
 | 0x4;

16 
fi
->
¸2
 = 
sc
->cr2;

17 
fi
->
å≠_no
 = 
sc
->
å≠no
;

19 
	`å≠_my£lf
();

20 
	}
}

23 
	$°ub_push_‰ame
 (
°ub_°ack
* 
°ack
)

25 
°ack
->
cuºít_no
 ++;

26 
°ack
->
cuºít_addr
 + (
°ub_‰ame
);

27 
	}
}

29 
	$°ub_p›_‰ame
 (
°ub_°ack
* 
°ack
)

31 
	`as£π
 (
°ack
->
cuºít_no
 > 0);

33 
°ack
->
cuºít_no
 --;

34 
°ack
->
cuºít_addr
 - (
°ub_‰ame
);

35 
	}
}

	@kern-ucore/arch/um/sync/sync.h

1 #i‚de‡
__ARCH_UM_INCLUDE_SYNC_H__


2 
	#__ARCH_UM_INCLUDE_SYNC_H__


	)

4 
	~<öå.h
>

5 
	~<¨ch.h
>

6 
	~<as£π.h
>

7 
	~<©omic.h
>

9 
ölöe
 
boﬁ


10 
	$__öå_ßve
() {

11 
sig£t_t
 
cuºít
;

12 
	`sysˇŒ3
 (
__NR_sig¥ocmask
, 
SIG_SETMASK
, 0, ()&
cuºít
);

13 i‡(
	`sigismembî
 (&
cuºít
, 
SIGIO
)) {

14 
	`öå_dißbÀ
();

18 
	}
}

20 
ölöe
 

21 
	$__öå_ª°‹e
(
boﬁ
 
Êag
) {

22 i‡(
Êag
) {

23 
	`öå_íabÀ
();

25 
	}
}

27 
	#loˇl_öå_ßve
(
x
Ëdÿ{ x = 
	`__öå_ßve
(); } 0)

	)

28 
	#loˇl_öå_ª°‹e
(
x
Ë
	`__öå_ª°‹e
(x);

	)

30 
sync_öô
();

	@kern-ucore/arch/um/syscall/syscall.c

1 
	~<¥oc.h
>

2 
	~<sysˇŒ.h
>

3 
	~<å≠.h
>

4 
	~<°dio.h
>

5 
	~<pmm.h
>

6 
	~<˛ock.h
>

7 
	~<as£π.h
>

8 
	~<£m.h
>

9 
	~<evít.h
>

10 
	~<mbox.h
>

11 
	~<°©.h
>

12 
	~<dúít.h
>

13 
	~<sysfûe.h
>

14 
	~<ho°_sysˇŒ.h
>

15 
	~<îr‹.h
>

16 
	~<kio.h
>

17 
	~<c⁄sﬁe.h
>

19 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

21 
uöt32_t


22 
	$sys_exô
(
uöt32_t
 
¨g
[]) {

23 
îr‹_code
 = ()
¨g
[0];

24  
	`do_exô
(
îr‹_code
);

25 
	}
}

27 
uöt32_t


28 
	$sys_f‹k
(
uöt32_t
 
¨g
[]) {

29 
uöçå_t
 
°ack
 = 
cuºít
->
¨ch
.
ªgs
.ªgs.
e•
;

30  
	`do_f‹k
 (0, 
°ack
, 
NULL
);

31 
	}
}

33 
uöt32_t


34 
	$sys_waô
(
uöt32_t
 
¨g
[]) {

35 
pid
 = ()
¨g
[0];

36 *
°‹e
 = (*)
¨g
[1];

37  
	`do_waô
(
pid
, 
°‹e
);

38 
	}
}

40 
uöt32_t


41 
	$sys_exec
(
uöt32_t
 
¨g
[]) {

42 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

43 
¨gc
 = ()
¨g
[1];

44 c⁄° **
¨gv
 = (c⁄° **)
¨g
[2];

45 
cuºít
->
¨ch
.
f‹kög
 = 1;

46 
ªt
 = 
	`do_execve
(
«me
, 
¨gc
, 
¨gv
);

47 
cuºít
->
¨ch
.
f‹kög
 = 0;

48  
ªt
;

49 
	}
}

51 
uöt32_t


52 
	$sys_˛⁄e
(
uöt32_t
 
¨g
[]) {

53 
uöt32_t
 
˛⁄e_Êags
 = (uöt32_t)
¨g
[0];

54 
uöçå_t
 
°ack
 = (uöçå_t)
¨g
[1];

55  
	`do_f‹k
(
˛⁄e_Êags
, 
°ack
, 
NULL
);

56 
	}
}

58 
uöt32_t


59 
	$sys_exô_thªad
(
uöt32_t
 
¨g
[]) {

60 
îr‹_code
 = ()
¨g
[0];

61  
	`do_exô_thªad
(
îr‹_code
);

62 
	}
}

64 
uöt32_t


65 
	$sys_yõld
(
uöt32_t
 
¨g
[]) {

66  
	`do_yõld
();

67 
	}
}

69 
uöt32_t


70 
	$sys_¶ìp
(
uöt32_t
 
¨g
[]) {

71 
time
 = ()
¨g
[0];

72  
	`do_¶ìp
(
time
);

73 
	}
}

75 
uöt32_t


76 
	$sys_kûl
(
uöt32_t
 
¨g
[]) {

77 
pid
 = ()
¨g
[0];

78  
	`do_kûl
(
pid
, -
E_KILLED
);

79 
	}
}

81 
uöt32_t


82 
	$sys_gëtime
(
uöt32_t
 
¨g
[]) {

83  ()
ticks
;

84 
	}
}

86 
uöt32_t


87 
	$sys_gëpid
(
uöt32_t
 
¨g
[]) {

88  
cuºít
->
pid
;

89 
	}
}

91 
uöt32_t


92 
	$sys_brk
(
uöt32_t
 
¨g
[]) {

93 
uöçå_t
 *
brk_°‹e
 = (uöçå_à*)
¨g
[0];

94  
	`do_brk
(
brk_°‹e
);

95 
	}
}

97 
uöt32_t


98 
	$sys_mm≠
(
uöt32_t
 
¨g
[]) {

99 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

100 
size_t
 
Àn
 = (size_t)
¨g
[1];

101 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

102  
	`do_mm≠
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

103 
	}
}

105 
uöt32_t


106 
	$sys_munm≠
(
uöt32_t
 
¨g
[]) {

107 
uöçå_t
 
addr
 = (uöçå_t)
¨g
[0];

108 
size_t
 
Àn
 = (size_t)
¨g
[1];

109  
	`do_munm≠
(
addr
, 
Àn
);

110 
	}
}

112 
uöt32_t


113 
	$sys_shmem
(
uöt32_t
 
¨g
[]) {

114 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

115 
size_t
 
Àn
 = (size_t)
¨g
[1];

116 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

117  
	`do_shmem
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

118 
	}
}

120 
uöt32_t


121 
	$sys_putc
(
uöt32_t
 
¨g
[]) {

122 
c
 = ()
¨g
[0];

123 
	`c⁄s_putc
(
c
);

125 
	}
}

127 
uöt32_t


128 
	$sys_pgdú
(
uöt32_t
 
¨g
[]) {

129 
	`¥öt_pgdú
(
k¥ötf
);

131 
	}
}

133 
uöt32_t


134 
	$sys_£m_öô
(
uöt32_t
 
¨g
[]) {

135 
vÆue
 = ()
¨g
[0];

136  
	`ùc_£m_öô
(
vÆue
);

137 
	}
}

139 
uöt32_t


140 
	$sys_£m_po°
(
uöt32_t
 
¨g
[]) {

141 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

142  
	`ùc_£m_po°
(
£m_id
);

143 
	}
}

145 
uöt32_t


146 
	$sys_£m_waô
(
uöt32_t
 
¨g
[]) {

147 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

148 
timeout
 = ()
¨g
[1];

149  
	`ùc_£m_waô
(
£m_id
, 
timeout
);

150 
	}
}

152 
uöt32_t


153 
	$sys_£m_‰ì
(
uöt32_t
 
¨g
[]) {

154 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

155  
	`ùc_£m_‰ì
(
£m_id
);

156 
	}
}

158 
uöt32_t


159 
	$sys_£m_gë_vÆue
(
uöt32_t
 
¨g
[]) {

160 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

161 *
vÆue_°‹e
 = (*)
¨g
[1];

162  
	`ùc_£m_gë_vÆue
(
£m_id
, 
vÆue_°‹e
);

163 
	}
}

165 
uöt32_t


166 
	$sys_evít_£nd
(
uöt32_t
 
¨g
[]) {

167 
pid
 = ()
¨g
[0];

168 
evít
 = ()
¨g
[1];

169 
timeout
 = ()
¨g
[2];

170  
	`ùc_evít_£nd
(
pid
, 
evít
, 
timeout
);

171 
	}
}

173 
uöt32_t


174 
	$sys_evít_ªcv
(
uöt32_t
 
¨g
[]) {

175 *
pid_°‹e
 = (*)
¨g
[0];

176 *
evít_°‹e
 = (*)
¨g
[1];

177 
timeout
 = ()
¨g
[2];

178  
	`ùc_evít_ªcv
(
pid_°‹e
, 
evít_°‹e
, 
timeout
);

179 
	}
}

181 
uöt32_t


182 
	$sys_mbox_öô
(
uöt32_t
 
¨g
[]) {

183 
max_¶Ÿs
 = ()
¨g
[0];

184  
	`ùc_mbox_öô
(
max_¶Ÿs
);

185 
	}
}

187 
uöt32_t


188 
	$sys_mbox_£nd
(
uöt32_t
 
¨g
[]) {

189 
id
 = ()
¨g
[0];

190 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

191 
timeout
 = ()
¨g
[2];

192  
	`ùc_mbox_£nd
(
id
, 
buf
, 
timeout
);

193 
	}
}

195 
uöt32_t


196 
	$sys_mbox_ªcv
(
uöt32_t
 
¨g
[]) {

197 
id
 = ()
¨g
[0];

198 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

199 
timeout
 = ()
¨g
[2];

200  
	`ùc_mbox_ªcv
(
id
, 
buf
, 
timeout
);

201 
	}
}

203 
uöt32_t


204 
	$sys_mbox_‰ì
(
uöt32_t
 
¨g
[]) {

205 
id
 = ()
¨g
[0];

206  
	`ùc_mbox_‰ì
(
id
);

207 
	}
}

209 
uöt32_t


210 
	$sys_mbox_öfo
(
uöt32_t
 
¨g
[]) {

211 
id
 = ()
¨g
[0];

212 
mboxöfo
 *
öfo
 = (mboxöfÿ*)
¨g
[1];

213  
	`ùc_mbox_öfo
(
id
, 
öfo
);

214 
	}
}

216 
uöt32_t


217 
	$sys_›í
(
uöt32_t
 
¨g
[]) {

218 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

219 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

220  
	`sysfûe_›í
(
∑th
, 
›í_Êags
);

221 
	}
}

223 
uöt32_t


224 
	$sys_˛o£
(
uöt32_t
 
¨g
[]) {

225 
fd
 = ()
¨g
[0];

226  
	`sysfûe_˛o£
(
fd
);

227 
	}
}

229 
uöt32_t


230 
	$sys_ªad
(
uöt32_t
 
¨g
[]) {

231 
fd
 = ()
¨g
[0];

232 *
ba£
 = (*)
¨g
[1];

233 
size_t
 
Àn
 = (size_t)
¨g
[2];

234  
	`sysfûe_ªad
(
fd
, 
ba£
, 
Àn
);

235 
	}
}

237 
uöt32_t


238 
	$sys_wrôe
(
uöt32_t
 
¨g
[]) {

239 
fd
 = ()
¨g
[0];

240 *
ba£
 = (*)
¨g
[1];

241 
size_t
 
Àn
 = (size_t)
¨g
[2];

242  
	`sysfûe_wrôe
(
fd
, 
ba£
, 
Àn
);

243 
	}
}

245 
uöt32_t


246 
	$sys_£ek
(
uöt32_t
 
¨g
[]) {

247 
fd
 = ()
¨g
[0];

248 
off_t
 
pos
 = (off_t)
¨g
[1];

249 
whí˚
 = ()
¨g
[2];

250  
	`sysfûe_£ek
(
fd
, 
pos
, 
whí˚
);

251 
	}
}

253 
uöt32_t


254 
	$sys_f°©
(
uöt32_t
 
¨g
[]) {

255 
fd
 = ()
¨g
[0];

256 
°©
 *°© = (°© *)
¨g
[1];

257  
	`sysfûe_f°©
(
fd
, 
°©
);

258 
	}
}

260 
uöt32_t


261 
	$sys_fsync
(
uöt32_t
 
¨g
[]) {

262 
fd
 = ()
¨g
[0];

263  
	`sysfûe_fsync
(
fd
);

264 
	}
}

266 
uöt32_t


267 
	$sys_chdú
(
uöt32_t
 
¨g
[]) {

268 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

269  
	`sysfûe_chdú
(
∑th
);

270 
	}
}

272 
uöt32_t


273 
	$sys_gëcwd
(
uöt32_t
 
¨g
[]) {

274 *
buf
 = (*)
¨g
[0];

275 
size_t
 
Àn
 = (size_t)
¨g
[1];

277 i‡(
	`ho°_m≠_u£r
 (
cuºít
, (
uöçå_t
)
buf
, 
Àn
, 1) < 0)

280 
ªt
 = 
	`sysfûe_gëcwd
(
buf
, 
Àn
);

281 
	`sysˇŒ2
 (
__NR_munm≠
, (
uöçå_t
)
buf
, 
Àn
);

282  
ªt
;

283 
	}
}

285 
uöt32_t


286 
	$sys_mkdú
(
uöt32_t
 
¨g
[]) {

287 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

288  
	`sysfûe_mkdú
(
∑th
);

289 
	}
}

291 
uöt32_t


292 
	$sys_lök
(
uöt32_t
 
¨g
[]) {

293 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

294 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

295  
	`sysfûe_lök
(
∑th1
, 
∑th2
);

296 
	}
}

298 
uöt32_t


299 
	$sys_ª«me
(
uöt32_t
 
¨g
[]) {

300 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

301 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

302  
	`sysfûe_ª«me
(
∑th1
, 
∑th2
);

303 
	}
}

305 
uöt32_t


306 
	$sys_u∆ök
(
uöt32_t
 
¨g
[]) {

307 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

308  
	`sysfûe_u∆ök
(
«me
);

309 
	}
}

311 
uöt32_t


312 
	$sys_gëdúíåy
(
uöt32_t
 
¨g
[]) {

313 
fd
 = ()
¨g
[0];

314 
dúít
 *
dúíç
 = (dúíà*)
¨g
[1];

315  
	`sysfûe_gëdúíåy
(
fd
, 
dúíç
);

316 
	}
}

318 
uöt32_t


319 
	$sys_dup
(
uöt32_t
 
¨g
[]) {

320 
fd1
 = ()
¨g
[0];

321 
fd2
 = ()
¨g
[1];

322  
	`sysfûe_dup
(
fd1
, 
fd2
);

323 
	}
}

325 
uöt32_t


326 
	$sys_pùe
(
uöt32_t
 
¨g
[]) {

327 *
fd_°‹e
 = (*)
¨g
[0];

328  
	`sysfûe_pùe
(
fd_°‹e
);

329 
	}
}

331 
uöt32_t


332 
	$sys_mkfifo
(
uöt32_t
 
¨g
[]) {

333 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

334 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

335  
	`sysfûe_mkfifo
(
«me
, 
›í_Êags
);

336 
	}
}

338 
	$uöt32_t
 (*
sysˇŒs
[])(
uöt32_t
 
¨g
[]) = {

339 [
SYS_exô
] 
sys_exô
,

340 [
SYS_f‹k
] 
sys_f‹k
,

341 [
SYS_waô
] 
sys_waô
,

342 [
SYS_exec
] 
sys_exec
,

343 [
SYS_˛⁄e
] 
sys_˛⁄e
,

344 [
SYS_exô_thªad
] 
sys_exô_thªad
,

345 [
SYS_yõld
] 
sys_yõld
,

346 [
SYS_kûl
] 
sys_kûl
,

347 [
SYS_¶ìp
] 
sys_¶ìp
,

348 [
SYS_gëtime
] 
sys_gëtime
,

349 [
SYS_gëpid
] 
sys_gëpid
,

350 [
SYS_brk
] 
sys_brk
,

351 [
SYS_mm≠
] 
sys_mm≠
,

352 [
SYS_munm≠
] 
sys_munm≠
,

353 [
SYS_shmem
] 
sys_shmem
,

354 [
SYS_putc
] 
sys_putc
,

355 [
SYS_pgdú
] 
sys_pgdú
,

356 [
SYS_£m_öô
] 
sys_£m_öô
,

357 [
SYS_£m_po°
] 
sys_£m_po°
,

358 [
SYS_£m_waô
] 
sys_£m_waô
,

359 [
SYS_£m_‰ì
] 
sys_£m_‰ì
,

360 [
SYS_£m_gë_vÆue
] 
sys_£m_gë_vÆue
,

361 [
SYS_evít_£nd
] 
sys_evít_£nd
,

362 [
SYS_evít_ªcv
] 
sys_evít_ªcv
,

363 [
SYS_mbox_öô
] 
sys_mbox_öô
,

364 [
SYS_mbox_£nd
] 
sys_mbox_£nd
,

365 [
SYS_mbox_ªcv
] 
sys_mbox_ªcv
,

366 [
SYS_mbox_‰ì
] 
sys_mbox_‰ì
,

367 [
SYS_mbox_öfo
] 
sys_mbox_öfo
,

368 [
SYS_›í
] 
sys_›í
,

369 [
SYS_˛o£
] 
sys_˛o£
,

370 [
SYS_ªad
] 
sys_ªad
,

371 [
SYS_wrôe
] 
sys_wrôe
,

372 [
SYS_£ek
] 
sys_£ek
,

373 [
SYS_f°©
] 
sys_f°©
,

374 [
SYS_fsync
] 
sys_fsync
,

375 [
SYS_chdú
] 
sys_chdú
,

376 [
SYS_gëcwd
] 
sys_gëcwd
,

377 [
SYS_mkdú
] 
sys_mkdú
,

378 [
SYS_lök
] 
sys_lök
,

379 [
SYS_ª«me
] 
sys_ª«me
,

380 [
SYS_u∆ök
] 
sys_u∆ök
,

381 [
SYS_gëdúíåy
] 
sys_gëdúíåy
,

382 [
SYS_dup
] 
sys_dup
,

383 [
SYS_pùe
] 
sys_pùe
,

384 [
SYS_mkfifo
] 
sys_mkfifo
,

385 
	}
};

387 
	#NUM_SYSCALLS
 (((
sysˇŒs
)Ë/ ((sysˇŒs[0])))

	)

390 
	$sysˇŒ
(
um_±_ªgs
 *
ªgs
) {

391 
uöt32_t
 
¨g
[5];

392 
num
 = 
ªgs
->
sysˇŒ
;

393 i‡(
num
 >0 &&Çum < 
NUM_SYSCALLS
) {

394 i‡(
sysˇŒs
[
num
] !
NULL
) {

395 
¨g
[0] = 
ªgs
->ªgs.
edx
;

396 
¨g
[1] = 
ªgs
->ªgs.
ecx
;

397 
¨g
[2] = 
ªgs
->ªgs.
ebx
;

398 
¨g
[3] = 
ªgs
->ªgs.
edi
;

399 
¨g
[4] = 
ªgs
->ªgs.
esi
;

400  
sysˇŒs
[
num
] (
¨g
);

403 
	`∑nic
 ("undefined syscall %d,Öid = %d,Çame = %s.\n",

404 
num
, 
cuºít
->
pid
, cuºít->
«me
);

405 
	}
}

	@kern-ucore/arch/um/syscall/syscall.h

1 #i‚de‡
__KERN_SYSCALL_SYSCALL_H__


2 
	#__KERN_SYSCALL_SYSCALL_H__


	)

4 
sysˇŒ
(
um_±_ªgs
 *
ªgs
);

	@kern-ucore/arch/x86_64/debug/kdebug.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<memœyout.h
>

6 
	~<vmm.h
>

7 
	~<kdebug.h
>

8 
	~<kio.h
>

10 
	#STACKFRAME_DEPTH
 20

	)

18 
	$¥öt_kînöfo
() {

20 
ëext
[], 
ed©a
[], 
íd
[], 
kîn_öô
[];

21 
	`k¥ötf
("Special kernel symbols:\n");

22 
	`k¥ötf
("É¡ry 0x%08x (phys)\n", 
kîn_öô
);

23 
	`k¥ötf
("Éãxà 0x%08x (phys)\n", 
ëext
);

24 
	`k¥ötf
("Éd©® 0x%08x (phys)\n", 
ed©a
);

25 
	`k¥ötf
("Énd 0x%08x (phys)\n", 
íd
);

26 
	`k¥ötf
("Kî√»execuèbÀ mem‹y foŸ¥öt: %dKB\n", (
íd
 - 
kîn_öô
 + 1023)/1024);

28 
	}
}

30 
uöt64_t
 
	$ªad_rù
(Ë
	`__©åibuã__
((
noölöe
));

32 
uöt64_t


33 
	$ªad_rù
() {

34 
uöt64_t
 
rù
;

35 
asm
 vﬁ©ûe("movq 8(%%rbp), %0" : "Ù" (
rù
));

36  
rù
;

37 
	}
}

44 
	$¥öt_°ack‰ame
() {

45 
uöt64_t
 
rbp
 = 
	`ªad_rbp
(), 
rù
 = 
	`ªad_rù
();

47 
i
;

48 
i
 = 0; 
rbp
 !0 && i < 
STACKFRAME_DEPTH
; i ++) {

49 
	`k¥ötf
("rbp:0x%016ŒxÑù:0x%016Œx\n", 
rbp
, 
rù
);

50 
rù
 = ((
uöt64_t
 *)
rbp
)[1];

51 
rbp
 = ((
uöt64_t
 *)rbp)[0];

53 
	}
}

	@kern-ucore/arch/x86_64/debug/kdebug.h

1 #i‚de‡
__KERN_DEBUG_KDEBUG_H__


2 
	#__KERN_DEBUG_KDEBUG_H__


	)

4 
	~<ty≥s.h
>

6 
¥öt_kînöfo
();

7 
¥öt_°ack‰ame
();

	@kern-ucore/arch/x86_64/debug/monitor.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<å≠.h
>

4 
	~<m⁄ô‹.h
>

5 
	~<kdebug.h
>

6 
	~<kio.h
>

13 
	scomm™d
 {

14 c⁄° *
	m«me
;

15 c⁄° *
	mdesc
;

17 (*
	mfunc
)(
	m¨gc
, **
	m¨gv
, 
å≠‰ame
 *
	mtf
);

20 
comm™d
 
	gcomm™ds
[] = {

21 {"hñp", "Di•œyÅhi†li° o‡comm™ds.", 
m⁄_hñp
},

22 {"kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l.", 
m⁄_kînöfo
},

23 {"backåa˚", "Pröàbackåa˚ o‡°ack føme.", 
m⁄_backåa˚
},

26 
	#NCOMMANDS
 ((
comm™ds
)/(
comm™d
))

	)

30 
	#MAXARGS
 16

	)

31 
	#WHITESPACE
 " \t\n\r"

	)

35 
	$∑r£
(*
buf
, **
¨gv
) {

36 
¨gc
 = 0;

39 *
buf
 !'\0' && 
	`°rchr
(
WHITESPACE
, *bufË!
NULL
) {

40 *
buf
 ++ = '\0';

42 i‡(*
buf
 == '\0') {

47 i‡(
¨gc
 =
MAXARGS
 - 1) {

48 
	`k¥ötf
("Toÿm™yárgumít†(max %d).\n", 
MAXARGS
);

50 
¨gv
[
¨gc
 ++] = 
buf
;

51 *
buf
 !'\0' && 
	`°rchr
(
WHITESPACE
, *bufË=
NULL
) {

52 
buf
 ++;

55  
¨gc
;

56 
	}
}

63 
	$runcmd
(*
buf
, 
å≠‰ame
 *
tf
) {

64 *
¨gv
[
MAXARGS
];

65 
¨gc
 = 
	`∑r£
(
buf
, 
¨gv
);

66 i‡(
¨gc
 == 0) {

69 
i
;

70 
i
 = 0; i < 
NCOMMANDS
; i ++) {

71 i‡(
	`°rcmp
(
comm™ds
[
i
].
«me
, 
¨gv
[0]) == 0) {

72  
comm™ds
[
i
].
	`func
(
¨gc
 - 1, 
¨gv
 + 1, 
tf
);

75 
	`k¥ötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

77 
	}
}

82 
	$m⁄ô‹
(
å≠‰ame
 *
tf
) {

83 
	`k¥ötf
("WelcomeÅoÅhe kernel debug monitor!!\n");

84 
	`k¥ötf
("Type 'help' foráÜist of commands.\n");

86 i‡(
tf
 !
NULL
) {

87 
	`¥öt_å≠‰ame
(
tf
);

90 *
buf
;

92 i‡((
buf
 = 
	`ªadlöe
("K> ")Ë!
NULL
) {

93 i‡(
	`runcmd
(
buf
, 
tf
) < 0) {

98 
	}
}

102 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

103 
i
;

104 
i
 = 0; i < 
NCOMMANDS
; i ++) {

105 
	`k¥ötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

108 
	}
}

115 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

116 
	`¥öt_kînöfo
();

118 
	}
}

125 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

126 
	`¥öt_°ack‰ame
();

128 
	}
}

	@kern-ucore/arch/x86_64/debug/monitor.h

1 #i‚de‡
__KERN_DEBUG_MONITOR_H__


2 
	#__KERN_DEBUG_MONITOR_H__


	)

4 
	~<å≠.h
>

6 
m⁄ô‹
(
å≠‰ame
 *
tf
);

8 
m⁄_hñp
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

9 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

10 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

	@kern-ucore/arch/x86_64/debug/panic.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<öå.h
>

4 
	~<m⁄ô‹.h
>

5 
	~<kio.h
>

7 
boﬁ
 
	gis_∑nic
 = 0;

14 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

15 i‡(
is_∑nic
) {

16 
∑nic_dód
;

18 
is_∑nic
 = 1;

21 
va_li°
 
≠
;

22 
	`va_°¨t
(
≠
, 
fmt
);

23 
	`k¥ötf
("kî√»∑ni¯© %s:%d:\¿ ", 
fûe
, 
löe
);

24 
	`vk¥ötf
(
fmt
, 
≠
);

25 
	`k¥ötf
("\n");

26 
	`va_íd
(
≠
);

28 
∑nic_dód
:

29 
	`öå_dißbÀ
();

31 
	`m⁄ô‹
(
NULL
);

33 
	}
}

37 
	$__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

38 
va_li°
 
≠
;

39 
	`va_°¨t
(
≠
, 
fmt
);

40 
	`k¥ötf
("kî√»w¨nögáà%s:%d:\¿ ", 
fûe
, 
löe
);

41 
	`vk¥ötf
(
fmt
, 
≠
);

42 
	`k¥ötf
("\n");

43 
	`va_íd
(
≠
);

44 
	}
}

46 
boﬁ


47 
	$is_kî√l_∑nic
() {

48  
is_∑nic
;

49 
	}
}

	@kern-ucore/arch/x86_64/driver/ide.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<å≠.h
>

4 
	~<fs.h
>

5 
	~<ide.h
>

6 
	~<¨ch.h
>

7 
	~<£m.h
>

8 
	~<as£π.h
>

9 
	~<kio.h
>

11 
	#ISA_DATA
 0x00

	)

12 
	#ISA_ERROR
 0x01

	)

13 
	#ISA_PRECOMP
 0x01

	)

14 
	#ISA_CTRL
 0x02

	)

15 
	#ISA_SECCNT
 0x02

	)

16 
	#ISA_SECTOR
 0x03

	)

17 
	#ISA_CYL_LO
 0x04

	)

18 
	#ISA_CYL_HI
 0x05

	)

19 
	#ISA_SDH
 0x06

	)

20 
	#ISA_COMMAND
 0x07

	)

21 
	#ISA_STATUS
 0x07

	)

23 
	#IDE_BSY
 0x80

	)

24 
	#IDE_DRDY
 0x40

	)

25 
	#IDE_DF
 0x20

	)

26 
	#IDE_DRQ
 0x08

	)

27 
	#IDE_ERR
 0x01

	)

29 
	#IDE_CMD_READ
 0x20

	)

30 
	#IDE_CMD_WRITE
 0x30

	)

31 
	#IDE_CMD_IDENTIFY
 0xEC

	)

33 
	#IDE_IDENT_SECTORS
 20

	)

34 
	#IDE_IDENT_MODEL
 54

	)

35 
	#IDE_IDENT_CAPABILITIES
 98

	)

36 
	#IDE_IDENT_CMDSETS
 164

	)

37 
	#IDE_IDENT_MAX_LBA
 120

	)

38 
	#IDE_IDENT_MAX_LBA_EXT
 200

	)

40 
	#IO_BASE0
 0x1F0

	)

41 
	#IO_BASE1
 0x170

	)

42 
	#IO_CTRL0
 0x3F4

	)

43 
	#IO_CTRL1
 0x374

	)

45 
	#MAX_IDE
 4

	)

46 
	#MAX_NSECS
 128

	)

47 
	#MAX_DISK_NSECS
 0x10000000U

	)

48 
	#VALID_IDE
(
idío
Ë(((idíoË>0Ë&& ((idíoË< 
MAX_IDE
Ë&& (
ide_devi˚s
[idío].
vÆid
))

	)

51 c⁄° 
	mba£
;

52 c⁄° 
	m˘æ
;

53 
£m≠h‹e_t
 
	m£m
;

54 } 
	gch™√ls
[2] = {

55 {
IO_BASE0
, 
IO_CTRL0
},

56 {
IO_BASE1
, 
IO_CTRL1
},

60 
	$lock_ch™√l
(
idío
) {

61 
	`down
(&(
ch™√ls
[
idío
 >> 1].
£m
));

62 
	}
}

65 
	$u∆ock_ch™√l
(
idío
) {

66 
	`up
(&(
ch™√ls
[
idío
 >> 1].
£m
));

67 
	}
}

69 
	#IO_BASE
(
idío
Ë(
ch™√ls
[(idíoË>> 1].
ba£
)

	)

70 
	#IO_CTRL
(
idío
Ë(
ch™√ls
[(idíoË>> 1].
˘æ
)

	)

72 
	side_devi˚
 {

73 
	mvÆid
;

74 
	m£ts
;

75 
	msize
;

76 
	mmodñ
[41];

77 } 
	gide_devi˚s
[
MAX_IDE
];

80 
	$ide_waô_ªady
(
ioba£
, 
boﬁ
 
check_îr‹
) {

81 
r
;

82 (
r
 = 
	`öb
(
ioba£
 + 
ISA_STATUS
)Ë& 
IDE_BSY
)

84 i‡(
check_îr‹
 && (
r
 & (
IDE_DF
 | 
IDE_ERR
)) != 0) {

88 
	}
}

91 
	$ide_öô
() {

92 
	`°©ic_as£π
((
SECTSIZE
 % 4) == 0);

93 
idío
, 
ioba£
;

94 
idío
 = 0; idíÿ< 
MAX_IDE
; ideno ++) {

96 
ide_devi˚s
[
idío
].
vÆid
 = 0;

98 
ioba£
 = 
	`IO_BASE
(
idío
);

101 
	`ide_waô_ªady
(
ioba£
, 0);

104 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1) << 4));

105 
	`ide_waô_ªady
(
ioba£
, 0);

108 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_IDENTIFY
);

109 
	`ide_waô_ªady
(
ioba£
, 0);

112 i‡(
	`öb
(
ioba£
 + 
ISA_STATUS
Ë=0 || 
	`ide_waô_ªady
(iobase, 1) != 0) {

117 
ide_devi˚s
[
idío
].
vÆid
 = 1;

120 
buf„r
[128];

121 
	`ö¶
(
ioba£
 + 
ISA_DATA
, 
buf„r
, (buffer) / ());

123 *
idít
 = (*)
buf„r
;

124 
£˘‹s
;

125 
cmd£ts
 = *(*)(
idít
 + 
IDE_IDENT_CMDSETS
);

127 i‡(
cmd£ts
 & (1 << 26)) {

128 
£˘‹s
 = *(*)(
idít
 + 
IDE_IDENT_MAX_LBA_EXT
);

131 
£˘‹s
 = *(*)(
idít
 + 
IDE_IDENT_MAX_LBA
);

133 
ide_devi˚s
[
idío
].
£ts
 = 
cmd£ts
;

134 
ide_devi˚s
[
idío
].
size
 = 
£˘‹s
;

137 
	`as£π
((*(*)(
idít
 + 
IDE_IDENT_CAPABILITIES
) & 0x200) != 0);

139 *
modñ
 = 
ide_devi˚s
[
idío
].modñ, *
d©a
 = 
idít
 + 
IDE_IDENT_MODEL
;

140 
i
, 
Àngth
 = 40;

141 
i
 = 0; i < 
Àngth
; i += 2) {

142 
modñ
[
i
] = 
d©a
[i + 1], model[i + 1] = data[i];

145 
modñ
[
i
] = '\0';

146 } 
i
 -- > 0 && 
modñ
[i] == ' ');

148 
	`k¥ötf
("idê%d: %10u(£˘‹s), '%s'.\n", 
idío
, 
ide_devi˚s
[idío].
size
, ide_devi˚s[idío].
modñ
);

153 
	`pic_íabÀ
(
IRQ_IDE1
);

154 
	`pic_íabÀ
(
IRQ_IDE2
);

157 
	`£m_öô
(&(
ch™√ls
[0].
£m
), 1);

158 
	`£m_öô
(&(
ch™√ls
[1].
£m
), 1);

159 
	}
}

161 
boﬁ


162 
	$ide_devi˚_vÆid
(
idío
) {

163  
	`VALID_IDE
(
idío
);

164 
	}
}

166 
size_t


167 
	$ide_devi˚_size
(
idío
) {

168 i‡(
	`ide_devi˚_vÆid
(
idío
)) {

169  
ide_devi˚s
[
idío
].
size
;

172 
	}
}

175 
	$ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
) {

176 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

177 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

178 
ioba£
 = 
	`IO_BASE
(
idío
), 
io˘æ
 = 
	`IO_CTRL
(ideno);

180 
	`lock_ch™√l
(
idío
);

182 
	`ide_waô_ªady
(
ioba£
, 0);

185 
	`outb
(
io˘æ
 + 
ISA_CTRL
, 0);

186 
	`outb
(
ioba£
 + 
ISA_SECCNT
, 
n£cs
);

187 
	`outb
(
ioba£
 + 
ISA_SECTOR
, 
£˙o
 & 0xFF);

188 
	`outb
(
ioba£
 + 
ISA_CYL_LO
, (
£˙o
 >> 8) & 0xFF);

189 
	`outb
(
ioba£
 + 
ISA_CYL_HI
, (
£˙o
 >> 16) & 0xFF);

190 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1Ë<< 4Ë| ((
£˙o
 >> 24) & 0xF));

191 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_READ
);

193 
ªt
 = 0;

194 ; 
n£cs
 > 0;Ç£c†--, 
d°
 +
SECTSIZE
) {

195 i‡((
ªt
 = 
	`ide_waô_ªady
(
ioba£
, 1)) != 0) {

196 
out
;

198 
	`ö¶
(
ioba£
, 
d°
, 
SECTSIZE
 / (
uöt32_t
));

201 
out
:

202 
	`u∆ock_ch™√l
(
idío
);

203  
ªt
;

204 
	}
}

207 
	$ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
) {

208 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

209 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

210 
ioba£
 = 
	`IO_BASE
(
idío
), 
io˘æ
 = 
	`IO_CTRL
(ideno);

212 
	`lock_ch™√l
(
idío
);

214 
	`ide_waô_ªady
(
ioba£
, 0);

217 
	`outb
(
io˘æ
 + 
ISA_CTRL
, 0);

218 
	`outb
(
ioba£
 + 
ISA_SECCNT
, 
n£cs
);

219 
	`outb
(
ioba£
 + 
ISA_SECTOR
, 
£˙o
 & 0xFF);

220 
	`outb
(
ioba£
 + 
ISA_CYL_LO
, (
£˙o
 >> 8) & 0xFF);

221 
	`outb
(
ioba£
 + 
ISA_CYL_HI
, (
£˙o
 >> 16) & 0xFF);

222 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1Ë<< 4Ë| ((
£˙o
 >> 24) & 0xF));

223 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_WRITE
);

225 
ªt
 = 0;

226 ; 
n£cs
 > 0;Ç£c†--, 
§c
 +
SECTSIZE
) {

227 i‡((
ªt
 = 
	`ide_waô_ªady
(
ioba£
, 1)) != 0) {

228 
out
;

230 
	`out¶
(
ioba£
, 
§c
, 
SECTSIZE
 / (
uöt32_t
));

233 
out
:

234 
	`u∆ock_ch™√l
(
idío
);

235  
ªt
;

236 
	}
}

	@kern-ucore/arch/x86_64/driver/ide.h

1 #i‚de‡
__KERN_DRIVER_IDE_H__


2 
	#__KERN_DRIVER_IDE_H__


	)

4 
	~<ty≥s.h
>

6 
ide_öô
();

7 
boﬁ
 
ide_devi˚_vÆid
(
idío
);

8 
size_t
 
ide_devi˚_size
(
idío
);

10 
ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

11 
ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

	@kern-ucore/arch/x86_64/driver/intr.c

1 
	~<¨ch.h
>

2 
	~<öå.h
>

6 
	$öå_íabÀ
() {

7 
	`°i
();

8 
	}
}

12 
	$öå_dißbÀ
() {

13 
	`˛i
();

14 
	}
}

	@kern-ucore/arch/x86_64/driver/intr.h

1 #i‚de‡
__KERN_DRIVER_INTR_H__


2 
	#__KERN_DRIVER_INTR_H__


	)

4 
öå_íabÀ
();

5 
öå_dißbÀ
();

	@kern-ucore/arch/x86_64/driver/kbdreg.h

1 #i‚de‡
__KERN_DRIVER_KBDREG_H__


2 
	#__KERN_DRIVER_KBDREG_H__


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

20 
	#KBS_DIB
 0x01

21 
	#KBS_IBF
 0x02

22 
	#KBS_WARM
 0x04

23 
	#BS_OCMD
 0x08

24 
	#KBS_NOSEC
 0x10

25 
	#KBS_TERR
 0x20

26 
	#KBS_RERR
 0x40

27 
	#KBS_PERR
 0x80

28 

	)

29 
	#KBCMDP
 0x64

30 
	#KBC_RAMREAD
 0x20

31 
	#KBC_RAMWRITE
 0x60

32 
	#KBC_AUXDISABLE
 0xa7

33 
	#KBC_AUXENABLE
 0xa8

34 
	#KBC_AUXTEST
 0xa9

35 
	#KBC_KBDECHO
 0xd2

36 
	#KBC_AUXECHO
 0xd3

37 
	#KBC_AUXWRITE
 0xd4

38 
	#KBC_SELFTEST
 0xaa

39 
	#KBC_KBDTEST
 0xab

40 
	#KBC_KBDDISABLE
 0xad

41 
	#KBC_KBDENABLE
 0xae

42 
	#KBC_PULSE0
 0xfe

43 
	#KBC_PULSE1
 0xfd

44 
	#KBC_PULSE2
 0xfb

45 
	#KBC_PULSE3
 0xf7

46 

	)

47 
	#KBDATAP
 0x60

48 
	#KBOUTP
 0x60

49 

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

54 
	#KC8_MDISABLE
 0x20

55 
	#KC8_KDISABLE
 0x10

56 
	#KC8_IGNSEC
 0x08

57 
	#KC8_CPU
 0x04

58 
	#KC8_MENABLE
 0x02

59 
	#KC8_KENABLE
 0x01

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

64 
	#KBC_RESEND
 0xFE

65 
	#KBC_SETDEFAULT
 0xF6

66 
	#KBC_DISABLE
 0xF5

67 
	#KBC_ENABLE
 0xF4

68 
	#KBC_TYPEMATIC
 0xF3

69 
	#KBC_SETTABLE
 0xF0

70 
	#KBC_MODEIND
 0xED

71 
	#KBC_ECHO
 0xEE

72 

	)

74 
	#KBR_EXTENDED
 0xE0

75 
	#KBR_RESEND
 0xFE

76 
	#KBR_ACK
 0xFA

77 
	#KBR_OVERRUN
 0x00

78 
	#KBR_FAILURE
 0xFD

79 
	#KBR_BREAK
 0xF0

80 
	#KBR_RSTDONE
 0xAA

81 
	#KBR_ECHO
 0xEE

82 

	)

	@kern-ucore/arch/x86_64/glue-ucore/clock.c

1 
	~<˛ock.h
>

2 
	~<glue_tick.h
>

4 vﬁ©ûê
size_t
 
	gticks
;

7 
	$˛ock_öô
()

9 
ticks
 = 0;

10 
	`tick_öô
(100);

11 
	}
}

14 
	$˛ock_öô_≠
()

16 
	`tick_öô
(100);

17 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/entry.c

1 
	~<¶ab.h
>

2 
	~<vmm.h
>

3 
	~<pmm.h
>

4 
	~<¶ab.h
>

5 
	~<å≠.h
>

6 
	~<sched.h
>

7 
	~<¥oc.h
>

8 
	~<sw≠.h
>

9 
	~<mod.h
>

10 
	~<fs.h
>

11 
	~<˛ock.h
>

12 
	~<öå.h
>

13 
	~<•ölock.h
>

14 
	~<mp.h
>

15 
	~<ide.h
>

16 
	~<å≠.h
>

17 
	~<íåy.h
>

19 
•ölock_s
 
	göô_lock
;

20 vﬁ©ûê
	göô_föished
 = 0;

23 
	$__kîn_íåy
()

25 
	`mp_öô
();

27 i‡(
	`∂s_ªad
(
l˝u_idx
) == 0)

29 
	`•ölock_acquúe
(&
öô_lock
);

31 
	`pmm_öô
();

33 
	`pmm_öô_≠
();

34 
	`¶ab_öô
();

36 
	`å≠_öô
();

37 
	`vmm_öô
();

39 
	`sched_öô
();

40 
	`¥oc_öô
();

42 
	`sync_öô
();

44 
	`ide_öô
();

45 
	`sw≠_öô
();

46 
	`fs_öô
();

48 
	`˛ock_öô
();

49 
	`mod_öô
();

51 
öô_föished
 = 1;

52 
	`•ölock_ªÀa£
(&
öô_lock
);

56 
öô_föished
 == 0);

57 
	`•ölock_acquúe
(&
öô_lock
);

59 
	`pmm_öô_≠
();

60 
	`å≠_öô_≠
();

61 
	`¥oc_öô_≠
();

62 
	`˛ock_öô_≠
();

64 ++ 
öô_föished
;

66 
	`•ölock_ªÀa£
(&
öô_lock
);

69 
l˝u_cou¡
 = 
	`∂s_ªad
(lcpu_count);

70 
öô_föished
 !
l˝u_cou¡
) ;

72 
	`öå_íabÀ
();

73 
	`˝u_idÀ
();

76 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/kio.c

1 
	~<kio.h
>

2 
	~<glue_kio.h
>

3 
	~<glue_öå.h
>

4 
	~<°dio.h
>

5 
	~<•ölock.h
>

12 
	$˝utch
(
c
, *
˙t
, 
fd
) {

13 
	`kc⁄s_putc
(
c
);

14 (*
˙t
) ++;

15 
	}
}

17 
•ölock_s
 
	gk¥ötf_lock
 = {0};

29 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
) {

30 
˙t
 = 0;

31 
Êag
;

32 
	`loˇl_öå_ßve_hw
(
Êag
);

33 
	`•ölock_acquúe
(&
k¥ötf_lock
);

34 
	`v¥ötfmt
((*)
˝utch
, 0, &
˙t
, 
fmt
, 
≠
);

35 
	`•ölock_ªÀa£
(&
k¥ötf_lock
);

36 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

37  
˙t
;

38 
	}
}

47 
	$k¥ötf
(c⁄° *
fmt
, ...) {

48 
va_li°
 
≠
;

49 
˙t
;

50 
	`va_°¨t
(
≠
, 
fmt
);

51 
˙t
 = 
	`vk¥ötf
(
fmt
, 
≠
);

52 
	`va_íd
(
≠
);

53  
˙t
;

54 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/libs/arch.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<ty≥s.h
>

6 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" ::: "mem‹y")

	)

8 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
ölöe
 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
	sp£udodesc
 {

16 
uöt16_t
 
pd_lim
;

17 
uöçå_t
 
pd_ba£
;

18 } 
	`__©åibuã__
 ((
∑cked
));

20 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
uöçå_t
 
	$r¸1
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
uöçå_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
uöt8_t


33 
	$öb
(
uöt16_t
 
p‹t
) {

34 
uöt8_t
 
d©a
;

35 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
) : "memory");

36  
d©a
;

37 
	}
}

39 
ölöe
 

40 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

41 
asm
 volatile (

44 : "=D" (
addr
), "=c" (
˙t
)

45 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

47 
	}
}

49 
ölöe
 

50 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

51 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

52 
	}
}

54 
ölöe
 

55 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

56 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

57 
	}
}

59 
ölöe
 

60 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
) {

61 
asm
 volatile (

64 : "=S" (
addr
), "=c" (
˙t
)

65 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

67 
	}
}

69 
ölöe
 

70 
	$lidt
(
p£udodesc
 *
pd
) {

71 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
) : "memory");

72 
	}
}

74 
ölöe
 

75 
	$°i
() {

76 
asm
 volatile ("sti");

77 
	}
}

79 
ölöe
 

80 
	$˛i
() {

81 
asm
 volatile ("cli" ::: "memory");

82 
	}
}

84 
ölöe
 

85 
	$…r
(
uöt16_t
 
£l
) {

86 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
) : "memory");

87 
	}
}

89 
ölöe
 

90 
	$l¸0
(
uöçå_t
 
¸0
) {

91 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
) : "memory");

92 
	}
}

94 
ölöe
 

95 
	$l¸3
(
uöçå_t
 
¸3
) {

96 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
) : "memory");

97 
	}
}

99 
ölöe
 
uöçå_t


100 
	$r¸0
() {

101 
uöçå_t
 
¸0
;

102 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
) :: "memory");

103  
¸0
;

104 
	}
}

106 
ölöe
 
uöçå_t


107 
	$r¸1
() {

108 
uöçå_t
 
¸1
;

109 
asm
 vﬁ©ûê("mov %%¸1, %0" : "Ù" (
¸1
) :: "memory");

110  
¸1
;

111 
	}
}

113 
ölöe
 
uöçå_t


114 
	$r¸2
() {

115 
uöçå_t
 
¸2
;

116 
asm
 vﬁ©ûê("mov %%¸2, %0" : "Ù" (
¸2
) :: "memory");

117  
¸2
;

118 
	}
}

120 
ölöe
 
uöçå_t


121 
	$r¸3
() {

122 
uöçå_t
 
¸3
;

123 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
) :: "memory");

124  
¸3
;

125 
	}
}

127 
ölöe
 

128 
	$övÕg
(*
addr
) {

129 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

130 
	}
}

132 #ifde‡
__UCORE_64__


134 
	#do_div
(
n
, 
ba£
) ({ \

135 
uöt64_t
 
__mod
, 
__ba£
 = (uöt64_t)
ba£
; \

136 
__mod
 = ((
uöt64_t
)(
n
)Ë% 
__ba£
; \

137 (
n
Ë((
uöt64_t
)“)Ë/ 
__ba£
; \

138 
__mod
; \

139 })

	)

141 
ölöe
 
uöt64_t
 
	$ªad_rbp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

142 
ölöe
 
uöt64_t
 
	$ªad_rÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

143 
ölöe
 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

145 
ölöe
 
uöt64_t


146 
	$ªad_rbp
() {

147 
uöt64_t
 
rbp
;

148 
asm
 vﬁ©ûê("movq %%rbp, %0" : "Ù" (
rbp
));

149  
rbp
;

150 
	}
}

152 
ölöe
 
uöt64_t


153 
	$ªad_rÊags
() {

154 
uöt64_t
 
rÊags
;

155 
asm
 vﬁ©ûê("pushfq;Ö›q %0" : "Ù" (
rÊags
));

156  
rÊags
;

157 
	}
}

159 
ölöe
 

160 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
) {

161 
asm
 vﬁ©ûê("pushq %0;Ö›fq" :: "r" (
rÊags
));

162 
	}
}

166 
	#do_div
(
n
, 
ba£
) ({ \

167 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

168 
__ba£
 = (
ba£
); \

169 
	`asm
 ("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

170 
__uµî
 = 
__high
; \

171 i‡(
__high
 != 0) { \

172 
__uµî
 = 
__high
 % 
__ba£
; \

173 
__high
 = __high / 
__ba£
; \

175 
	`asm
 ("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

176 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

177 
	`asm
 ("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

178 
__mod
; \

179 })

	)

181 
ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

182 
ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

183 
ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

185 
ölöe
 
uöt32_t


186 
	$ªad_ebp
() {

187 
uöt32_t
 
ebp
;

188 
asm
 vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
ebp
));

189  
ebp
;

190 
	}
}

192 
ölöe
 
uöt32_t


193 
	$ªad_eÊags
() {

194 
uöt32_t
 
eÊags
;

195 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

196  
eÊags
;

197 
	}
}

199 
ölöe
 

200 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
) {

201 
asm
 vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
eÊags
));

202 
	}
}

206 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

207 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

208 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

209 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

210 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

212 #i‚de‡
__HAVE_ARCH_STRCMP


213 
	#__HAVE_ARCH_STRCMP


	)

214 
ölöe
 

215 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

216 
d0
, 
d1
, 
ªt
;

217 
asm
 volatile (

228 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

229 : "1" (
s1
), "2" (
s2
)

231  
ªt
;

232 
	}
}

236 #i‚de‡
__HAVE_ARCH_STRCPY


237 
	#__HAVE_ARCH_STRCPY


	)

238 
ölöe
 *

239 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

240 
d0
, 
d1
, 
d2
;

241 
asm
 volatile (

246 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

247 : "0" (
§c
), "1" (
d°
) : "memory");

248  
d°
;

249 
	}
}

252 #i‚de‡
__HAVE_ARCH_MEMSET


253 
	#__HAVE_ARCH_MEMSET


	)

254 
ölöe
 *

255 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

256 
d0
, 
d1
;

257 
asm
 volatile (

259 : "=&c" (
d0
), "=&D" (
d1
)

260 : "0" (
n
), "a" (
c
), "1" (
s
)

262  
s
;

263 
	}
}

266 #i‚de‡
__HAVE_ARCH_MEMMOVE


267 
	#__HAVE_ARCH_MEMMOVE


	)

268 
ölöe
 *

269 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

270 i‡(
d°
 < 
§c
) {

271  
	`__mem˝y
(
d°
, 
§c
, 
n
);

273 
d0
, 
d1
, 
d2
;

274 
asm
 volatile (

278 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

279 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

281  
d°
;

282 
	}
}

285 #i‚de‡
__HAVE_ARCH_MEMCPY


286 
	#__HAVE_ARCH_MEMCPY


	)

287 
ölöe
 *

288 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

289 
d0
, 
d1
, 
d2
;

290 
asm
 volatile (

297 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

298 : "0" (
n
 / 4), "m" (n), "1" (
d°
), "2" (
§c
)

300  
d°
;

301 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/libs/atom.h

1 #i‚de‡
__ATOM_H__


2 
	#__ATOM_H__


	)

4 
	~<libs/ty≥s.h
>

6 
__ölöe
 
uöt64_t


7 
	$xchg64
(vﬁ©ûê*
addr
, 
uöt64_t
 
√wvÆ
)

9 
uöt64_t
 
ªsu…
;

12 
asm
 volatile("lock; xchgq %0, %1" :

13 "+m" (*(vﬁ©ûê
uöt64_t
 *)
addr
), "˜" (
ªsu…
) :

14 "1" (
√wvÆ
) :

16  
ªsu…
;

17 
	}
}

19 
__ölöe
 
uöt32_t


20 
	$xchg32
(vﬁ©ûê*
addr
, 
uöt32_t
 
√wvÆ
)

22 
uöt32_t
 
ªsu…
;

25 
asm
 volatile("lock; xchgl %0, %1" :

26 "+m" (*(vﬁ©ûê
uöt32_t
 *)
addr
), "˜" (
ªsu…
) :

27 "1" (
√wvÆ
) :

29  
ªsu…
;

30 
	}
}

32 
__ölöe
 
uöt16_t


33 
	$xchg16
(vﬁ©ûê*
addr
, 
uöt16_t
 
√wvÆ
)

35 
uöt16_t
 
ªsu…
;

38 
asm
 volatile("lock; xchgw %0, %1" :

39 "+m" (*(vﬁ©ûê
uöt16_t
 *)
addr
), "˜" (
ªsu…
) :

40 "1" (
√wvÆ
) :

42  
ªsu…
;

43 
	}
}

45 
__ölöe
 
uöt8_t


46 
	$xchg8
(vﬁ©ûê*
addr
, 
uöt8_t
 
√wvÆ
)

48 
uöt8_t
 
ªsu…
;

51 
asm
 volatile("lock xchgb %0, %1" :

52 "+m" (*(vﬁ©ûê
uöt8_t
 *)
addr
), "˜" (
ªsu…
) :

53 "1" (
√wvÆ
) :

55  
ªsu…
;

56 
	}
}

58 
__ölöe
 
uöt64_t


59 
	$cmpxchg64
(vﬁ©ûê*
addr
, 
uöt64_t
 
ﬁdvÆ
, uöt64_à
√wvÆ
)

61 
uöt64_t
 
ªsu…
;

63 
asm
 volatile("cmpxchgq %3, %1" :

64 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt64_t
 *)
addr
) :

65 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

67  
ªsu…
;

68 
	}
}

70 
__ölöe
 
uöt32_t


71 
	$cmpxchg32
(vﬁ©ûê*
addr
, 
uöt32_t
 
ﬁdvÆ
, uöt32_à
√wvÆ
)

73 
uöt32_t
 
ªsu…
;

75 
asm
 volatile("cmpxchgl %3, %1" :

76 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt32_t
 *)
addr
) :

77 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

79  
ªsu…
;

80 
	}
}

82 
__ölöe
 
uöt16_t


83 
	$cmpxchg16
(vﬁ©ûê*
addr
, 
uöt16_t
 
ﬁdvÆ
, uöt16_à
√wvÆ
)

85 
uöt16_t
 
ªsu…
;

87 
asm
 volatile("cmpxchgw %3, %1" :

88 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt16_t
 *)
addr
) :

89 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

91  
ªsu…
;

92 
	}
}

94 
__ölöe
 
uöt8_t


95 
	$cmpxchg8
(vﬁ©ûê*
addr
, 
uöt8_t
 
ﬁdvÆ
, uöt8_à
√wvÆ
)

97 
uöt8_t
 
ªsu…
;

99 
asm
 volatile("cmpxchgb %3, %1" :

100 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt8_t
 *)
addr
) :

101 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

103  
ªsu…
;

104 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/libs/atomic.h

1 #i‚de‡
__LIBS_ATOMIC_H__


2 
	#__LIBS_ATOMIC_H__


	)

7 vﬁ©ûê
	mcou¡î
;

8 } 
	t©omic_t
;

10 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 

29 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

30  
v
->
cou¡î
;

31 
	}
}

40 
ölöe
 

41 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

42 
v
->
cou¡î
 = 
i
;

43 
	}
}

52 
ölöe
 

53 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

54 
asm
 vﬁ©ûê("add»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

55 
	}
}

64 
ölöe
 

65 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

66 
asm
 vﬁ©ûe("sub»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

67 
	}
}

77 
ölöe
 
boﬁ


78 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

79 
c
;

80 
asm
 vﬁ©ûe("sub»%2, %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
Ë: "ú" (
i
) : "memory");

81  
c
 != 0;

82 
	}
}

90 
ölöe
 

91 
	$©omic_öc
(
©omic_t
 *
v
) {

92 
asm
 vﬁ©ûe("ö˛ %0" : "+m" (
v
->
cou¡î
));

93 
	}
}

101 
ölöe
 

102 
	$©omic_dec
(
©omic_t
 *
v
) {

103 
asm
 vﬁ©ûe("de˛ %0" : "+m" (
v
->
cou¡î
));

104 
	}
}

113 
ölöe
 
boﬁ


114 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

115 
c
;

116 
asm
 vﬁ©ûe("ö˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

117  
c
 != 0;

118 
	}
}

127 
ölöe
 
boﬁ


128 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

129 
c
;

130 
asm
 vﬁ©ûe("de˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

131  
c
 != 0;

132 
	}
}

142 
ölöe
 

143 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

144 
__i
 = 
i
;

145 
asm
 vﬁ©ûe("xadd»%0, %1" : "+r" (
i
), "+m" (
v
->
cou¡î
) :: "memory");

146  
i
 + 
__i
;

147 
	}
}

156 
ölöe
 

157 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

158  
	`©omic_add_ªtu∫
(
v
, -
i
);

159 
	}
}

161 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

162 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

163 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

177 
ölöe
 

178 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

179 
asm
 vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

180 
	}
}

187 
ölöe
 

188 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

189 
asm
 vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

190 
	}
}

197 
ölöe
 

198 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

199 
asm
 vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

200 
	}
}

207 
ölöe
 
boﬁ


208 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

209 
ﬁdbô
;

210 
asm
 vﬁ©ûê("bt¶ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

211  
ﬁdbô
 != 0;

212 
	}
}

219 
ölöe
 
boﬁ


220 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

221 
ﬁdbô
;

222 
asm
 vﬁ©ûê("bå»%2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

223  
ﬁdbô
 != 0;

224 
	}
}

231 
ölöe
 
boﬁ


232 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

233 
ﬁdbô
;

234 
asm
 vﬁ©ûê("bt˛ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

235  
ﬁdbô
 != 0;

236 
	}
}

243 
ölöe
 
boﬁ


244 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

245 
ﬁdbô
;

246 
asm
 vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
ﬁdbô
Ë: "m" (*(vﬁ©ûê*)
addr
), "Ir" (
ƒ
));

247  
ﬁdbô
 != 0;

248 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/libs/bitsearch.h

1 #i‚de‡
__BITSEARCH_H__


2 
	#__BITSEARCH_H__


	)

4 
	~<libs/ty≥s.h
>

6 
ölöe
 
	$bsf
(
uöt64_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

7 
ölöe
 
	$b§
(
uöt64_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
ölöe
 

10 
	$bsf
(
uöt64_t
 
n
)

12 i‡(
n
 == 0)  -1;

13 
uöt64_t
 
ªsu…
;

14 
__asm
 
	`__vﬁ©ûe
("bsfq %1, %0"

15 : "Ù" (
ªsu…
)

16 : "r" (
n
));

17  
ªsu…
;

18 
	}
}

20 
ölöe
 

21 
	$b§
(
uöt64_t
 
n
)

23 i‡(
n
 == 0)  -1;

24 
uöt64_t
 
ªsu…
;

25 
__asm
 
	`__vﬁ©ûe
("bsrq %1, %0"

26 : "Ù" (
ªsu…
)

27 : "r" (
n
));

28  
ªsu…
;

29 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/libs/spinlock.h

1 #i‚de‡
__SPINLOCK_H__


2 
	#__SPINLOCK_H__


	)

4 
	~<©om.h
>

6 
	s•ölock_s
 {

7 vﬁ©ûê
	mlock
;

8 } 
	t•ölock_s
;

10 
•ölock_s
 *
	t•ölock_t
;

12 
	#•ölock_öô
(
x
Ëdÿ{ (x)->
lock
 = 0; } 0)

	)

14 
ölöe
 

15 
	$•ölock_acquúe
(
•ölock_t
 
lock
)

17 
	`xchg32
(&
lock
->lock, 1) == 1) ;

18 
	}
}

20 
ölöe
 

21 
	$•ölock_acquúe_åy
(
•ölock_t
 
lock
)

23  !
	`xchg32
(&
lock
->lock, 1);

24 
	}
}

26 
ölöe
 

27 
	$•ölock_ªÀa£
(
•ölock_t
 
lock
)

29 
lock
->lock = 0;

30 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/memlayout.h

1 #i‚de‡
__GLUE_UCORE_MEMLAYOUT_H__


2 
	#__GLUE_UCORE_MEMLAYOUT_H__


	)

4 
	~<glue_memœyout.h
>

6 
	~<li°.h
>

7 
	~<©omic.h
>

14 
	sPage
 {

15 
uöçå_t
 
	m∑
;

16 
©omic_t
 
	mªf
;

17 
uöt32_t
 
	mÊags
;

18 
	m¥›îty
;

19 
	mz⁄e_num
;

20 
li°_íåy_t
 
	m∑ge_lök
;

21 
sw≠_íåy_t
 
	mödex
;

22 
li°_íåy_t
 
	msw≠_lök
;

26 
	#PG_ª£rved
 0

27 
	#PG_¥›îty
 1

28 
	#PG_¶ab
 2

29 
	#PG_dúty
 3

30 
	#PG_sw≠
 4

31 
	#PG_a˘ive
 5

32 

	)

33 
	#SëPageRe£rved
(
∑ge
Ë
	`£t_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

34 
	#CÀ¨PageRe£rved
(
∑ge
Ë
	`˛ór_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

35 
	#PageRe£rved
(
∑ge
Ë
	`ã°_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

36 
	#SëPagePr›îty
(
∑ge
Ë
	`£t_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

37 
	#CÀ¨PagePr›îty
(
∑ge
Ë
	`˛ór_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

38 
	#PagePr›îty
(
∑ge
Ë
	`ã°_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

39 
	#SëPageSœb
(
∑ge
Ë
	`£t_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

40 
	#CÀ¨PageSœb
(
∑ge
Ë
	`˛ór_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

41 
	#PageSœb
(
∑ge
Ë
	`ã°_bô
(
PG_¶ab
, &(’age)->
Êags
))

	)

42 
	#SëPageDúty
(
∑ge
Ë
	`£t_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

43 
	#CÀ¨PageDúty
(
∑ge
Ë
	`˛ór_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

44 
	#PageDúty
(
∑ge
Ë
	`ã°_bô
(
PG_dúty
, &(’age)->
Êags
))

	)

45 
	#SëPageSw≠
(
∑ge
Ë
	`£t_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

46 
	#CÀ¨PageSw≠
(
∑ge
Ë
	`˛ór_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

47 
	#PageSw≠
(
∑ge
Ë
	`ã°_bô
(
PG_sw≠
, &(’age)->
Êags
))

	)

48 
	#SëPageA˘ive
(
∑ge
Ë
	`£t_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

49 
	#CÀ¨PageA˘ive
(
∑ge
Ë
	`˛ór_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

50 
	#PageA˘ive
(
∑ge
Ë
	`ã°_bô
(
PG_a˘ive
, &(’age)->
Êags
))

	)

53 
	#À2∑ge
(
À
, 
membî
) \

54 
	`to_°ru˘
((
À
), 
Page
, 
membî
)

	)

58 
li°_íåy_t
 
	m‰ì_li°
;

59 
	mƒ_‰ì
;

60 } 
	t‰ì_¨ó_t
;

	@kern-ucore/arch/x86_64/glue-ucore/mmu.h

1 #i‚de‡
__GLUE_UCORE_MMU_H__


2 
	#__GLUE_UCORE_MMU_H__


	)

4 
	~<glue_mmu.h
>

	@kern-ucore/arch/x86_64/glue-ucore/mp.c

1 
	~<mp.h
>

2 
	~<å≠.h
>

3 
	~<•ölock.h
>

4 
	~<¥oc.h
>

5 
	~<kio.h
>

6 
	~<as£π.h
>

8 
PLS
 
	g∂s_œpic_id
;

9 
PLS
 
	g∂s_l˝u_idx
;

10 
PLS
 
	g∂s_l˝u_cou¡
;

12 
•ölock_s
 
	gkîn_lock
 = {0};

14 
PLS
 vﬁ©ûê
	g∂s_loˇl_kîn_lockög
;

16 vﬁ©ûê
	gùi_øi£
[
LAPIC_COUNT
] = {0};

19 
	#mp_debug
(
a
 ...Ë
	`k¥ötf
◊)

	)

21 
	#mp_debug
(
a
 ...)

	)

25 
	$mp_öô
()

27 
	`∂s_wrôe
 (
œpic_id
, 
	`œpic_id_gë
());

28 
	`∂s_wrôe
 (
l˝u_idx
, 
	`l˝u_idx_gë
());

29 
	`∂s_wrôe
 (
l˝u_cou¡
, 
	`l˝u_cou¡_gë
());

31 
	`∂s_wrôe
 (
loˇl_kîn_lockög
, 0);

34 
	}
}

37 
	$kîn_íãr
(
sour˚
)

39 
Êags
;

40 
œpic_id
 = 
	`∂s_ªad
 (lapic_id);

42 
	`loˇl_öå_ßve_hw
(
Êags
);

43 i‡(
	`∂s_ªad
(
loˇl_kîn_lockög
) != 0)

45 
	`mp_debug
("CPU %d ERROR %d %d\n", 
œpic_id
, 
sour˚
, (
	`ªad_rÊags
(Ë& 
FL_IF
) != 0);

46 
	`as£π
(0);

49 
	`∂s_wrôe
(
loˇl_kîn_lockög
, 1);

50 
	`mp_debug
("CPU %d PID %d ENTERING KERN %d %d\n", 
œpic_id
, 
	`∂s_ªad
(
cuºít
Ë=
NULL
 ? -1 :Öls_ªad(cuºít)->
pid
, 
sour˚
, (
	`ªad_rÊags
(Ë& 
FL_IF
) != 0);

53 i‡(
ùi_øi£
[
œpic_id
])

55 
asm
 vﬁ©ûê("öà%0" :: "n"(
T_IPI
));

58 i‡(
	`•ölock_acquúe_åy
(&
kîn_lock
))

61 
	`mp_debug
("CPU %d ENTERED KERN\n", 
œpic_id
);

62 
	`∂s_wrôe
(
loˇl_kîn_lockög
, 0);

63 
	`loˇl_öå_ª°‹e_hw
(
Êags
);

64 
	}
}

67 
	$kîn_Àave
()

69 
Êags
;

70 
	`loˇl_öå_ßve_hw
(
Êags
);

71 
	`mp_debug
("CPU %d LEAVING KERN\n", 
	`∂s_ªad
 (
œpic_id
));

72 
	`•ölock_ªÀa£
(&
kîn_lock
);

73 
	`loˇl_öå_ª°‹e_hw
(
Êags
);

74 
	}
}

76 
	~<glue_mp.h
>

77 
	~<glue_pmm.h
>

78 
	~<glue_memœyout.h
>

79 
	~<pmm.h
>

80 
	~<vmm.h
>

83 
	$mp_£t_mm_∑gëabÀ
(
mm_°ru˘
 *
mm
)

85 
pgd_t
* 
pgd
;

86 
Êags
;

88 
	`loˇl_öå_ßve_hw
(
Êags
);

91 i‡(
mm
 =
NULL
)

93 
pgd
 = 
	`öô_pgdú_gë
();

97 
pgd
 = 
mm
->
pgdú
;

98 
pgd
[
NPGENTRY
 - 1] = 
	`öô_pgdú_gë
()[NPGENTRY - 1];

101 
	`l¸3
(
	`PADDR_DIRECT
(
pgd
));

103 
	`as£π
(
	`œpic_id_gë
(Ë=
	`∂s_ªad
(
œpic_id
));

105 
	`loˇl_öå_ª°‹e_hw
(
Êags
);

106 
	}
}

109 
pgd_t
 *
	gm±i_pgdú
;

110 
uöçå_t
 
	gm±i_œ
;

111 vﬁ©ûê
	gm±i_íd
;

113 
	~<íåy.h
>

116 
	$mp_éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
)

118 
l˝u_idx
 = 
	`∂s_ªad
(lcpu_idx);

119 
l˝u_cou¡
 = 
	`∂s_ªad
(lcpu_count);

121 i‡(
öô_föished
 < 
l˝u_cou¡
)

123 
	`éb_övÆid©e
(
pgdú
, 
œ
);

127 
Êag
;

129 
	`loˇl_öå_ßve_hw
(
Êag
);

132 
m±i_íd
 = 0;

134 
m±i_pgdú
 = 
pgdú
;

135 
m±i_œ
 = 
œ
;

137 
i
;

138 
i
 = 0; i !
l˝u_cou¡
; ++ i)

139 i‡(
i
 !
l˝u_idx
)

142 
œpic_id
 = 
i
;

143 
ùi_øi£
[
œpic_id
] = 1;

144 
	`œpic_ùi_issue
(
œpic_id
);

148 
	`éb_övÆid©e
(
pgdú
, 
œ
);

149 
m±i_íd
 = 1;

151 
i
 = 0; i !
l˝u_cou¡
; ++ i)

152 i‡(
i
 !
l˝u_idx
)

154 
œpic_id
 = 
i
;

155 
ùi_øi£
[
œpic_id
]) ;

160 
	`loˇl_öå_ª°‹e_hw
(
Êag
);

161 
	}
}

164 
	$mp_éb_upd©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
) {

165 
	`mp_éb_övÆid©e
(
pgdú
, 
œ
);

166 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/pmm.c

1 
	~<pmm.h
>

2 
	~<¶ab.h
>

3 
	~<îr‹.h
>

4 
	~<as£π.h
>

5 
	~<©om.h
>

6 
	~<°rög.h
>

7 
	~<kio.h
>

8 
	~<sw≠.h
>

9 
	~<glue_mp.h
>

10 
	~<glue_öå.h
>

11 
	~<mp.h
>

13 
	#SV_GDT_SIZE
 (8 + 
LAPIC_COUNT
)

	)

29 
PLS
 
£gdesc
 
	g∂s_gdt
[
SV_GDT_SIZE
];

30 
PLS
 
p£udodesc
 
	g∂s_gdt_pd
;

32 vﬁ©ûê
size_t
 
	gu£d_∑ges
;

33 
PLS
 
li°_íåy_t
 
	g∂s_∑ge_°ru˘_‰ì_li°
;

35 
Page
 *

36 
	$∑ge_°ru˘_Æloc
(
uöçå_t
 
∑
)

38 
li°_íåy_t
 *
∑ge_°ru˘_‰ì_li°
 = 
	`∂s_gë_±r
(page_struct_free_list);

40 i‡(
	`li°_em±y
(
∑ge_°ru˘_‰ì_li°
))

42 
Page
 *
p
 = 
	`KADDR_DIRECT
(
	`kÆloc_∑ges
(1));

44 
i
;

45 
i
 = 0; i < 
PGSIZE
 / (
Page
); ++ i)

46 
	`li°_add
(
∑ge_°ru˘_‰ì_li°
, &
p
[
i
].
∑ge_lök
);

49 
li°_íåy_t
 *
íåy
 = 
	`li°_√xt
(
∑ge_°ru˘_‰ì_li°
);

50 
	`li°_dñ
(
íåy
);

52 
Page
 *
∑ge
 = 
	`À2∑ge
(
íåy
, 
∑ge_lök
);

54 
∑ge
->
∑
 =Öa;

55 
	`©omic_£t
(&
∑ge
->
ªf
, 0);

56 
∑ge
->
Êags
 = 0;

57 
	`li°_öô
(
íåy
);

59  
∑ge
;

60 
	}
}

63 
	$∑ge_°ru˘_‰ì
(
Page
 *
∑ge
)

65 
li°_íåy_t
 *
∑ge_°ru˘_‰ì_li°
 = 
	`∂s_gë_±r
(page_struct_free_list);

66 
	`li°_add
(
∑ge_°ru˘_‰ì_li°
, &
∑ge
->
∑ge_lök
);

67 
	}
}

69 
Page
 *

70 
	$Æloc_∑ges
(
size_t
 
≈ages
)

72 
Page
 *
ªsu…
;

73 
uöçå_t
 
ba£
 = 
	`kÆloc_∑ges
(
≈ages
);

74 
size_t
 
i
;

75 
Êags
;

77 
	`loˇl_öå_ßve_hw
(
Êags
);

79 
ªsu…
 = 
	`∑ge_°ru˘_Æloc
(
ba£
);

80 
	`k∑ge_¥iv©e_£t
(
ba£
, 
ªsu…
);

82 
i
 = 1; i < 
≈ages
; ++ i)

84 
Page
 *
∑ge
 = 
	`∑ge_°ru˘_Æloc
(
ba£
 + 
i
 * 
PGSIZE
);

85 
	`k∑ge_¥iv©e_£t
(
ba£
 + 
i
 * 
PGSIZE
, 
∑ge
);

90 
size_t
 
ﬁd
 = 
u£d_∑ges
;

91 i‡(
	`cmpxchg64
(&
u£d_∑ges
, 
ﬁd
, old + 
≈ages
) == old) ;

94 
	`loˇl_öå_ª°‹e_hw
(
Êags
);

95  
ªsu…
;

96 
	}
}

99 
	$‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
≈ages
)

101 
uöçå_t
 
ba£∑
 = 
	`∑ge2∑
(
ba£
);

102 
size_t
 
i
;

103 
Êags
;

105 
	`loˇl_öå_ßve_hw
(
Êags
);

107 
i
 = 0; i < 
≈ages
; ++ i)

109 
	`∑ge_°ru˘_‰ì
(
	`k∑ge_¥iv©e_gë
(
ba£∑
 + 
i
 * 
PGSIZE
));

112 
	`k‰ì_∑ges
(
ba£∑
, 
≈ages
);

115 
size_t
 
ﬁd
 = 
u£d_∑ges
;

116 i‡(
	`cmpxchg64
(&
u£d_∑ges
, 
ﬁd
, old - 
≈ages
) == old) ;

119 
	`loˇl_öå_ª°‹e_hw
(
Êags
);

120 
	}
}

122 
size_t


123 
	$ƒ_u£d_∑ges
()

125  
u£d_∑ges
;

126 
	}
}

129 
ölöe
 

130 
	$lgdt
(
p£udodesc
 *
pd
) {

131 
asm
 vﬁ©ûê("lgdà(%0)" :: "r" (
pd
));

132 
asm
 vﬁ©ûê("movw %%ax, %%es" :: "a" (
KERNEL_DS
));

133 
asm
 vﬁ©ûê("movw %%ax, %%ds" :: "a" (
KERNEL_DS
));

135 
asm
 volatile (

144 :: "i" (
KERNEL_CS
), "i" (
KERNEL_DS
));

145 
	}
}

148 
	$pmm_öô
()

150 
u£d_∑ges
 = 0;

151 
	}
}

154 
	$pmm_öô_≠
()

156 
li°_íåy_t
 *
∑ge_°ru˘_‰ì_li°
 = 
	`∂s_gë_±r
(page_struct_free_list);

157 
	`li°_öô
(
∑ge_°ru˘_‰ì_li°
);

159 
p£udodesc
 *
gdt_pd
 = 
	`∂s_gë_±r
(gdt_pd);

160 
£gdesc
 *
gdt
 = 
	`∂s_gë_±r
(gdt);

161 
£gdesc
 *
sv_gdt
 = 
	`gë_sv_gdt
();

162 
	`mem˝y
 (
gdt
, 
sv_gdt
, 
SV_GDT_SIZE
 * (
£gdesc
));

163 
gdt_pd
->
pd_lim
 = 
SV_GDT_SIZE
 * (
£gdesc
) - 1;

164 
gdt_pd
->
pd_ba£
 = (
uöçå_t
)
gdt
;

165 
	`lgdt
(
gdt_pd
);

166 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/pmm.h

1 #i‚de‡
__GLUE_UCORE_PMM_H__


2 
	#__GLUE_UCORE_PMM_H__


	)

4 
	~<glue_pmm.h
>

5 
	~<glue_mmu.h
>

6 
	~<glue_pgm≠.h
>

7 
	~<memœyout.h
>

8 
	~<ty≥s.h
>

9 
	~<as£π.h
>

10 
	~<©omic.h
>

11 
	~<¥oc.h
>

13 
£gdesc
 
∂s_gdt
[];

16 
	#KADDR
(
addr
Ë((*)((
uöçå_t
)◊ddrË+ 
PBASE
))

	)

17 
	#PADDR
(
addr
Ë((
uöçå_t
)◊ddrË- 
PBASE
)

	)

19 
	#NEXT_PAGE
(
pg
Ë(
	`∑2∑ge
(
	`∑ge2∑
’gË+ 
PGSIZE
))

	)

21 
ölöe
 
µn_t


22 
	$∑ge2µn
(
Page
 *
∑ge
) {

23  
	`PPN
(
∑ge
->
∑
);

24 
	}
}

26 
ölöe
 
uöçå_t


27 
	$∑ge2∑
(
Page
 *
∑ge
) {

28  
∑ge
->
∑
;

29 
	}
}

31 
ölöe
 
Page
 *

32 
	$∑2∑ge
(
uöçå_t
 
∑
) {

33  (
Page
 *)(
	`k∑ge_¥iv©e_gë
(
∑
));

34 
	}
}

36 
ölöe
 *

37 
	$∑ge2kva
(
Page
 *
∑ge
) {

38  
	`KADDR
(
	`∑ge2∑
(
∑ge
));

39 
	}
}

41 
ölöe
 
Page
 *

42 
	$kva2∑ge
(*
kva
) {

43  
	`∑2∑ge
(
	`PADDR
(
kva
));

44 
	}
}

46 
ölöe
 
Page
 *

47 
	$±e2∑ge
(
±e_t
 
±e
) {

48 i‡(! 
	`±ï_¥e£¡
(&
±e
)) {

49 
	`∑nic
("pte2page called with invalidÖte");

51  
	`∑2∑ge
(
	`PTE_ADDR
(
±e
));

52 
	}
}

54 
ölöe
 
Page
 *

55 
	$pmd2∑ge
(
pmd_t
 
pmd
) {

56  
	`∑2∑ge
(
	`PMD_ADDR
(
pmd
));

57 
	}
}

59 
ölöe
 
Page
 *

60 
	$pud2∑ge
(
pud_t
 
pud
) {

61  
	`∑2∑ge
(
	`PUD_ADDR
(
pud
));

62 
	}
}

64 
ölöe
 
Page
 *

65 
	$pgd2∑ge
(
pgd_t
 
pgd
) {

66  
	`∑2∑ge
(
	`PGD_ADDR
(
pgd
));

67 
	}
}

69 
ölöe
 

70 
	$∑ge_ªf
(
Page
 *
∑ge
) {

71  
	`©omic_ªad
(&(
∑ge
->
ªf
));

72 
	}
}

74 
ölöe
 

75 
	$£t_∑ge_ªf
(
Page
 *
∑ge
, 
vÆ
) {

76 
	`©omic_£t
(&(
∑ge
->
ªf
), 
vÆ
);

77 
	}
}

79 
ölöe
 

80 
	$∑ge_ªf_öc
(
Page
 *
∑ge
) {

81  
	`©omic_add_ªtu∫
(&(
∑ge
->
ªf
), 1);

82 
	}
}

84 
ölöe
 

85 
	$∑ge_ªf_dec
(
Page
 *
∑ge
) {

86  
	`©omic_sub_ªtu∫
(&(
∑ge
->
ªf
), 1);

87 
	}
}

89 
pgd_t
 *
gë_pgd
’gd_à*
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

90 
pud_t
 *
gë_pud
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

91 
pmd_t
 *
gë_pmd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

92 
±e_t
 *
gë_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

94 
	#Æloc_∑ge
(Ë
	`Æloc_∑ges
(1)

	)

95 
	#‰ì_∑ge
(
∑ge
Ë
	`‰ì_∑ges
’age, 1)

	)

97 
Page
 *
Æloc_∑ges
(
size_t
 
≈ages
);

98 
‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
≈ages
);

99 
size_t
 
ƒ_u£d_∑ges
();

101 
Page
 *
gë_∑ge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 **
±ï_°‹e
);

102 
∑ge_ªmove
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
);

103 
∑ge_ö£π
(
pgd_t
 *
pgdú
, 
Page
 *
∑ge
, 
uöçå_t
 
œ
, 
±e_≥rm_t
 
≥rm
);

105 
éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
);

106 
Page
 *
pgdú_Æloc_∑ge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

107 
unm≠_ønge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

108 
exô_ønge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

109 
c›y_ønge
(
pgd_t
 *
to
,Ögd_à*
‰om
, 
uöçå_t
 
°¨t
, uöçå_à
íd
, 
boﬁ
 
sh¨e
);

111 
£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pgd_t
 *
pgdú
);

112 
lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
);

113 
m≠_pgdú
 (
pgd_t
 *
pgdú
);

115 
pmm_öô
();

116 
pmm_öô_≠
();

	@kern-ucore/arch/x86_64/glue-ucore/trap.c

1 
	~<ty≥s.h
>

2 
	~<mmu.h
>

3 
	~<memœyout.h
>

4 
	~<å≠.h
>

5 
	~<¨ch.h
>

6 
	~<°dio.h
>

7 
	~<kdebug.h
>

8 
	~<as£π.h
>

9 
	~<sync.h
>

10 
	~<m⁄ô‹.h
>

11 
	~<vmm.h
>

12 
	~<¥oc.h
>

13 
	~<sched.h
>

14 
	~<uni°d.h
>

15 
	~<sysˇŒ.h
>

16 
	~<îr‹.h
>

17 
	~<kio.h
>

18 
	~<˛ock.h
>

19 
	~<öå.h
>

20 
	~<glue_kio.h
>

21 
	~<mp.h
>

22 
	~<íåy.h
>

24 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

25 
	#idÀ¥oc
 (
	`∂s_ªad
(
idÀ¥oc
))

	)

27 
	#TICK_NUM
 30

	)

30 
	$å≠«me
(
å≠no
) {

31 c⁄° * c⁄° 
ex˙ames
[] = {

54 i‡(
å≠no
 < (
ex˙ames
)/(const * const)) {

55  
ex˙ames
[
å≠no
];

57 i‡(
å≠no
 =
T_SYSCALL
) {

60 i‡(
å≠no
 >
IRQ_OFFSET
 &&Årapno < IRQ_OFFSET + 16) {

64 
	}
}

66 
boﬁ


67 
	$å≠_ö_kî√l
(
å≠‰ame
 *
tf
) {

68  (
tf
->
tf_cs
 =(
uöt16_t
)
KERNEL_CS
);

69 
	}
}

71 c⁄° *
	gIA32Êags
[] = {

72 "CF", 
NULL
, "PF", NULL, "AF", NULL, "ZF", "SF",

73 "TF", "IF", "DF", "OF", 
NULL
, NULL, "NT", NULL,

74 "RF", "VM", "AC", "VIF", "VIP", "ID", 
NULL
, NULL,

78 
	$¥öt_å≠‰ame
(
å≠‰ame
 *
tf
) {

79 
	`k¥ötf
("å≠‰amê© %p\n", 
tf
);

80 
	`¥öt_ªgs
(&
tf
->
tf_ªgs
);

81 
	`k¥ötf
("Åø∞0x--------%08x %s\n", 
tf
->
tf_å≠no
, 
	`å≠«me
(tf->tf_trapno));

82 
	`k¥ötf
("Éº 0x%016Œx\n", 
tf
->
tf_îr
);

83 
	`k¥ötf
("Ñù 0x%016Œx\n", 
tf
->
tf_rù
);

84 
	`k¥ötf
(" c† 0x------------%04x\n", 
tf
->
tf_cs
);

85 
	`k¥ötf
(" d† 0x------------%04x\n", 
tf
->
tf_ds
);

86 
	`k¥ötf
("É† 0x------------%04x\n", 
tf
->
tf_es
);

87 
	`k¥ötf
(" fœg 0x%016Œx\n", 
tf
->
tf_rÊags
);

88 
	`k¥ötf
("Ñ• 0x%016Œx\n", 
tf
->
tf_r•
);

89 
	`k¥ötf
(" s† 0x------------%04x\n", 
tf
->
tf_ss
);

91 
i
, 
j
;

92 
i
 = 0, 
j
 = 1; i < (
IA32Êags
) / (IA32flags[0]); i ++, j <<= 1) {

93 i‡((
tf
->
tf_rÊags
 & 
j
Ë&& 
IA32Êags
[
i
] !
NULL
) {

94 
	`k¥ötf
("%s,", 
IA32Êags
[
i
]);

97 
	`k¥ötf
("IOPL=%d\n", (
tf
->
tf_rÊags
 & 
FL_IOPL_MASK
) >> 12);

98 
	}
}

101 
	$¥öt_ªgs
(
pushªgs
 *
ªgs
) {

102 
	`k¥ötf
("Ñdò 0x%016Œx\n", 
ªgs
->
ªg_rdi
);

103 
	`k¥ötf
("Ñsò 0x%016Œx\n", 
ªgs
->
ªg_rsi
);

104 
	`k¥ötf
("Ñdx 0x%016Œx\n", 
ªgs
->
ªg_rdx
);

105 
	`k¥ötf
("Ñcx 0x%016Œx\n", 
ªgs
->
ªg_rcx
);

106 
	`k¥ötf
("Ñax 0x%016Œx\n", 
ªgs
->
ªg_øx
);

107 
	`k¥ötf
("Ñ8 0x%016Œx\n", 
ªgs
->
ªg_r8
);

108 
	`k¥ötf
("Ñ9 0x%016Œx\n", 
ªgs
->
ªg_r9
);

109 
	`k¥ötf
("Ñ10 0x%016Œx\n", 
ªgs
->
ªg_r10
);

110 
	`k¥ötf
("Ñ11 0x%016Œx\n", 
ªgs
->
ªg_r11
);

111 
	`k¥ötf
("Ñbx 0x%016Œx\n", 
ªgs
->
ªg_rbx
);

112 
	`k¥ötf
("Ñb∞ 0x%016Œx\n", 
ªgs
->
ªg_rbp
);

113 
	`k¥ötf
("Ñ12 0x%016Œx\n", 
ªgs
->
ªg_r12
);

114 
	`k¥ötf
("Ñ13 0x%016Œx\n", 
ªgs
->
ªg_r13
);

115 
	`k¥ötf
("Ñ14 0x%016Œx\n", 
ªgs
->
ªg_r14
);

116 
	`k¥ötf
("Ñ15 0x%016Œx\n", 
ªgs
->
ªg_r15
);

117 
	}
}

119 
ölöe
 

120 
	$¥öt_pgÁu…
(
å≠‰ame
 *
tf
) {

126 
uöçå_t
 
addr
 = 
	`r¸2
();

127 i‡((
addr
 >> 32) & 0x8000) {

128 
addr
 |= (0xFFFFLLU << 48);

130 
	`k¥ötf
("∑gêÁu…áà0x%016Œx: %c/%¯[%s].\n", 
addr
,

131 (
tf
->
tf_îr
 & 4) ? 'U' : 'K',

132 (
tf
->
tf_îr
 & 2) ? 'W' : 'R',

133 (
tf
->
tf_îr
 & 1) ? "protection fault" : "noÖage found");

134 
	}
}

137 
	$pgÁu…_h™dÀr
(
å≠‰ame
 *
tf
) {

138 
mm_°ru˘
 *
check_mm_°ru˘
;

139 
mm_°ru˘
 *
mm
;

140 i‡(
check_mm_°ru˘
 !
NULL
) {

141 
	`as£π
(
cuºít
 =
idÀ¥oc
);

142 
mm
 = 
check_mm_°ru˘
;

145 i‡(
cuºít
 =
NULL
) {

146 
	`¥öt_å≠‰ame
(
tf
);

147 
	`¥öt_pgÁu…
(
tf
);

148 
	`∑nic
("unhandledÖage fault.\n");

150 
mm
 = 
cuºít
->mm;

152  
	`do_pgÁu…
(
mm
, 
tf
->
tf_îr
, 
	`r¸2
());

153 
	}
}

156 
	$å≠_di•©ch
(
å≠‰ame
 *
tf
) {

157 
c
;

158 
ªt
;

160 
tf
->
tf_å≠no
) {

161 
T_PGFLT
:

162 i‡((
ªt
 = 
	`pgÁu…_h™dÀr
(
tf
)) != 0) {

163 
	`¥öt_å≠‰ame
(
tf
);

164 i‡(
cuºít
 =
NULL
) {

165 
	`∑nic
("h™dÀÖgÁu… faûed. %e\n", 
ªt
);

168 i‡(
	`å≠_ö_kî√l
(
tf
)) {

169 
	`∑nic
("h™dÀÖgÁu… faûed i¿kî√»mode. %e\n", 
ªt
);

171 
	`k¥ötf
("killed by kernel.\n");

172 
	`do_exô
(-
E_KILLED
);

176 
T_SYSCALL
:

178 
	`sysˇŒ
();

180 
IRQ_OFFSET
 + 
IRQ_TIMER
:

181 
ticks
 ++;

183 
	`as£π
(
cuºít
 !
NULL
);

184 
	`run_timî_li°
();

186 
IRQ_OFFSET
 + 
IRQ_COM1
:

187 
IRQ_OFFSET
 + 
IRQ_KBD
:

188 
c
 = 
	`kc⁄s_gëc
();

190 
	`dev_°dö_wrôe
(
c
);

191 
	`dev_°dö_wrôe
(
c
);

193 
IRQ_OFFSET
 + 
IRQ_IDE1
:

194 
IRQ_OFFSET
 + 
IRQ_IDE2
:

198 
	`¥öt_å≠‰ame
(
tf
);

199 i‡(
cuºít
 !
NULL
) {

200 
	`k¥ötf
("unhandledÅrap.\n");

201 
	`do_exô
(-
E_KILLED
);

203 
	`∑nic
("unexpectedÅrap in kernel.\n");

206 i‡(
tf
->
tf_å≠no
 >
IRQ_OFFSET
 &&

207 
tf
->
tf_å≠no
 < 
IRQ_OFFSET
 + 
IRQ_COUNT
)

208 
	`úq_ack
(
tf
->
tf_å≠no
 - 
IRQ_OFFSET
);

209 
	}
}

212 
	$å≠
(
å≠‰ame
 *
tf
) {

214 i‡(
cuºít
 =
NULL
) {

215 
	`å≠_di•©ch
(
tf
);

219 
å≠‰ame
 *
Ÿf
 = 
cuºít
->
tf
;

220 
cuºít
->
tf
 =Åf;

222 
boﬁ
 
ö_kî√l
 = 
	`å≠_ö_kî√l
(
tf
);

223 i‡(!
ö_kî√l
 || (
cuºít
 =
idÀ¥oc
 && 
Ÿf
 =
NULL
))

224 
	`kîn_íãr
(
tf
->
tf_å≠no
 + 1000);

227 
	`å≠_di•©ch
(
tf
);

228 
ö_kî√l
 = 
	`å≠_ö_kî√l
(
cuºít
->
tf
);

231 
cuºít
->
tf
 = 
Ÿf
;

232 i‡(!
ö_kî√l
) {

233 
	`may_kûÀd
();

234 i‡(
cuºít
->
√ed_ªsched
) {

235 
	`scheduÀ
();

238 i‡(
cuºít
 =
idÀ¥oc
 && 
öô_föished
)

240 
	`scheduÀ
();

244 i‡(!
ö_kî√l
 || (
cuºít
 =
idÀ¥oc
 && 
Ÿf
 =
NULL
))

245 
	`kîn_Àave
();

247 
	}
}

249 
	~<pmm.h
>

250 
	~<©om.h
>

252 
	$ùi
(
å≠‰ame
 *
tf
)

254 
œpic_id
 = 
	`∂s_ªad
(lapic_id);

255 i‡(
ùi_øi£
[
œpic_id
])

258 
	`éb_övÆid©e
(
m±i_pgdú
, 
m±i_œ
);

261 
m±i_íd
 == 0);

262 
ùi_øi£
[
œpic_id
] = 0;

266 
	}
}

269 
	$å≠_öô
()

271 
i
;

272 
i
 = 0; i < 32; ++ i)

273 
	`öå_h™dÀr_£t
(
i
, 
å≠
);

274 
	`öå_h™dÀr_£t
(
T_SYSCALL
, 
å≠
);

275 
	`öå_h™dÀr_£t
(
T_IPI
, 
ùi
);

277 
	`öå_h™dÀr_£t
(
IRQ_OFFSET
 + 
IRQ_TIMER
, 
å≠
);

278 
	`öå_h™dÀr_£t
(
IRQ_OFFSET
 + 
IRQ_COM1
, 
å≠
);

279 
	`öå_h™dÀr_£t
(
IRQ_OFFSET
 + 
IRQ_KBD
, 
å≠
);

280 
	`úq_íabÀ
(
IRQ_KBD
);

281 
	}
}

284 
	$å≠_öô_≠
()

286 
i
;

287 
i
 = 0; i < 32; ++ i)

288 
	`öå_h™dÀr_£t
(
i
, 
å≠
);

289 
	`öå_h™dÀr_£t
(
T_SYSCALL
, 
å≠
);

290 
	`öå_h™dÀr_£t
(
T_IPI
, 
ùi
);

292 
	`öå_h™dÀr_£t
(
IRQ_OFFSET
 + 
IRQ_TIMER
, 
å≠
);

293 
	}
}

	@kern-ucore/arch/x86_64/glue-ucore/trap.h

1 #i‚de‡
__GLUE_UCORE_TRAP_H__


2 
	#__GLUE_UCORE_TRAP_H__


	)

4 
	~<ty≥s.h
>

5 
	~<glue_öå.h
>

7 
å≠_öô
();

8 
å≠_öô_≠
();

9 
¥öt_å≠‰ame
(
å≠‰ame
 *
tf
);

10 
¥öt_ªgs
(
pushªgs
 *
ªgs
);

11 
boﬁ
 
å≠_ö_kî√l
(
å≠‰ame
 *
tf
);

	@kern-ucore/arch/x86_64/mm/pmm.c

1 
	~<pmm.h
>

2 
	~<¨ch.h
>

7 
	$éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
) {

8 i‡(
	`r¸3
(Ë=
	`PADDR
(
pgdú
)) {

9 
	`övÕg
((*)
œ
);

11 
	}
}

17 
	$£t_pgdú
 (
¥oc_°ru˘
 *
¥oc
, 
pgd_t
 *
pgdú
) {

18 
	`as£π
 (
¥oc
 !
NULL
);

19 
¥oc
->
¸3
 = 
	`PADDR
(
pgdú
);

20 
	}
}

26 
	$lﬂd_pgdú
 (
¥oc_°ru˘
 *
¥oc
) {

27 i‡(
¥oc
 !
NULL
)

28 
	`l¸3
 (
¥oc
->
¸3
);

30 
	`l¸3
 (
	`PADDR
(
	`öô_pgdú_gë
()));

31 
	}
}

37 
	$m≠_pgdú
 (
pgd_t
 *
pgdú
) {

38 
	`±ï_m≠
(&(
pgdú
[
	`PGX
(
VPT
)]), 
	`PADDR
(pgdir));

39 
	`±ï_£t_s_wrôe
(&(
pgdú
[
	`PGX
(
VPT
)]));

40 
	}
}

	@kern-ucore/arch/x86_64/mm/swap.c

1 
	~<pmm.h
>

2 
	~<vmm.h
>

3 
	~<sw≠.h
>

4 
	~<sw≠fs.h
>

5 
	~<¶ab.h
>

6 
	~<°rög.h
>

7 
	~<îr‹.h
>

8 
	~<kio.h
>

11 
li°_íåy_t
 
	msw≠_li°
;

12 
size_t
 
	mƒ_∑ges
;

13 } 
	tsw≠_li°_t
;

15 *
mem_m≠
;

16 
sw≠_li°_t
 
a˘ive_li°
;

17 
sw≠_li°_t
 
öa˘ive_li°
;

19 
	#ƒ_a˘ive_∑ges
 (
a˘ive_li°
.
ƒ_∑ges
)

	)

20 
	#ƒ_öa˘ive_∑ges
 (
öa˘ive_li°
.
ƒ_∑ges
)

	)

22 
	#SWAP_UNUSED
 0xFFFF

	)

24 
∑ge_œundî
();

25 
ªfûl_öa˘ive_sˇn
();

26 
sw≠_out_mm
(
mm_°ru˘
 *
mm
, 
size_t
 
ªquúe
);

29 
	$check_mm_sw≠
() {

30 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

31 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

33 
ªt
, 
i
, 
j
;

34 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

35 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

38 
mm_°ru˘
 *
check_mm_°ru˘
;

39 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

43 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

44 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

46 
uöçå_t
 
addr0
, 
addr1
;

48 
addr0
 = 0;

50 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PUSIZE
, 0, 
NULL
);

51 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PUSIZE
)Ë? 0 : -
E_INVAL
);

52 
addr0
 +
PUSIZE
;

53 } !((
addr0
 >> 48) & 0xFFFF));

55 
addr0
 = 0;

56 
i
 = 0; i < 1024; i ++, 
addr0
 +
PUSIZE
) {

57 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

58 
	`as£π
(
ªt
 =-
E_INVAL
);

61 
	`mm_de°roy
(
mm0
);

64 
mm0
 = 
	`mm_¸óã
();

65 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

67 
addr0
 = 0, 
i
 = 0;

69 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PUSIZE
 - 
PGSIZE
, 0, 
NULL
);

70 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PUSIZE
)Ë? 0 : -
E_INVAL
);

71 i‡(
ªt
 == 0) {

72 
i
 ++;

74 
addr0
 +
PUSIZE
;

75 } !((
addr0
 >> 48) & 0xFFFF));

77 
addr0
 = 0, 
j
 = 0;

79 
addr0
 +
PUSIZE
 - 
PGSIZE
;

80 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PGSIZE
, 0, 
NULL
);

81 
	`as£π
(
ªt
 =(
	`USER_ACCESS
(
addr0
,áddr0 + 
PGSIZE
)Ë? 0 : -
E_INVAL
);

82 i‡(
ªt
 == 0) {

83 
j
 ++;

85 
addr0
 +
PGSIZE
;

86 } !((
addr0
 >> 48) & 0xFFFF));

88 
	`as£π
(
j
 + 1 >
i
);

90 
	`mm_de°roy
(
mm0
);

92 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

93 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

95 
	`k¥ötf
("check_mm_swap: step1, mm_map ok.\n");

99 
mm0
 = 
	`mm_¸óã
();

100 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

104 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

105 
	`as£π
(
∑ge
 !
NULL
);

106 
pgd_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

107 
	`mem˝y
(
pgdú
, 
	`öô_pgdú_gë
(), 
PGSIZE
);

108 
	`±ï_m≠
(&(
pgdú
[
	`PGX
(
VPT
)]), 
	`PADDR
(pgdir));

109 
	`±ï_£t_s_wrôe
(&(
pgdú
[
	`PGX
(
VPT
)]));

113 
mm0
->
pgdú
 =Ögdir;

114 
check_mm_°ru˘
 = 
mm0
;

115 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

117 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

118 
vma_°ru˘
 *
vma
;

120 
addr0
 = 0;

122 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, &
vma
)) == 0) {

125 
addr0
 +
PUSIZE
;

126 } !((
addr0
 >> 48) & 0xFFFF));

128 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

129 
	`as£π
(
vma
->
vm_°¨t
 =
addr0
 && vma->
vm_íd
 =addr0 + 
PTSIZE
);

133 
±e_t
 *
±ï
;

134 
addr1
 = 
addr0
;áddr1 <áddr0 + 
PTSIZE
;áddr1 +
PGSIZE
) {

135 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr1
, 0);

136 
	`as£π
(
±ï
 =
NULL
);

139 
	`mem£t
((*)
addr0
, 0xEF, 
PGSIZE
 * 2);

140 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

141 
	`as£π
(
±ï
 !
NULL
 && 
	`±ï_¥e£¡
(ptep));

142 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

143 
	`as£π
(
±ï
 !
NULL
 && 
	`±ï_¥e£¡
(ptep));

145 
ªt
 = 
	`mm_unm≠
(
mm0
, - 
PTSIZE
, PTSIZE);

146 
	`as£π
(
ªt
 =-
E_INVAL
);

147 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PTSIZE
, 
PGSIZE
);

148 
	`as£π
(
ªt
 == 0);

150 
addr1
 = 
addr0
 + 
PTSIZE
 / 2;

151 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
);

152 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

154 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4);

155 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 3);

157 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
 * 6, 0, 
NULL
);

158 
	`as£π
(
ªt
 =-
E_INVAL
);

159 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 0, 
NULL
);

160 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 4);

161 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
 + 2 * 
PGSIZE
, PGSIZE * 4, 0, 
NULL
);

162 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 5);

164 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, 
PTSIZE
 / 2 - PGSIZE);

165 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 1);

167 
addr1
 = 
addr0
 + 
PGSIZE
;

168 
i
 = 0; i < 
PGSIZE
; i ++) {

169 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0xEF);

172 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
 + 
PGSIZE
 / 2, PGSIZE / 4);

173 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

174 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
, 0);

175 
	`as£π
(
±ï
 !
NULL
 && 
	`±ï_¥e£¡
(ptep));

176 
±ï
 = 
	`gë_±e
(
pgdú
, 
addr0
 + 
PGSIZE
, 0);

177 
	`as£π
(
±ï
 !
NULL
 && 
	`±ï_övÆid
(ptep));

179 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr1
, 
PGSIZE
, 
vm_Êags
, 
NULL
);

180 
	`mem£t
((*)
addr1
, 0x88, 
PGSIZE
);

181 
	`as£π
(*(*)
addr1
 =()0x88 && 
mm0
->
m≠_cou¡
 == 3);

183 
i
 = 1; i < 16; i += 2) {

184 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE);

185 
	`as£π
(
ªt
 == 0);

186 i‡(
i
 < 8) {

187 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 
i
, PGSIZE, 0, 
NULL
);

188 
	`as£π
(
ªt
 == 0);

191 
	`as£π
(
mm0
->
m≠_cou¡
 == 13);

193 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
 + 
PGSIZE
 * 2, 
PTSIZE
 - PGSIZE * 2);

194 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 2);

196 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PGSIZE
 * 2);

197 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

199 
	`k¥ötf
("check_mm_swap: step2, mm_unmap ok.\n");

203 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

204 
	`as£π
(
ªt
 == 0);

206 
i
 = 0, 
addr1
 = 
addr0
; i < 4; i ++,áddr1 +
PGSIZE
) {

207 *(*)
addr1
 = ()0xFF;

210 
	`exô_mm≠
(
mm0
);

211 
i
 = 0; i < 
	`PGX
(
SVBASE
); i ++) {

212 
	`as£π
(
pgdú
[
i
] == 0);

215 
	`k¥ötf
("check_mm_swap: step3,Éxit_mmap ok.\n");

219 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

220 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

223 
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
, 
vm_Êags
, 
NULL
);

224 
	`as£π
(
ªt
 != 0);

226 
addr1
 = 
addr0
;

227 
i
 = 0; i < 4; i ++, 
addr1
 +
PGSIZE
) {

228 *(*)
addr1
 = ()(
i
 * i);

231 
ªt
 = 0;

232 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

233 
ªt
 +
	`sw≠_out_mm
(
mm0
, 10);

234 
	`as£π
(
ªt
 == 4);

236 ; 
i
 < 8; i ++, 
addr1
 +
PGSIZE
) {

237 *(*)
addr1
 = ()(
i
 * i);

242 
mm1
 = 
	`mm_¸óã
();

243 
	`as£π
(
mm1
 !
NULL
);

245 
∑ge
 = 
	`Æloc_∑ge
();

246 
	`as£π
(
∑ge
 !
NULL
);

247 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

248 
	`mem˝y
(
pgdú
, 
	`öô_pgdú_gë
(), 
PGSIZE
);

249 
	`±ï_m≠
(&(
pgdú
[
	`PGX
(
VPT
)]), 
	`PADDR
(pgdir));

250 
	`±ï_£t_s_wrôe
(&(
pgdú
[
	`PGX
(
VPT
)]));

251 
mm1
->
pgdú
 =Ögdir;

253 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

254 
	`as£π
(
ªt
 == 0);

258 
check_mm_°ru˘
 = 
mm1
;

259 
	`l¸3
(
	`PADDR
(
mm1
->
pgdú
));

261 
addr1
 = 
addr0
;

262 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

263 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

264 *(*)
addr1
 = ()0x88;

269 
check_mm_°ru˘
 = 
mm0
;

270 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

272 
addr1
 = 
addr0
;

273 
i
 = 0; i < 8; i ++, 
addr1
 +
PGSIZE
) {

274 
	`as£π
(*(*)
addr1
 =()(
i
 * i));

279 
check_mm_°ru˘
 = 
NULL
;

280 
	`l¸3
(
	`PADDR
(
	`öô_pgdú_gë
()));

284 
	`exô_mm≠
(
mm0
);

285 
	`exô_mm≠
(
mm1
);

287 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

288 
	`mm_de°roy
(
mm0
);

289 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

290 
	`mm_de°roy
(
mm1
);

292 
	`k¥ötf
("check_mm_swap: step4, dup_mmap ok.\n");

294 
	`ªfûl_öa˘ive_sˇn
();

295 
	`∑ge_œundî
();

296 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

297 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

300 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

301 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

303 
	`k¥ötf
("check_mm_swap() succeeded.\n");

304 
	}
}

307 
	$check_mm_shm_sw≠
() {

308 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

309 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

311 
ªt
, 
i
;

312 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

313 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

316 
mm_°ru˘
 *
check_mm_°ru˘
;

317 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

319 
mm_°ru˘
 *
mm0
 = 
	`mm_¸óã
(), *
mm1
;

320 
	`as£π
(
mm0
 !
NULL
 && 
	`li°_em±y
(&(mm0->
mm≠_li°
)));

322 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

323 
	`as£π
(
∑ge
 !
NULL
);

324 
pgd_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

325 
	`mem˝y
(
pgdú
, 
	`öô_pgdú_gë
(), 
PGSIZE
);

326 
	`±ï_m≠
(&(
pgdú
[
	`PGX
(
VPT
)]), 
	`PADDR
(pgdir));

327 
	`±ï_£t_s_wrôe
(&(
pgdú
[
	`PGX
(
VPT
)]));

329 
mm0
->
pgdú
 =Ögdir;

330 
check_mm_°ru˘
 = 
mm0
;

331 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

333 
uöt32_t
 
vm_Êags
 = 
VM_WRITE
 | 
VM_READ
;

335 
uöçå_t
 
addr0
, 
addr1
;

337 
addr0
 = 0;

339 i‡((
ªt
 = 
	`mm_m≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4, 
vm_Êags
, 
NULL
)) == 0) {

342 
addr0
 +
PTSIZE
;

343 } 
addr0
 != 0);

345 
	`as£π
(
ªt
 =0 && 
addr0
 !0 && 
mm0
->
m≠_cou¡
 == 1);

347 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr0
, 
PTSIZE
 * 4);

348 
	`as£π
(
ªt
 =0 && 
mm0
->
m≠_cou¡
 == 0);

350 
shmem_°ru˘
 *
shmem
 = 
	`shmem_¸óã
(
PTSIZE
 * 2);

351 
	`as£π
(
shmem
 !
NULL
 && 
	`shmem_ªf
(shmem) == 0);

355 
vma_°ru˘
 *
vma
;

357 
addr1
 = 
addr0
 + 
PTSIZE
 * 2;

358 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr0
, 
vm_Êags
, 
shmem
, &
vma
);

359 
	`as£π
(
ªt
 == 0);

360 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 1);

361 
ªt
 = 
	`mm_m≠_shmem
(
mm0
, 
addr1
, 
vm_Êags
, 
shmem
, &
vma
);

362 
	`as£π
(
ªt
 == 0);

363 
	`as£π
((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& vma->
shmem
 =shmem && 
	`shmem_ªf
(shmem) == 2);

367 
i
 = 0; i < 4; i ++) {

368 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(i * i);

370 
i
 = 0; i < 4; i ++) {

371 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(i * i));

374 
i
 = 0; i < 4; i ++) {

375 *(*)(
addr1
 + 
i
 * 
PGSIZE
) = ()(- i * i);

377 
i
 = 0; i < 4; i ++) {

378 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(- i * i));

383 
ªt
 = 
	`sw≠_out_mm
(
mm0
, 8) + swap_out_mm(mm0, 8);

384 
	`as£π
(
ªt
 =8 && 
ƒ_a˘ive_∑ges
 =4 && 
ƒ_öa˘ive_∑ges
 == 0);

386 
	`ªfûl_öa˘ive_sˇn
();

387 
	`as£π
(
ƒ_a˘ive_∑ges
 =0 && 
ƒ_öa˘ive_∑ges
 == 4);

391 
	`mem£t
((*)
addr0
, 0x77, 
PGSIZE
);

392 
i
 = 0; i < 
PGSIZE
; i ++) {

393 
	`as£π
(*(*)(
addr1
 + 
i
) == ()0x77);

398 
ªt
 = 
	`mm_unm≠
(
mm0
, 
addr1
, 
PGSIZE
 * 4);

399 
	`as£π
(
ªt
 == 0);

401 
addr0
 +4 * 
PGSIZE
, 
addr1
 += 4 * PGSIZE;

402 *(*)(
addr0
) = ()(0xDC);

403 
	`as£π
(*(*)(
addr1
) == ()(0xDC));

404 *(*)(
addr1
 + 
PTSIZE
) = ()(0xDC);

405 
	`as£π
(*(*)(
addr0
 + 
PTSIZE
) == ()(0xDC));

407 
	`k¥ötf
("check_mm_shm_swap: step1, share memory ok.\n");

411 
mm1
 = 
	`mm_¸óã
();

412 
	`as£π
(
mm1
 !
NULL
);

415 
∑ge
 = 
	`Æloc_∑ge
();

416 
	`as£π
(
∑ge
 !
NULL
);

417 
pgdú
 = 
	`∑ge2kva
(
∑ge
);

418 
	`mem˝y
(
pgdú
, 
	`öô_pgdú_gë
(), 
PGSIZE
);

419 
	`±ï_m≠
(&(
pgdú
[
	`PGX
(
VPT
)]), 
	`PADDR
(pgdir));

420 
	`±ï_£t_s_wrôe
(&(
pgdú
[
	`PGX
(
VPT
)]));

421 
mm1
->
pgdú
 =Ögdir;

424 
ªt
 = 
	`dup_mm≠
(
mm1
, 
mm0
);

425 
	`as£π
(
ªt
 =0 && 
	`shmem_ªf
(
shmem
) == 4);

429 
check_mm_°ru˘
 = 
mm1
;

430 
	`l¸3
(
	`PADDR
(
mm1
->
pgdú
));

432 
i
 = 0; i < 4; i ++) {

433 *(*)(
addr0
 + 
i
 * 
PGSIZE
) = ()(0x57 + i);

435 
i
 = 0; i < 4; i ++) {

436 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

439 
check_mm_°ru˘
 = 
mm0
;

440 
	`l¸3
(
	`PADDR
(
mm0
->
pgdú
));

442 
i
 = 0; i < 4; i ++) {

443 
	`as£π
(*(*)(
addr0
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

444 
	`as£π
(*(*)(
addr1
 + 
i
 * 
PGSIZE
) == ()(0x57 + i));

447 
	`sw≠_out_mm
(
mm1
, 4);

448 
	`exô_mm≠
(
mm1
);

450 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm1
->
pgdú
));

451 
	`mm_de°roy
(
mm1
);

453 
	`as£π
(
	`shmem_ªf
(
shmem
) == 2);

455 
	`k¥ötf
("check_mm_shm_swap: step2, dup_mmap ok.\n");

459 
check_mm_°ru˘
 = 
NULL
;

460 
	`l¸3
(
	`PADDR
(
	`öô_pgdú_gë
()));

462 
	`exô_mm≠
(
mm0
);

463 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm0
->
pgdú
));

464 
	`mm_de°roy
(
mm0
);

466 
	`ªfûl_öa˘ive_sˇn
();

467 
	`∑ge_œundî
();

468 
i
 = 0; i < 
max_sw≠_off£t
; i ++) {

469 
	`as£π
(
mem_m≠
[
i
] =
SWAP_UNUSED
);

472 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

473 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

475 
	`k¥ötf
("check_mm_shm_swap() succeeded.\n");

476 
	}
}

	@kern-ucore/arch/x86_64/mm/vmm.c

1 
	~<vmm.h
>

2 
	~<°rög.h
>

4 
boﬁ


5 
	$c›y_‰om_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
, 
boﬁ
 
wrôabÀ
) {

6 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
Àn
, 
wrôabÀ
)) {

9 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

11 
	}
}

13 
boﬁ


14 
	$c›y_to_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

15 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
d°
, 
Àn
, 1)) {

18 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

20 
	}
}

22 
boﬁ


23 
	$c›y_°rög
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
maxn
) {

24 
size_t
 
Æí
, 
∑π
 = 
	`ROUNDDOWN
((
uöçå_t
)
§c
 + 
PGSIZE
, PGSIZE) - (uintptr_t)src;

26 i‡(
∑π
 > 
maxn
) {

27 
∑π
 = 
maxn
;

29 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
∑π
, 0)) {

32 i‡((
Æí
 = 
	`°∫Àn
(
§c
, 
∑π
)) <Öart) {

33 
	`mem˝y
(
d°
, 
§c
, 
Æí
 + 1);

36 i‡(
∑π
 =
maxn
) {

39 
	`mem˝y
(
d°
, 
§c
, 
∑π
);

40 
d°
 +
∑π
, 
§c
 +∑π, 
maxn
 -=Öart;

41 
∑π
 = 
PGSIZE
;

43 
	}
}

	@kern-ucore/arch/x86_64/process/arch_proc.h

1 #i‚de‡
__ARCH_PROC_H__


2 
	#__ARCH_PROC_H__


	)

4 
	~<ty≥s.h
>

6 
	sc⁄ãxt
 {

7 
uöt64_t
 
	mrù
;

8 
uöt64_t
 
	mr•
;

9 
uöt64_t
 
	mrdi
;

10 
uöt64_t
 
	mrsi
;

11 
uöt64_t
 
	mrdx
;

12 
uöt64_t
 
	mrcx
;

13 
uöt64_t
 
	mr8
;

14 
uöt64_t
 
	mr9
;

15 
uöt64_t
 
	mr10
;

16 
uöt64_t
 
	mr11
;

17 
uöt64_t
 
	mrbx
;

18 
uöt64_t
 
	mrbp
;

19 
uöt64_t
 
	mr12
;

20 
uöt64_t
 
	mr13
;

21 
uöt64_t
 
	mr14
;

22 
uöt64_t
 
	mr15
;

26 
	s¨ch_¥oc_°ru˘
 {

	@kern-ucore/arch/x86_64/process/proc.c

1 
	~<¥oc.h
>

2 
	~<pmm.h
>

3 
	~<¶ab.h
>

4 
	~<°rög.h
>

5 
	~<ty≥s.h
>

6 
	~<°dlib.h
>

7 
	~<mp.h
>

9 
f‹kªt
();

10 
f‹kªts
(
å≠‰ame
 *
tf
);

13 
¥oc_°ru˘
 *

14 
	$Æloc_¥oc
() {

15 
¥oc_°ru˘
 *
¥oc
 = 
	`kmÆloc
((proc_struct));

16 i‡(
¥oc
 !
NULL
) {

17 
¥oc
->
°©e
 = 
PROC_UNINIT
;

18 
¥oc
->
pid
 = -1;

19 
¥oc
->
runs
 = 0;

20 
¥oc
->
k°ack
 = 0;

21 
¥oc
->
√ed_ªsched
 = 0;

22 
¥oc
->
∑ª¡
 = 
NULL
;

23 
¥oc
->
mm
 = 
NULL
;

24 
	`mem£t
(&(
¥oc
->
c⁄ãxt
), 0, (context));

25 
¥oc
->
tf
 = 
NULL
;

26 
¥oc
->
¸3
 = 
	`PADDR
(
	`öô_pgdú_gë
());

27 
¥oc
->
Êags
 = 0;

28 
	`mem£t
(
¥oc
->
«me
, 0, 
PROC_NAME_LEN
);

29 
¥oc
->
waô_°©e
 = 0;

30 
¥oc
->
˝å
 =Öroc->
›å
 =Öroc->
y±r
 = 
NULL
;

31 
	`li°_öô
(&(
¥oc
->
thªad_group
));

32 
¥oc
->
rq
 = 
NULL
;

33 
	`li°_öô
(&(
¥oc
->
run_lök
));

34 
¥oc
->
time_¶i˚
 = 0;

35 
¥oc
->
£m_queue
 = 
NULL
;

36 
	`evít_box_öô
(&(
¥oc
->
evít_box
));

37 
¥oc
->
fs_°ru˘
 = 
NULL
;

39  
¥oc
;

40 
	}
}

43 
	$c›y_thªad
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
, 
uöçå_t
 
r•
, 
å≠‰ame
 *
tf
) {

44 
uöçå_t
 
k°ackt›
 = 
¥oc
->
k°ack
 + 
KSTACKSIZE
;

45 
¥oc
->
tf
 = (
å≠‰ame
 *)
k°ackt›
 - 1;

46 *(
¥oc
->
tf
) = *tf;

47 
¥oc
->
tf
->
tf_ªgs
.
ªg_øx
 = 0;

48 
¥oc
->
tf
->
tf_r•
 = (
r•
 !0Ë?Ñ• : 
k°ackt›
;

49 
¥oc
->
tf
->
tf_rÊags
 |
FL_IF
;

51 
¥oc
->
c⁄ãxt
.
rù
 = (
uöçå_t
)
f‹kªt
;

52 
¥oc
->
c⁄ãxt
.
r•
 = (
uöçå_t
)’roc->
tf
);

55 
	}
}

62 
kî√l_thªad
((*
‚
)(*), *
¨g
, 
uöt32_t
 
˛⁄e_Êags
) {

63 
å≠‰ame
 
tf
;

64 
	`mem£t
(&
tf
, 0, (
å≠‰ame
));

65 
tf
.
tf_cs
 = 
KERNEL_CS
;

66 
tf
.
tf_ds
 =Åf.
tf_es
 =Åf.
tf_ss
 = 
KERNEL_DS
;

67 
tf
.
tf_ªgs
.
ªg_rdi
 = (
uöt64_t
)
‚
;

68 
tf
.
tf_ªgs
.
ªg_rsi
 = (
uöt64_t
)
¨g
;

69 
tf
.
tf_rù
 = (
uöt64_t
)
kî√l_thªad_íåy
;

70  
	`do_f‹k
(
˛⁄e_Êags
 | 
CLONE_VM
, 0, &
tf
);

71 
	}
}

77 
	$f‹kªt
() {

78 i‡(!
	`å≠_ö_kî√l
(
	`∂s_ªad
(
cuºít
)->
tf
))

80 
	`kîn_Àave
();

82 
	`f‹kªts
(
	`∂s_ªad
(
cuºít
)->
tf
);

83 
	}
}

86 
	$kî√l_execve
(c⁄° *
«me
, c⁄° **
¨gv
) {

87 
¨gc
 = 0, 
ªt
;

88 
¨gv
[
¨gc
] !
NULL
) {

89 
¨gc
 ++;

91 
asm
 volatile (

93 : "˜" (
ªt
)

94 : "i" (
T_SYSCALL
), "0" (
SYS_exec
), "D" (
«me
), "S" (
¨gc
), "d" (
¨gv
)

96  
ªt
;

97 
	}
}

99 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

102 
	$öô_√w_c⁄ãxt
 (
¥oc_°ru˘
 *
¥oc
, 
ñfhdr
 *
ñf
, 
¨gc
, ** 
k¨gv
) {

103 
uöçå_t
 
°ackt›
 = 
USTACKTOP
 - 
¨gc
 * 
PGSIZE
;

104 **
u¨gv
 = (**)(
°ackt›
 - 
¨gc
 * (*));

105 
i
;

106 
i
 = 0; i < 
¨gc
; i ++) {

107 
u¨gv
[
i
] = 
	`°r˝y
((*)(
°ackt›
 + i * 
PGSIZE
), 
k¨gv
[i]);

109 
°ackt›
 = (
uöçå_t
)
u¨gv
;

111 
å≠‰ame
 *
tf
 = 
cuºít
->tf;

112 
	`mem£t
(
tf
, 0, (
å≠‰ame
));

113 
tf
->
tf_cs
 = 
USER_CS
;

114 
tf
->
tf_ds
 = 
USER_DS
;

115 
tf
->
tf_es
 = 
USER_DS
;

116 
tf
->
tf_ss
 = 
USER_DS
;

117 
tf
->
tf_r•
 = 
°ackt›
;

118 
tf
->
tf_rù
 = 
ñf
->
e_íåy
;

119 
tf
->
tf_rÊags
 = 
FL_IF
;

120 
tf
->
tf_ªgs
.
ªg_rdi
 = 
¨gc
;

121 
tf
->
tf_ªgs
.
ªg_rsi
 = (
uöçå_t
)
u¨gv
;

124 
	}
}

128 
	$˝u_idÀ
() {

130 
	`as£π
((
	`ªad_rÊags
(Ë& 
FL_IF
) != 0);

131 
asm
 volatile ("hlt");

133 
	}
}

136 
	$do_execve_¨ch_hook
 (
¨gc
, ** 
k¨gv
) {

138 
	}
}

141 
	$de_thªad_¨ch_hook
 (
¥oc_°ru˘
 *
¥oc
Ë{
	}
}

	@kern-ucore/arch/x86_64/sync/sync.h

1 #i‚de‡
__KERN_SYNC_SYNC_H__


2 
	#__KERN_SYNC_SYNC_H__


	)

4 
	~<¨ch.h
>

5 
	~<öå.h
>

6 
	~<mmu.h
>

7 
	~<as£π.h
>

8 
	~<©omic.h
>

9 
	~<sched.h
>

11 
ölöe
 
boﬁ


12 
	$__öå_ßve
() {

13 i‡(
	`ªad_rÊags
(Ë& 
FL_IF
) {

14 
	`öå_dißbÀ
();

18 
	}
}

20 
ölöe
 

21 
	$__öå_ª°‹e
(
boﬁ
 
Êag
) {

22 i‡(
Êag
) {

23 
	`öå_íabÀ
();

25 
	}
}

27 
	#loˇl_öå_ßve
(
x
Ëdÿ{ x = 
	`__öå_ßve
(); } 0)

	)

28 
	#loˇl_öå_ª°‹e
(
x
Ë
	`__öå_ª°‹e
(x);

	)

30 
sync_öô
();

	@kern-ucore/arch/x86_64/syscall/syscall.c

1 
	~<¥oc.h
>

2 
	~<sysˇŒ.h
>

3 
	~<å≠.h
>

4 
	~<°dio.h
>

5 
	~<pmm.h
>

6 
	~<˛ock.h
>

7 
	~<îr‹.h
>

8 
	~<as£π.h
>

9 
	~<£m.h
>

10 
	~<evít.h
>

11 
	~<mbox.h
>

12 
	~<°©.h
>

13 
	~<dúít.h
>

14 
	~<sysfûe.h
>

15 
	~<kio.h
>

16 
	~<glue_kio.h
>

17 
	~<mod_m™agî.h
>

19 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

21 
uöt64_t


22 
	$sys_exô
(
uöt64_t
 
¨g
[]) {

23 
îr‹_code
 = ()
¨g
[0];

24  
	`do_exô
(
îr‹_code
);

25 
	}
}

27 
uöt64_t


28 
	$sys_f‹k
(
uöt64_t
 
¨g
[]) {

29 
å≠‰ame
 *
tf
 = 
cuºít
->tf;

30 
uöçå_t
 
°ack
 = 
tf
->
tf_r•
;

31  
	`do_f‹k
(0, 
°ack
, 
tf
);

32 
	}
}

34 
uöt64_t


35 
	$sys_waô
(
uöt64_t
 
¨g
[]) {

36 
pid
 = ()
¨g
[0];

37 *
°‹e
 = (*)
¨g
[1];

38  
	`do_waô
(
pid
, 
°‹e
);

39 
	}
}

41 
uöt64_t


42 
	$sys_exec
(
uöt64_t
 
¨g
[]) {

43 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

44 
¨gc
 = ()
¨g
[1];

45 c⁄° **
¨gv
 = (c⁄° **)
¨g
[2];

46  
	`do_execve
(
«me
, 
¨gc
, 
¨gv
);

47 
	}
}

49 
uöt64_t


50 
	$sys_˛⁄e
(
uöt64_t
 
¨g
[]) {

51 
å≠‰ame
 *
tf
 = 
cuºít
->tf;

52 
uöt32_t
 
˛⁄e_Êags
 = (uöt32_t)
¨g
[0];

53 
uöçå_t
 
°ack
 = (uöçå_t)
¨g
[1];

54 i‡(
°ack
 == 0) {

55 
°ack
 = 
tf
->
tf_r•
;

57  
	`do_f‹k
(
˛⁄e_Êags
, 
°ack
, 
tf
);

58 
	}
}

60 
uöt64_t


61 
	$sys_exô_thªad
(
uöt64_t
 
¨g
[]) {

62 
îr‹_code
 = ()
¨g
[0];

63  
	`do_exô_thªad
(
îr‹_code
);

64 
	}
}

66 
uöt64_t


67 
	$sys_yõld
(
uöt64_t
 
¨g
[]) {

68  
	`do_yõld
();

69 
	}
}

71 
uöt64_t


72 
	$sys_¶ìp
(
uöt64_t
 
¨g
[]) {

73 
time
 = ()
¨g
[0];

74  
	`do_¶ìp
(
time
);

75 
	}
}

77 
uöt64_t


78 
	$sys_kûl
(
uöt64_t
 
¨g
[]) {

79 
pid
 = ()
¨g
[0];

80  
	`do_kûl
(
pid
, -
E_KILLED
);

81 
	}
}

83 
uöt64_t


84 
	$sys_gëtime
(
uöt64_t
 
¨g
[]) {

85  ()
ticks
;

86 
	}
}

88 
uöt64_t


89 
	$sys_gëpid
(
uöt64_t
 
¨g
[]) {

90  
cuºít
->
pid
;

91 
	}
}

93 
uöt64_t


94 
	$sys_brk
(
uöt64_t
 
¨g
[]) {

95 
uöçå_t
 *
brk_°‹e
 = (uöçå_à*)
¨g
[0];

96  
	`do_brk
(
brk_°‹e
);

97 
	}
}

99 
uöt64_t


100 
	$sys_mm≠
(
uöt64_t
 
¨g
[]) {

101 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

102 
size_t
 
Àn
 = (size_t)
¨g
[1];

103 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

104  
	`do_mm≠
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

105 
	}
}

107 
uöt64_t


108 
	$sys_munm≠
(
uöt64_t
 
¨g
[]) {

109 
uöçå_t
 
addr
 = (uöçå_t)
¨g
[0];

110 
size_t
 
Àn
 = (size_t)
¨g
[1];

111  
	`do_munm≠
(
addr
, 
Àn
);

112 
	}
}

114 
uöt64_t


115 
	$sys_shmem
(
uöt64_t
 
¨g
[]) {

116 
uöçå_t
 *
addr_°‹e
 = (uöçå_à*)
¨g
[0];

117 
size_t
 
Àn
 = (size_t)
¨g
[1];

118 
uöt32_t
 
mm≠_Êags
 = (uöt32_t)
¨g
[2];

119  
	`do_shmem
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

120 
	}
}

122 
uöt64_t


123 
	$sys_putc
(
uöt64_t
 
¨g
[]) {

124 
c
 = ()
¨g
[0];

125 
	`kc⁄s_putc
(
c
);

127 
	}
}

129 
uöt64_t


130 
	$sys_pgdú
(
uöt64_t
 
¨g
[]) {

131 
	`¥öt_pgdú
(
k¥ötf
);

133 
	}
}

135 
uöt64_t


136 
	$sys_£m_öô
(
uöt64_t
 
¨g
[]) {

137 
vÆue
 = ()
¨g
[0];

138  
	`ùc_£m_öô
(
vÆue
);

139 
	}
}

141 
uöt64_t


142 
	$sys_£m_po°
(
uöt64_t
 
¨g
[]) {

143 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

144  
	`ùc_£m_po°
(
£m_id
);

145 
	}
}

147 
uöt64_t


148 
	$sys_£m_waô
(
uöt64_t
 
¨g
[]) {

149 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

150 
timeout
 = ()
¨g
[1];

151  
	`ùc_£m_waô
(
£m_id
, 
timeout
);

152 
	}
}

154 
uöt64_t


155 
	$sys_£m_‰ì
(
uöt64_t
 
¨g
[]) {

156 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

157  
	`ùc_£m_‰ì
(
£m_id
);

158 
	}
}

160 
uöt64_t


161 
	$sys_£m_gë_vÆue
(
uöt64_t
 
¨g
[]) {

162 
£m_t
 
£m_id
 = (£m_t)
¨g
[0];

163 *
vÆue_°‹e
 = (*)
¨g
[1];

164  
	`ùc_£m_gë_vÆue
(
£m_id
, 
vÆue_°‹e
);

165 
	}
}

167 
uöt64_t


168 
	$sys_evít_£nd
(
uöt64_t
 
¨g
[]) {

169 
pid
 = ()
¨g
[0];

170 
evít
 = ()
¨g
[1];

171 
timeout
 = ()
¨g
[2];

172  
	`ùc_evít_£nd
(
pid
, 
evít
, 
timeout
);

173 
	}
}

175 
uöt64_t


176 
	$sys_evít_ªcv
(
uöt64_t
 
¨g
[]) {

177 *
pid_°‹e
 = (*)
¨g
[0];

178 *
evít_°‹e
 = (*)
¨g
[1];

179 
timeout
 = ()
¨g
[2];

180  
	`ùc_evít_ªcv
(
pid_°‹e
, 
evít_°‹e
, 
timeout
);

181 
	}
}

183 
uöt64_t


184 
	$sys_mbox_öô
(
uöt64_t
 
¨g
[]) {

185 
max_¶Ÿs
 = ()
¨g
[0];

186  
	`ùc_mbox_öô
(
max_¶Ÿs
);

187 
	}
}

189 
uöt64_t


190 
	$sys_mbox_£nd
(
uöt64_t
 
¨g
[]) {

191 
id
 = ()
¨g
[0];

192 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

193 
timeout
 = ()
¨g
[2];

194  
	`ùc_mbox_£nd
(
id
, 
buf
, 
timeout
);

195 
	}
}

197 
uöt64_t


198 
	$sys_mbox_ªcv
(
uöt64_t
 
¨g
[]) {

199 
id
 = ()
¨g
[0];

200 
mboxbuf
 *
buf
 = (mboxbu‡*)
¨g
[1];

201 
timeout
 = ()
¨g
[2];

202  
	`ùc_mbox_ªcv
(
id
, 
buf
, 
timeout
);

203 
	}
}

205 
uöt64_t


206 
	$sys_mbox_‰ì
(
uöt64_t
 
¨g
[]) {

207 
id
 = ()
¨g
[0];

208  
	`ùc_mbox_‰ì
(
id
);

209 
	}
}

211 
uöt64_t


212 
	$sys_mbox_öfo
(
uöt64_t
 
¨g
[]) {

213 
id
 = ()
¨g
[0];

214 
mboxöfo
 *
öfo
 = (mboxöfÿ*)
¨g
[1];

215  
	`ùc_mbox_öfo
(
id
, 
öfo
);

216 
	}
}

218 
uöt64_t


219 
	$sys_›í
(
uöt64_t
 
¨g
[]) {

220 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

221 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

222  
	`sysfûe_›í
(
∑th
, 
›í_Êags
);

223 
	}
}

225 
uöt64_t


226 
	$sys_˛o£
(
uöt64_t
 
¨g
[]) {

227 
fd
 = ()
¨g
[0];

228  
	`sysfûe_˛o£
(
fd
);

229 
	}
}

231 
uöt64_t


232 
	$sys_ªad
(
uöt64_t
 
¨g
[]) {

233 
fd
 = ()
¨g
[0];

234 *
ba£
 = (*)
¨g
[1];

235 
size_t
 
Àn
 = (size_t)
¨g
[2];

236  
	`sysfûe_ªad
(
fd
, 
ba£
, 
Àn
);

237 
	}
}

239 
uöt64_t


240 
	$sys_wrôe
(
uöt64_t
 
¨g
[]) {

241 
fd
 = ()
¨g
[0];

242 *
ba£
 = (*)
¨g
[1];

243 
size_t
 
Àn
 = (size_t)
¨g
[2];

244  
	`sysfûe_wrôe
(
fd
, 
ba£
, 
Àn
);

245 
	}
}

247 
uöt64_t


248 
	$sys_£ek
(
uöt64_t
 
¨g
[]) {

249 
fd
 = ()
¨g
[0];

250 
off_t
 
pos
 = (off_t)
¨g
[1];

251 
whí˚
 = ()
¨g
[2];

252  
	`sysfûe_£ek
(
fd
, 
pos
, 
whí˚
);

253 
	}
}

255 
uöt64_t


256 
	$sys_f°©
(
uöt64_t
 
¨g
[]) {

257 
fd
 = ()
¨g
[0];

258 
°©
 *°© = (°© *)
¨g
[1];

259  
	`sysfûe_f°©
(
fd
, 
°©
);

260 
	}
}

262 
uöt64_t


263 
	$sys_fsync
(
uöt64_t
 
¨g
[]) {

264 
fd
 = ()
¨g
[0];

265  
	`sysfûe_fsync
(
fd
);

266 
	}
}

268 
uöt64_t


269 
	$sys_chdú
(
uöt64_t
 
¨g
[]) {

270 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

271  
	`sysfûe_chdú
(
∑th
);

272 
	}
}

274 
uöt64_t


275 
	$sys_gëcwd
(
uöt64_t
 
¨g
[]) {

276 *
buf
 = (*)
¨g
[0];

277 
size_t
 
Àn
 = (size_t)
¨g
[1];

278  
	`sysfûe_gëcwd
(
buf
, 
Àn
);

279 
	}
}

281 
uöt64_t


282 
	$sys_mkdú
(
uöt64_t
 
¨g
[]) {

283 c⁄° *
∑th
 = (c⁄° *)
¨g
[0];

284  
	`sysfûe_mkdú
(
∑th
);

285 
	}
}

287 
uöt64_t


288 
	$sys_lök
(
uöt64_t
 
¨g
[]) {

289 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

290 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

291  
	`sysfûe_lök
(
∑th1
, 
∑th2
);

292 
	}
}

294 
uöt64_t


295 
	$sys_ª«me
(
uöt64_t
 
¨g
[]) {

296 c⁄° *
∑th1
 = (c⁄° *)
¨g
[0];

297 c⁄° *
∑th2
 = (c⁄° *)
¨g
[1];

298  
	`sysfûe_ª«me
(
∑th1
, 
∑th2
);

299 
	}
}

301 
uöt64_t


302 
	$sys_u∆ök
(
uöt64_t
 
¨g
[]) {

303 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

304  
	`sysfûe_u∆ök
(
«me
);

305 
	}
}

307 
uöt64_t


308 
	$sys_gëdúíåy
(
uöt64_t
 
¨g
[]) {

309 
fd
 = ()
¨g
[0];

310 
dúít
 *
dúíç
 = (dúíà*)
¨g
[1];

311  
	`sysfûe_gëdúíåy
(
fd
, 
dúíç
);

312 
	}
}

314 
uöt64_t


315 
	$sys_dup
(
uöt64_t
 
¨g
[]) {

316 
fd1
 = ()
¨g
[0];

317 
fd2
 = ()
¨g
[1];

318  
	`sysfûe_dup
(
fd1
, 
fd2
);

319 
	}
}

321 
uöt64_t


322 
	$sys_pùe
(
uöt64_t
 
¨g
[]) {

323 *
fd_°‹e
 = (*)
¨g
[0];

324  
	`sysfûe_pùe
(
fd_°‹e
);

325 
	}
}

327 
uöt64_t


328 
	$sys_mkfifo
(
uöt64_t
 
¨g
[]) {

329 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

330 
uöt32_t
 
›í_Êags
 = (uöt32_t)
¨g
[1];

331  
	`sysfûe_mkfifo
(
«me
, 
›í_Êags
);

332 
	}
}

334 
uöt64_t


335 
	$sys_öô_moduÀ
(
uöt64_t
 
¨g
[]) {

336 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

337  
	`do_öô_moduÀ
(
«me
);

338 
	}
}

340 
uöt64_t


341 
	$sys_˛ónup_moduÀ
(
uöt64_t
 
¨g
[]) {

342 c⁄° *
«me
 = (c⁄° *)
¨g
[0];

343  
	`do_˛ónup_moduÀ
(
«me
);

344 
	}
}

346 
uöt64_t


347 
	$sys_li°_moduÀ
(
uöt64_t
 
¨g
[]) {

348 
	`¥öt_lﬂded_moduÀ
();

350 
	}
}

352 
uöt64_t


353 
	$sys_mod_add
(
uöt64_t
 
¨g
[]) {

354 
a
 = ()
¨g
[0];

355 
b
 = ()
¨g
[1];

356  
	`do_mod_add
(
a
, 
b
);

357 
	}
}

359 
uöt64_t


360 
	$sys_mod_mul
(
uöt64_t
 
¨g
[]) {

361 
a
 = ()
¨g
[0];

362 
b
 = ()
¨g
[1];

363  
	`do_mod_mul
(
a
, 
b
);

364 
	}
}

366 
	$uöt64_t
 (*
sysˇŒs
[])(
uöt64_t
 
¨g
[]) = {

367 [
SYS_exô
] 
sys_exô
,

368 [
SYS_f‹k
] 
sys_f‹k
,

369 [
SYS_waô
] 
sys_waô
,

370 [
SYS_exec
] 
sys_exec
,

371 [
SYS_˛⁄e
] 
sys_˛⁄e
,

372 [
SYS_exô_thªad
] 
sys_exô_thªad
,

373 [
SYS_yõld
] 
sys_yõld
,

374 [
SYS_kûl
] 
sys_kûl
,

375 [
SYS_¶ìp
] 
sys_¶ìp
,

376 [
SYS_gëtime
] 
sys_gëtime
,

377 [
SYS_gëpid
] 
sys_gëpid
,

378 [
SYS_brk
] 
sys_brk
,

379 [
SYS_mm≠
] 
sys_mm≠
,

380 [
SYS_munm≠
] 
sys_munm≠
,

381 [
SYS_shmem
] 
sys_shmem
,

382 [
SYS_putc
] 
sys_putc
,

383 [
SYS_pgdú
] 
sys_pgdú
,

384 [
SYS_£m_öô
] 
sys_£m_öô
,

385 [
SYS_£m_po°
] 
sys_£m_po°
,

386 [
SYS_£m_waô
] 
sys_£m_waô
,

387 [
SYS_£m_‰ì
] 
sys_£m_‰ì
,

388 [
SYS_£m_gë_vÆue
] 
sys_£m_gë_vÆue
,

389 [
SYS_evít_£nd
] 
sys_evít_£nd
,

390 [
SYS_evít_ªcv
] 
sys_evít_ªcv
,

391 [
SYS_mbox_öô
] 
sys_mbox_öô
,

392 [
SYS_mbox_£nd
] 
sys_mbox_£nd
,

393 [
SYS_mbox_ªcv
] 
sys_mbox_ªcv
,

394 [
SYS_mbox_‰ì
] 
sys_mbox_‰ì
,

395 [
SYS_mbox_öfo
] 
sys_mbox_öfo
,

396 [
SYS_›í
] 
sys_›í
,

397 [
SYS_˛o£
] 
sys_˛o£
,

398 [
SYS_ªad
] 
sys_ªad
,

399 [
SYS_wrôe
] 
sys_wrôe
,

400 [
SYS_£ek
] 
sys_£ek
,

401 [
SYS_f°©
] 
sys_f°©
,

402 [
SYS_fsync
] 
sys_fsync
,

403 [
SYS_chdú
] 
sys_chdú
,

404 [
SYS_gëcwd
] 
sys_gëcwd
,

405 [
SYS_mkdú
] 
sys_mkdú
,

406 [
SYS_lök
] 
sys_lök
,

407 [
SYS_ª«me
] 
sys_ª«me
,

408 [
SYS_u∆ök
] 
sys_u∆ök
,

409 [
SYS_gëdúíåy
] 
sys_gëdúíåy
,

410 [
SYS_dup
] 
sys_dup
,

411 [
SYS_pùe
] 
sys_pùe
,

412 [
SYS_mkfifo
] 
sys_mkfifo
,

413 [
SYS_öô_moduÀ
] 
sys_öô_moduÀ
,

414 [
SYS_˛ónup_moduÀ
] 
sys_˛ónup_moduÀ
,

415 [
SYS_li°_moduÀ
] 
sys_li°_moduÀ
,

416 [
SYS_mod_add
] 
sys_mod_add
,

417 [
SYS_mod_mul
] 
sys_mod_mul
,

418 
	}
};

420 
	#NUM_SYSCALLS
 (((
sysˇŒs
)Ë/ ((sysˇŒs[0])))

	)

423 
	$sysˇŒ
() {

424 
å≠‰ame
 *
tf
 = 
cuºít
->tf;

425 
uöt64_t
 
¨g
[6];

426 
num
 = 
tf
->
tf_ªgs
.
ªg_øx
;

427 i‡(
num
 >0 &&Çum < 
NUM_SYSCALLS
) {

428 i‡(
sysˇŒs
[
num
] !
NULL
) {

429 
¨g
[0] = 
tf
->
tf_ªgs
.
ªg_rdi
;

430 
¨g
[1] = 
tf
->
tf_ªgs
.
ªg_rsi
;

431 
¨g
[2] = 
tf
->
tf_ªgs
.
ªg_rdx
;

432 
¨g
[3] = 
tf
->
tf_ªgs
.
ªg_rcx
;

433 
¨g
[4] = 
tf
->
tf_ªgs
.
ªg_r8
;

434 
¨g
[5] = 
tf
->
tf_ªgs
.
ªg_r9
;

435 
tf
->
tf_ªgs
.
ªg_øx
 = 
sysˇŒs
[
num
](
¨g
);

439 
	`¥öt_å≠‰ame
(
tf
);

440 
	`∑nic
("undefined syscall %d,Öid = %d,Çame = %s.\n",

441 
num
, 
cuºít
->
pid
, cuºít->
«me
);

442 
	}
}

	@kern-ucore/arch/x86_64/syscall/syscall.h

1 #i‚de‡
__KERN_SYSCALL_SYSCALL_H__


2 
	#__KERN_SYSCALL_SYSCALL_H__


	)

4 
sysˇŒ
();

	@kern-ucore/fs/devs/dev.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<°©.h
>

4 
	~<dev.h
>

5 
	~<öode.h
>

6 
	~<uni°d.h
>

7 
	~<îr‹.h
>

15 
	$dev_›í
(
öode
 *
node
, 
uöt32_t
 
›í_Êags
) {

16 i‡(
›í_Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

17  -
E_INVAL
;

19 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

20  
	`d›_›í
(
dev
, 
›í_Êags
);

21 
	}
}

28 
	$dev_˛o£
(
öode
 *
node
) {

29 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

30  
	`d›_˛o£
(
dev
);

31 
	}
}

37 
	$dev_ªad
(
öode
 *
node
, 
iobuf
 *
iob
) {

38 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

39  
	`d›_io
(
dev
, 
iob
, 0);

40 
	}
}

46 
	$dev_wrôe
(
öode
 *
node
, 
iobuf
 *
iob
) {

47 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

48  
	`d›_io
(
dev
, 
iob
, 1);

49 
	}
}

55 
	$dev_io˘l
(
öode
 *
node
, 
›
, *
d©a
) {

56 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

57  
	`d›_io˘l
(
dev
, 
›
, 
d©a
);

58 
	}
}

66 
	$dev_f°©
(
öode
 *
node
, 
°©
 *stat) {

67 
ªt
;

68 
	`mem£t
(
°©
, 0, (stat));

69 i‡((
ªt
 = 
	`v›_gëty≥
(
node
, &(
°©
->
°_mode
))) != 0) {

70  
ªt
;

72 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

73 
°©
->
°_∆öks
 = 1;

74 
°©
->
°_blocks
 = 
dev
->
d_blocks
;

75 
°©
->
°_size
 = sèt->
°_blocks
 * 
dev
->
d_blocksize
;

77 
	}
}

85 
	$dev_gëty≥
(
öode
 *
node
, 
uöt32_t
 *
ty≥_°‹e
) {

86 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

87 *
ty≥_°‹e
 = (
dev
->
d_blocks
 > 0Ë? 
S_IFBLK
 : 
S_IFCHR
;

89 
	}
}

97 
	$dev_åy£ek
(
öode
 *
node
, 
off_t
 
pos
) {

98 
devi˚
 *
dev
 = 
	`v›_öfo
(
node
, device);

99 i‡(
dev
->
d_blocks
 > 0) {

100 i‡((
pos
 % 
dev
->
d_blocksize
) == 0) {

101 i‡(
pos
 >0 &&Öo†< 
dev
->
d_blocks
 * dev->
d_blocksize
) {

106  -
E_INVAL
;

107 
	}
}

122 
	$dev_lookup
(
öode
 *
node
, *
∑th
, öodê**
node_°‹e
) {

123 i‡(*
∑th
 != '\0') {

124  -
E_NOENT
;

126 
	`v›_ªf_öc
(
node
);

127 *
node_°‹e
 = 
node
;

129 
	}
}

134 c⁄° 
öode_›s
 
	gdev_node_›s
 = {

135 .
v›_magic
 = 
VOP_MAGIC
,

136 .
	gv›_›í
 = 
dev_›í
,

137 .
	gv›_˛o£
 = 
dev_˛o£
,

138 .
	gv›_ªad
 = 
dev_ªad
,

139 .
	gv›_wrôe
 = 
dev_wrôe
,

140 .
	gv›_f°©
 = 
dev_f°©
,

141 .
	gv›_fsync
 = 
NULL_VOP_PASS
,

142 .
	gv›_mkdú
 = 
NULL_VOP_NOTDIR
,

143 .
	gv›_lök
 = 
NULL_VOP_NOTDIR
,

144 .
	gv›_ª«me
 = 
NULL_VOP_NOTDIR
,

145 .
	gv›_ªadlök
 = 
NULL_VOP_INVAL
,

146 .
	gv›_symlök
 = 
NULL_VOP_NOTDIR
,

147 .
	gv›_«mefûe
 = 
NULL_VOP_PASS
,

148 .
	gv›_gëdúíåy
 = 
NULL_VOP_INVAL
,

149 .
	gv›_ª˛aim
 = 
NULL_VOP_PASS
,

150 .
	gv›_io˘l
 = 
dev_io˘l
,

151 .
	gv›_gëty≥
 = 
dev_gëty≥
,

152 .
	gv›_åy£ek
 = 
dev_åy£ek
,

153 .
	gv›_åunˇã
 = 
NULL_VOP_INVAL
,

154 .
	gv›_¸óã
 = 
NULL_VOP_NOTDIR
,

155 .
	gv›_u∆ök
 = 
NULL_VOP_NOTDIR
,

156 .
	gv›_lookup
 = 
dev_lookup
,

157 .
	gv›_lookup_∑ª¡
 = 
NULL_VOP_NOTDIR
,

160 
	#öô_devi˚
(
x
) \

162 
dev_öô_
##
	`x
(); \

163 
dev_öô_
##
	`x
(); \

164 } 0)

	)

167 
	$dev_öô
() {

168 
	`öô_devi˚
(
nuŒ
);

169 
	`öô_devi˚
(
°dö
);

170 
	`öô_devi˚
(
°dout
);

171 
	`öô_devi˚
(
disk0
);

172 
	}
}

177 
öode
 *

178 
	$dev_¸óã_öode
() {

179 
öode
 *
node
;

180 i‡((
node
 = 
	`Æloc_öode
(
devi˚
)Ë!
NULL
) {

181 
	`v›_öô
(
node
, &
dev_node_›s
, 
NULL
);

183  
node
;

184 
	}
}

	@kern-ucore/fs/devs/dev.h

1 #i‚de‡
__KERN_FS_DEVS_DEV_H__


2 
	#__KERN_FS_DEVS_DEV_H__


	)

4 
	~<ty≥s.h
>

6 
	göode
;

7 
	giobuf
;

13 
	sdevi˚
 {

14 
size_t
 
	md_blocks
;

15 
size_t
 
	md_blocksize
;

16 (*
	md_›í
)(
devi˚
 *
	mdev
, 
uöt32_t
 
	m›í_Êags
);

17 (*
	md_˛o£
)(
devi˚
 *
	mdev
);

18 (*
	md_io
)(
devi˚
 *
	mdev
, 
iobuf
 *
	miob
, 
boﬁ
 
	mwrôe
);

19 (*
	md_io˘l
)(
devi˚
 *
	mdev
, 
	m›
, *
	md©a
);

22 
	#d›_›í
(
dev
, 
›í_Êags
Ë((dev)->
	`d_›í
(dev, o≥n_Êags))

	)

23 
	#d›_˛o£
(
dev
Ë((dev)->
	`d_˛o£
(dev))

	)

24 
	#d›_io
(
dev
, 
iob
, 
wrôe
Ë((dev)->
	`d_io
(dev, iob, wrôe))

	)

25 
	#d›_io˘l
(
dev
, 
›
, 
d©a
Ë((dev)->
	`d_io˘l
(dev, op, d©a))

	)

27 
dev_öô
();

29 
öode
 *
dev_¸óã_öode
();

	@kern-ucore/fs/devs/dev_disk0.c

1 
	~<ty≥s.h
>

2 
	~<mmu.h
>

3 
	~<¶ab.h
>

4 
	~<£m.h
>

5 
	~<ide.h
>

6 
	~<öode.h
>

7 
	~<dev.h
>

8 
	~<vfs.h
>

9 
	~<iobuf.h
>

10 
	~<îr‹.h
>

11 
	~<as£π.h
>

13 
	#DISK0_BLKSIZE
 
PGSIZE


	)

14 
	#DISK0_BUFSIZE
 (4 * 
DISK0_BLKSIZE
)

	)

15 
	#DISK0_BLK_NSECT
 (
DISK0_BLKSIZE
 / 
SECTSIZE
)

	)

17 *
	gdisk0_buf„r
;

18 
£m≠h‹e_t
 
	gdisk0_£m
;

21 
	$lock_disk0
() {

22 
	`down
(&(
disk0_£m
));

23 
	}
}

26 
	$u∆ock_disk0
() {

27 
	`up
(&(
disk0_£m
));

28 
	}
}

31 
	$disk0_›í
(
devi˚
 *
dev
, 
uöt32_t
 
›í_Êags
) {

33 
	}
}

36 
	$disk0_˛o£
(
devi˚
 *
dev
) {

38 
	}
}

41 
	$disk0_ªad_blks_nﬁock
(
uöt32_t
 
blkno
, uöt32_à
nblks
) {

42 
ªt
;

43 
uöt32_t
 
£˘no
 = 
blkno
 * 
DISK0_BLK_NSECT
, 
n£cs
 = 
nblks
 * DISK0_BLK_NSECT;

44 i‡((
ªt
 = 
	`ide_ªad_£cs
(
DISK0_DEV_NO
, 
£˘no
, 
disk0_buf„r
, 
n£cs
)) != 0) {

45 
	`∑nic
("disk0:Ñead blkno = %d (sectno = %d),Çblks = %d (nsecs = %d): 0x%08x.\n",

46 
blkno
, 
£˘no
, 
nblks
, 
n£cs
, 
ªt
);

48 
	}
}

51 
	$disk0_wrôe_blks_nﬁock
(
uöt32_t
 
blkno
, uöt32_à
nblks
) {

52 
ªt
;

53 
uöt32_t
 
£˘no
 = 
blkno
 * 
DISK0_BLK_NSECT
, 
n£cs
 = 
nblks
 * DISK0_BLK_NSECT;

54 i‡((
ªt
 = 
	`ide_wrôe_£cs
(
DISK0_DEV_NO
, 
£˘no
, 
disk0_buf„r
, 
n£cs
)) != 0) {

55 
	`∑nic
("disk0: write blkno = %d (sectno = %d),Çblks = %d (nsecs = %d): 0x%08x.\n",

56 
blkno
, 
£˘no
, 
nblks
, 
n£cs
, 
ªt
);

58 
	}
}

61 
	$disk0_io
(
devi˚
 *
dev
, 
iobuf
 *
iob
, 
boﬁ
 
wrôe
) {

62 
off_t
 
off£t
 = 
iob
->
io_off£t
;

63 
size_t
 
ªsid
 = 
iob
->
io_ªsid
;

64 
uöt32_t
 
blkno
 = 
off£t
 / 
DISK0_BLKSIZE
;

65 
uöt32_t
 
nblks
 = 
ªsid
 / 
DISK0_BLKSIZE
;

68 i‡((
off£t
 % 
DISK0_BLKSIZE
Ë!0 || (
ªsid
 % DISK0_BLKSIZE) != 0) {

69  -
E_INVAL
;

73 i‡(
blkno
 + 
nblks
 > 
dev
->
d_blocks
) {

74  -
E_INVAL
;

78 i‡(
nblks
 == 0) {

82 
	`lock_disk0
();

83 
ªsid
 != 0) {

84 
size_t
 
c›õd
, 
Æí
 = 
DISK0_BUFSIZE
;

85 i‡(
wrôe
) {

86 
	`iobuf_move
(
iob
, 
disk0_buf„r
, 
Æí
, 0, &
c›õd
);

87 
	`as£π
(
c›õd
 !0 && c›õd <
ªsid
 && c›õd % 
DISK0_BLKSIZE
 == 0);

88 
nblks
 = 
c›õd
 / 
DISK0_BLKSIZE
;

89 
	`disk0_wrôe_blks_nﬁock
(
blkno
, 
nblks
);

92 i‡(
Æí
 > 
ªsid
) {

93 
Æí
 = 
ªsid
;

95 
nblks
 = 
Æí
 / 
DISK0_BLKSIZE
;

96 
	`disk0_ªad_blks_nﬁock
(
blkno
, 
nblks
);

97 
	`iobuf_move
(
iob
, 
disk0_buf„r
, 
Æí
, 1, &
c›õd
);

98 
	`as£π
(
c›õd
 =
Æí
 && c›õd % 
DISK0_BLKSIZE
 == 0);

100 
ªsid
 -
c›õd
, 
blkno
 +
nblks
;

102 
	`u∆ock_disk0
();

104 
	}
}

107 
	$disk0_io˘l
(
devi˚
 *
dev
, 
›
, *
d©a
) {

108  -
E_UNIMP
;

109 
	}
}

112 
	$disk0_devi˚_öô
(
devi˚
 *
dev
) {

113 
	`°©ic_as£π
(
DISK0_BLKSIZE
 % 
SECTSIZE
 == 0);

114 i‡(!
	`ide_devi˚_vÆid
(
DISK0_DEV_NO
)) {

115 
	`∑nic
("disk0 device isn'távailable.\n");

117 
dev
->
d_blocks
 = 
	`ide_devi˚_size
(
DISK0_DEV_NO
Ë/ 
DISK0_BLK_NSECT
;

118 
dev
->
d_blocksize
 = 
DISK0_BLKSIZE
;

119 
dev
->
d_›í
 = 
disk0_›í
;

120 
dev
->
d_˛o£
 = 
disk0_˛o£
;

121 
dev
->
d_io
 = 
disk0_io
;

122 
dev
->
d_io˘l
 = 
disk0_io˘l
;

123 
	`£m_öô
(&(
disk0_£m
), 1);

125 
	`°©ic_as£π
(
DISK0_BUFSIZE
 % 
DISK0_BLKSIZE
 == 0);

126 i‡((
disk0_buf„r
 = 
	`kmÆloc
(
DISK0_BUFSIZE
)Ë=
NULL
) {

127 
	`∑nic
("disk0álloc buffer failed.\n");

129 
	}
}

132 
	$dev_öô_disk0
() {

133 
öode
 *
node
;

134 i‡((
node
 = 
	`dev_¸óã_öode
()Ë=
NULL
) {

135 
	`∑nic
("disk0: dev_create_node.\n");

137 
	`disk0_devi˚_öô
(
	`v›_öfo
(
node
, 
devi˚
));

139 
ªt
;

140 i‡((
ªt
 = 
	`vfs_add_dev
("disk0", 
node
, 1)) != 0) {

141 
	`∑nic
("disk0: vfs_add_dev: %e.\n", 
ªt
);

143 
	}
}

	@kern-ucore/fs/devs/dev_null.c

5 
	~<ty≥s.h
>

6 
	~<dev.h
>

7 
	~<vfs.h
>

8 
	~<iobuf.h
>

9 
	~<öode.h
>

10 
	~<îr‹.h
>

11 
	~<as£π.h
>

15 
	$nuŒ_›í
(
devi˚
 *
dev
, 
uöt32_t
 
›í_Êags
) {

17 
	}
}

21 
	$nuŒ_˛o£
(
devi˚
 *
dev
) {

23 
	}
}

27 
	$nuŒ_io
(
devi˚
 *
dev
, 
iobuf
 *
iob
, 
boﬁ
 
wrôe
) {

32 i‡(
wrôe
) {

33 
iob
->
io_ªsid
 = 0;

36 
	}
}

40 
	$nuŒ_io˘l
(
devi˚
 *
dev
, 
›
, *
d©a
) {

41  -
E_INVAL
;

42 
	}
}

45 
	$nuŒ_devi˚_öô
(
devi˚
 *
dev
) {

46 
dev
->
d_blocks
 = 0;

47 
dev
->
d_blocksize
 = 1;

48 
dev
->
d_›í
 = 
nuŒ_›í
;

49 
dev
->
d_˛o£
 = 
nuŒ_˛o£
;

50 
dev
->
d_io
 = 
nuŒ_io
;

51 
dev
->
d_io˘l
 = 
nuŒ_io˘l
;

52 
	}
}

58 
	$dev_öô_nuŒ
() {

59 
öode
 *
node
;

60 i‡((
node
 = 
	`dev_¸óã_öode
()Ë=
NULL
) {

61 
	`∑nic
("null: dev_create_node.\n");

63 
	`nuŒ_devi˚_öô
(
	`v›_öfo
(
node
, 
devi˚
));

65 
ªt
;

66 i‡((
ªt
 = 
	`vfs_add_dev
("nuŒ", 
node
, 0)) != 0) {

67 
	`∑nic
("nuŒ: vfs_add_dev: %e.\n", 
ªt
);

69 
	}
}

	@kern-ucore/fs/devs/dev_stdin.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<waô.h
>

4 
	~<sync.h
>

5 
	~<¥oc.h
>

6 
	~<sched.h
>

7 
	~<dev.h
>

8 
	~<vfs.h
>

9 
	~<iobuf.h
>

10 
	~<öode.h
>

11 
	~<uni°d.h
>

12 
	~<îr‹.h
>

13 
	~<as£π.h
>

15 
	#STDIN_BUFSIZE
 4096

	)

17 
	g°dö_buf„r
[
STDIN_BUFSIZE
];

18 
off_t
 
	gp_Ωos
, 
	gp_wpos
;

19 
waô_queue_t
 
	g__waô_queue
, *
	gwaô_queue
 = &
__waô_queue
;

22 
	$dev_°dö_wrôe
(
c
) {

23 
boﬁ
 
öå_Êag
;

24 i‡(
c
 != '\0') {

25 
	`loˇl_öå_ßve
(
öå_Êag
);

27 
°dö_buf„r
[
p_wpos
 % 
STDIN_BUFSIZE
] = 
c
;

28 i‡(
p_wpos
 - 
p_Ωos
 < 
STDIN_BUFSIZE
) {

29 
p_wpos
 ++;

31 i‡(!
	`waô_queue_em±y
(
waô_queue
)) {

32 
	`wakeup_queue
(
waô_queue
, 
WT_KBD
, 1);

35 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

37 
	}
}

40 
	$dev_°dö_ªad
(*
buf
, 
size_t
 
Àn
) {

41 
ªt
 = 0;

42 
boﬁ
 
öå_Êag
;

43 
	`loˇl_öå_ßve
(
öå_Êag
);

45 ; 
ªt
 < 
Àn
;Ñë ++, 
p_Ωos
 ++) {

46 
åy_agaö
:

47 i‡(
p_Ωos
 < 
p_wpos
) {

48 *
buf
 ++ = 
°dö_buf„r
[
p_Ωos
 % 
STDIN_BUFSIZE
];

51 
waô_t
 
__waô
, *
waô
 = &__wait;

52 
	`waô_cuºít_£t
(
waô_queue
, 
waô
, 
WT_KBD
);

53 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

55 
	`scheduÀ
();

57 
	`loˇl_öå_ßve
(
öå_Êag
);

58 
	`waô_cuºít_dñ
(
waô_queue
, 
waô
);

59 i‡(
waô
->
wakeup_Êags
 =
WT_KBD
) {

60 
åy_agaö
;

66 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

67  
ªt
;

68 
	}
}

71 
	$°dö_›í
(
devi˚
 *
dev
, 
uöt32_t
 
›í_Êags
) {

72 i‡(
›í_Êags
 !
O_RDONLY
) {

73  -
E_INVAL
;

76 
	}
}

79 
	$°dö_˛o£
(
devi˚
 *
dev
) {

81 
	}
}

84 
	$°dö_io
(
devi˚
 *
dev
, 
iobuf
 *
iob
, 
boﬁ
 
wrôe
) {

85 i‡(!
wrôe
) {

86 
ªt
;

87 i‡((
ªt
 = 
	`dev_°dö_ªad
(
iob
->
io_ba£
, iob->
io_ªsid
)) > 0) {

88 
iob
->
io_ªsid
 -
ªt
;

90  
ªt
;

92  -
E_INVAL
;

93 
	}
}

96 
	$°dö_io˘l
(
devi˚
 *
dev
, 
›
, *
d©a
) {

97  -
E_INVAL
;

98 
	}
}

101 
	$°dö_devi˚_öô
(
devi˚
 *
dev
) {

102 
dev
->
d_blocks
 = 0;

103 
dev
->
d_blocksize
 = 1;

104 
dev
->
d_›í
 = 
°dö_›í
;

105 
dev
->
d_˛o£
 = 
°dö_˛o£
;

106 
dev
->
d_io
 = 
°dö_io
;

107 
dev
->
d_io˘l
 = 
°dö_io˘l
;

109 
p_Ωos
 = 
p_wpos
 = 0;

110 
	`waô_queue_öô
(
waô_queue
);

111 
	}
}

114 
	$dev_öô_°dö
() {

115 
öode
 *
node
;

116 i‡((
node
 = 
	`dev_¸óã_öode
()Ë=
NULL
) {

117 
	`∑nic
("stdin: dev_create_node.\n");

119 
	`°dö_devi˚_öô
(
	`v›_öfo
(
node
, 
devi˚
));

121 
ªt
;

122 i‡((
ªt
 = 
	`vfs_add_dev
("°dö", 
node
, 0)) != 0) {

123 
	`∑nic
("°dö: vfs_add_dev: %e.\n", 
ªt
);

125 
	}
}

	@kern-ucore/fs/devs/dev_stdout.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<dev.h
>

4 
	~<vfs.h
>

5 
	~<iobuf.h
>

6 
	~<öode.h
>

7 
	~<uni°d.h
>

8 
	~<îr‹.h
>

9 
	~<as£π.h
>

10 
	~<glue_kio.h
>

13 
	$°dout_›í
(
devi˚
 *
dev
, 
uöt32_t
 
›í_Êags
) {

14 i‡(
›í_Êags
 !
O_WRONLY
) {

15  -
E_INVAL
;

18 
	}
}

21 
	$°dout_˛o£
(
devi˚
 *
dev
) {

23 
	}
}

26 
	$°dout_io
(
devi˚
 *
dev
, 
iobuf
 *
iob
, 
boﬁ
 
wrôe
) {

27 i‡(
wrôe
) {

28 *
d©a
 = 
iob
->
io_ba£
;

29 ; 
iob
->
io_ªsid
 != 0; iob->io_resid --) {

30 
	`kc⁄s_putc
(*
d©a
 ++);

34  -
E_INVAL
;

35 
	}
}

38 
	$°dout_io˘l
(
devi˚
 *
dev
, 
›
, *
d©a
) {

39  -
E_INVAL
;

40 
	}
}

43 
	$°dout_devi˚_öô
(
devi˚
 *
dev
) {

44 
dev
->
d_blocks
 = 0;

45 
dev
->
d_blocksize
 = 1;

46 
dev
->
d_›í
 = 
°dout_›í
;

47 
dev
->
d_˛o£
 = 
°dout_˛o£
;

48 
dev
->
d_io
 = 
°dout_io
;

49 
dev
->
d_io˘l
 = 
°dout_io˘l
;

50 
	}
}

53 
	$dev_öô_°dout
() {

54 
öode
 *
node
;

55 i‡((
node
 = 
	`dev_¸óã_öode
()Ë=
NULL
) {

56 
	`∑nic
("stdout: dev_create_node.\n");

58 
	`°dout_devi˚_öô
(
	`v›_öfo
(
node
, 
devi˚
));

60 
ªt
;

61 i‡((
ªt
 = 
	`vfs_add_dev
("°dout", 
node
, 0)) != 0) {

62 
	`∑nic
("°dout: vfs_add_dev: %e.\n", 
ªt
);

64 
	}
}

	@kern-ucore/fs/file.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<¶ab.h
>

4 
	~<vfs.h
>

5 
	~<¥oc.h
>

6 
	~<fûe.h
>

7 
	~<uni°d.h
>

8 
	~<iobuf.h
>

9 
	~<öode.h
>

10 
	~<°©.h
>

11 
	~<dúít.h
>

12 
	~<îr‹.h
>

13 
	~<as£π.h
>

15 
	#ã°fd
(
fd
Ë((fdË>0 && (fdË< 
FS_STRUCT_NENTRY
)

	)

17 
fûe
 *

18 
	$gë_fûem≠
() {

19 
fs_°ru˘
 *fs_°ru˘ = 
	`∂s_ªad
(
cuºít
)->fs_struct;

20 
	`as£π
(
fs_°ru˘
 !
NULL
 && 
	`fs_cou¡
(fs_struct) > 0);

21  
fs_°ru˘
->
fûem≠
;

22 
	}
}

25 
	$fûem≠_öô
(
fûe
 *
fûem≠
) {

26 
fd
;

27 
fûe
 *fûê
fûem≠
;

28 
fd
 = 0; fd < 
FS_STRUCT_NENTRY
; fd ++, 
fûe
 ++) {

29 
	`©omic_£t
(&(
fûe
->
›í_cou¡
), 0);

30 
fûe
->
°©us
 = 
FD_NONE
, fûe->
fd
 = fd;

32 
	}
}

35 
	$fûem≠_Æloc
(
fd
, 
fûe
 **
fûe_°‹e
) {

36 
fûe
 *fûê
	`gë_fûem≠
();

37 i‡(
fd
 =
NO_FD
) {

38 
fd
 = 0; fd < 
FS_STRUCT_NENTRY
; fd ++, 
fûe
 ++) {

39 i‡(
fûe
->
°©us
 =
FD_NONE
) {

40 
found
;

43  -
E_MAX_OPEN
;

46 i‡(
	`ã°fd
(
fd
)) {

47 
fûe
 +
fd
;

48 i‡(
fûe
->
°©us
 =
FD_NONE
) {

49 
found
;

51  -
E_BUSY
;

53  -
E_INVAL
;

55 
found
:

56 
	`as£π
(
	`f›í_cou¡
(
fûe
) == 0);

57 
fûe
->
°©us
 = 
FD_INIT
, fûe->
node
 = 
NULL
;

58 *
fûe_°‹e
 = 
fûe
;

60 
	}
}

63 
	$fûem≠_‰ì
(
fûe
 *file) {

64 
	`as£π
(
fûe
->
°©us
 =
FD_INIT
 || fûe->°©u†=
FD_CLOSED
);

65 
	`as£π
(
	`f›í_cou¡
(
fûe
) == 0);

66 i‡(
fûe
->
°©us
 =
FD_CLOSED
) {

67 
	`vfs_˛o£
(
fûe
->
node
);

69 
fûe
->
°©us
 = 
FD_NONE
;

70 
	}
}

73 
	$fûem≠_acquúe
(
fûe
 *file) {

74 
	`as£π
(
fûe
->
°©us
 =
FD_OPENED
);

75 
	`f›í_cou¡_öc
(
fûe
);

76 
	}
}

79 
	$fûem≠_ªÀa£
(
fûe
 *file) {

80 
	`as£π
(
fûe
->
°©us
 =
FD_OPENED
 || fûe->°©u†=
FD_CLOSED
);

81 
	`as£π
(
	`f›í_cou¡
(
fûe
) > 0);

82 i‡(
	`f›í_cou¡_dec
(
fûe
) == 0) {

83 
	`fûem≠_‰ì
(
fûe
);

85 
	}
}

88 
	$fûem≠_›í
(
fûe
 *file) {

89 
	`as£π
(
fûe
->
°©us
 =
FD_INIT
 && fûe->
node
 !
NULL
);

90 
fûe
->
°©us
 = 
FD_OPENED
;

91 
	`f›í_cou¡_öc
(
fûe
);

92 
	}
}

95 
	$fûem≠_˛o£
(
fûe
 *file) {

96 
	`as£π
(
fûe
->
°©us
 =
FD_OPENED
);

97 
	`as£π
(
	`f›í_cou¡
(
fûe
) > 0);

98 
fûe
->
°©us
 = 
FD_CLOSED
;

99 i‡(
	`f›í_cou¡_dec
(
fûe
) == 0) {

100 
	`fûem≠_‰ì
(
fûe
);

102 
	}
}

105 
	$fûem≠_dup
(
fûe
 *
to
, fûê*
‰om
) {

106 
	`as£π
(
to
->
°©us
 =
FD_INIT
 && 
‰om
->°©u†=
FD_OPENED
);

107 
to
->
pos
 = 
‰om
->pos;

108 
to
->
ªadabÀ
 = 
‰om
->readable;

109 
to
->
wrôabÀ
 = 
‰om
->writable;

110 
öode
 *
node
 = 
‰om
->node;

111 
	`v›_ªf_öc
(
node
), 
	`v›_›í_öc
(node);

112 
to
->
node
 =Çode;

113 
	`fûem≠_›í
(
to
);

114 
	}
}

116 
ölöe
 

117 
	$fd2fûe
(
fd
, 
fûe
 **
fûe_°‹e
) {

118 i‡(
	`ã°fd
(
fd
)) {

119 
fûe
 *fûê
	`gë_fûem≠
(Ë+ 
fd
;

120 i‡(
fûe
->
°©us
 =
FD_OPENED
 && fûe->
fd
 == fd) {

121 *
fûe_°‹e
 = 
fûe
;

125  -
E_INVAL
;

126 
	}
}

128 
boﬁ


129 
	$fûe_ã°fd
(
fd
, 
boﬁ
 
ªadabÀ
, boﬁ 
wrôabÀ
) {

130 
ªt
;

131 
fûe
 *file;

132 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

135 i‡(
ªadabÀ
 && !
fûe
->readable) {

138 i‡(
wrôabÀ
 && !
fûe
->writable) {

142 
	}
}

145 
	$fûe_›í
(*
∑th
, 
uöt32_t
 
›í_Êags
) {

146 
boﬁ
 
ªadabÀ
 = 0, 
wrôabÀ
 = 0;

147 
›í_Êags
 & 
O_ACCMODE
) {

148 
O_RDONLY
: 
ªadabÀ
 = 1; ;

149 
O_WRONLY
: 
wrôabÀ
 = 1; ;

150 
O_RDWR
:

151 
ªadabÀ
 = 
wrôabÀ
 = 1;

154  -
E_INVAL
;

157 
ªt
;

158 
fûe
 *file;

159 i‡((
ªt
 = 
	`fûem≠_Æloc
(
NO_FD
, &
fûe
)) != 0) {

160  
ªt
;

163 
öode
 *
node
;

164 i‡((
ªt
 = 
	`vfs_›í
(
∑th
, 
›í_Êags
, &
node
)) != 0) {

165 
	`fûem≠_‰ì
(
fûe
);

166  
ªt
;

169 
fûe
->
pos
 = 0;

170 i‡(
›í_Êags
 & 
O_APPEND
) {

171 
°©
 
__°©
, *stat = &__stat;

172 i‡((
ªt
 = 
	`v›_f°©
(
node
, 
°©
)) != 0) {

173 
	`vfs_˛o£
(
node
);

174 
	`fûem≠_‰ì
(
fûe
);

175  
ªt
;

177 
fûe
->
pos
 = 
°©
->
°_size
;

180 
fûe
->
node
 =Çode;

181 
fûe
->
ªadabÀ
 =Ñeadable;

182 
fûe
->
wrôabÀ
 = writable;

183 
	`fûem≠_›í
(
fûe
);

184  
fûe
->
fd
;

185 
	}
}

188 
	$fûe_˛o£
(
fd
) {

189 
ªt
;

190 
fûe
 *file;

191 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

192  
ªt
;

194 
	`fûem≠_˛o£
(
fûe
);

196 
	}
}

199 
	$fûe_ªad
(
fd
, *
ba£
, 
size_t
 
Àn
, size_à*
c›õd_°‹e
) {

200 
ªt
;

201 
fûe
 *file;

202 *
c›õd_°‹e
 = 0;

203 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

204  
ªt
;

206 i‡(!
fûe
->
ªadabÀ
) {

207  -
E_INVAL
;

209 
	`fûem≠_acquúe
(
fûe
);

211 
iobuf
 
__iob
, *
iob
 = 
	`iobuf_öô
(&__iob, 
ba£
, 
Àn
, 
fûe
->
pos
);

212 
ªt
 = 
	`v›_ªad
(
fûe
->
node
, 
iob
);

214 
size_t
 
c›õd
 = 
	`iobuf_u£d
(
iob
);

215 i‡(
fûe
->
°©us
 =
FD_OPENED
) {

216 
fûe
->
pos
 +
c›õd
;

218 *
c›õd_°‹e
 = 
c›õd
;

219 
	`fûem≠_ªÀa£
(
fûe
);

220  
ªt
;

221 
	}
}

224 
	$fûe_wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
, size_à*
c›õd_°‹e
) {

225 
ªt
;

226 
fûe
 *file;

227 *
c›õd_°‹e
 = 0;

228 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

229  
ªt
;

231 i‡(!
fûe
->
wrôabÀ
) {

232  -
E_INVAL
;

234 
	`fûem≠_acquúe
(
fûe
);

236 
iobuf
 
__iob
, *
iob
 = 
	`iobuf_öô
(&__iob, 
ba£
, 
Àn
, 
fûe
->
pos
);

237 
ªt
 = 
	`v›_wrôe
(
fûe
->
node
, 
iob
);

239 
size_t
 
c›õd
 = 
	`iobuf_u£d
(
iob
);

240 i‡(
fûe
->
°©us
 =
FD_OPENED
) {

241 
fûe
->
pos
 +
c›õd
;

243 *
c›õd_°‹e
 = 
c›õd
;

244 
	`fûem≠_ªÀa£
(
fûe
);

245  
ªt
;

246 
	}
}

249 
	$fûe_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
) {

250 
°©
 
__°©
, *stat = &__stat;

251 
ªt
;

252 
fûe
 *file;

253 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

254  
ªt
;

256 
	`fûem≠_acquúe
(
fûe
);

258 
whí˚
) {

259 
LSEEK_SET
: ;

260 
LSEEK_CUR
: 
pos
 +
fûe
->pos; ;

261 
LSEEK_END
:

262 i‡((
ªt
 = 
	`v›_f°©
(
fûe
->
node
, 
°©
)) == 0) {

263 
pos
 +
°©
->
°_size
;

266 : 
ªt
 = -
E_INVAL
;

269 i‡(
ªt
 == 0) {

270 i‡((
ªt
 = 
	`v›_åy£ek
(
fûe
->
node
, 
pos
)) == 0) {

271 
fûe
->
pos
 =Öos;

274 
	`fûem≠_ªÀa£
(
fûe
);

275  
ªt
;

276 
	}
}

279 
	$fûe_f°©
(
fd
, 
°©
 *stat) {

280 
ªt
;

281 
fûe
 *file;

282 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

283  
ªt
;

285 
	`fûem≠_acquúe
(
fûe
);

286 
ªt
 = 
	`v›_f°©
(
fûe
->
node
, 
°©
);

287 
	`fûem≠_ªÀa£
(
fûe
);

288  
ªt
;

289 
	}
}

292 
	$fûe_fsync
(
fd
) {

293 
ªt
;

294 
fûe
 *file;

295 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

296  
ªt
;

298 
	`fûem≠_acquúe
(
fûe
);

299 
ªt
 = 
	`v›_fsync
(
fûe
->
node
);

300 
	`fûem≠_ªÀa£
(
fûe
);

301  
ªt
;

302 
	}
}

305 
	$fûe_gëdúíåy
(
fd
, 
dúít
 *
dúíç
) {

306 
ªt
;

307 
fûe
 *file;

308 i‡((
ªt
 = 
	`fd2fûe
(
fd
, &
fûe
)) != 0) {

309  
ªt
;

311 
	`fûem≠_acquúe
(
fûe
);

313 
iobuf
 
__iob
, *
iob
 = 
	`iobuf_öô
(&__iob, 
dúíç
->
«me
, (dúíç->«me), dúíç->
off£t
);

314 i‡((
ªt
 = 
	`v›_gëdúíåy
(
fûe
->
node
, 
iob
)) == 0) {

315 
dúíç
->
off£t
 +
	`iobuf_u£d
(
iob
);

317 
	`fûem≠_ªÀa£
(
fûe
);

318  
ªt
;

319 
	}
}

322 
	$fûe_dup
(
fd1
, 
fd2
) {

323 
ªt
;

324 
fûe
 *
fûe1
, *
fûe2
;

325 i‡((
ªt
 = 
	`fd2fûe
(
fd1
, &
fûe1
)) != 0) {

326  
ªt
;

328 i‡((
ªt
 = 
	`fûem≠_Æloc
(
fd2
, &
fûe2
)) != 0) {

329  
ªt
;

331 
	`fûem≠_dup
(
fûe2
, 
fûe1
);

332  
fûe2
->
fd
;

333 
	}
}

336 
	$fûe_pùe
(
fd
[]) {

337 
ªt
;

338 
fûe
 *fûe[2] = {
NULL
, NULL};

339 i‡((
ªt
 = 
	`fûem≠_Æloc
(
NO_FD
, &
fûe
[0])) != 0) {

340 
Áûed_˛ónup
;

342 i‡((
ªt
 = 
	`fûem≠_Æloc
(
NO_FD
, &
fûe
[1])) != 0) {

343 
Áûed_˛ónup
;

346 i‡((
ªt
 = 
	`pùe_›í
(&(
fûe
[0]->
node
), &(file[1]->node))) != 0) {

347 
Áûed_˛ónup
;

349 
fûe
[0]->
pos
 = 0;

350 
fûe
[0]->
ªadabÀ
 = 1, fûe[0]->
wrôabÀ
 = 0;

351 
	`fûem≠_›í
(
fûe
[0]);

353 
fûe
[1]->
pos
 = 0;

354 
fûe
[1]->
ªadabÀ
 = 0, fûe[1]->
wrôabÀ
 = 1;

355 
	`fûem≠_›í
(
fûe
[1]);

357 
fd
[0] = 
fûe
[0]->fd, fd[1] = file[1]->fd;

360 
Áûed_˛ónup
:

361 i‡(
fûe
[0] !
NULL
) {

362 
	`fûem≠_‰ì
(
fûe
[0]);

364 i‡(
fûe
[1] !
NULL
) {

365 
	`fûem≠_‰ì
(
fûe
[1]);

367  
ªt
;

368 
	}
}

371 
	$fûe_mkfifo
(c⁄° *
__«me
, 
uöt32_t
 
›í_Êags
) {

372 
boﬁ
 
ªad⁄ly
 = 0;

373 
›í_Êags
 & 
O_ACCMODE
) {

374 
O_RDONLY
:

375 
ªad⁄ly
 = 1;

376 
O_WRONLY
:

379  -
E_INVAL
;

382 
ªt
;

383 
fûe
 *file;

384 i‡((
ªt
 = 
	`fûem≠_Æloc
(
NO_FD
, &
fûe
)) != 0) {

385  
ªt
;

388 *
«me
;

389 c⁄° *
devi˚
 = 
ªad⁄ly
 ? "pipe:r_" : "pipe:w_";

391 i‡((
«me
 = 
	`°ødd
(
devi˚
, 
__«me
)Ë=
NULL
) {

392 
ªt
 = -
E_NO_MEM
;

393 
Áûed_˛ónup_fûe
;

396 i‡((
ªt
 = 
	`vfs_›í
(
«me
, 
›í_Êags
, &(
fûe
->
node
))) != 0) {

397 
Áûed_˛ónup_«me
;

399 
fûe
->
pos
 = 0;

400 
fûe
->
ªadabÀ
 = 
ªad⁄ly
, fûe->
wrôabÀ
 = !readonly;

401 
	`fûem≠_›í
(
fûe
);

402 
	`k‰ì
(
«me
);

403  
fûe
->
fd
;

405 
Áûed_˛ónup_«me
:

406 
	`k‰ì
(
«me
);

407 
Áûed_˛ónup_fûe
:

408 
	`fûem≠_‰ì
(
fûe
);

409  
ªt
;

410 
	}
}

	@kern-ucore/fs/file.h

1 #i‚de‡
__KERN_FS_FILE_H__


2 
	#__KERN_FS_FILE_H__


	)

4 
	~<ty≥s.h
>

5 
	~<fs.h
>

6 
	~<¥oc.h
>

7 
	~<©omic.h
>

8 
	~<as£π.h
>

10 
	göode
;

11 
	g°©
;

12 
	gdúít
;

14 
	sfûe
 {

16 
	mFD_NONE
, 
	mFD_INIT
, 
	mFD_OPENED
, 
	mFD_CLOSED
,

17 } 
	m°©us
;

18 
boﬁ
 
	mªadabÀ
;

19 
boﬁ
 
	mwrôabÀ
;

20 
	mfd
;

21 
off_t
 
	mpos
;

22 
öode
 *
	mnode
;

23 
©omic_t
 
	m›í_cou¡
;

26 
fûem≠_öô
(
fûe
 *
fûem≠
);

27 
fûem≠_›í
(
fûe
 *file);

28 
fûem≠_˛o£
(
fûe
 *file);

29 
fûem≠_dup
(
fûe
 *
to
, fûê*
‰om
);

30 
boﬁ
 
fûe_ã°fd
(
fd
, boﬁ 
ªadabÀ
, boﬁ 
wrôabÀ
);

32 
fûe_›í
(*
∑th
, 
uöt32_t
 
›í_Êags
);

33 
fûe_˛o£
(
fd
);

34 
fûe_ªad
(
fd
, *
ba£
, 
size_t
 
Àn
, size_à*
c›õd_°‹e
);

35 
fûe_wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
, size_à*
c›õd_°‹e
);

36 
fûe_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
);

37 
fûe_f°©
(
fd
, 
°©
 *stat);

38 
fûe_fsync
(
fd
);

39 
fûe_gëdúíåy
(
fd
, 
dúít
 *dirent);

40 
fûe_dup
(
fd1
, 
fd2
);

41 
fûe_pùe
(
fd
[]);

42 
fûe_mkfifo
(c⁄° *
«me
, 
uöt32_t
 
›í_Êags
);

44 
ölöe
 

45 
	$f›í_cou¡
(
fûe
 *file) {

46  
	`©omic_ªad
(&(
fûe
->
›í_cou¡
));

47 
	}
}

49 
ölöe
 

50 
	$f›í_cou¡_öc
(
fûe
 *file) {

51  
	`©omic_add_ªtu∫
(&(
fûe
->
›í_cou¡
), 1);

52 
	}
}

54 
ölöe
 

55 
	$f›í_cou¡_dec
(
fûe
 *file) {

56  
	`©omic_sub_ªtu∫
(&(
fûe
->
›í_cou¡
), 1);

57 
	}
}

	@kern-ucore/fs/fs.c

1 
	~<ty≥s.h
>

2 
	~<¶ab.h
>

3 
	~<£m.h
>

4 
	~<vfs.h
>

5 
	~<dev.h
>

6 
	~<fûe.h
>

7 
	~<pùe.h
>

8 
	~<sfs.h
>

9 
	~<öode.h
>

10 
	~<as£π.h
>

13 
	$fs_öô
() {

14 
	`vfs_öô
();

15 
	`dev_öô
();

16 
	`pùe_öô
();

17 
	`sfs_öô
();

18 
	}
}

21 
	$fs_˛ónup
() {

22 
	`vfs_˛ónup
();

23 
	}
}

26 
	$lock_fs
(
fs_°ru˘
 *fs_struct) {

27 
	`down
(&(
fs_°ru˘
->
fs_£m
));

28 
	}
}

31 
	$u∆ock_fs
(
fs_°ru˘
 *fs_struct) {

32 
	`up
(&(
fs_°ru˘
->
fs_£m
));

33 
	}
}

35 
fs_°ru˘
 *

36 
	$fs_¸óã
() {

37 
	`°©ic_as£π
(()
FS_STRUCT_NENTRY
 > 128);

38 
fs_°ru˘
 *fs_struct;

39 i‡((
fs_°ru˘
 = 
	`kmÆloc
((fs_°ru˘Ë+ 
FS_STRUCT_BUFSIZE
)Ë!
NULL
) {

40 
fs_°ru˘
->
pwd
 = 
NULL
;

41 
fs_°ru˘
->
fûem≠
 = (*)(fs_struct + 1);

42 
	`©omic_£t
(&(
fs_°ru˘
->
fs_cou¡
), 0);

43 
	`£m_öô
(&(
fs_°ru˘
->
fs_£m
), 1);

44 
	`fûem≠_öô
(
fs_°ru˘
->
fûem≠
);

46  
fs_°ru˘
;

47 
	}
}

50 
	$fs_de°roy
(
fs_°ru˘
 *fs_struct) {

51 
	`as£π
(
fs_°ru˘
 !
NULL
 && 
	`fs_cou¡
(fs_struct) == 0);

52 i‡(
fs_°ru˘
->
pwd
 !
NULL
) {

53 
	`v›_ªf_dec
(
fs_°ru˘
->
pwd
);

55 
i
;

56 
fûe
 *fûê
fs_°ru˘
->
fûem≠
;

57 
i
 = 0; i < 
FS_STRUCT_NENTRY
; i ++, 
fûe
 ++) {

58 i‡(
fûe
->
°©us
 =
FD_OPENED
) {

59 
	`fûem≠_˛o£
(
fûe
);

61 
	`as£π
(
fûe
->
°©us
 =
FD_NONE
);

63 
	`k‰ì
(
fs_°ru˘
);

64 
	}
}

67 
	$fs_˛o£Æl
(
fs_°ru˘
 *fs_struct) {

68 
	`as£π
(
fs_°ru˘
 !
NULL
 && 
	`fs_cou¡
(fs_struct) > 0);

69 
i
;

70 
fûe
 *fûê
fs_°ru˘
->
fûem≠
;

71 
i
 = 2, 
fûe
 +2; i < 
FS_STRUCT_NENTRY
; i ++, file ++) {

72 i‡(
fûe
->
°©us
 =
FD_OPENED
) {

73 
	`fûem≠_˛o£
(
fûe
);

76 
	}
}

79 
	$dup_fs
(
fs_°ru˘
 *
to
, fs_°ru˘ *
‰om
) {

80 
	`as£π
(
to
 !
NULL
 && 
‰om
 != NULL);

81 
	`as£π
(
	`fs_cou¡
(
to
Ë=0 && fs_cou¡(
‰om
) > 0);

82 i‡((
to
->
pwd
 = 
‰om
->pwdË!
NULL
) {

83 
	`v›_ªf_öc
(
to
->
pwd
);

85 
i
;

86 
fûe
 *
to_fûe
 = 
to
->
fûem≠
, *
‰om_fûe
 = 
‰om
->filemap;

87 
i
 = 0; i < 
FS_STRUCT_NENTRY
; i ++, 
to_fûe
 ++, 
‰om_fûe
 ++) {

88 i‡(
‰om_fûe
->
°©us
 =
FD_OPENED
) {

90 
to_fûe
->
°©us
 = 
FD_INIT
;

91 
	`fûem≠_dup
(
to_fûe
, 
‰om_fûe
);

95 
	}
}

	@kern-ucore/fs/fs.h

1 #i‚de‡
__KERN_FS_FS_H__


2 
	#__KERN_FS_FS_H__


	)

4 
	~<ty≥s.h
>

5 
	~<mmu.h
>

6 
	~<£m.h
>

7 
	~<©omic.h
>

9 
	#SECTSIZE
 512

	)

10 
	#PAGE_NSECT
 (
PGSIZE
 / 
SECTSIZE
)

	)

12 
	#SWAP_DEV_NO
 1

	)

13 
	#DISK0_DEV_NO
 2

	)

15 
fs_öô
();

16 
fs_˛ónup
();

18 
	göode
;

19 
	gfûe
;

21 
	sfs_°ru˘
 {

22 
öode
 *
	mpwd
;

23 
fûe
 *
	mfûem≠
;

24 
©omic_t
 
	mfs_cou¡
;

25 
£m≠h‹e_t
 
	mfs_£m
;

28 
	#FS_STRUCT_BUFSIZE
 (2 * 
PGSIZE
 - (
fs_°ru˘
))

	)

29 
	#FS_STRUCT_NENTRY
 (
FS_STRUCT_BUFSIZE
 / (
fûe
))

	)

31 
lock_fs
(
fs_°ru˘
 *fs_struct);

32 
u∆ock_fs
(
fs_°ru˘
 *fs_struct);

34 
fs_°ru˘
 *
fs_¸óã
();

35 
fs_de°roy
(
fs_°ru˘
 *fs_struct);

36 
fs_˛o£Æl
(
fs_°ru˘
 *fs_struct);

37 
dup_fs
(
fs_°ru˘
 *
to
, fs_°ru˘ *
‰om
);

39 
ölöe
 

40 
	$fs_cou¡
(
fs_°ru˘
 *fs_struct) {

41  
	`©omic_ªad
(&(
fs_°ru˘
->
fs_cou¡
));

42 
	}
}

44 
ölöe
 

45 
	$fs_cou¡_öc
(
fs_°ru˘
 *fs_struct) {

46  
	`©omic_add_ªtu∫
(&(
fs_°ru˘
->
fs_cou¡
), 1);

47 
	}
}

49 
ölöe
 

50 
	$fs_cou¡_dec
(
fs_°ru˘
 *fs_struct) {

51  
	`©omic_sub_ªtu∫
(&(
fs_°ru˘
->
fs_cou¡
), 1);

52 
	}
}

	@kern-ucore/fs/iobuf.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<iobuf.h
>

4 
	~<îr‹.h
>

5 
	~<as£π.h
>

7 
iobuf
 *

8 
	$iobuf_öô
(
iobuf
 *
iob
, *
ba£
, 
size_t
 
Àn
, 
off_t
 
off£t
) {

9 
iob
->
io_ba£
 = 
ba£
;

10 
iob
->
io_off£t
 = 
off£t
;

11 
iob
->
io_Àn
 = iob->
io_ªsid
 = 
Àn
;

12  
iob
;

13 
	}
}

16 
	$iobuf_move
(
iobuf
 *
iob
, *
d©a
, 
size_t
 
Àn
, 
boﬁ
 
m2b
, size_à*
c›õdp
) {

17 
size_t
 
Æí
;

18 i‡((
Æí
 = 
iob
->
io_ªsid
Ë> 
Àn
) {

19 
Æí
 = 
Àn
;

21 i‡(
Æí
 > 0) {

22 *
§c
 = 
iob
->
io_ba£
, *
d°
 = 
d©a
;

23 i‡(
m2b
) {

24 *
tmp
 = 
§c
;

25 
§c
 = 
d°
, d° = 
tmp
;

27 
	`memmove
(
d°
, 
§c
, 
Æí
);

28 
	`iobuf_skù
(
iob
, 
Æí
), 
Àn
 -=álen;

30 i‡(
c›õdp
 !
NULL
) {

31 *
c›õdp
 = 
Æí
;

33  (
Àn
 =0Ë? 0 : -
E_NO_MEM
;

34 
	}
}

37 
	$iobuf_move_zîos
(
iobuf
 *
iob
, 
size_t
 
Àn
, size_à*
c›õdp
) {

38 
size_t
 
Æí
;

39 i‡((
Æí
 = 
iob
->
io_ªsid
Ë> 
Àn
) {

40 
Æí
 = 
Àn
;

42 i‡(
Æí
 > 0) {

43 
	`mem£t
(
iob
->
io_ba£
, 0, 
Æí
);

44 
	`iobuf_skù
(
iob
, 
Æí
), 
Àn
 -=álen;

46 i‡(
c›õdp
 !
NULL
) {

47 *
c›õdp
 = 
Æí
;

49  (
Àn
 =0Ë? 0 : -
E_NO_MEM
;

50 
	}
}

53 
	$iobuf_skù
(
iobuf
 *
iob
, 
size_t
 
n
) {

54 
	`as£π
(
iob
->
io_ªsid
 >
n
);

55 
iob
->
io_ba£
 +
n
, iob->
io_off£t
 +n, iob->
io_ªsid
 -=Ç;

56 
	}
}

	@kern-ucore/fs/iobuf.h

1 #i‚de‡
__KERN_FS_IOBUF_H__


2 
	#__KERN_FS_IOBUF_H__


	)

4 
	~<ty≥s.h
>

12 
	siobuf
 {

13 *
	mio_ba£
;

14 
off_t
 
	mio_off£t
;

15 
size_t
 
	mio_Àn
;

16 
size_t
 
	mio_ªsid
;

44 
	#iobuf_u£d
(
iob
Ë((
size_t
)((iob)->
io_Àn
 - (iob)->
io_ªsid
))

	)

46 
iobuf
 *
iobuf_öô
(iobu‡*
iob
, *
ba£
, 
size_t
 
Àn
, 
off_t
 
off£t
);

47 
iobuf_move
(
iobuf
 *
iob
, *
d©a
, 
size_t
 
Àn
, 
boﬁ
 
m2b
, size_à*
c›õdp
);

51 
iobuf_move_zîos
(
iobuf
 *
iob
, 
size_t
 
Àn
, size_à*
c›õdp
);

52 
iobuf_skù
(
iobuf
 *
iob
, 
size_t
 
n
);

	@kern-ucore/fs/pipe/pipe.c

1 
	~<ty≥s.h
>

2 
	~<¶ab.h
>

3 
	~<li°.h
>

4 
	~<£m.h
>

5 
	~<vfs.h
>

6 
	~<öode.h
>

7 
	~<pùe.h
>

8 
	~<îr‹.h
>

9 
	~<as£π.h
>

12 
	$lock_pùe
(
pùe_fs
 *
pùe
) {

13 
	`down
(&(
pùe
->
pùe_£m
));

14 
	}
}

17 
	$u∆ock_pùe
(
pùe_fs
 *
pùe
) {

18 
	`up
(&(
pùe
->
pùe_£m
));

19 
	}
}

22 
	$pùe_sync
(
fs
 *fs) {

24 
	}
}

26 
öode
 *

27 
	$pùe_gë_roŸ
(
fs
 *fs) {

28 
pùe_fs
 *
pùe
 = 
	`fs›_öfo
(
fs
,Öipe);

29 
	`v›_ªf_öc
(
pùe
->
roŸ
);

30  
pùe
->
roŸ
;

31 
	}
}

34 
	$pùe_unmou¡
(
fs
 *fs) {

35  -
E_INVAL
;

36 
	}
}

39 
	$pùe_˛ónup
(
fs
 *fs) {

41 
	}
}

44 
	$pùe_fs_öô
(
fs
 *fs) {

45 
pùe_fs
 *
pùe
 = 
	`fs›_öfo
(
fs
,Öipe);

46 i‡((
pùe
->
roŸ
 = 
	`pùe_¸óã_roŸ
(
fs
)Ë=
NULL
) {

47 
	`∑nic
("pipe: createÑoot inode failed.\n");

49 
	`£m_öô
(&(
pùe
->
pùe_£m
), 1);

50 
	`li°_öô
(&(
pùe
->
pùe_li°
));

52 
fs
->
fs_sync
 = 
pùe_sync
;

53 
fs
->
fs_gë_roŸ
 = 
pùe_gë_roŸ
;

54 
fs
->
fs_unmou¡
 = 
pùe_unmou¡
;

55 
fs
->
fs_˛ónup
 = 
pùe_˛ónup
;

56 
	}
}

59 
	$pùe_öô
() {

60 
fs
 *fs;

61 i‡((
fs
 = 
	`Æloc_fs
(
pùe
)Ë=
NULL
) {

62 
	`∑nic
("pipe: createÖipe_fs failed.\n");

64 
	`pùe_fs_öô
(
fs
);

66 
ªt
;

67 i‡((
ªt
 = 
	`vfs_add_fs
("pùe", 
fs
)) != 0) {

68 
	`∑nic
("pùe: vfs_add_fs: %e.\n", 
ªt
);

70 
	}
}

	@kern-ucore/fs/pipe/pipe.h

1 #i‚de‡
__KERN_FS_PIPE_PIPE_H__


2 
	#__KERN_FS_PIPE_PIPE_H__


	)

4 
	~<ty≥s.h
>

5 
	~<li°.h
>

6 
	~<£m.h
>

8 
	gfs
;

9 
	göode
;

10 
	gpùe_°©e
;

12 
	spùe_fs
 {

13 
öode
 *
	mroŸ
;

14 
£m≠h‹e_t
 
	mpùe_£m
;

15 
li°_íåy_t
 
	mpùe_li°
;

18 
pùe_öô
();

19 
lock_pùe
(
pùe_fs
 *
pùe
);

20 
u∆ock_pùe
(
pùe_fs
 *
pùe
);

22 
	spùe_roŸ
 {

26 
	spùe_öode
 {

28 
	mPIN_RDONLY
, 
	mPIN_WRONLY
,

29 } 
	mpö_ty≥
;

30 *
	m«me
;

31 
	mª˛aim_cou¡
;

32 
pùe_°©e
 *
	m°©e
;

33 
li°_íåy_t
 
	mpùe_lök
;

36 
	#À2pö
(
À
, 
membî
) \

37 
	`to_°ru˘
((
À
), 
pùe_öode
, 
membî
)

	)

39 
öode
 *
pùe_¸óã_roŸ
(
fs
 *fs);

40 
öode
 *
pùe_¸óã_öode
(
fs
 *fs, c⁄° *
«me
, 
pùe_°©e
 *
°©e
, 
boﬁ
 
ªad⁄ly
);

41 
pùe_›í
(
öode
 **
∫ode_°‹e
, öodê**
wnode_°‹e
);

	@kern-ucore/fs/pipe/pipe_inode.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<¶ab.h
>

4 
	~<vfs.h
>

5 
	~<öode.h
>

6 
	~<pùe.h
>

7 
	~<pùe_°©e.h
>

8 
	~<iobuf.h
>

9 
	~<°©.h
>

10 
	~<uni°d.h
>

11 
	~<îr‹.h
>

12 
	~<as£π.h
>

15 
	$pùe_öode_›í
(
öode
 *
node
, 
uöt32_t
 
›í_Êags
) {

16 i‡(
›í_Êags
 & (
O_TRUNC
 | 
O_APPEND
)) {

17  -
E_INVAL
;

19 
pùe_öode
 *
pö
 = 
	`v›_öfo
(
node
,Öipe_inode);

20 
›í_Êags
 & 
O_ACCMODE
) {

21 
O_RDONLY
:

22  (
pö
->
pö_ty≥
 =
PIN_RDONLY
Ë? 0 : -
E_INVAL
;

23 
O_WRONLY
:

24  (
pö
->
pö_ty≥
 =
PIN_WRONLY
Ë? 0 : -
E_INVAL
;

26  -
E_INVAL
;

28 
	}
}

31 
	$pùe_öode_˛o£
(
öode
 *
node
) {

32 
pùe_öode
 *
pö
 = 
	`v›_öfo
(
node
,Öipe_inode);

33 
	`pùe_°©e_˛o£
(
pö
->
°©e
);

35 
	}
}

38 
	$pùe_öode_ªad
(
öode
 *
node
, 
iobuf
 *
iob
) {

39 
pùe_öode
 *
pö
 = 
	`v›_öfo
(
node
,Öipe_inode);

40 i‡(
pö
->
pö_ty≥
 !
PIN_RDONLY
) {

41  -
E_INVAL
;

43 
size_t
 
ªt
;

44 i‡((
ªt
 = 
	`pùe_°©e_ªad
(
pö
->
°©e
, 
iob
->
io_ba£
, iob->
io_ªsid
)) != 0) {

45 
	`iobuf_skù
(
iob
, 
ªt
);

48 
	}
}

51 
	$pùe_öode_wrôe
(
öode
 *
node
, 
iobuf
 *
iob
) {

52 
pùe_öode
 *
pö
 = 
	`v›_öfo
(
node
,Öipe_inode);

53 i‡(
pö
->
pö_ty≥
 !
PIN_WRONLY
) {

54  -
E_INVAL
;

56 
size_t
 
ªt
;

57 i‡((
ªt
 = 
	`pùe_°©e_wrôe
(
pö
->
°©e
, 
iob
->
io_ba£
, iob->
io_ªsid
)) != 0) {

58 
	`iobuf_skù
(
iob
, 
ªt
);

61 
	}
}

64 
	$pùe_öode_f°©
(
öode
 *
node
, 
°©
 *stat) {

65 
ªt
;

66 
	`mem£t
(
°©
, 0, (stat));

67 i‡((
ªt
 = 
	`v›_gëty≥
(
node
, &(
°©
->
°_mode
))) != 0) {

68  
ªt
;

70 
pùe_öode
 *
pö
 = 
	`v›_öfo
(
node
,Öipe_inode);

71 
°©
->
°_∆öks
 = 1;

72 
°©
->
°_blocks
 = 0;

73 
°©
->
°_size
 = 
	`pùe_°©e_size
(
pö
->
°©e
,Öö->
pö_ty≥
 =
PIN_WRONLY
);

75 
	}
}

78 
	$pùe_öode_«mefûe
(
öode
 *
node
, 
iobuf
 *
iob
) {

79 
pùe_öode
 *
pö
 = 
	`v›_öfo
(
node
,Öipe_inode);

80 
size_t
 
Àn
 = (
pö
->
«me
 !
NULL
Ë? 
	`°æí
(pin->name) : 0;

81 i‡(
iob
->
io_ªsid
 < 
Àn
 + 1) {

82  -
E_NO_MEM
;

84 i‡(
pö
->
«me
 !
NULL
) {

85 
	`mem˝y
(
iob
->
io_ba£
, 
pö
->
«me
, 
Àn
);

87 ((*)(
iob
->
io_ba£
))[
Àn
 ++] = '\0';

88 
	`iobuf_skù
(
iob
, 
Àn
);

90 
	}
}

93 
	$pùe_öode_ª˛aim
(
öode
 *
node
) {

94 
pùe_öode
 *
pö
 = 
	`v›_öfo
(
node
,Öipe_inode);

95 i‡(
pö
->
«me
 !
NULL
) {

96 
pùe_fs
 *
pùe
 = 
	`fs›_öfo
(
	`v›_fs
(
node
),Öipe);

97 
	`lock_pùe
(
pùe
);

98 
	`as£π
(
pö
->
ª˛aim_cou¡
 > 0);

99 i‡((-- 
pö
->
ª˛aim_cou¡
Ë!0 || 
	`öode_ªf_cou¡
(
node
) != 0) {

100 
	`u∆ock_pùe
(
pùe
);

101  -
E_BUSY
;

103 
	`li°_dñ
(&(
pö
->
pùe_lök
));

104 
	`u∆ock_pùe
(
pùe
);

105 
	`k‰ì
(
pö
->
«me
);

107 
	`pùe_°©e_ªÀa£
(
pö
->
°©e
);

108 
	`v›_kûl
(
node
);

110 
	}
}

113 
	$pùe_öode_gëty≥
(
öode
 *
node
, 
uöt32_t
 *
ty≥_°‹e
) {

114 *
ty≥_°‹e
 = 
S_IFCHR
;

116 
	}
}

118 c⁄° 
öode_›s
 
	gpùe_node_›s
 = {

119 .
v›_magic
 = 
VOP_MAGIC
,

120 .
	gv›_›í
 = 
pùe_öode_›í
,

121 .
	gv›_˛o£
 = 
pùe_öode_˛o£
,

122 .
	gv›_ªad
 = 
pùe_öode_ªad
,

123 .
	gv›_wrôe
 = 
pùe_öode_wrôe
,

124 .
	gv›_f°©
 = 
pùe_öode_f°©
,

125 .
	gv›_fsync
 = 
NULL_VOP_PASS
,

126 .
	gv›_mkdú
 = 
NULL_VOP_NOTDIR
,

127 .
	gv›_lök
 = 
NULL_VOP_NOTDIR
,

128 .
	gv›_ª«me
 = 
NULL_VOP_NOTDIR
,

129 .
	gv›_ªadlök
 = 
NULL_VOP_INVAL
,

130 .
	gv›_symlök
 = 
NULL_VOP_NOTDIR
,

131 .
	gv›_«mefûe
 = 
pùe_öode_«mefûe
,

132 .
	gv›_gëdúíåy
 = 
NULL_VOP_INVAL
,

133 .
	gv›_ª˛aim
 = 
pùe_öode_ª˛aim
,

134 .
	gv›_io˘l
 = 
NULL_VOP_INVAL
,

135 .
	gv›_gëty≥
 = 
pùe_öode_gëty≥
,

136 .
	gv›_åy£ek
 = 
NULL_VOP_INVAL
,

137 .
	gv›_åunˇã
 = 
NULL_VOP_INVAL
,

138 .
	gv›_¸óã
 = 
NULL_VOP_NOTDIR
,

139 .
	gv›_u∆ök
 = 
NULL_VOP_NOTDIR
,

140 .
	gv›_lookup
 = 
NULL_VOP_NOTDIR
,

141 .
	gv›_lookup_∑ª¡
 = 
NULL_VOP_NOTDIR
,

145 
	$pùe_öode_öô
(
pùe_öode
 *
pö
, *
«me
, 
pùe_°©e
 *
°©e
, 
boﬁ
 
ªad⁄ly
) {

146 
	`as£π
(
°©e
 !
NULL
);

147 
pö
->
pö_ty≥
 = 
ªad⁄ly
 ? 
PIN_RDONLY
 : 
PIN_WRONLY
;

148 
pö
->
«me
 =Çame,Öö->
°©e
 = sèã,Öö->
ª˛aim_cou¡
 = 1;

149 
	`li°_öô
(&(
pö
->
pùe_lök
));

150 
	}
}

152 
öode
 *

153 
	$pùe_¸óã_öode
(
fs
 *fs, c⁄° *
__«me
, 
pùe_°©e
 *
°©e
, 
boﬁ
 
ªad⁄ly
) {

154 *
«me
 = 
NULL
;

155 i‡(
__«me
 =
NULL
 || (
«me
 = 
	`°rdup
(__name)) != NULL) {

156 
öode
 *
node
;

157 i‡((
node
 = 
	`Æloc_öode
(
pùe_öode
)Ë!
NULL
) {

158 
	`v›_öô
(
node
, &
pùe_node_›s
, 
fs
);

159 
	`pùe_öode_öô
(
	`v›_öfo
(
node
, 
pùe_öode
), 
«me
, 
°©e
, 
ªad⁄ly
);

160  
node
;

162 i‡(
«me
 !
NULL
) {

163 
	`k‰ì
(
«me
);

166  
NULL
;

167 
	}
}

170 
	$pùe_›í
(
öode
 **
∫ode_°‹e
, öodê**
wnode_°‹e
) {

171 
ªt
;

172 
öode
 *
roŸ
;

173 i‡((
ªt
 = 
	`vfs_gë_roŸ
("pùe", &
roŸ
)) != 0) {

174  
ªt
;

176 
ªt
 = -
E_NO_MEM
;

178 
pùe_°©e
 *
°©e
;

179 i‡((
°©e
 = 
	`pùe_°©e_¸óã
()Ë=
NULL
) {

180 
out
;

183 
fs
 *f†
	`v›_fs
(
roŸ
);

184 
öode
 *
node
[2] = {
NULL
, NULL};

185 i‡((
node
[0] = 
	`pùe_¸óã_öode
(
fs
, 
NULL
, 
°©e
, 1)) == NULL) {

186 
Áûed_˛ónup_°©e
;

189 
	`pùe_°©e_acquúe
(
°©e
);

190 i‡((
node
[1] = 
	`pùe_¸óã_öode
(
fs
, 
NULL
, 
°©e
, 0)) == NULL) {

191 
Áûed_˛ónup_node0
;

194 
	`v›_›í_öc
(
node
[0]), vop_open_inc(node[1]);

196 *
∫ode_°‹e
 = 
node
[0];

197 *
wnode_°‹e
 = 
node
[1];

198 
ªt
 = 0;

200 
out
:

201 
	`v›_ªf_dec
(
roŸ
);

202  
ªt
;

204 
Áûed_˛ónup_node0
:

205 
	`v›_ªf_dec
(
node
[0]);

206 
Áûed_˛ónup_°©e
:

207 
	`pùe_°©e_ªÀa£
(
°©e
);

208 
out
;

209 
	}
}

	@kern-ucore/fs/pipe/pipe_root.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<vfs.h
>

4 
	~<öode.h
>

5 
	~<pùe.h
>

6 
	~<pùe_°©e.h
>

7 
	~<îr‹.h
>

8 
	~<as£π.h
>

11 
	$lookup_pùe_nﬁock
(
pùe_fs
 *
pùe
, c⁄° *
«me
, 
öode
 **
∫ode_°‹e
, öodê**
wnode_°‹e
) {

12 
li°_íåy_t
 *
li°
 = &(
pùe
->
pùe_li°
), *
À
 =Üist;

13 *
∫ode_°‹e
 = *
wnode_°‹e
 = 
NULL
;

14 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

15 
pùe_öode
 *
pö
 = 
	`À2pö
(
À
, 
pùe_lök
);

16 i‡(
	`°rcmp
(
pö
->
«me
,Çame) == 0) {

17 
öode
 *
node
 = 
	`öfo2node
(
pö
, 
pùe_öode
);

18 
pö
->
pö_ty≥
) {

19 
PIN_RDONLY
: 
	`as£π
(*
∫ode_°‹e
 =
NULL
); *∫ode_°‹ê
node
; ;

20 
PIN_WRONLY
: 
	`as£π
(*
wnode_°‹e
 =
NULL
); *wnode_°‹ê
node
; ;

22 
	`∑nic
("unknow¿pùe_öodêty≥ %d.\n", 
pö
->
pö_ty≥
);

24 i‡(
	`v›_ªf_öc
(
node
) == 1) {

25 
pö
->
ª˛aim_cou¡
 ++;

29 
	}
}

32 
	$pùe_roŸ_¸óã
(
öode
 *
__node
, c⁄° *
«me
, 
boﬁ
 
ex˛
, öodê**
node_°‹e
) {

33 
	`as£π
((
«me
[0] == 'r' ||Çame[0] == 'w') &&Çame[1] == '_');

34 
ªt
 = 0;

35 
boﬁ
 
ªad⁄ly
 = (
«me
[0] == 'r');

36 
«me
 += 2;

38 
öode
 *
node
[2];

39 
fs
 *f†
	`v›_fs
(
__node
);

40 
pùe_fs
 *
pùe
 = 
	`fs›_öfo
(
fs
,Öipe);

42 
	`lock_pùe
(
pùe
);

44 
	`lookup_pùe_nﬁock
(
pùe
, 
«me
, &
node
[0], &node[1]);

45 i‡(!
ªad⁄ly
) {

46 
öode
 *
tmp
 = 
node
[0];

47 
node
[0] =Çode[1],Çode[1] = 
tmp
;

50 i‡(
node
[0] !
NULL
) {

51 i‡(
ex˛
) {

52 
ªt
 = -
E_EXISTS
, 
	`v›_ªf_dec
(
node
[0]);

53 
out
;

55 *
node_°‹e
 = 
node
[0];

56 
out
;

58 
ªt
 = -
E_NO_MEM
;

60 
pùe_°©e
 *
°©e
;

61 i‡(
node
[1] =
NULL
) {

62 i‡((
°©e
 = 
	`pùe_°©e_¸óã
()Ë=
NULL
) {

63 
out
;

67 
°©e
 = 
	`v›_öfo
(
node
[1], 
pùe_öode
)->state;

68 
	`pùe_°©e_acquúe
(
°©e
);

71 
öode
 *
√w_node
;

72 i‡((
√w_node
 = 
	`pùe_¸óã_öode
(
fs
, 
«me
, 
°©e
, 
ªad⁄ly
)Ë=
NULL
) {

73 
	`pùe_°©e_ªÀa£
(
°©e
);

74 
out
;

77 
	`li°_add
(&(
pùe
->
pùe_li°
), &(
	`v›_öfo
(
√w_node
, 
pùe_öode
)->
pùe_lök
));

78 
ªt
 = 0, *
node_°‹e
 = 
√w_node
;

80 
out
:

81 
	`u∆ock_pùe
(
pùe
);

83 i‡(
node
[1] !
NULL
) {

84 
	`v›_ªf_dec
(
node
[1]);

86  
ªt
;

87 
	}
}

90 
	$pùe_roŸ_lookup
(
öode
 *
__node
, *
∑th
, öodê**
node_°‹e
) {

91 
	`as£π
((
∑th
[0] == 'r' ||Öath[0] == 'w') &&Öath[1] == '_');

92 
öode
 *
node
[2];

93 
pùe_fs
 *
pùe
 = 
	`fs›_öfo
(
	`v›_fs
(
__node
),Öipe);

94 
	`lock_pùe
(
pùe
);

96 
	`lookup_pùe_nﬁock
(
pùe
, 
∑th
 + 2, &
node
[0], &node[1]);

98 
	`u∆ock_pùe
(
pùe
);

100 i‡(
∑th
[0] != 'r') {

101 
öode
 *
tmp
 = 
node
[0];

102 
node
[0] =Çode[1],Çode[1] = 
tmp
;

105 i‡(
node
[1] !
NULL
) {

106 
	`v›_ªf_dec
(
node
[1]);

108 i‡(
node
[0] =
NULL
) {

109  -
E_NOENT
;

111 *
node_°‹e
 = 
node
[0];

113 
	}
}

116 
	$pùe_roŸ_lookup_∑ª¡
(
öode
 *
node
, *
∑th
, öodê**
node_°‹e
, **
ídp
) {

117 
	`as£π
((
∑th
[0] == 'r' ||Öath[0] == 'w') &&Öath[1] == '_');

118 *
node_°‹e
 = 
node
, *
ídp
 = 
∑th
;

119 
	`v›_ªf_öc
(
node
);

121 
	}
}

123 c⁄° 
öode_›s
 
	gpùe_roŸ_›s
 = {

124 .
v›_magic
 = 
VOP_MAGIC
,

125 .
	gv›_›í
 = 
NULL_VOP_INVAL
,

126 .
	gv›_˛o£
 = 
NULL_VOP_INVAL
,

127 .
	gv›_ªad
 = 
NULL_VOP_INVAL
,

128 .
	gv›_wrôe
 = 
NULL_VOP_INVAL
,

129 .
	gv›_f°©
 = 
NULL_VOP_INVAL
,

130 .
	gv›_fsync
 = 
NULL_VOP_INVAL
,

131 .
	gv›_mkdú
 = 
NULL_VOP_INVAL
,

132 .
	gv›_lök
 = 
NULL_VOP_INVAL
,

133 .
	gv›_ª«me
 = 
NULL_VOP_INVAL
,

134 .
	gv›_ªadlök
 = 
NULL_VOP_INVAL
,

135 .
	gv›_symlök
 = 
NULL_VOP_INVAL
,

136 .
	gv›_«mefûe
 = 
NULL_VOP_INVAL
,

137 .
	gv›_gëdúíåy
 = 
NULL_VOP_INVAL
,

138 .
	gv›_ª˛aim
 = 
NULL_VOP_INVAL
,

139 .
	gv›_io˘l
 = 
NULL_VOP_INVAL
,

140 .
	gv›_gëty≥
 = 
NULL_VOP_INVAL
,

141 .
	gv›_åy£ek
 = 
NULL_VOP_INVAL
,

142 .
	gv›_åunˇã
 = 
NULL_VOP_INVAL
,

143 .
	gv›_¸óã
 = 
pùe_roŸ_¸óã
,

144 .
	gv›_u∆ök
 = 
NULL_VOP_INVAL
,

145 .
	gv›_lookup
 = 
pùe_roŸ_lookup
,

146 .
	gv›_lookup_∑ª¡
 = 
pùe_roŸ_lookup_∑ª¡
,

149 
öode
 *

150 
	$pùe_¸óã_roŸ
(
fs
 *fs) {

151 
öode
 *
node
;

152 i‡((
node
 = 
	`Æloc_öode
(
pùe_roŸ
)Ë!
NULL
) {

153 
	`v›_öô
(
node
, &
pùe_roŸ_›s
, 
fs
);

155  
node
;

156 
	}
}

	@kern-ucore/fs/pipe/pipe_state.c

1 
	~<ty≥s.h
>

2 
	~<waô.h
>

3 
	~<¶ab.h
>

4 
	~<mmu.h
>

5 
	~<sync.h
>

6 
	~<¥oc.h
>

7 
	~<sched.h
>

8 
	~<£m.h
>

9 
	~<©omic.h
>

10 
	~<pùe.h
>

11 
	~<pùe_°©e.h
>

12 
	~<îr‹.h
>

13 
	~<as£π.h
>

15 
	spùe_°©e
 {

16 
off_t
 
	mp_Ωos
;

17 
off_t
 
	mp_wpos
;

18 
uöt8_t
 *
	mbuf
;

19 
boﬁ
 
	mis˛o£d
;

20 
	mªf_cou¡
;

21 
£m≠h‹e_t
 
	m£m
;

22 
waô_queue_t
 
	mªadî_queue
;

23 
waô_queue_t
 
	mwrôî_queue
;

26 
	#PIPE_BUFSIZE
 (
PGSIZE
 - (
pùe_°©e
))

	)

28 
pùe_°©e
 *

29 
	$pùe_°©e_¸óã
() {

30 
	`°©ic_as£π
(()
PIPE_BUFSIZE
 > 128);

31 
pùe_°©e
 *
°©e
;

32 i‡((
°©e
 = 
	`kmÆloc
((
pùe_°©e
Ë+ 
PIPE_BUFSIZE
)Ë!
NULL
) {

33 
°©e
->
p_Ωos
 = sèã->
p_wpos
 = 0;

34 
°©e
->
buf
 = (
uöt8_t
 *)(state + 1);

35 
°©e
->
is˛o£d
 = 0;

36 
°©e
->
ªf_cou¡
 = 1;

37 
	`£m_öô
(&(
°©e
->
£m
), 1);

38 
	`waô_queue_öô
(&(
°©e
->
ªadî_queue
));

39 
	`waô_queue_öô
(&(
°©e
->
wrôî_queue
));

41  
°©e
;

42 
	}
}

45 
	$lock_°©e
(
pùe_°©e
 *
°©e
) {

46 
	`down
(&(
°©e
->
£m
));

47 
	}
}

50 
	$u∆ock_°©e
(
pùe_°©e
 *
°©e
) {

51 
	`up
(&(
°©e
->
£m
));

52 
	}
}

54 
ölöe
 
boﬁ


55 
	$is_em±y
(
pùe_°©e
 *
°©e
) {

56  
°©e
->
p_Ωos
 =°©e->
p_wpos
;

57 
	}
}

59 
ölöe
 
boﬁ


60 
	$is_fuŒ
(
pùe_°©e
 *
°©e
) {

61  
°©e
->
p_wpos
 - sèã->
p_Ωos
 >
PIPE_BUFSIZE
;

62 
	}
}

64 
boﬁ


65 
	$pùe_°©e_waô
(
waô_queue_t
 *
queue
) {

66 
boﬁ
 
öå_Êag
;

67 
waô_t
 
__waô
, *
waô
 = &__wait;

68 
	`loˇl_öå_ßve
(
öå_Êag
);

69 
	`waô_cuºít_£t
(
queue
, 
waô
, 
WT_PIPE
);

70 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

72 
	`scheduÀ
();

74 
	`loˇl_öå_ßve
(
öå_Êag
);

75 
	`waô_cuºít_dñ
(
queue
, 
waô
);

76 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

77  
waô
->
wakeup_Êags
 =
WT_PIPE
;

78 
	}
}

81 
	$pùe_°©e_wakeup
(
waô_queue_t
 *
queue
) {

82 i‡(!
	`waô_queue_em±y
(
queue
)) {

83 
boﬁ
 
öå_Êag
;

84 
	`loˇl_öå_ßve
(
öå_Êag
);

86 
	`wakeup_queue
(
queue
, 
WT_PIPE
, 1);

88 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

90 
	}
}

92 
	#waô_ªadî
(
°©e
Ë
	`pùe_°©e_waô
(&((°©e)->
wrôî_queue
))

	)

93 
	#waô_wrôî
(
°©e
Ë
	`pùe_°©e_waô
(&((°©e)->
ªadî_queue
))

	)

94 
	#wakeup_ªadî
(
°©e
Ë
	`pùe_°©e_wakeup
(&((°©e)->
ªadî_queue
))

	)

95 
	#wakeup_wrôî
(
°©e
Ë
	`pùe_°©e_wakeup
(&((°©e)->
wrôî_queue
))

	)

98 
	$pùe_°©e_acquúe
(
pùe_°©e
 *
°©e
) {

99 
	`as£π
(
°©e
->
ªf_cou¡
 > 0);

100 
°©e
->
ªf_cou¡
 ++;

101 
	}
}

104 
	$pùe_°©e_ªÀa£
(
pùe_°©e
 *
°©e
) {

105 
	`as£π
(
°©e
 !
NULL
 && sèã->
ªf_cou¡
 > 0);

106 i‡(-- 
°©e
->
ªf_cou¡
 == 0) {

107 
	`as£π
(
	`waô_queue_em±y
(&(
°©e
->
ªadî_queue
)));

108 
	`as£π
(
	`waô_queue_em±y
(&(
°©e
->
wrôî_queue
)));

109 
	`k‰ì
(
°©e
);

111 
	}
}

114 
	$pùe_°©e_˛o£
(
pùe_°©e
 *
°©e
) {

115 
	`as£π
(
°©e
 !
NULL
 && sèã->
ªf_cou¡
 > 0);

116 
°©e
->
is˛o£d
 = 1;

117 
	`wakeup_ªadî
(
°©e
);

118 
	`wakeup_wrôî
(
°©e
);

119 
	}
}

121 
size_t


122 
	$pùe_°©e_size
(
pùe_°©e
 *
°©e
, 
boﬁ
 
wrôe
) {

123 
size_t
 
size
 = 
°©e
->
p_wpos
 - sèã->
p_Ωos
;

124 i‡(
wrôe
) {

125 i‡(
°©e
->
is˛o£d
) {

128  
PIPE_BUFSIZE
 - 
size
;

130  
size
;

131 
	}
}

133 
size_t


134 
	$pùe_°©e_ªad
(
pùe_°©e
 *
°©e
, *
buf
, 
size_t
 
n
) {

135 
size_t
 
ªt
 = 0;

136 
åy_agaö
:

137 
	`lock_°©e
(
°©e
);

138 i‡(
	`is_em±y
(
°©e
)) {

139 i‡(
°©e
->
is˛o£d
) {

140 
out_u∆ock
;

143 
	`u∆ock_°©e
(
°©e
);

144 i‡(!
	`waô_wrôî
(
°©e
)) {

145 
out
;

147 
åy_agaö
;

150 ; 
ªt
 < 
n
 && !
	`is_em±y
(
°©e
);Ñë ++, sèã->
p_Ωos
 ++) {

151 *(
uöt8_t
 *)(
buf
 + 
ªt
Ë
°©e
->buf[°©e->
p_Ωos
 % 
PIPE_BUFSIZE
];

153 i‡(
ªt
 != 0) {

154 
	`wakeup_wrôî
(
°©e
);

157 
out_u∆ock
:

158 
	`u∆ock_°©e
(
°©e
);

159 
out
:

160  
ªt
;

161 
	}
}

163 
size_t


164 
	$pùe_°©e_wrôe
(
pùe_°©e
 *
°©e
, *
buf
, 
size_t
 
n
) {

165 
size_t
 
ªt
 = 0, 
°ï
;

166 
åy_agaö
:

167 
	`lock_°©e
(
°©e
);

168 i‡(
°©e
->
is˛o£d
) {

169 
out_u∆ock
;

171 
°ï
 = 0; 
ªt
 < 
n
;Ñë ++, sã∞++, 
°©e
->
p_wpos
 ++) {

172 i‡(
	`is_fuŒ
(
°©e
)) {

173 
	`wakeup_ªadî
(
°©e
);

174 
	`u∆ock_°©e
(
°©e
);

175 i‡(!
	`waô_ªadî
(
°©e
)) {

176 
out
;

178 
åy_agaö
;

180 
°©e
->
buf
[°©e->
p_wpos
 % 
PIPE_BUFSIZE
] = *(
uöt8_t
 *)(bu‡+ 
ªt
);

182 i‡(
°ï
 != 0) {

183 
	`wakeup_ªadî
(
°©e
);

186 
out_u∆ock
:

187 
	`u∆ock_°©e
(
°©e
);

188 
out
:

189  
ªt
;

190 
	}
}

	@kern-ucore/fs/pipe/pipe_state.h

1 #i‚de‡
__KERN_FS_PIPE_PIPE_STATE_H__


2 
	#__KERN_FS_PIPE_PIPE_STATE_H__


	)

4 
	gpùe_°©e
;

6 
pùe_°©e
 *
pùe_°©e_¸óã
();

7 
pùe_°©e_acquúe
(
pùe_°©e
 *
°©e
);

8 
pùe_°©e_ªÀa£
(
pùe_°©e
 *
°©e
);

9 
pùe_°©e_˛o£
(
pùe_°©e
 *
°©e
);

11 
size_t
 
pùe_°©e_size
(
pùe_°©e
 *
°©e
, 
boﬁ
 
wrôe
);

12 
size_t
 
pùe_°©e_ªad
(
pùe_°©e
 *
°©e
, *
buf
, size_à
n
);

13 
size_t
 
pùe_°©e_wrôe
(
pùe_°©e
 *
°©e
, *
buf
, size_à
n
);

	@kern-ucore/fs/sfs/bitmap.c

1 
	~<ty≥s.h
>

2 
	~<¶ab.h
>

3 
	~<°rög.h
>

4 
	~<bôm≠.h
>

5 
	~<îr‹.h
>

6 
	~<as£π.h
>

8 
	#WORD_TYPE
 
uöt32_t


	)

9 
	#WORD_BITS
 ((
WORD_TYPE
Ë* 
CHAR_BIT
)

	)

11 
	sbôm≠
 {

12 
uöt32_t
 
	mnbôs
;

13 
uöt32_t
 
	mnw‹ds
;

14 
WORD_TYPE
 *
	mm≠
;

17 
bôm≠
 *

18 
	$bôm≠_¸óã
(
uöt32_t
 
nbôs
) {

19 
	`°©ic_as£π
(
WORD_BITS
 != 0);

20 
	`as£π
(
nbôs
 !0 &&Çbô†+ 
WORD_BITS
 >Çbits);

22 
bôm≠
 *bitmap;

23 i‡((
bôm≠
 = 
	`kmÆloc
((bôm≠))Ë=
NULL
) {

24  
NULL
;

27 
uöt32_t
 
nw‹ds
 = 
	`ROUNDUP_DIV
(
nbôs
, 
WORD_BITS
);

28 
WORD_TYPE
 *
m≠
;

29 i‡((
m≠
 = 
	`kmÆloc
((
WORD_TYPE
Ë* 
nw‹ds
)Ë=
NULL
) {

30 
	`k‰ì
(
bôm≠
);

31  
NULL
;

34 
bôm≠
->
nbôs
 =Çbôs, bôm≠->
nw‹ds
 =Çwords;

35 
bôm≠
->
m≠
 = 
	`mem£t
(m≠, 0xFF, (
WORD_TYPE
Ë* 
nw‹ds
);

38 i‡(
nbôs
 !
nw‹ds
 * 
WORD_BITS
) {

39 
uöt32_t
 
ix
 = 
nw‹ds
 - 1, 
ovîbôs
 = 
nbôs
 - ix * 
WORD_BITS
;

41 
	`as£π
(
nbôs
 / 
WORD_BITS
 =
ix
);

42 
	`as£π
(
ovîbôs
 > 0 && ovîbô†< 
WORD_BITS
);

44 ; 
ovîbôs
 < 
WORD_BITS
; overbits ++) {

45 
bôm≠
->
m≠
[
ix
] ^(1 << 
ovîbôs
);

48  
bôm≠
;

49 
	}
}

52 
	$bôm≠_Æloc
(
bôm≠
 *bôm≠, 
uöt32_t
 *
ödex_°‹e
) {

53 
WORD_TYPE
 *
m≠
 = 
bôm≠
->map;

54 
uöt32_t
 
ix
, 
off£t
, 
nw‹ds
 = 
bôm≠
->nwords;

55 
ix
 = 0; ix < 
nw‹ds
; ix ++) {

56 i‡(
m≠
[
ix
] != 0) {

57 
off£t
 = 0; off£à< 
WORD_BITS
; offset ++) {

58 
WORD_TYPE
 
mask
 = (1 << 
off£t
);

59 i‡(
m≠
[
ix
] & 
mask
) {

60 
m≠
[
ix
] ^
mask
;

61 *
ödex_°‹e
 = 
ix
 * 
WORD_BITS
 + 
off£t
;

65 
	`as£π
(0);

68  -
E_NO_MEM
;

69 
	}
}

72 
	$bôm≠_å™¶©e
(
bôm≠
 *bôm≠, 
uöt32_t
 
ödex
, 
WORD_TYPE
 **
w‹d
, WORD_TYPE *
mask
) {

73 
	`as£π
(
ödex
 < 
bôm≠
->
nbôs
);

74 
uöt32_t
 
ix
 = 
ödex
 / 
WORD_BITS
, 
off£t
 = index % WORD_BITS;

75 *
w‹d
 = 
bôm≠
->
m≠
 + 
ix
;

76 *
mask
 = (1 << 
off£t
);

77 
	}
}

79 
boﬁ


80 
	$bôm≠_ã°
(
bôm≠
 *bôm≠, 
uöt32_t
 
ödex
) {

81 
WORD_TYPE
 *
w‹d
, 
mask
;

82 
	`bôm≠_å™¶©e
(
bôm≠
, 
ödex
, &
w‹d
, &
mask
);

83  (*
w‹d
 & 
mask
);

84 
	}
}

87 
	$bôm≠_‰ì
(
bôm≠
 *bôm≠, 
uöt32_t
 
ödex
) {

88 
WORD_TYPE
 *
w‹d
, 
mask
;

89 
	`bôm≠_å™¶©e
(
bôm≠
, 
ödex
, &
w‹d
, &
mask
);

90 
	`as£π
(!(*
w‹d
 & 
mask
));

91 *
w‹d
 |
mask
;

92 
	}
}

95 
	$bôm≠_de°roy
(
bôm≠
 *bitmap) {

96 
	`k‰ì
(
bôm≠
->
m≠
);

97 
	`k‰ì
(
bôm≠
);

98 
	}
}

101 
	$bôm≠_gëd©a
(
bôm≠
 *bôm≠, 
size_t
 *
Àn_°‹e
) {

102 i‡(
Àn_°‹e
 !
NULL
) {

103 *
Àn_°‹e
 = (
WORD_TYPE
Ë* 
bôm≠
->
nw‹ds
;

105  
bôm≠
->
m≠
;

106 
	}
}

	@kern-ucore/fs/sfs/bitmap.h

1 #i‚de‡
__KERN_FS_SFS_BITMAP_H__


2 
	#__KERN_FS_SFS_BITMAP_H__


	)

4 
	~<ty≥s.h
>

6 
	gbôm≠
;

8 
bôm≠
 *
bôm≠_¸óã
(
uöt32_t
 
nbôs
);

9 
bôm≠_Æloc
(
bôm≠
 *bôm≠, 
uöt32_t
 *
ödex_°‹e
);

10 
boﬁ
 
bôm≠_ã°
(
bôm≠
 *bôm≠, 
uöt32_t
 
ödex
);

11 
bôm≠_‰ì
(
bôm≠
 *bôm≠, 
uöt32_t
 
ödex
);

12 
bôm≠_de°roy
(
bôm≠
 *bitmap);

13 *
bôm≠_gëd©a
(
bôm≠
 *bôm≠, 
size_t
 *
Àn_°‹e
);

	@kern-ucore/fs/sfs/sfs.c

1 
	~<ty≥s.h
>

2 
	~<sfs.h
>

3 
	~<îr‹.h
>

4 
	~<as£π.h
>

7 
	$sfs_öô
() {

8 
ªt
;

9 i‡((
ªt
 = 
	`sfs_mou¡
("disk0")) != 0) {

10 
	`∑nic
("Áûed: sfs: sfs_mou¡: %e.\n", 
ªt
);

12 
	}
}

	@kern-ucore/fs/sfs/sfs.h

1 #i‚de‡
__KERN_FS_SFS_SFS_H__


2 
	#__KERN_FS_SFS_SFS_H__


	)

4 
	~<ty≥s.h
>

5 
	~<mmu.h
>

6 
	~<li°.h
>

7 
	~<£m.h
>

8 
	~<©omic.h
>

9 
	~<uni°d.h
>

11 
	#SFS_MAGIC
 0x2f8dbe2®

	)

12 
	#SFS_BLKSIZE
 
PGSIZE


	)

13 
	#SFS_NDIRECT
 12

	)

14 
	#SFS_MAX_INFO_LEN
 31

	)

15 
	#SFS_MAX_FNAME_LEN
 
FS_MAX_FNAME_LEN


	)

16 
	#SFS_MAX_FILE_SIZE
 (1024UL * 1024 * 128Ë

	)

17 
	#SFS_BLKN_SUPER
 0

	)

18 
	#SFS_BLKN_ROOT
 1

	)

19 
	#SFS_BLKN_FREEMAP
 2

	)

22 
	#SFS_BLKBITS
 (
SFS_BLKSIZE
 * 
CHAR_BIT
)

	)

25 
	#SFS_BLK_NENTRY
 (
SFS_BLKSIZE
 / (
uöt32_t
))

	)

28 
	#SFS_TYPE_INVAL
 0

	)

29 
	#SFS_TYPE_FILE
 1

	)

30 
	#SFS_TYPE_DIR
 2

	)

31 
	#SFS_TYPE_LINK
 3

	)

36 
	ssfs_su≥r
 {

37 
uöt32_t
 
	mmagic
;

38 
uöt32_t
 
	mblocks
;

39 
uöt32_t
 
	munu£d_blocks
;

40 
	möfo
[
SFS_MAX_INFO_LEN
 + 1];

44 
	ssfs_disk_öode
 {

47 
uöt32_t
 
	msize
;

48 } 
	mfûeöfo
;

50 
uöt32_t
 
	m¶Ÿs
;

51 
uöt32_t
 
	m∑ª¡
;

52 } 
	mdúöfo
;

54 
uöt16_t
 
	mty≥
;

55 
uöt16_t
 
	m∆öks
;

56 
uöt32_t
 
	mblocks
;

57 
uöt32_t
 
	mdúe˘
[
SFS_NDIRECT
];

58 
uöt32_t
 
	mödúe˘
;

59 
uöt32_t
 
	mdb_ödúe˘
;

63 
	ssfs_disk_íåy
 {

64 
uöt32_t
 
	möo
;

65 
	m«me
[
SFS_MAX_FNAME_LEN
 + 1];

68 
	#sfs_díåy_size
 \

69 (((
sfs_disk_íåy
 *)0)->
«me
)

	)

72 
	ssfs_öode
 {

73 
sfs_disk_öode
 *
	mdö
;

74 
uöt32_t
 
	möo
;

75 
uöt32_t
 
	mÊags
;

76 
boﬁ
 
	mdúty
;

77 
	mª˛aim_cou¡
;

78 
£m≠h‹e_t
 
	m£m
;

79 
li°_íåy_t
 
	möode_lök
;

80 
li°_íåy_t
 
	mhash_lök
;

83 
	#SFS_ªmoved
 0

84 

	)

85 
	#SëSFSInodeRemoved
(
sö
Ë
	`£t_bô
(
SFS_ªmoved
, &((sö)->
Êags
))

	)

86 
	#CÀ¨SFSInodeRemoved
(
sö
Ë
	`˛ór_bô
(
SFS_ªmoved
, &((sö)->
Êags
))

	)

87 
	#SFSInodeRemoved
(
sö
Ë
	`ã°_bô
(
SFS_ªmoved
, &((sö)->
Êags
))

	)

89 
	#À2sö
(
À
, 
membî
) \

90 
	`to_°ru˘
((
À
), 
sfs_öode
, 
membî
)

	)

93 
	ssfs_fs
 {

94 
sfs_su≥r
 
	msu≥r
;

95 
devi˚
 *
	mdev
;

96 
bôm≠
 *
	m‰ìm≠
;

97 
boﬁ
 
	msu≥r_dúty
;

98 *
	msfs_buf„r
;

99 
£m≠h‹e_t
 
	mfs_£m
;

100 
£m≠h‹e_t
 
	mio_£m
;

101 
£m≠h‹e_t
 
	mmuãx_£m
;

102 
li°_íåy_t
 
	möode_li°
;

103 
li°_íåy_t
 *
	mhash_li°
;

107 
	#SFS_HLIST_SHIFT
 10

	)

108 
	#SFS_HLIST_SIZE
 (1 << 
SFS_HLIST_SHIFT
)

	)

109 
	#sö_hash‚
(
x
Ë(
	`hash32
(x, 
SFS_HLIST_SHIFT
))

	)

112 
	#sfs_‰ìm≠_bôs
(
su≥r
Ë
	`ROUNDUP
((su≥r)->
blocks
, 
SFS_BLKBITS
)

	)

115 
	#sfs_‰ìm≠_blocks
(
su≥r
Ë
	`ROUNDUP_DIV
((su≥r)->
blocks
, 
SFS_BLKBITS
)

	)

117 
	gfs
;

118 
	göode
;

120 
sfs_öô
();

121 
sfs_mou¡
(c⁄° *
dev«me
);

123 
lock_sfs_fs
(
sfs_fs
 *
sfs
);

124 
lock_sfs_io
(
sfs_fs
 *
sfs
);

125 
lock_sfs_muãx
(
sfs_fs
 *
sfs
);

126 
u∆ock_sfs_fs
(
sfs_fs
 *
sfs
);

127 
u∆ock_sfs_io
(
sfs_fs
 *
sfs
);

128 
u∆ock_sfs_muãx
(
sfs_fs
 *
sfs
);

130 
sfs_rblock
(
sfs_fs
 *
sfs
, *
buf
, 
uöt32_t
 
blkno
, uöt32_à
nblks
);

131 
sfs_wblock
(
sfs_fs
 *
sfs
, *
buf
, 
uöt32_t
 
blkno
, uöt32_à
nblks
);

132 
sfs_rbuf
(
sfs_fs
 *
sfs
, *
buf
, 
size_t
 
Àn
, 
uöt32_t
 
blkno
, 
off_t
 
off£t
);

133 
sfs_wbuf
(
sfs_fs
 *
sfs
, *
buf
, 
size_t
 
Àn
, 
uöt32_t
 
blkno
, 
off_t
 
off£t
);

134 
sfs_sync_su≥r
(
sfs_fs
 *
sfs
);

135 
sfs_sync_‰ìm≠
(
sfs_fs
 *
sfs
);

136 
sfs_˛ór_block
(
sfs_fs
 *
sfs
, 
uöt32_t
 
blkno
, uöt32_à
nblks
);

138 
sfs_lﬂd_öode
(
sfs_fs
 *
sfs
, 
öode
 **
node_°‹e
, 
uöt32_t
 
öo
);

	@kern-ucore/fs/sfs/sfs_fs.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<¶ab.h
>

5 
	~<li°.h
>

6 
	~<fs.h
>

7 
	~<vfs.h
>

8 
	~<dev.h
>

9 
	~<sfs.h
>

10 
	~<öode.h
>

11 
	~<iobuf.h
>

12 
	~<bôm≠.h
>

13 
	~<îr‹.h
>

14 
	~<as£π.h
>

15 
	~<kio.h
>

23 
	$sfs_sync
(
fs
 *fs) {

24 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
fs
, sfs);

25 
	`lock_sfs_fs
(
sfs
);

56 
li°_íåy_t
 *
li°
 = &(
sfs
->
öode_li°
), *
À
 =Üist;

57 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

58 
sfs_öode
 *
sö
 = 
	`À2sö
(
À
, 
öode_lök
);

59 
	`v›_fsync
(
	`öfo2node
(
sö
, 
sfs_öode
));

62 
	`u∆ock_sfs_fs
(
sfs
);

64 
ªt
;

65 i‡(
sfs
->
su≥r_dúty
) {

66 
sfs
->
su≥r_dúty
 = 0;

68 i‡((
ªt
 = 
	`sfs_sync_su≥r
(
sfs
)) != 0) {

69 
sfs
->
su≥r_dúty
 = 1;

70  
ªt
;

73 i‡((
ªt
 = 
	`sfs_sync_‰ìm≠
(
sfs
)) != 0) {

74 
sfs
->
su≥r_dúty
 = 1;

75  
ªt
;

79 
	}
}

86 
öode
 *

87 
	$sfs_gë_roŸ
(
fs
 *fs) {

88 
öode
 *
node
;

89 
ªt
;

90 i‡((
ªt
 = 
	`sfs_lﬂd_öode
(
	`fs›_öfo
(
fs
, 
sfs
), &
node
, 
SFS_BLKN_ROOT
)) != 0) {

91 
	`∑nic
("lﬂd sf†roŸ faûed: %e", 
ªt
);

93  
node
;

94 
	}
}

103 
	$sfs_unmou¡
(
fs
 *fs) {

104 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
fs
, sfs);

105 i‡(!
	`li°_em±y
(&(
sfs
->
öode_li°
))) {

106  -
E_BUSY
;

108 
	`as£π
(!
sfs
->
su≥r_dúty
);

109 
	`bôm≠_de°roy
(
sfs
->
‰ìm≠
);

110 
	`k‰ì
(
sfs
->
sfs_buf„r
);

111 
	`k‰ì
(
sfs
->
hash_li°
);

112 
	`k‰ì
(
sfs
);

114 
	}
}

117 
	$sfs_˛ónup
(
fs
 *fs) {

118 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
fs
, sfs);

119 
uöt32_t
 
blocks
 = 
sfs
->
su≥r
.blocks, 
unu£d_blocks
 = sfs->super.unused_blocks;

120 
	`k¥ötf
("sfs: cÀ™up: '%s' (%d/%d/%d)\n", 
sfs
->
su≥r
.
öfo
,

121 
blocks
 - 
unu£d_blocks
, unused_blocks, blocks);

122 
i
, 
ªt
;

123 
i
 = 0; i < 32; i ++) {

124 i‡((
ªt
 = 
	`fs›_sync
(
fs
)) == 0) {

128 i‡(
ªt
 != 0) {

129 
	`w¨n
("sfs: syn¯îr‹: '%s': %e.\n", 
sfs
->
su≥r
.
öfo
, 
ªt
);

131 
	}
}

134 
	$sfs_öô_ªad
(
devi˚
 *
dev
, 
uöt32_t
 
blkno
, *
blk_buf„r
) {

135 
iobuf
 
__iob
, *
iob
 = 
	`iobuf_öô
(&__iob, 
blk_buf„r
, 
SFS_BLKSIZE
, 
blkno
 * SFS_BLKSIZE);

136  
	`d›_io
(
dev
, 
iob
, 0);

137 
	}
}

140 
	$sfs_öô_‰ìm≠
(
devi˚
 *
dev
, 
bôm≠
 *
‰ìm≠
, 
uöt32_t
 
blkno
, uöt32_à
nblks
, *
blk_buf„r
) {

141 
size_t
 
Àn
;

142 *
d©a
 = 
	`bôm≠_gëd©a
(
‰ìm≠
, &
Àn
);

143 
	`as£π
(
d©a
 !
NULL
 && 
Àn
 =
nblks
 * 
SFS_BLKSIZE
);

144 
nblks
 != 0) {

145 
ªt
;

146 i‡((
ªt
 = 
	`sfs_öô_ªad
(
dev
, 
blkno
, 
d©a
)) != 0) {

147  
ªt
;

149 
blkno
 ++, 
nblks
 --, 
d©a
 +
SFS_BLKSIZE
;

152 
	}
}

169 
	$sfs_do_mou¡
(
devi˚
 *
dev
, 
fs
 **
fs_°‹e
) {

174 
	`°©ic_as£π
(
SFS_BLKSIZE
 >(
sfs_su≥r
));

175 
	`°©ic_as£π
(
SFS_BLKSIZE
 >(
sfs_disk_öode
));

176 
	`°©ic_as£π
(
SFS_BLKSIZE
 >(
sfs_disk_íåy
));

186 i‡(
dev
->
d_blocksize
 !
SFS_BLKSIZE
) {

187  -
E_NA_DEV
;

191 
fs
 *fs;

192 i‡((
fs
 = 
	`Æloc_fs
(
sfs
)Ë=
NULL
) {

193  -
E_NO_MEM
;

197 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
fs
, sfs);

198 
sfs
->
dev
 = dev;

200 
ªt
 = -
E_NO_MEM
;

202 *
sfs_buf„r
;

203 i‡((
sfs
->
sfs_buf„r
 = sfs_buf„∏
	`kmÆloc
(
SFS_BLKSIZE
)Ë=
NULL
) {

204 
Áûed_˛ónup_fs
;

208 i‡((
ªt
 = 
	`sfs_öô_ªad
(
dev
, 
SFS_BLKN_SUPER
, 
sfs_buf„r
)) != 0) {

209 
Áûed_˛ónup_sfs_buf„r
;

212 
ªt
 = -
E_INVAL
;

214 
sfs_su≥r
 *
su≥r
 = 
sfs_buf„r
;

217 i‡(
su≥r
->
magic
 !
SFS_MAGIC
) {

218 
	`k¥ötf
("sfs: wrong magic in superblock. (%08x should be %08x).\n",

219 
su≥r
->
magic
, 
SFS_MAGIC
);

220 
Áûed_˛ónup_sfs_buf„r
;

222 i‡(
su≥r
->
blocks
 > 
dev
->
d_blocks
) {

223 
	`k¥ötf
("sfs: fs has %u blocks, device has %u blocks.\n",

224 
su≥r
->
blocks
, 
dev
->
d_blocks
);

225 
Áûed_˛ónup_sfs_buf„r
;

227 
su≥r
->
öfo
[
SFS_MAX_INFO_LEN
] = '\0';

228 
sfs
->
su≥r
 = *super;

230 
ªt
 = -
E_NO_MEM
;

232 
uöt32_t
 
i
;

235 
li°_íåy_t
 *
hash_li°
;

236 i‡((
sfs
->
hash_li°
 = hash_li° = 
	`kmÆloc
((
li°_íåy_t
Ë* 
SFS_HLIST_SIZE
)Ë=
NULL
) {

237 
Áûed_˛ónup_sfs_buf„r
;

239 
i
 = 0; i < 
SFS_HLIST_SIZE
; i ++) {

240 
	`li°_öô
(
hash_li°
 + 
i
);

244 
bôm≠
 *
‰ìm≠
;

245 
uöt32_t
 
‰ìm≠_size_nbôs
 = 
	`sfs_‰ìm≠_bôs
(
su≥r
);

246 i‡((
sfs
->
‰ìm≠
 = fªem≠ = 
	`bôm≠_¸óã
(
‰ìm≠_size_nbôs
)Ë=
NULL
) {

247 
Áûed_˛ónup_hash_li°
;

249 
uöt32_t
 
‰ìm≠_size_nblks
 = 
	`sfs_‰ìm≠_blocks
(
su≥r
);

250 i‡((
ªt
 = 
	`sfs_öô_‰ìm≠
(
dev
, 
‰ìm≠
, 
SFS_BLKN_FREEMAP
, 
‰ìm≠_size_nblks
, 
sfs_buf„r
)) != 0) {

251 
Áûed_˛ónup_‰ìm≠
;

254 
uöt32_t
 
blocks
 = 
sfs
->
su≥r
.blocks, 
unu£d_blocks
 = 0;

255 
i
 = 0; i < 
‰ìm≠_size_nbôs
; i ++) {

256 i‡(
	`bôm≠_ã°
(
‰ìm≠
, 
i
)) {

257 
unu£d_blocks
 ++;

260 
	`as£π
(
unu£d_blocks
 =
sfs
->
su≥r
.unused_blocks);

263 
sfs
->
su≥r_dúty
 = 0;

264 
	`£m_öô
(&(
sfs
->
fs_£m
), 1);

265 
	`£m_öô
(&(
sfs
->
io_£m
), 1);

266 
	`£m_öô
(&(
sfs
->
muãx_£m
), 1);

267 
	`li°_öô
(&(
sfs
->
öode_li°
));

268 
	`k¥ötf
("sfs: mou¡: '%s' (%d/%d/%d)\n", 
sfs
->
su≥r
.
öfo
,

269 
blocks
 - 
unu£d_blocks
, unused_blocks, blocks);

272 
fs
->
fs_sync
 = 
sfs_sync
;

273 
fs
->
fs_gë_roŸ
 = 
sfs_gë_roŸ
;

274 
fs
->
fs_unmou¡
 = 
sfs_unmou¡
;

275 
fs
->
fs_˛ónup
 = 
sfs_˛ónup
;

277 *
fs_°‹e
 = 
fs
;

280 
Áûed_˛ónup_‰ìm≠
:

281 
	`bôm≠_de°roy
(
‰ìm≠
);

282 
Áûed_˛ónup_hash_li°
:

283 
	`k‰ì
(
hash_li°
);

284 
Áûed_˛ónup_sfs_buf„r
:

285 
	`k‰ì
(
sfs_buf„r
);

286 
Áûed_˛ónup_fs
:

287 
	`k‰ì
(
fs
);

288  
ªt
;

289 
	}
}

296 
	$sfs_mou¡
(c⁄° *
dev«me
) {

297  
	`vfs_mou¡
(
dev«me
, 
sfs_do_mou¡
);

298 
	}
}

	@kern-ucore/fs/sfs/sfs_inode.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<¶ab.h
>

5 
	~<li°.h
>

6 
	~<°©.h
>

7 
	~<vfs.h
>

8 
	~<dev.h
>

9 
	~<sfs.h
>

10 
	~<öode.h
>

11 
	~<iobuf.h
>

12 
	~<bôm≠.h
>

13 
	~<îr‹.h
>

14 
	~<as£π.h
>

16 c⁄° 
öode_›s
 
	gsfs_node_dú›s
;

17 c⁄° 
öode_›s
 
	gsfs_node_fûe›s
;

19 
ölöe
 

20 
	$åylock_sö
(
sfs_öode
 *
sö
) {

21 i‡(!
	`SFSInodeRemoved
(
sö
)) {

22 
	`down
(&(
sö
->
£m
));

23 i‡(!
	`SFSInodeRemoved
(
sö
)) {

26 
	`up
(&(
sö
->
£m
));

28  -
E_NOENT
;

29 
	}
}

31 
ölöe
 

32 
	$u∆ock_sö
(
sfs_öode
 *
sö
) {

33 
	`up
(&(
sö
->
£m
));

34 
	}
}

36 c⁄° 
öode_›s
 *

37 
	$sfs_gë_›s
(
uöt16_t
 
ty≥
) {

38 
ty≥
) {

39 
SFS_TYPE_DIR
:

40  &
sfs_node_dú›s
;

41 
SFS_TYPE_FILE
:

42  &
sfs_node_fûe›s
;

44 
	`∑nic
("övÆid fûêty≥ %d.\n", 
ty≥
);

45 
	}
}

47 
li°_íåy_t
 *

48 
	$sfs_hash_li°
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

49  
sfs
->
hash_li°
 + 
	`sö_hash‚
(
öo
);

50 
	}
}

53 
	$sfs_£t_löks
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
) {

54 
	`li°_add
(&(
sfs
->
öode_li°
), &(
sö
->
öode_lök
));

55 
	`li°_add
(
	`sfs_hash_li°
(
sfs
, 
sö
->
öo
), &(sö->
hash_lök
));

56 
	}
}

59 
	$sfs_ªmove_löks
(
sfs_öode
 *
sö
) {

60 
	`li°_dñ
(&(
sö
->
öode_lök
));

61 
	`li°_dñ
(&(
sö
->
hash_lök
));

62 
	}
}

64 
boﬁ


65 
	$sfs_block_öu£
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

66 i‡(
öo
 !0 && inÿ< 
sfs
->
su≥r
.
blocks
) {

67  !
	`bôm≠_ã°
(
sfs
->
‰ìm≠
, 
öo
);

69 
	`∑nic
("sfs_block_öu£: cÆÀd ouào‡øngê(0, %uË%u.\n", 
sfs
->
su≥r
.
blocks
, 
öo
);

70 
	}
}

73 
	$sfs_block_Æloc
(
sfs_fs
 *
sfs
, 
uöt32_t
 *
öo_°‹e
) {

74 
ªt
;

75 i‡((
ªt
 = 
	`bôm≠_Æloc
(
sfs
->
‰ìm≠
, 
öo_°‹e
)) != 0) {

76  
ªt
;

78 
	`as£π
(
sfs
->
su≥r
.
unu£d_blocks
 > 0);

79 
sfs
->
su≥r
.
unu£d_blocks
 --, sfs->
su≥r_dúty
 = 1;

80 
	`as£π
(
	`sfs_block_öu£
(
sfs
, *
öo_°‹e
));

81  
	`sfs_˛ór_block
(
sfs
, *
öo_°‹e
, 1);

82 
	}
}

85 
	$sfs_block_‰ì
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

86 
	`as£π
(
	`sfs_block_öu£
(
sfs
, 
öo
));

87 
	`bôm≠_‰ì
(
sfs
->
‰ìm≠
, 
öo
);

88 
sfs
->
su≥r
.
unu£d_blocks
 ++, sfs->
su≥r_dúty
 = 1;

89 
	}
}

92 
	$sfs_¸óã_öode
(
sfs_fs
 *
sfs
, 
sfs_disk_öode
 *
dö
, 
uöt32_t
 
öo
, 
öode
 **
node_°‹e
) {

93 
öode
 *
node
;

94 i‡((
node
 = 
	`Æloc_öode
(
sfs_öode
)Ë!
NULL
) {

95 
	`v›_öô
(
node
, 
	`sfs_gë_›s
(
dö
->
ty≥
), 
	`öfo2fs
(
sfs
, sfs));

96 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

97 
sö
->
dö
 = dö, sö->
öo
 = ino, sö->
dúty
 = 0, sö->
Êags
 = 0, sö->
ª˛aim_cou¡
 = 1;

98 
	`£m_öô
(&(
sö
->
£m
), 1);

99 *
node_°‹e
 = 
node
;

102  -
E_NO_MEM
;

103 
	}
}

105 
öode
 *

106 
	$lookup_sfs_nﬁock
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
) {

107 
öode
 *
node
;

108 
li°_íåy_t
 *
li°
 = 
	`sfs_hash_li°
(
sfs
, 
öo
), *
À
 =Üist;

109 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

110 
sfs_öode
 *
sö
 = 
	`À2sö
(
À
, 
hash_lök
);

111 i‡(
sö
->
öo
 == ino) {

112 
node
 = 
	`öfo2node
(
sö
, 
sfs_öode
);

113 i‡(
	`v›_ªf_öc
(
node
) == 1) {

114 
sö
->
ª˛aim_cou¡
 ++;

116  
node
;

119  
NULL
;

120 
	}
}

123 
	$sfs_lﬂd_öode
(
sfs_fs
 *
sfs
, 
öode
 **
node_°‹e
, 
uöt32_t
 
öo
) {

124 
	`lock_sfs_fs
(
sfs
);

125 
öode
 *
node
;

126 i‡((
node
 = 
	`lookup_sfs_nﬁock
(
sfs
, 
öo
)Ë!
NULL
) {

127 
out_u∆ock
;

130 
ªt
 = -
E_NO_MEM
;

131 
sfs_disk_öode
 *
dö
;

132 i‡((
dö
 = 
	`kmÆloc
((
sfs_disk_öode
))Ë=
NULL
) {

133 
Áûed_u∆ock
;

136 
	`as£π
(
	`sfs_block_öu£
(
sfs
, 
öo
));

137 i‡((
ªt
 = 
	`sfs_rbuf
(
sfs
, 
dö
, (
sfs_disk_öode
), 
öo
, 0)) != 0) {

138 
Áûed_˛ónup_dö
;

141 
	`as£π
(
dö
->
∆öks
 != 0);

142 i‡((
ªt
 = 
	`sfs_¸óã_öode
(
sfs
, 
dö
, 
öo
, &
node
)) != 0) {

143 
Áûed_˛ónup_dö
;

145 
	`sfs_£t_löks
(
sfs
, 
	`v›_öfo
(
node
, 
sfs_öode
));

147 
out_u∆ock
:

148 
	`u∆ock_sfs_fs
(
sfs
);

149 *
node_°‹e
 = 
node
;

152 
Áûed_˛ónup_dö
:

153 
	`k‰ì
(
dö
);

154 
Áûed_u∆ock
:

155 
	`u∆ock_sfs_fs
(
sfs
);

156  
ªt
;

157 
	}
}

160 
	$sfs_bm≠_gë_sub_nﬁock
(
sfs_fs
 *
sfs
, 
uöt32_t
 *
íç
, uöt32_à
ödex
, 
boﬁ
 
¸óã
, uöt32_à*
öo_°‹e
) {

161 
	`as£π
(
ödex
 < 
SFS_BLK_NENTRY
);

162 
ªt
;

163 
uöt32_t
 
ít
, 
öo
 = 0;

164 
off_t
 
off£t
 = 
ödex
 * (
uöt32_t
);

165 i‡((
ít
 = *
íç
) != 0) {

166 i‡((
ªt
 = 
	`sfs_rbuf
(
sfs
, &
öo
, (
uöt32_t
), 
ít
, 
off£t
)) != 0) {

167  
ªt
;

169 i‡(
öo
 !0 || !
¸óã
) {

170 
out
;

174 i‡(!
¸óã
) {

175 
out
;

177 i‡((
ªt
 = 
	`sfs_block_Æloc
(
sfs
, &
ít
)) != 0) {

178  
ªt
;

182 i‡((
ªt
 = 
	`sfs_block_Æloc
(
sfs
, &
öo
)) != 0) {

183 
Áûed_˛ónup
;

185 i‡((
ªt
 = 
	`sfs_wbuf
(
sfs
, &
öo
, (
uöt32_t
), 
ít
, 
off£t
)) != 0) {

186 
	`sfs_block_‰ì
(
sfs
, 
öo
);

187 
Áûed_˛ónup
;

190 
out
:

191 i‡(
ít
 !*
íç
) {

192 *
íç
 = 
ít
;

194 *
öo_°‹e
 = 
öo
;

197 
Áûed_˛ónup
:

198 i‡(
ít
 !*
íç
) {

199 
	`sfs_block_‰ì
(
sfs
, 
ít
);

201  
ªt
;

202 
	}
}

205 
	$sfs_bm≠_gë_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
uöt32_t
 
ödex
, 
boﬁ
 
¸óã
, uöt32_à*
öo_°‹e
) {

206 
sfs_disk_öode
 *
dö
 = 
sö
->din;

207 
ªt
;

208 
uöt32_t
 
ít
, 
öo
;

209 i‡(
ödex
 < 
SFS_NDIRECT
) {

210 i‡((
öo
 = 
dö
->
dúe˘
[
ödex
]Ë=0 && 
¸óã
) {

211 i‡((
ªt
 = 
	`sfs_block_Æloc
(
sfs
, &
öo
)) != 0) {

212  
ªt
;

214 
dö
->
dúe˘
[
ödex
] = 
öo
;

215 
sö
->
dúty
 = 1;

217 
out
;

220 
ödex
 -
SFS_NDIRECT
;

221 i‡(
ödex
 < 
SFS_BLK_NENTRY
) {

222 
ít
 = 
dö
->
ödúe˘
;

223 i‡((
ªt
 = 
	`sfs_bm≠_gë_sub_nﬁock
(
sfs
, &
ít
, 
ödex
, 
¸óã
, &
öo
)) != 0) {

224  
ªt
;

226 i‡(
ít
 !
dö
->
ödúe˘
) {

227 
	`as£π
(
dö
->
ödúe˘
 == 0);

228 
dö
->
ödúe˘
 = 
ít
;

229 
sö
->
dúty
 = 1;

231 
out
;

234 
ödex
 -
SFS_BLK_NENTRY
;

235 
ít
 = 
dö
->
db_ödúe˘
;

236 i‡((
ªt
 = 
	`sfs_bm≠_gë_sub_nﬁock
(
sfs
, &
ít
, 
ödex
 / 
SFS_BLK_NENTRY
, 
¸óã
, &
öo
)) != 0) {

237  
ªt
;

239 i‡(
ít
 !
dö
->
db_ödúe˘
) {

240 
	`as£π
(
dö
->
db_ödúe˘
 == 0);

241 
dö
->
db_ödúe˘
 = 
ít
;

242 
sö
->
dúty
 = 1;

244 i‡((
ít
 = 
öo
) != 0) {

245 i‡((
ªt
 = 
	`sfs_bm≠_gë_sub_nﬁock
(
sfs
, &
ít
, 
ödex
 % 
SFS_BLK_NENTRY
, 
¸óã
, &
öo
)) != 0) {

246  
ªt
;

250 
out
:

251 
	`as£π
(
öo
 =0 || 
	`sfs_block_öu£
(
sfs
, ino));

252 *
öo_°‹e
 = 
öo
;

254 
	}
}

257 
	$sfs_bm≠_‰ì_sub_nﬁock
(
sfs_fs
 *
sfs
, 
uöt32_t
 
ít
, uöt32_à
ödex
) {

258 
	`as£π
(
	`sfs_block_öu£
(
sfs
, 
ít
Ë&& 
ödex
 < 
SFS_BLK_NENTRY
);

259 
ªt
;

260 
uöt32_t
 
öo
, 
zîo
 = 0;

261 
off_t
 
off£t
 = 
ödex
 * (
uöt32_t
);

262 i‡((
ªt
 = 
	`sfs_rbuf
(
sfs
, &
öo
, (
uöt32_t
), 
ít
, 
off£t
)) != 0) {

263  
ªt
;

265 i‡(
öo
 != 0) {

266 i‡((
ªt
 = 
	`sfs_wbuf
(
sfs
, &
zîo
, (
uöt32_t
), 
ít
, 
off£t
)) != 0) {

267  
ªt
;

269 
	`sfs_block_‰ì
(
sfs
, 
öo
);

272 
	}
}

275 
	$sfs_bm≠_‰ì_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
uöt32_t
 
ödex
) {

276 
sfs_disk_öode
 *
dö
 = 
sö
->din;

277 
ªt
;

278 
uöt32_t
 
ít
, 
öo
;

279 i‡(
ödex
 < 
SFS_NDIRECT
) {

280 i‡((
öo
 = 
dö
->
dúe˘
[
ödex
]) != 0) {

281 
	`sfs_block_‰ì
(
sfs
, 
öo
);

282 
dö
->
dúe˘
[
ödex
] = 0;

283 
sö
->
dúty
 = 1;

288 
ödex
 -
SFS_NDIRECT
;

289 i‡(
ödex
 < 
SFS_BLK_NENTRY
) {

290 i‡((
ít
 = 
dö
->
ödúe˘
) != 0) {

291 i‡((
ªt
 = 
	`sfs_bm≠_‰ì_sub_nﬁock
(
sfs
, 
ít
, 
ödex
)) != 0) {

292  
ªt
;

298 
ödex
 -
SFS_BLK_NENTRY
;

299 i‡((
ít
 = 
dö
->
db_ödúe˘
) != 0) {

300 i‡((
ªt
 = 
	`sfs_bm≠_gë_sub_nﬁock
(
sfs
, &
ít
, 
ödex
 / 
SFS_BLK_NENTRY
, 0, &
öo
)) != 0) {

301  
ªt
;

303 i‡((
ít
 = 
öo
) != 0) {

304 i‡((
ªt
 = 
	`sfs_bm≠_‰ì_sub_nﬁock
(
sfs
, 
ít
, 
ödex
 % 
SFS_BLK_NENTRY
)) != 0) {

305  
ªt
;

310 
	}
}

313 
	$sfs_bm≠_lﬂd_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
uöt32_t
 
ödex
, uöt32_à*
öo_°‹e
) {

314 
sfs_disk_öode
 *
dö
 = 
sö
->din;

315 
	`as£π
(
ödex
 <
dö
->
blocks
);

316 
ªt
;

317 
uöt32_t
 
öo
;

318 
boﬁ
 
¸óã
 = (
ödex
 =
dö
->
blocks
);

319 i‡((
ªt
 = 
	`sfs_bm≠_gë_nﬁock
(
sfs
, 
sö
, 
ödex
, 
¸óã
, &
öo
)) != 0) {

320  
ªt
;

322 
	`as£π
(
	`sfs_block_öu£
(
sfs
, 
öo
));

323 i‡(
¸óã
) {

324 
dö
->
blocks
 ++;

326 i‡(
öo_°‹e
 !
NULL
) {

327 *
öo_°‹e
 = 
öo
;

330 
	}
}

333 
	$sfs_bm≠_åunˇã_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
) {

334 
sfs_disk_öode
 *
dö
 = 
sö
->din;

335 
	`as£π
(
dö
->
blocks
 != 0);

336 
ªt
;

337 i‡((
ªt
 = 
	`sfs_bm≠_‰ì_nﬁock
(
sfs
, 
sö
, 
dö
->
blocks
 - 1)) != 0) {

338  
ªt
;

340 
dö
->
blocks
 --;

341 
sö
->
dúty
 = 1;

343 
	}
}

346 
	$sfs_dúít_ªad_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
¶Ÿ
, 
sfs_disk_íåy
 *
íåy
) {

347 
	`as£π
(
sö
->
dö
->
ty≥
 =
SFS_TYPE_DIR
 && (
¶Ÿ
 >0 && slŸ < sö->dö->
blocks
));

348 
ªt
;

349 
uöt32_t
 
öo
;

350 i‡((
ªt
 = 
	`sfs_bm≠_lﬂd_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, &
öo
)) != 0) {

351  
ªt
;

353 
	`as£π
(
	`sfs_block_öu£
(
sfs
, 
öo
));

354 i‡((
ªt
 = 
	`sfs_rbuf
(
sfs
, 
íåy
, (
sfs_disk_íåy
), 
öo
, 0)) != 0) {

355  
ªt
;

357 
íåy
->
«me
[
SFS_MAX_FNAME_LEN
] = '\0';

359 
	}
}

362 
	$sfs_dúít_wrôe_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
¶Ÿ
, 
uöt32_t
 
öo
, c⁄° *
«me
) {

363 
	`as£π
(
sö
->
dö
->
ty≥
 =
SFS_TYPE_DIR
 && (
¶Ÿ
 >0 && slŸ <sö->dö->
blocks
));

364 
sfs_disk_íåy
 *
íåy
;

365 i‡((
íåy
 = 
	`kmÆloc
((
sfs_disk_íåy
))Ë=
NULL
) {

366  -
E_NO_MEM
;

368 
	`mem£t
(
íåy
, 0, (
sfs_disk_íåy
));

370 i‡(
öo
 != 0) {

371 
	`as£π
(
	`°æí
(
«me
Ë<
SFS_MAX_FNAME_LEN
);

372 
íåy
->
öo
 = ino, 
	`°r˝y
”¡ry->
«me
,Çame);

374 
ªt
;

375 i‡((
ªt
 = 
	`sfs_bm≠_lﬂd_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, &
öo
)) != 0) {

376 
out
;

378 
	`as£π
(
	`sfs_block_öu£
(
sfs
, 
öo
));

379 
ªt
 = 
	`sfs_wbuf
(
sfs
, 
íåy
, (
sfs_disk_íåy
), 
öo
, 0);

380 
out
:

381 
	`k‰ì
(
íåy
);

382  
ªt
;

383 
	}
}

386 
	$sfs_dúít_lök_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
¶Ÿ
, sfs_öodê*
 ksö
, c⁄° *
«me
) {

387 
ªt
;

388 i‡((
ªt
 = 
	`sfs_dúít_wrôe_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
->
öo
, 
«me
)) != 0) {

389  
ªt
;

391 
sö
->
dúty
 = 1;

392 
sö
->
dö
->
dúöfo
.
¶Ÿs
 ++;

393 
 ksö
->
dúty
 = 1;

394 
 ksö
->
dö
->
∆öks
 ++;

396 
	}
}

399 
	$sfs_dúít_u∆ök_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
¶Ÿ
, sfs_öodê*
 ksö
) {

400 
ªt
;

401 i‡((
ªt
 = 
	`sfs_dúít_wrôe_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 0, 
NULL
)) != 0) {

402  
ªt
;

404 
	`as£π
(
sö
->
dö
->
dúöfo
.
¶Ÿs
 !0 && 
 ksö
->dö->
∆öks
 != 0);

405 
sö
->
dúty
 = 1;

406 
sö
->
dö
->
dúöfo
.
¶Ÿs
 --;

407 
 ksö
->
dúty
 = 1;

408 
 ksö
->
dö
->
∆öks
 --;

410 
	}
}

412 
	#sfs_dúít_lök_nﬁock_check
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
, 
«me
) \

414 
îr
; \

415 i‡((
îr
 = 
	`sfs_dúít_lök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
, 
«me
)) != 0) { \

416 
	`w¨n
("sfs_dúít_lökÉº‹: %e.\n", 
îr
); \

418 
îr
; \

419 })

	)

421 
	#sfs_dúít_u∆ök_nﬁock_check
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
) \

423 
îr
; \

424 i‡((
îr
 = 
	`sfs_dúít_u∆ök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
)) != 0) { \

425 
	`w¨n
("sfs_dúít_u∆ökÉº‹: %e.\n", 
îr
); \

427 
îr
; \

428 })

	)

431 
	$sfs_dúít_£¨ch_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, c⁄° *
«me
, 
uöt32_t
 *
öo_°‹e
, *
¶Ÿ
, *
em±y_¶Ÿ
) {

432 
	`as£π
(
	`°æí
(
«me
Ë<
SFS_MAX_FNAME_LEN
);

433 
sfs_disk_íåy
 *
íåy
;

434 i‡((
íåy
 = 
	`kmÆloc
((
sfs_disk_íåy
))Ë=
NULL
) {

435  -
E_NO_MEM
;

438 
	#£t_pvÆue
(
x
, 
v
Ëdÿ{ i‡((xË!
NULL
Ë{ *(xË(v); } } 0)

	)

439 
ªt
, 
i
, 
n¶Ÿs
 = 
sö
->
dö
->
blocks
;

440 
	`£t_pvÆue
(
em±y_¶Ÿ
, 
n¶Ÿs
);

441 
i
 = 0; i < 
n¶Ÿs
; i ++) {

442 i‡((
ªt
 = 
	`sfs_dúít_ªad_nﬁock
(
sfs
, 
sö
, 
i
, 
íåy
)) != 0) {

443 
out
;

445 i‡(
íåy
->
öo
 == 0) {

446 
	`£t_pvÆue
(
em±y_¶Ÿ
, 
i
);

449 i‡(
	`°rcmp
(
«me
, 
íåy
->name) == 0) {

450 
	`£t_pvÆue
(
¶Ÿ
, 
i
);

451 
	`£t_pvÆue
(
öo_°‹e
, 
íåy
->
öo
);

452 
out
;

455 #unde‡
£t_pvÆue


456 
ªt
 = -
E_NOENT
;

457 
out
:

458 
	`k‰ì
(
íåy
);

459  
ªt
;

460 
	}
}

463 
	$sfs_dúít_födöo_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
uöt32_t
 
öo
, 
sfs_disk_íåy
 *
íåy
) {

464 
ªt
, 
i
, 
n¶Ÿs
 = 
sö
->
dö
->
blocks
;

465 
i
 = 0; i < 
n¶Ÿs
; i ++) {

466 i‡((
ªt
 = 
	`sfs_dúít_ªad_nﬁock
(
sfs
, 
sö
, 
i
, 
íåy
)) != 0) {

467  
ªt
;

469 i‡(
íåy
->
öo
 == ino) {

473  -
E_NOENT
;

474 
	}
}

477 
	$sfs_dúít_¸óã_öode
(
sfs_fs
 *
sfs
, 
uöt16_t
 
ty≥
, 
öode
 **
node_°‹e
) {

478 
sfs_disk_öode
 *
dö
;

479 i‡((
dö
 = 
	`kmÆloc
((
sfs_disk_öode
))Ë=
NULL
) {

480  -
E_NO_MEM
;

482 
	`mem£t
(
dö
, 0, (
sfs_disk_öode
));

483 
dö
->
ty≥
 =Åype;

485 
ªt
;

486 
uöt32_t
 
öo
;

487 i‡((
ªt
 = 
	`sfs_block_Æloc
(
sfs
, &
öo
)) != 0) {

488 
Áûed_˛ónup_dö
;

490 
öode
 *
node
;

491 i‡((
ªt
 = 
	`sfs_¸óã_öode
(
sfs
, 
dö
, 
öo
, &
node
)) != 0) {

492 
Áûed_˛ónup_öo
;

494 
	`lock_sfs_fs
(
sfs
);

496 
	`sfs_£t_löks
(
sfs
, 
	`v›_öfo
(
node
, 
sfs_öode
));

498 
	`u∆ock_sfs_fs
(
sfs
);

499 *
node_°‹e
 = 
node
;

502 
Áûed_˛ónup_öo
:

503 
	`sfs_block_‰ì
(
sfs
, 
öo
);

504 
Áûed_˛ónup_dö
:

505 
	`k‰ì
(
dö
);

506  
ªt
;

507 
	}
}

510 
	$sfs_lﬂd_∑ª¡
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
öode
 **
∑ª¡_°‹e
) {

511  
	`sfs_lﬂd_öode
(
sfs
, 
∑ª¡_°‹e
, 
sö
->
dö
->
dúöfo
.
∑ª¡
);

512 
	}
}

515 
	$sfs_lookup_⁄˚
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, c⁄° *
«me
, 
öode
 **
node_°‹e
, *
¶Ÿ
) {

516 
ªt
;

517 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) != 0) {

518  
ªt
;

520 
uöt32_t
 
öo
;

521 
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
«me
, &
öo
, 
¶Ÿ
, 
NULL
);

522 
	`u∆ock_sö
(
sö
);

523 i‡(
ªt
 != 0) {

524  
ªt
;

526  
	`sfs_lﬂd_öode
(
sfs
, 
node_°‹e
, 
öo
);

527 
	}
}

530 
	$sfs_›ídú
(
öode
 *
node
, 
uöt32_t
 
›í_Êags
) {

531 
›í_Êags
 & 
O_ACCMODE
) {

532 
O_RDONLY
:

534 
O_WRONLY
:

535 
O_RDWR
:

537  -
E_ISDIR
;

539 i‡(
›í_Êags
 & 
O_APPEND
) {

540  -
E_ISDIR
;

543 
	}
}

546 
	$sfs_›ífûe
(
öode
 *
node
, 
uöt32_t
 
›í_Êags
) {

548 
	}
}

551 
	$sfs_˛o£
(
öode
 *
node
) {

552  
	`v›_fsync
(
node
);

553 
	}
}

556 
	$sfs_io_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, *
buf
, 
off_t
 
off£t
, 
size_t
 *
Æíp
, 
boﬁ
 
wrôe
) {

557 
sfs_disk_öode
 *
dö
 = 
sö
->din;

558 
	`as£π
(
dö
->
ty≥
 !
SFS_TYPE_DIR
);

559 
off_t
 
ídpos
 = 
off£t
 + *
Æíp
, 
blkoff
;

560 *
Æíp
 = 0;

561 i‡(
off£t
 < 0 || off£à>
SFS_MAX_FILE_SIZE
 || off£à> 
ídpos
) {

562  -
E_INVAL
;

564 i‡(
off£t
 =
ídpos
) {

567 i‡(
ídpos
 > 
SFS_MAX_FILE_SIZE
) {

568 
ídpos
 = 
SFS_MAX_FILE_SIZE
;

570 i‡(!
wrôe
) {

571 i‡(
off£t
 >
dö
->
fûeöfo
.
size
) {

574 i‡(
ídpos
 > 
dö
->
fûeöfo
.
size
) {

575 
ídpos
 = 
dö
->
fûeöfo
.
size
;

579 (*
sfs_buf_›
)(
sfs_fs
 *
sfs
, *
buf
, 
size_t
 
Àn
, 
uöt32_t
 
blkno
, 
off_t
 
off£t
);

580 (*
sfs_block_›
)(
sfs_fs
 *
sfs
, *
buf
, 
uöt32_t
 
blkno
, uöt32_à
nblks
);

581 i‡(
wrôe
) {

582 
sfs_buf_›
 = 
sfs_wbuf
, 
sfs_block_›
 = 
sfs_wblock
;

585 
sfs_buf_›
 = 
sfs_rbuf
, 
sfs_block_›
 = 
sfs_rblock
;

588 
ªt
 = 0;

589 
size_t
 
size
, 
Æí
 = 0;

590 
uöt32_t
 
öo
;

591 
uöt32_t
 
blkno
 = 
off£t
 / 
SFS_BLKSIZE
;

592 
uöt32_t
 
nblks
 = 
ídpos
 / 
SFS_BLKSIZE
 - 
blkno
;

594 i‡((
blkoff
 = 
off£t
 % 
SFS_BLKSIZE
) != 0) {

595 
size
 = (
nblks
 !0Ë? (
SFS_BLKSIZE
 - 
blkoff
Ë: (
ídpos
 - 
off£t
);

596 i‡((
ªt
 = 
	`sfs_bm≠_lﬂd_nﬁock
(
sfs
, 
sö
, 
blkno
, &
öo
)) != 0) {

597 
out
;

599 i‡((
ªt
 = 
	`sfs_buf_›
(
sfs
, 
buf
, 
size
, 
öo
, 
blkoff
)) != 0) {

600 
out
;

602 
Æí
 +
size
;

603 i‡(
nblks
 == 0) {

604 
out
;

606 
buf
 +
size
, 
blkno
 ++, 
nblks
 --;

609 
size
 = 
SFS_BLKSIZE
;

610 
nblks
 != 0) {

611 i‡((
ªt
 = 
	`sfs_bm≠_lﬂd_nﬁock
(
sfs
, 
sö
, 
blkno
, &
öo
)) != 0) {

612 
out
;

614 i‡((
ªt
 = 
	`sfs_block_›
(
sfs
, 
buf
, 
öo
, 1)) != 0) {

615 
out
;

617 
Æí
 +
size
, 
buf
 +size, 
blkno
 ++, 
nblks
 --;

620 i‡((
size
 = 
ídpos
 % 
SFS_BLKSIZE
) != 0) {

621 i‡((
ªt
 = 
	`sfs_bm≠_lﬂd_nﬁock
(
sfs
, 
sö
, 
blkno
, &
öo
)) != 0) {

622 
out
;

624 i‡((
ªt
 = 
	`sfs_buf_›
(
sfs
, 
buf
, 
size
, 
öo
, 0)) != 0) {

625 
out
;

627 
Æí
 +
size
;

630 
out
:

631 *
Æíp
 = 
Æí
;

632 i‡(
off£t
 + 
Æí
 > 
dö
->
fûeöfo
.
size
) {

633 
dö
->
fûeöfo
.
size
 = 
off£t
 + 
Æí
;

634 
sö
->
dúty
 = 1;

636  
ªt
;

637 
	}
}

639 
ölöe
 

640 
	$sfs_io
(
öode
 *
node
, 
iobuf
 *
iob
, 
boﬁ
 
wrôe
) {

641 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

642 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

643 
ªt
;

644 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) != 0) {

645  
ªt
;

647 
size_t
 
Æí
 = 
iob
->
io_ªsid
;

648 
ªt
 = 
	`sfs_io_nﬁock
(
sfs
, 
sö
, 
iob
->
io_ba£
, iob->
io_off£t
, &
Æí
, 
wrôe
);

649 i‡(
Æí
 != 0) {

650 
	`iobuf_skù
(
iob
, 
Æí
);

652 
	`u∆ock_sö
(
sö
);

653  
ªt
;

654 
	}
}

657 
	$sfs_ªad
(
öode
 *
node
, 
iobuf
 *
iob
) {

658  
	`sfs_io
(
node
, 
iob
, 0);

659 
	}
}

662 
	$sfs_wrôe
(
öode
 *
node
, 
iobuf
 *
iob
) {

663  
	`sfs_io
(
node
, 
iob
, 1);

664 
	}
}

667 
	$sfs_f°©
(
öode
 *
node
, 
°©
 *stat) {

668 
ªt
;

669 
	`mem£t
(
°©
, 0, (stat));

670 i‡((
ªt
 = 
	`v›_gëty≥
(
node
, &(
°©
->
°_mode
))) != 0) {

671  
ªt
;

673 
sfs_disk_öode
 *
dö
 = 
	`v›_öfo
(
node
, 
sfs_öode
)->din;

674 
°©
->
°_∆öks
 = 
dö
->
∆öks
;

675 
°©
->
°_blocks
 = 
dö
->
blocks
;

676 i‡(
dö
->
ty≥
 !
SFS_TYPE_DIR
) {

677 
°©
->
°_size
 = 
dö
->
fûeöfo
.
size
;

680 
°©
->
°_size
 = (
dö
->
dúöfo
.
¶Ÿs
 + 2Ë* 
sfs_díåy_size
;

683 
	}
}

685 
ölöe
 

686 
	$sfs_∆öks_öc_nﬁock
(
sfs_öode
 *
sö
) {

687 
sö
->
dúty
 = 1, ++ sö->
dö
->
∆öks
;

688 
	}
}

690 
ölöe
 

691 
	$sfs_∆öks_dec_nﬁock
(
sfs_öode
 *
sö
) {

692 
	`as£π
(
sö
->
dö
->
∆öks
 != 0);

693 
sö
->
dúty
 = 1, -- sö->
dö
->
∆öks
;

694 
	}
}

696 
ölöe
 

697 
	$sfs_dúöfo_£t_∑ª¡
(
sfs_öode
 *
sö
, sfs_öodê*
∑ª¡
) {

698 
sö
->
dúty
 = 1; sö->
dö
->
dúöfo
.
∑ª¡
 =Ö¨ít->
öo
;

699 
	}
}

702 
	$sfs_fsync
(
öode
 *
node
) {

703 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

704 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

705 i‡(
sö
->
dö
->
∆öks
 =0 || !sö->
dúty
) {

708 
ªt
;

709 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) != 0) {

710  
ªt
;

712 i‡(
sö
->
dúty
) {

713 
sö
->
dúty
 = 0;

714 i‡((
ªt
 = 
	`sfs_wbuf
(
sfs
, 
sö
->
dö
, (
sfs_disk_öode
), sö->
öo
, 0)) != 0) {

715 
sö
->
dúty
 = 1;

718 
	`u∆ock_sö
(
sö
);

719  
ªt
;

720 
	}
}

723 
	$sfs_mkdú_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, c⁄° *
«me
) {

724 
ªt
, 
¶Ÿ
;

725 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
«me
, 
NULL
, NULL, &
¶Ÿ
)Ë!-
E_NOENT
) {

726  (
ªt
 !0Ë?Ñë : -
E_EXISTS
;

728 
öode
 *
lök_node
;

729 i‡((
ªt
 = 
	`sfs_dúít_¸óã_öode
(
sfs
, 
SFS_TYPE_DIR
, &
lök_node
)) != 0) {

730  
ªt
;

732 
sfs_öode
 *
 ksö
 = 
	`v›_öfo
(
lök_node
, sfs_inode);

733 i‡((
ªt
 = 
	`sfs_dúít_lök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
, 
«me
)) != 0) {

734 
	`as£π
(
 ksö
->
dö
->
∆öks
 == 0);

735 
	`as£π
(
	`öode_ªf_cou¡
(
lök_node
Ë=1 && 
	`öode_›í_cou¡
(link_node) == 0);

736 
out
;

740 
	`sfs_dúöfo_£t_∑ª¡
(
 ksö
, 
sö
);

743 
	`sfs_∆öks_öc_nﬁock
(
 ksö
);

746 
	`sfs_∆öks_öc_nﬁock
(
sö
);

748 
out
:

749 
	`v›_ªf_dec
(
lök_node
);

750  
ªt
;

751 
	}
}

754 
	$sfs_mkdú
(
öode
 *
node
, c⁄° *
«me
) {

755 i‡(
	`°æí
(
«me
Ë> 
SFS_MAX_FNAME_LEN
) {

756  -
E_TOO_BIG
;

758 i‡(
	`°rcmp
(
«me
, ".") == 0 || strcmp(name, "..") == 0) {

759  -
E_EXISTS
;

761 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

762 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

763 
ªt
;

764 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) == 0) {

765 
ªt
 = 
	`sfs_mkdú_nﬁock
(
sfs
, 
sö
, 
«me
);

766 
	`u∆ock_sö
(
sö
);

768  
ªt
;

769 
	}
}

772 
	$sfs_lök_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, sfs_öodê*
 ksö
, c⁄° *
«me
) {

773 
ªt
, 
¶Ÿ
;

774 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
«me
, 
NULL
, NULL, &
¶Ÿ
)Ë!-
E_NOENT
) {

775  (
ªt
 !0Ë?Ñë : -
E_EXISTS
;

777  
	`sfs_dúít_lök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
, 
«me
);

778 
	}
}

781 
	$sfs_lök
(
öode
 *
node
, c⁄° *
«me
, öodê*
lök_node
) {

782 i‡(
	`°æí
(
«me
Ë> 
SFS_MAX_FNAME_LEN
) {

783  -
E_TOO_BIG
;

785 i‡(
	`°rcmp
(
«me
, ".") == 0 || strcmp(name, "..") == 0) {

786  -
E_EXISTS
;

788 
sfs_öode
 *
 ksö
 = 
	`v›_öfo
(
lök_node
, sfs_inode);

789 i‡(
 ksö
->
dö
->
ty≥
 =
SFS_TYPE_DIR
) {

790  -
E_ISDIR
;

792 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

793 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

794 
ªt
;

795 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) == 0) {

796 
ªt
 = 
	`sfs_lök_nﬁock
(
sfs
, 
sö
, 
 ksö
, 
«me
);

797 
	`u∆ock_sö
(
sö
);

799  
ªt
;

800 
	}
}

803 
	$sfs_ª«me1_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, c⁄° *
«me
, c⁄° *
√w_«me
) {

804 i‡(
	`°rcmp
(
«me
, 
√w_«me
) == 0) {

807 
ªt
, 
¶Ÿ
;

808 
uöt32_t
 
öo
;

809 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
«me
, &
öo
, &
¶Ÿ
, 
NULL
)) != 0) {

810  
ªt
;

812 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
√w_«me
, 
NULL
, NULL, NULL)Ë!-
E_NOENT
) {

813  (
ªt
 !0Ë?Ñë : -
E_EXISTS
;

815  
	`sfs_dúít_wrôe_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
öo
, 
√w_«me
);

816 
	}
}

819 
	$sfs_ª«me2_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, c⁄° *
«me
, sfs_öodê*
√wsö
, c⁄° *
√w_«me
) {

820 
uöt32_t
 
öo
;

821 
ªt
, 
¶Ÿ1
, 
¶Ÿ2
;

822 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
«me
, &
öo
, &
¶Ÿ1
, 
NULL
)) != 0) {

823  
ªt
;

825 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
√wsö
, 
√w_«me
, 
NULL
, NULL, &
¶Ÿ2
)Ë!-
E_NOENT
) {

826  (
ªt
 !0Ë?Ñë : -
E_EXISTS
;

829 
öode
 *
lök_node
;

830 i‡((
ªt
 = 
	`sfs_lﬂd_öode
(
sfs
, &
lök_node
, 
öo
)) != 0) {

831  
ªt
;

834 
sfs_öode
 *
 ksö
 = 
	`v›_öfo
(
lök_node
, sfs_inode);

835 i‡((
ªt
 = 
	`sfs_dúít_u∆ök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ1
, 
 ksö
)) != 0) {

836 
out
;

839 
isdú
 = (
 ksö
->
dö
->
ty≥
 =
SFS_TYPE_DIR
);

842 i‡(
isdú
) {

843 
	`sfs_∆öks_dec_nﬁock
(
sö
);

847 i‡((
ªt
 = 
	`sfs_dúít_lök_nﬁock
(
sfs
, 
√wsö
, 
¶Ÿ2
, 
 ksö
, 
√w_«me
)) != 0) {

848 i‡(
	`sfs_dúít_lök_nﬁock_check
(
sfs
, 
sö
, 
¶Ÿ1
, 
 ksö
, 
«me
) == 0) {

849 i‡(
isdú
) {

850 
	`sfs_∆öks_öc_nﬁock
(
sö
);

853 
out
;

856 i‡(
isdú
) {

858 
	`sfs_∆öks_öc_nﬁock
(
√wsö
);

861 
	`sfs_dúöfo_£t_∑ª¡
(
 ksö
, 
√wsö
);

864 
out
:

865 
	`v›_ªf_dec
(
lök_node
);

866  
ªt
;

867 
	}
}

870 
	$sfs_ª«me
(
öode
 *
node
, c⁄° *
«me
, öodê*
√w_node
, c⁄° *
√w_«me
) {

871 i‡(
	`°æí
(
«me
Ë> 
SFS_MAX_FNAME_LEN
 || såÀn(
√w_«me
) > SFS_MAX_FNAME_LEN) {

872  -
E_TOO_BIG
;

874 i‡(
	`°rcmp
(
«me
, ".") == 0 || strcmp(name, "..") == 0) {

875  -
E_INVAL
;

877 i‡(
	`°rcmp
(
√w_«me
, ".") == 0 || strcmp(new_name, "..") == 0) {

878  -
E_EXISTS
;

880 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

881 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_öode), *
√wsö
 = v›_öfo(
√w_node
, sfs_inode);

882 
ªt
;

883 
	`lock_sfs_muãx
(
sfs
);

885 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) == 0) {

886 i‡(
sö
 =
√wsö
) {

887 
ªt
 = 
	`sfs_ª«me1_nﬁock
(
sfs
, 
sö
, 
«me
, 
√w_«me
);

889 i‡((
ªt
 = 
	`åylock_sö
(
√wsö
)) == 0) {

890 
ªt
 = 
	`sfs_ª«me2_nﬁock
(
sfs
, 
sö
, 
«me
, 
√wsö
, 
√w_«me
);

891 
	`u∆ock_sö
(
√wsö
);

893 
	`u∆ock_sö
(
sö
);

896 
	`u∆ock_sfs_muãx
(
sfs
);

897  
ªt
;

898 
	}
}

901 
	$sfs_«mefûe
(
öode
 *
node
, 
iobuf
 *
iob
) {

902 
sfs_disk_íåy
 *
íåy
;

903 i‡(
iob
->
io_ªsid
 <2 || (
íåy
 = 
	`kmÆloc
((
sfs_disk_íåy
))Ë=
NULL
) {

904  -
E_NO_MEM
;

907 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

908 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

910 
ªt
;

911 
uöt32_t
 
öo
;

912 *
±r
 = 
iob
->
io_ba£
 + iob->
io_ªsid
;

913 
size_t
 
Æí
, 
ªsid
 = 
iob
->
io_ªsid
 - 2;

915 
	`v›_ªf_öc
(
node
);

916 (
öo
 = 
sö
->öoË!
SFS_BLKN_ROOT
) {

917 
öode
 *
∑ª¡
;

918 i‡((
ªt
 = 
	`sfs_lﬂd_∑ª¡
(
sfs
, 
sö
, &
∑ª¡
)) != 0) {

919 
Áûed
;

921 
	`v›_ªf_dec
(
node
);

923 
node
 = 
∑ª¡
, 
sö
 = 
	`v›_öfo
“ode, 
sfs_öode
);

924 
	`as£π
(
öo
 !
sö
->öÿ&& sö->
dö
->
ty≥
 =
SFS_TYPE_DIR
);

926 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) != 0) {

927 
Áûed
;

929 
ªt
 = 
	`sfs_dúít_födöo_nﬁock
(
sfs
, 
sö
, 
öo
, 
íåy
);

930 
	`u∆ock_sö
(
sö
);

932 i‡(
ªt
 != 0) {

933 
Áûed
;

936 i‡((
Æí
 = 
	`°æí
(
íåy
->
«me
Ë+ 1Ë> 
ªsid
) {

937 
Áûed_nomem
;

939 
ªsid
 -
Æí
, 
±r
 -=álen;

940 
	`mem˝y
(
±r
, 
íåy
->
«me
, 
Æí
 - 1);

941 
±r
[
Æí
 - 1] = '/';

943 
	`v›_ªf_dec
(
node
);

944 
Æí
 = 
iob
->
io_ªsid
 - 
ªsid
 - 2;

945 
±r
 = 
	`memmove
(
iob
->
io_ba£
 + 1,Öå, 
Æí
);

946 
±r
[-1] = '/',Öå[
Æí
] = '\0';

947 
	`iobuf_skù
(
iob
, 
Æí
);

948 
	`k‰ì
(
íåy
);

951 
Áûed_nomem
:

952 
ªt
 = -
E_NO_MEM
;

953 
Áûed
:

954 
	`v›_ªf_dec
(
node
);

955 
	`k‰ì
(
íåy
);

956  
ªt
;

957 
	}
}

960 
	$sfs_gëdúíåy_sub_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, 
¶Ÿ
, 
sfs_disk_íåy
 *
íåy
) {

961 
ªt
, 
i
, 
n¶Ÿs
 = 
sö
->
dö
->
blocks
;

962 
i
 = 0; i < 
n¶Ÿs
; i ++) {

963 i‡((
ªt
 = 
	`sfs_dúít_ªad_nﬁock
(
sfs
, 
sö
, 
i
, 
íåy
)) != 0) {

964  
ªt
;

966 i‡(
íåy
->
öo
 != 0) {

967 i‡(
¶Ÿ
 == 0) {

970 
¶Ÿ
 --;

973  -
E_NOENT
;

974 
	}
}

977 
	$sfs_gëdúíåy
(
öode
 *
node
, 
iobuf
 *
iob
) {

978 
sfs_disk_íåy
 *
íåy
;

979 i‡((
íåy
 = 
	`kmÆloc
((
sfs_disk_íåy
))Ë=
NULL
) {

980  -
E_NO_MEM
;

983 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

984 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

986 
off_t
 
off£t
 = 
iob
->
io_off£t
;

987 i‡(
off£t
 < 0 || off£à% 
sfs_díåy_size
 != 0) {

988 
	`k‰ì
(
íåy
);

989  -
E_INVAL
;

992 
ªt
, 
¶Ÿ
 = 
off£t
 / 
sfs_díåy_size
;

993 i‡(
¶Ÿ
 >
sö
->
dö
->
dúöfo
.
¶Ÿs
 + 2) {

994 
	`k‰ì
(
íåy
);

995  -
E_NOENT
;

997 
¶Ÿ
) {

999 
	`°r˝y
(
íåy
->
«me
, ".");

1002 
	`°r˝y
(
íåy
->
«me
, "..");

1005 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) != 0) {

1006 
out
;

1008 
ªt
 = 
	`sfs_gëdúíåy_sub_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
 - 2, 
íåy
);

1009 
	`u∆ock_sö
(
sö
);

1010 i‡(
ªt
 != 0) {

1011 
out
;

1014 
ªt
 = 
	`iobuf_move
(
iob
, 
íåy
->
«me
, 
sfs_díåy_size
, 1, 
NULL
);

1015 
out
:

1016 
	`k‰ì
(
íåy
);

1017  
ªt
;

1018 
	}
}

1021 
	$sfs_ª˛aim
(
öode
 *
node
) {

1022 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

1023 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

1025 
	`lock_sfs_fs
(
sfs
);

1027 
ªt
 = -
E_BUSY
;

1028 
	`as£π
(
sö
->
ª˛aim_cou¡
 > 0);

1029 i‡((-- 
sö
->
ª˛aim_cou¡
) != 0) {

1030 
Áûed_u∆ock
;

1032 
	`as£π
(
	`öode_ªf_cou¡
(
node
Ë=0 && 
	`öode_›í_cou¡
(node) == 0);

1034 i‡(
sö
->
dö
->
∆öks
 == 0) {

1035 
uöt32_t
 
nblks
;

1036 
nblks
 = 
sö
->
dö
->
blocks
;Çblks != 0;Çblks --) {

1037 
	`sfs_bm≠_åunˇã_nﬁock
(
sfs
, 
sö
);

1040 i‡(
sö
->
dúty
) {

1041 i‡((
ªt
 = 
	`v›_fsync
(
node
)) != 0) {

1042 
Áûed_u∆ock
;

1046 
	`sfs_ªmove_löks
(
sö
);

1047 
	`u∆ock_sfs_fs
(
sfs
);

1049 i‡(
sö
->
dö
->
∆öks
 == 0) {

1050 
	`sfs_block_‰ì
(
sfs
, 
sö
->
öo
);

1051 
uöt32_t
 
ít
;

1052 i‡((
ít
 = 
sö
->
dö
->
ödúe˘
) != 0) {

1053 
	`sfs_block_‰ì
(
sfs
, 
ít
);

1055 i‡((
ít
 = 
sö
->
dö
->
db_ödúe˘
) != 0) {

1056 
i
;

1057 
i
 = 0; i < 
SFS_BLK_NENTRY
; i ++) {

1058 
	`sfs_bm≠_‰ì_sub_nﬁock
(
sfs
, 
ít
, 
i
);

1060 
	`sfs_block_‰ì
(
sfs
, 
ít
);

1063 
	`k‰ì
(
sö
->
dö
);

1064 
	`v›_kûl
(
node
);

1067 
Áûed_u∆ock
:

1068 
	`u∆ock_sfs_fs
(
sfs
);

1069  
ªt
;

1070 
	}
}

1073 
	$sfs_gëty≥
(
öode
 *
node
, 
uöt32_t
 *
ty≥_°‹e
) {

1074 
sfs_disk_öode
 *
dö
 = 
	`v›_öfo
(
node
, 
sfs_öode
)->din;

1075 
dö
->
ty≥
) {

1076 
SFS_TYPE_DIR
:

1077 *
ty≥_°‹e
 = 
S_IFDIR
;

1079 
SFS_TYPE_FILE
:

1080 *
ty≥_°‹e
 = 
S_IFREG
;

1082 
SFS_TYPE_LINK
:

1083 *
ty≥_°‹e
 = 
S_IFLNK
;

1086 
	`∑nic
("övÆid fûêty≥ %d.\n", 
dö
->
ty≥
);

1087 
	}
}

1090 
	$sfs_åy£ek
(
öode
 *
node
, 
off_t
 
pos
) {

1091 i‡(
pos
 < 0 ||Öo†>
SFS_MAX_FILE_SIZE
) {

1092  -
E_INVAL
;

1094 
sfs_disk_öode
 *
dö
 = 
	`v›_öfo
(
node
, 
sfs_öode
)->din;

1095 i‡(
pos
 > 
dö
->
fûeöfo
.
size
) {

1096  
	`v›_åunˇã
(
node
, 
pos
);

1099 
	}
}

1102 
	$sfs_åuncfûe
(
öode
 *
node
, 
off_t
 
Àn
) {

1103 i‡(
Àn
 < 0 ||Üí > 
SFS_MAX_FILE_SIZE
) {

1104  -
E_INVAL
;

1106 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

1107 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

1108 
sfs_disk_öode
 *
dö
 = 
sö
->din;

1109 
	`as£π
(
dö
->
ty≥
 !
SFS_TYPE_DIR
);

1111 
ªt
 = 0;

1112 
uöt32_t
 
nblks
, 
tblks
 = 
	`ROUNDUP_DIV
(
Àn
, 
SFS_BLKSIZE
);

1113 i‡(
dö
->
fûeöfo
.
size
 =
Àn
) {

1114 
	`as£π
(
tblks
 =
dö
->
blocks
);

1118 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) != 0) {

1119  
ªt
;

1121 
nblks
 = 
dö
->
blocks
;

1122 i‡(
nblks
 < 
tblks
) {

1123 
nblks
 !
tblks
) {

1124 i‡((
ªt
 = 
	`sfs_bm≠_lﬂd_nﬁock
(
sfs
, 
sö
, 
nblks
, 
NULL
)) != 0) {

1125 
out_u∆ock
;

1127 
nblks
 ++;

1130 i‡(
tblks
 < 
nblks
) {

1131 
tblks
 !
nblks
) {

1132 i‡((
ªt
 = 
	`sfs_bm≠_åunˇã_nﬁock
(
sfs
, 
sö
)) != 0) {

1133 
out_u∆ock
;

1135 
nblks
 --;

1138 
	`as£π
(
dö
->
blocks
 =
tblks
);

1139 
dö
->
fûeöfo
.
size
 = 
Àn
;

1140 
sö
->
dúty
 = 1;

1142 
out_u∆ock
:

1143 
	`u∆ock_sö
(
sö
);

1144  
ªt
;

1145 
	}
}

1148 
	$sfs_¸óã_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
öode
 **
node_°‹e
) {

1149 
ªt
, 
¶Ÿ
;

1150 
uöt32_t
 
öo
;

1151 
öode
 *
lök_node
;

1152 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
«me
, &
öo
, 
NULL
, &
¶Ÿ
)Ë!-
E_NOENT
) {

1153 i‡(
ªt
 != 0) {

1154  
ªt
;

1156 i‡(!
ex˛
) {

1157 i‡((
ªt
 = 
	`sfs_lﬂd_öode
(
sfs
, &
lök_node
, 
öo
)) != 0) {

1158  
ªt
;

1160 i‡(
	`v›_öfo
(
lök_node
, 
sfs_öode
)->
dö
->
ty≥
 =
SFS_TYPE_FILE
) {

1161 
out
;

1163 
	`v›_ªf_dec
(
lök_node
);

1165  -
E_EXISTS
;

1168 i‡((
ªt
 = 
	`sfs_dúít_¸óã_öode
(
sfs
, 
SFS_TYPE_FILE
, &
lök_node
)) != 0) {

1169  
ªt
;

1171 i‡((
ªt
 = 
	`sfs_dúít_lök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
	`v›_öfo
(
lök_node
, 
sfs_öode
), 
«me
)) != 0) {

1172 
	`v›_ªf_dec
(
lök_node
);

1173  
ªt
;

1177 
out
:

1178 *
node_°‹e
 = 
lök_node
;

1180 
	}
}

1183 
	$sfs_¸óã
(
öode
 *
node
, c⁄° *
«me
, 
boﬁ
 
ex˛
, öodê**
node_°‹e
) {

1184 i‡(
	`°æí
(
«me
Ë> 
SFS_MAX_FNAME_LEN
) {

1185  -
E_TOO_BIG
;

1187 i‡(
	`°rcmp
(
«me
, ".") == 0 || strcmp(name, "..") == 0) {

1188  -
E_EXISTS
;

1190 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

1191 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

1192 
ªt
;

1193 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) == 0) {

1194 
ªt
 = 
	`sfs_¸óã_nﬁock
(
sfs
, 
sö
, 
«me
, 
ex˛
, 
node_°‹e
);

1195 
	`u∆ock_sö
(
sö
);

1197  
ªt
;

1198 
	}
}

1201 
	$sfs_u∆ök_nﬁock
(
sfs_fs
 *
sfs
, 
sfs_öode
 *
sö
, c⁄° *
«me
) {

1202 
ªt
, 
¶Ÿ
;

1203 
uöt32_t
 
öo
;

1204 i‡((
ªt
 = 
	`sfs_dúít_£¨ch_nﬁock
(
sfs
, 
sö
, 
«me
, &
öo
, &
¶Ÿ
, 
NULL
)) != 0) {

1205  
ªt
;

1207 
öode
 *
lök_node
;

1208 i‡((
ªt
 = 
	`sfs_lﬂd_öode
(
sfs
, &
lök_node
, 
öo
)) != 0) {

1209  
ªt
;

1211 
sfs_öode
 *
 ksö
 = 
	`v›_öfo
(
lök_node
, sfs_inode);

1212 i‡(
 ksö
->
dö
->
ty≥
 !
SFS_TYPE_DIR
) {

1213 
ªt
 = 
	`sfs_dúít_u∆ök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
);

1216 i‡((
ªt
 = 
	`åylock_sö
(
 ksö
)) == 0) {

1217 i‡(
 ksö
->
dö
->
dúöfo
.
¶Ÿs
 != 0) {

1218 
ªt
 = -
E_NOTEMPTY
;

1220 i‡((
ªt
 = 
	`sfs_dúít_u∆ök_nﬁock
(
sfs
, 
sö
, 
¶Ÿ
, 
 ksö
)) == 0) {

1222 
	`SëSFSInodeRemoved
(
 ksö
);

1225 
	`sfs_∆öks_dec_nﬁock
(
 ksö
);

1228 
	`sfs_∆öks_dec_nﬁock
(
sö
);

1230 
	`u∆ock_sö
(
 ksö
);

1233 
	`v›_ªf_dec
(
lök_node
);

1234  
ªt
;

1235 
	}
}

1238 
	$sfs_u∆ök
(
öode
 *
node
, c⁄° *
«me
) {

1239 i‡(
	`°æí
(
«me
Ë> 
SFS_MAX_FNAME_LEN
) {

1240  -
E_TOO_BIG
;

1242 i‡(
	`°rcmp
(
«me
, ".") == 0 || strcmp(name, "..") == 0) {

1243  -
E_ISDIR
;

1245 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

1246 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

1247 
ªt
;

1248 
	`lock_sfs_muãx
(
sfs
);

1250 i‡((
ªt
 = 
	`åylock_sö
(
sö
)) == 0) {

1251 
ªt
 = 
	`sfs_u∆ök_nﬁock
(
sfs
, 
sö
, 
«me
);

1252 
	`u∆ock_sö
(
sö
);

1255 
	`u∆ock_sfs_muãx
(
sfs
);

1256  
ªt
;

1257 
	}
}

1260 
	$sfs_lookup_sub∑th
(*
∑th
) {

1261 i‡((
∑th
 = 
	`°rchr
’©h, '/')Ë!
NULL
) {

1262 *
∑th
 == '/') {

1263 *
∑th
 ++ = '\0';

1265 i‡(*
∑th
 == '\0') {

1266  
NULL
;

1269  
∑th
;

1270 
	}
}

1273 
	$sfs_lookup
(
öode
 *
node
, *
∑th
, öodê**
node_°‹e
) {

1274 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

1275 
	`as£π
(*
∑th
 != '\0' && *path != '/');

1276 
	`v›_ªf_öc
(
node
);

1278 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

1279 i‡(
sö
->
dö
->
ty≥
 !
SFS_TYPE_DIR
) {

1280 
	`v›_ªf_dec
(
node
);

1281  -
E_NOTDIR
;

1284 *
sub∑th
;

1285 
√xt
:

1286 
sub∑th
 = 
	`sfs_lookup_sub∑th
(
∑th
);

1287 i‡(
	`°rcmp
(
∑th
, ".") == 0) {

1288 i‡((
∑th
 = 
sub∑th
Ë!
NULL
) {

1289 
√xt
;

1294 
ªt
;

1295 
öode
 *
subnode
;

1296 i‡(
	`°rcmp
(
∑th
, "..") == 0) {

1297 
ªt
 = 
	`sfs_lﬂd_∑ª¡
(
sfs
, 
sö
, &
subnode
);

1300 i‡(
	`°æí
(
∑th
Ë> 
SFS_MAX_FNAME_LEN
) {

1301 
	`v›_ªf_dec
(
node
);

1302  -
E_TOO_BIG
;

1304 
ªt
 = 
	`sfs_lookup_⁄˚
(
sfs
, 
sö
, 
∑th
, &
subnode
, 
NULL
);

1307 
	`v›_ªf_dec
(
node
);

1308 i‡(
ªt
 != 0) {

1309  
ªt
;

1311 
node
 = 
subnode
, 
∑th
 = 
sub∑th
;

1312 } 
∑th
 !
NULL
);

1313 *
node_°‹e
 = 
node
;

1315 
	}
}

1318 
	$sfs_lookup_∑ª¡
(
öode
 *
node
, *
∑th
, öodê**
node_°‹e
, **
ídp
) {

1319 
sfs_fs
 *
sfs
 = 
	`fs›_öfo
(
	`v›_fs
(
node
), sfs);

1320 
	`as£π
(*
∑th
 != '\0' && *path != '/');

1321 
	`v›_ªf_öc
(
node
);

1323 
sfs_öode
 *
sö
 = 
	`v›_öfo
(
node
, sfs_inode);

1324 i‡(
sö
->
dö
->
ty≥
 !
SFS_TYPE_DIR
) {

1325 
	`v›_ªf_dec
(
node
);

1326  -
E_NOTDIR
;

1329 *
sub∑th
;

1330 
√xt
:

1331 i‡((
sub∑th
 = 
	`sfs_lookup_sub∑th
(
∑th
)Ë=
NULL
) {

1332 *
node_°‹e
 = 
node
, *
ídp
 = 
∑th
;

1335 i‡(
	`°rcmp
(
∑th
, ".") == 0) {

1336 
∑th
 = 
sub∑th
;

1337 
√xt
;

1340 
ªt
;

1341 
öode
 *
subnode
;

1342 i‡(
	`°rcmp
(
∑th
, "..") == 0) {

1343 
ªt
 = 
	`sfs_lﬂd_∑ª¡
(
sfs
, 
sö
, &
subnode
);

1346 i‡(
	`°æí
(
∑th
Ë> 
SFS_MAX_FNAME_LEN
) {

1347 
	`v›_ªf_dec
(
node
);

1348  -
E_TOO_BIG
;

1350 
ªt
 = 
	`sfs_lookup_⁄˚
(
sfs
, 
sö
, 
∑th
, &
subnode
, 
NULL
);

1353 
	`v›_ªf_dec
(
node
);

1354 i‡(
ªt
 != 0) {

1355  
ªt
;

1357 
node
 = 
subnode
, 
∑th
 = 
sub∑th
;

1359 
	}
}

1361 c⁄° 
öode_›s
 
	gsfs_node_dú›s
 = {

1362 .
v›_magic
 = 
VOP_MAGIC
,

1363 .
	gv›_›í
 = 
sfs_›ídú
,

1364 .
	gv›_˛o£
 = 
sfs_˛o£
,

1365 .
	gv›_ªad
 = 
NULL_VOP_ISDIR
,

1366 .
	gv›_wrôe
 = 
NULL_VOP_ISDIR
,

1367 .
	gv›_f°©
 = 
sfs_f°©
,

1368 .
	gv›_fsync
 = 
sfs_fsync
,

1369 .
	gv›_mkdú
 = 
sfs_mkdú
,

1370 .
	gv›_lök
 = 
sfs_lök
,

1371 .
	gv›_ª«me
 = 
sfs_ª«me
,

1372 .
	gv›_ªadlök
 = 
NULL_VOP_ISDIR
,

1373 .
	gv›_symlök
 = 
NULL_VOP_UNIMP
,

1374 .
	gv›_«mefûe
 = 
sfs_«mefûe
,

1375 .
	gv›_gëdúíåy
 = 
sfs_gëdúíåy
,

1376 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

1377 .
	gv›_io˘l
 = 
NULL_VOP_INVAL
,

1378 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

1379 .
	gv›_åy£ek
 = 
NULL_VOP_ISDIR
,

1380 .
	gv›_åunˇã
 = 
NULL_VOP_ISDIR
,

1381 .
	gv›_¸óã
 = 
sfs_¸óã
,

1382 .
	gv›_u∆ök
 = 
sfs_u∆ök
,

1383 .
	gv›_lookup
 = 
sfs_lookup
,

1384 .
	gv›_lookup_∑ª¡
 = 
sfs_lookup_∑ª¡
,

1387 c⁄° 
öode_›s
 
	gsfs_node_fûe›s
 = {

1388 .
v›_magic
 = 
VOP_MAGIC
,

1389 .
	gv›_›í
 = 
sfs_›ífûe
,

1390 .
	gv›_˛o£
 = 
sfs_˛o£
,

1391 .
	gv›_ªad
 = 
sfs_ªad
,

1392 .
	gv›_wrôe
 = 
sfs_wrôe
,

1393 .
	gv›_f°©
 = 
sfs_f°©
,

1394 .
	gv›_fsync
 = 
sfs_fsync
,

1395 .
	gv›_mkdú
 = 
NULL_VOP_NOTDIR
,

1396 .
	gv›_lök
 = 
NULL_VOP_NOTDIR
,

1397 .
	gv›_ª«me
 = 
NULL_VOP_NOTDIR
,

1398 .
	gv›_ªadlök
 = 
NULL_VOP_NOTDIR
,

1399 .
	gv›_symlök
 = 
NULL_VOP_NOTDIR
,

1400 .
	gv›_«mefûe
 = 
NULL_VOP_NOTDIR
,

1401 .
	gv›_gëdúíåy
 = 
NULL_VOP_NOTDIR
,

1402 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

1403 .
	gv›_io˘l
 = 
NULL_VOP_INVAL
,

1404 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

1405 .
	gv›_åy£ek
 = 
sfs_åy£ek
,

1406 .
	gv›_åunˇã
 = 
sfs_åuncfûe
,

1407 .
	gv›_¸óã
 = 
NULL_VOP_NOTDIR
,

1408 .
	gv›_u∆ök
 = 
NULL_VOP_NOTDIR
,

1409 .
	gv›_lookup
 = 
NULL_VOP_NOTDIR
,

1410 .
	gv›_lookup_∑ª¡
 = 
NULL_VOP_NOTDIR
,

	@kern-ucore/fs/sfs/sfs_io.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<dev.h
>

4 
	~<sfs.h
>

5 
	~<iobuf.h
>

6 
	~<bôm≠.h
>

7 
	~<as£π.h
>

10 
	$sfs_rwblock_nﬁock
(
sfs_fs
 *
sfs
, *
buf
, 
uöt32_t
 
blkno
, 
boﬁ
 
wrôe
, boﬁ 
check
) {

11 
	`as£π
((
blkno
 !0 || !
check
Ë&& blknÿ< 
sfs
->
su≥r
.
blocks
);

12 
iobuf
 
__iob
, *
iob
 = 
	`iobuf_öô
(&__iob, 
buf
, 
SFS_BLKSIZE
, 
blkno
 * SFS_BLKSIZE);

13  
	`d›_io
(
sfs
->
dev
, 
iob
, 
wrôe
);

14 
	}
}

17 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, *
buf
, 
uöt32_t
 
blkno
, uöt32_à
nblks
, 
boﬁ
 
wrôe
) {

18 
ªt
 = 0;

19 
	`lock_sfs_io
(
sfs
);

21 
nblks
 != 0) {

22 i‡((
ªt
 = 
	`sfs_rwblock_nﬁock
(
sfs
, 
buf
, 
blkno
, 
wrôe
, 1)) != 0) {

25 
blkno
 ++, 
nblks
 --;

26 
buf
 +
SFS_BLKSIZE
;

29 
	`u∆ock_sfs_io
(
sfs
);

30  
ªt
;

31 
	}
}

34 
	$sfs_rblock
(
sfs_fs
 *
sfs
, *
buf
, 
uöt32_t
 
blkno
, uöt32_à
nblks
) {

35  
	`sfs_rwblock
(
sfs
, 
buf
, 
blkno
, 
nblks
, 0);

36 
	}
}

39 
	$sfs_wblock
(
sfs_fs
 *
sfs
, *
buf
, 
uöt32_t
 
blkno
, uöt32_à
nblks
) {

40  
	`sfs_rwblock
(
sfs
, 
buf
, 
blkno
, 
nblks
, 1);

41 
	}
}

44 
	$sfs_rbuf
(
sfs_fs
 *
sfs
, *
buf
, 
size_t
 
Àn
, 
uöt32_t
 
blkno
, 
off_t
 
off£t
) {

45 
	`as£π
(
off£t
 >0 && off£à< 
SFS_BLKSIZE
 && off£à+ 
Àn
 <= SFS_BLKSIZE);

46 
ªt
;

47 
	`lock_sfs_io
(
sfs
);

49 i‡((
ªt
 = 
	`sfs_rwblock_nﬁock
(
sfs
, sfs->
sfs_buf„r
, 
blkno
, 0, 1)) == 0) {

50 
	`mem˝y
(
buf
, 
sfs
->
sfs_buf„r
 + 
off£t
, 
Àn
);

53 
	`u∆ock_sfs_io
(
sfs
);

54  
ªt
;

55 
	}
}

58 
	$sfs_wbuf
(
sfs_fs
 *
sfs
, *
buf
, 
size_t
 
Àn
, 
uöt32_t
 
blkno
, 
off_t
 
off£t
) {

59 
	`as£π
(
off£t
 >0 && off£à< 
SFS_BLKSIZE
 && off£à+ 
Àn
 <= SFS_BLKSIZE);

60 
ªt
;

61 
	`lock_sfs_io
(
sfs
);

63 i‡((
ªt
 = 
	`sfs_rwblock_nﬁock
(
sfs
, sfs->
sfs_buf„r
, 
blkno
, 0, 1)) == 0) {

64 
	`mem˝y
(
sfs
->
sfs_buf„r
 + 
off£t
, 
buf
, 
Àn
);

65 
ªt
 = 
	`sfs_rwblock_nﬁock
(
sfs
, sfs->
sfs_buf„r
, 
blkno
, 1, 1);

68 
	`u∆ock_sfs_io
(
sfs
);

69  
ªt
;

70 
	}
}

73 
	$sfs_sync_su≥r
(
sfs_fs
 *
sfs
) {

74 
ªt
;

75 
	`lock_sfs_io
(
sfs
);

77 
	`mem£t
(
sfs
->
sfs_buf„r
, 0, 
SFS_BLKSIZE
);

78 
	`mem˝y
(
sfs
->
sfs_buf„r
, &(sfs->
su≥r
), (sfs->super));

79 
ªt
 = 
	`sfs_rwblock_nﬁock
(
sfs
, sfs->
sfs_buf„r
, 
SFS_BLKN_SUPER
, 1, 0);

81 
	`u∆ock_sfs_io
(
sfs
);

82  
ªt
;

83 
	}
}

86 
	$sfs_sync_‰ìm≠
(
sfs_fs
 *
sfs
) {

87 
uöt32_t
 
nblks
 = 
	`sfs_‰ìm≠_blocks
(&(
sfs
->
su≥r
));

88  
	`sfs_wblock
(
sfs
, 
	`bôm≠_gëd©a
(sfs->
‰ìm≠
, 
NULL
), 
SFS_BLKN_FREEMAP
, 
nblks
);

89 
	}
}

92 
	$sfs_˛ór_block
(
sfs_fs
 *
sfs
, 
uöt32_t
 
blkno
, uöt32_à
nblks
) {

93 
ªt
;

94 
	`lock_sfs_io
(
sfs
);

96 
	`mem£t
(
sfs
->
sfs_buf„r
, 0, 
SFS_BLKSIZE
);

97 
nblks
 != 0) {

98 i‡((
ªt
 = 
	`sfs_rwblock_nﬁock
(
sfs
, sfs->
sfs_buf„r
, 
blkno
, 1, 1)) != 0) {

101 
blkno
 ++, 
nblks
 --;

104 
	`u∆ock_sfs_io
(
sfs
);

105  
ªt
;

106 
	}
}

	@kern-ucore/fs/sfs/sfs_lock.c

1 
	~<ty≥s.h
>

2 
	~<£m.h
>

3 
	~<sfs.h
>

6 
	$lock_sfs_fs
(
sfs_fs
 *
sfs
) {

7 
	`down
(&(
sfs
->
fs_£m
));

8 
	}
}

11 
	$lock_sfs_io
(
sfs_fs
 *
sfs
) {

12 
	`down
(&(
sfs
->
io_£m
));

13 
	}
}

16 
	$lock_sfs_muãx
(
sfs_fs
 *
sfs
) {

17 
	`down
(&(
sfs
->
muãx_£m
));

18 
	}
}

21 
	$u∆ock_sfs_fs
(
sfs_fs
 *
sfs
) {

22 
	`up
(&(
sfs
->
fs_£m
));

23 
	}
}

26 
	$u∆ock_sfs_io
(
sfs_fs
 *
sfs
) {

27 
	`up
(&(
sfs
->
io_£m
));

28 
	}
}

31 
	$u∆ock_sfs_muãx
(
sfs_fs
 *
sfs
) {

32 
	`up
(&(
sfs
->
muãx_£m
));

33 
	}
}

	@kern-ucore/fs/swap/swapfs.c

1 
	~<sw≠.h
>

2 
	~<sw≠fs.h
>

3 
	~<mmu.h
>

4 
	~<fs.h
>

5 
	~<ide.h
>

6 
	~<pmm.h
>

7 
	~<as£π.h
>

10 
	$sw≠fs_öô
() {

11 
	`°©ic_as£π
((
PGSIZE
 % 
SECTSIZE
) == 0);

12 i‡(!
	`ide_devi˚_vÆid
(
SWAP_DEV_NO
)) {

13 
	`∑nic
("swap fs isn'távailable.\n");

15 
max_sw≠_off£t
 = 
	`ide_devi˚_size
(
SWAP_DEV_NO
Ë/ (
PGSIZE
 / 
SECTSIZE
);

16 
	}
}

19 
	$sw≠fs_ªad
(
sw≠_íåy_t
 
íåy
, 
Page
 *
∑ge
) {

20  
	`ide_ªad_£cs
(
SWAP_DEV_NO
, 
	`sw≠_off£t
(
íåy
Ë* 
PAGE_NSECT
, 
	`∑ge2kva
(
∑ge
), PAGE_NSECT);

21 
	}
}

24 
	$sw≠fs_wrôe
(
sw≠_íåy_t
 
íåy
, 
Page
 *
∑ge
) {

25  
	`ide_wrôe_£cs
(
SWAP_DEV_NO
, 
	`sw≠_off£t
(
íåy
Ë* 
PAGE_NSECT
, 
	`∑ge2kva
(
∑ge
), PAGE_NSECT);

26 
	}
}

	@kern-ucore/fs/swap/swapfs.h

1 #i‚de‡
__KERN_FS_SWAP_SWAPFS_H__


2 
	#__KERN_FS_SWAP_SWAPFS_H__


	)

4 
	~<memœyout.h
>

5 
	~<sw≠.h
>

7 
sw≠fs_öô
();

8 
sw≠fs_ªad
(
sw≠_íåy_t
 
íåy
, 
Page
 *
∑ge
);

9 
sw≠fs_wrôe
(
sw≠_íåy_t
 
íåy
, 
Page
 *
∑ge
);

	@kern-ucore/fs/sysfile.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<¶ab.h
>

4 
	~<vmm.h
>

5 
	~<¥oc.h
>

6 
	~<vfs.h
>

7 
	~<fûe.h
>

8 
	~<iobuf.h
>

9 
	~<sysfûe.h
>

10 
	~<°©.h
>

11 
	~<dúít.h
>

12 
	~<uni°d.h
>

13 
	~<îr‹.h
>

14 
	~<as£π.h
>

16 
	#IOBUF_SIZE
 4096

	)

19 
	$c›y_∑th
(**
to
, c⁄° *
‰om
) {

20 
mm_°ru˘
 *
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

21 *
buf„r
;

22 i‡((
buf„r
 = 
	`kmÆloc
(
FS_MAX_FPATH_LEN
 + 1)Ë=
NULL
) {

23  -
E_NO_MEM
;

25 
	`lock_mm
(
mm
);

26 i‡(!
	`c›y_°rög
(
mm
, 
buf„r
, 
‰om
, 
FS_MAX_FPATH_LEN
 + 1)) {

27 
	`u∆ock_mm
(
mm
);

28 
Áûed_˛ónup
;

30 
	`u∆ock_mm
(
mm
);

31 *
to
 = 
buf„r
;

34 
Áûed_˛ónup
:

35 
	`k‰ì
(
buf„r
);

36  -
E_INVAL
;

37 
	}
}

40 
	$sysfûe_›í
(c⁄° *
__∑th
, 
uöt32_t
 
›í_Êags
) {

41 
ªt
;

42 *
∑th
;

43 i‡((
ªt
 = 
	`c›y_∑th
(&
∑th
, 
__∑th
)) != 0) {

44  
ªt
;

46 
ªt
 = 
	`fûe_›í
(
∑th
, 
›í_Êags
);

47 
	`k‰ì
(
∑th
);

48  
ªt
;

49 
	}
}

52 
	$sysfûe_˛o£
(
fd
) {

53  
	`fûe_˛o£
(
fd
);

54 
	}
}

57 
	$sysfûe_ªad
(
fd
, *
ba£
, 
size_t
 
Àn
) {

58 
mm_°ru˘
 *
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

59 i‡(
Àn
 == 0) {

62 i‡(!
	`fûe_ã°fd
(
fd
, 1, 0)) {

63  -
E_INVAL
;

65 *
buf„r
;

66 i‡((
buf„r
 = 
	`kmÆloc
(
IOBUF_SIZE
)Ë=
NULL
) {

67  -
E_NO_MEM
;

70 
ªt
 = 0;

71 
size_t
 
c›õd
 = 0, 
Æí
;

72 
Àn
 != 0) {

73 i‡((
Æí
 = 
IOBUF_SIZE
Ë> 
Àn
) {

74 
Æí
 = 
Àn
;

76 
ªt
 = 
	`fûe_ªad
(
fd
, 
buf„r
, 
Æí
, &alen);

77 i‡(
Æí
 != 0) {

78 
	`lock_mm
(
mm
);

80 i‡(
	`c›y_to_u£r
(
mm
, 
ba£
, 
buf„r
, 
Æí
)) {

81 
	`as£π
(
Àn
 >
Æí
);

82 
ba£
 +
Æí
, 
Àn
 -Æí, 
c›õd
 +=álen;

84 i‡(
ªt
 == 0) {

85 
ªt
 = -
E_INVAL
;

88 
	`u∆ock_mm
(
mm
);

90 i‡(
ªt
 !0 || 
Æí
 == 0) {

91 
out
;

95 
out
:

96 
	`k‰ì
(
buf„r
);

97 i‡(
c›õd
 != 0) {

98  
c›õd
;

100  
ªt
;

101 
	}
}

104 
	$sysfûe_wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
) {

105 
mm_°ru˘
 *
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

106 i‡(
Àn
 == 0) {

109 i‡(!
	`fûe_ã°fd
(
fd
, 0, 1)) {

110  -
E_INVAL
;

112 *
buf„r
;

113 i‡((
buf„r
 = 
	`kmÆloc
(
IOBUF_SIZE
)Ë=
NULL
) {

114  -
E_NO_MEM
;

117 
ªt
 = 0;

118 
size_t
 
c›õd
 = 0, 
Æí
;

119 
Àn
 != 0) {

120 i‡((
Æí
 = 
IOBUF_SIZE
Ë> 
Àn
) {

121 
Æí
 = 
Àn
;

123 
	`lock_mm
(
mm
);

125 i‡(!
	`c›y_‰om_u£r
(
mm
, 
buf„r
, 
ba£
, 
Æí
, 0)) {

126 
ªt
 = -
E_INVAL
;

129 
	`u∆ock_mm
(
mm
);

130 i‡(
ªt
 == 0) {

131 
ªt
 = 
	`fûe_wrôe
(
fd
, 
buf„r
, 
Æí
, &alen);

132 i‡(
Æí
 != 0) {

133 
	`as£π
(
Àn
 >
Æí
);

134 
ba£
 +
Æí
, 
Àn
 -Æí, 
c›õd
 +=álen;

137 i‡(
ªt
 !0 || 
Æí
 == 0) {

138 
out
;

142 
out
:

143 
	`k‰ì
(
buf„r
);

144 i‡(
c›õd
 != 0) {

145  
c›õd
;

147  
ªt
;

148 
	}
}

151 
	$sysfûe_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
) {

152  
	`fûe_£ek
(
fd
, 
pos
, 
whí˚
);

153 
	}
}

156 
	$sysfûe_f°©
(
fd
, 
°©
 *
__°©
) {

157 
mm_°ru˘
 *
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

158 
ªt
;

159 
°©
 
__loˇl_°©
, *stat = &__local_stat;

160 i‡((
ªt
 = 
	`fûe_f°©
(
fd
, 
°©
)) != 0) {

161  
ªt
;

164 
	`lock_mm
(
mm
);

166 i‡(!
	`c›y_to_u£r
(
mm
, 
__°©
, 
°©
, (stat))) {

167 
ªt
 = -
E_INVAL
;

170 
	`u∆ock_mm
(
mm
);

171  
ªt
;

172 
	}
}

175 
	$sysfûe_fsync
(
fd
) {

176  
	`fûe_fsync
(
fd
);

177 
	}
}

180 
	$sysfûe_chdú
(c⁄° *
__∑th
) {

181 
ªt
;

182 *
∑th
;

183 i‡((
ªt
 = 
	`c›y_∑th
(&
∑th
, 
__∑th
)) != 0) {

184  
ªt
;

186 
ªt
 = 
	`vfs_chdú
(
∑th
);

187 
	`k‰ì
(
∑th
);

188  
ªt
;

189 
	}
}

192 
	$sysfûe_mkdú
(c⁄° *
__∑th
) {

193 
ªt
;

194 *
∑th
;

195 i‡((
ªt
 = 
	`c›y_∑th
(&
∑th
, 
__∑th
)) != 0) {

196  
ªt
;

198 
ªt
 = 
	`vfs_mkdú
(
∑th
);

199 
	`k‰ì
(
∑th
);

200  
ªt
;

201 
	}
}

204 
	$sysfûe_lök
(c⁄° *
__∑th1
, c⁄° *
__∑th2
) {

205 
ªt
;

206 *
ﬁd_∑th
, *
√w_∑th
;

207 i‡((
ªt
 = 
	`c›y_∑th
(&
ﬁd_∑th
, 
__∑th1
)) != 0) {

208  
ªt
;

210 i‡((
ªt
 = 
	`c›y_∑th
(&
√w_∑th
, 
__∑th2
)) != 0) {

211 
	`k‰ì
(
ﬁd_∑th
);

212  
ªt
;

214 
ªt
 = 
	`vfs_lök
(
ﬁd_∑th
, 
√w_∑th
);

215 
	`k‰ì
(
ﬁd_∑th
), k‰ì(
√w_∑th
);

216  
ªt
;

217 
	}
}

220 
	$sysfûe_ª«me
(c⁄° *
__∑th1
, c⁄° *
__∑th2
) {

221 
ªt
;

222 *
ﬁd_∑th
, *
√w_∑th
;

223 i‡((
ªt
 = 
	`c›y_∑th
(&
ﬁd_∑th
, 
__∑th1
)) != 0) {

224  
ªt
;

226 i‡((
ªt
 = 
	`c›y_∑th
(&
√w_∑th
, 
__∑th2
)) != 0) {

227 
	`k‰ì
(
ﬁd_∑th
);

228  
ªt
;

230 
ªt
 = 
	`vfs_ª«me
(
ﬁd_∑th
, 
√w_∑th
);

231 
	`k‰ì
(
ﬁd_∑th
), k‰ì(
√w_∑th
);

232  
ªt
;

233 
	}
}

236 
	$sysfûe_u∆ök
(c⁄° *
__∑th
) {

237 
ªt
;

238 *
∑th
;

239 i‡((
ªt
 = 
	`c›y_∑th
(&
∑th
, 
__∑th
)) != 0) {

240  
ªt
;

242 
ªt
 = 
	`vfs_u∆ök
(
∑th
);

243 
	`k‰ì
(
∑th
);

244  
ªt
;

245 
	}
}

248 
	$sysfûe_gëcwd
(*
buf
, 
size_t
 
Àn
) {

249 
mm_°ru˘
 *
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

250 i‡(
Àn
 == 0) {

251  -
E_INVAL
;

254 
	`lock_mm
(
mm
);

256 i‡(
	`u£r_mem_check
(
mm
, (
uöçå_t
)
buf
, 
Àn
, 1)) {

257 
iobuf
 
__iob
, *
iob
 = 
	`iobuf_öô
(&__iob, 
buf
, 
Àn
, 0);

258 
	`vfs_gëcwd
(
iob
);

261 
	`u∆ock_mm
(
mm
);

263 
	}
}

266 
	$sysfûe_gëdúíåy
(
fd
, 
dúít
 *
__dúíç
) {

267 
mm_°ru˘
 *
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

268 
dúít
 *
dúíç
;

269 i‡((
dúíç
 = 
	`kmÆloc
((
dúít
))Ë=
NULL
) {

270  -
E_NO_MEM
;

273 
ªt
 = 0;

274 
	`lock_mm
(
mm
);

276 i‡(!
	`c›y_‰om_u£r
(
mm
, &(
dúíç
->
off£t
), &(
__dúíç
->offset), (direntp->offset), 1)) {

277 
ªt
 = -
E_INVAL
;

280 
	`u∆ock_mm
(
mm
);

282 i‡(
ªt
 !0 || (ªà
	`fûe_gëdúíåy
(
fd
, 
dúíç
)) != 0) {

283 
out
;

286 
	`lock_mm
(
mm
);

288 i‡(!
	`c›y_to_u£r
(
mm
, 
__dúíç
, 
dúíç
, (
dúít
))) {

289 
ªt
 = -
E_INVAL
;

292 
	`u∆ock_mm
(
mm
);

294 
out
:

295 
	`k‰ì
(
dúíç
);

296  
ªt
;

297 
	}
}

300 
	$sysfûe_dup
(
fd1
, 
fd2
) {

301  
	`fûe_dup
(
fd1
, 
fd2
);

302 
	}
}

305 
	$sysfûe_pùe
(*
fd_°‹e
) {

306 
mm_°ru˘
 *
mm
 = 
	`∂s_ªad
(
cuºít
)->mm;

307 
ªt
, 
fd
[2];

308 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
fd_°‹e
, (
fd
), 1)) {

309  -
E_INVAL
;

311 i‡((
ªt
 = 
	`fûe_pùe
(
fd
)) == 0) {

312 
	`lock_mm
(
mm
);

314 i‡(!
	`c›y_to_u£r
(
mm
, 
fd_°‹e
, 
fd
, (fd))) {

315 
ªt
 = -
E_INVAL
;

318 
	`u∆ock_mm
(
mm
);

319 i‡(
ªt
 != 0) {

320 
	`fûe_˛o£
(
fd
[0]), file_close(fd[1]);

323  
ªt
;

324 
	}
}

327 
	$sysfûe_mkfifo
(c⁄° *
__«me
, 
uöt32_t
 
›í_Êags
) {

328 
ªt
;

329 *
«me
;

330 i‡((
ªt
 = 
	`c›y_∑th
(&
«me
, 
__«me
)) != 0) {

331  
ªt
;

333 
ªt
 = 
	`fûe_mkfifo
(
«me
, 
›í_Êags
);

334 
	`k‰ì
(
«me
);

335  
ªt
;

336 
	}
}

	@kern-ucore/fs/sysfile.h

1 #i‚de‡
__KERN_FS_SYSFILE_H__


2 
	#__KERN_FS_SYSFILE_H__


	)

4 
	~<ty≥s.h
>

6 
	g°©
;

7 
	gdúít
;

9 
sysfûe_›í
(c⁄° *
∑th
, 
uöt32_t
 
›í_Êags
);

10 
sysfûe_˛o£
(
fd
);

11 
sysfûe_ªad
(
fd
, *
ba£
, 
size_t
 
Àn
);

12 
sysfûe_wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
);

13 
sysfûe_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
);

14 
sysfûe_f°©
(
fd
, 
°©
 *stat);

15 
sysfûe_fsync
(
fd
);

16 
sysfûe_chdú
(c⁄° *
∑th
);

17 
sysfûe_mkdú
(c⁄° *
∑th
);

18 
sysfûe_lök
(c⁄° *
∑th1
, c⁄° *
∑th2
);

19 
sysfûe_ª«me
(c⁄° *
∑th1
, c⁄° *
∑th2
);

20 
sysfûe_u∆ök
(c⁄° *
∑th
);

21 
sysfûe_gëcwd
(*
buf
, 
size_t
 
Àn
);

22 
sysfûe_gëdúíåy
(
fd
, 
dúít
 *
dúíç
);

23 
sysfûe_dup
(
fd1
, 
fd2
);

24 
sysfûe_pùe
(*
fd_°‹e
);

25 
sysfûe_mkfifo
(c⁄° *
«me
, 
uöt32_t
 
›í_Êags
);

	@kern-ucore/fs/vfs/inode.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<©omic.h
>

5 
	~<¶ab.h
>

6 
	~<vfs.h
>

7 
	~<öode.h
>

8 
	~<îr‹.h
>

9 
	~<as£π.h
>

10 
	~<kio.h
>

15 
öode
 *

16 
	$__Æloc_öode
(
ty≥
) {

17 
öode
 *
node
;

18 i‡((
node
 = 
	`kmÆloc
((
öode
))Ë!
NULL
) {

19 
node
->
ö_ty≥
 = 
ty≥
;

21  
node
;

22 
	}
}

29 
	$öode_öô
(
öode
 *
node
, c⁄° 
öode_›s
 *
›s
, 
fs
 *fs) {

30 
	`©omic_£t
(&(
node
->
ªf_cou¡
), 0);

31 
	`©omic_£t
(&(
node
->
›í_cou¡
), 0);

32 
node
->
ö_›s
 = 
›s
,Çode->
ö_fs
 = 
fs
;

33 
	`v›_ªf_öc
(
node
);

34 
	}
}

41 
	$öode_kûl
(
öode
 *
node
) {

42 
	`as£π
(
	`öode_ªf_cou¡
(
node
) == 0);

43 
	`as£π
(
	`öode_›í_cou¡
(
node
) == 0);

44 
	`k‰ì
(
node
);

45 
	}
}

52 
	$öode_ªf_öc
(
öode
 *
node
) {

53  
	`©omic_add_ªtu∫
(&(
node
->
ªf_cou¡
), 1);

54 
	}
}

62 
	$öode_ªf_dec
(
öode
 *
node
) {

63 
	`as£π
(
	`öode_ªf_cou¡
(
node
) > 0);

64 
ªf_cou¡
, 
ªt
;

65 i‡((
ªf_cou¡
 = 
	`©omic_sub_ªtu∫
(&(
node
->ref_count), 1)) == 0) {

66 i‡((
ªt
 = 
	`v›_ª˛aim
(
node
)Ë!0 &&Ñë !-
E_BUSY
) {

67 
	`k¥ötf
("vfs: w¨nög: v›_ª˛aim: %e.\n", 
ªt
);

70  
ªf_cou¡
;

71 
	}
}

78 
	$öode_›í_öc
(
öode
 *
node
) {

79  
	`©omic_add_ªtu∫
(&(
node
->
›í_cou¡
), 1);

80 
	}
}

88 
	$öode_›í_dec
(
öode
 *
node
) {

89 
	`as£π
(
	`öode_›í_cou¡
(
node
) > 0);

90 
›í_cou¡
, 
ªt
;

91 i‡((
›í_cou¡
 = 
	`©omic_sub_ªtu∫
(&(
node
->open_count), 1)) == 0) {

92 i‡((
ªt
 = 
	`v›_˛o£
(
node
)) != 0) {

93 
	`k¥ötf
("vfs: w¨nög: v›_˛o£: %e.\n", 
ªt
);

96  
›í_cou¡
;

97 
	}
}

104 
	$öode_check
(
öode
 *
node
, c⁄° *
›°r
) {

105 
	`as£π
(
node
 !
NULL
 &&Çode->
ö_›s
 != NULL);

106 
	`as£π
(
node
->
ö_›s
->
v›_magic
 =
VOP_MAGIC
);

107 
ªf_cou¡
 = 
	`öode_ªf_cou¡
(
node
), 
›í_cou¡
 = 
	`öode_›í_cou¡
(node);

108 
	`as£π
(
ªf_cou¡
 >
›í_cou¡
 && open_count >= 0);

109 
	`as£π
(
ªf_cou¡
 < 
MAX_INODE_COUNT
 && 
›í_cou¡
 < MAX_INODE_COUNT);

110 
	}
}

116 
	$nuŒ_v›_∑ss
() {

118 
	}
}

121 
	$nuŒ_v›_övÆ
() {

122  -
E_INVAL
;

123 
	}
}

126 
	$nuŒ_v›_unimp
() {

127  -
E_UNIMP
;

128 
	}
}

131 
	$nuŒ_v›_isdú
() {

132  -
E_ISDIR
;

133 
	}
}

136 
	$nuŒ_v›_nŸdú
() {

137  -
E_NOTDIR
;

138 
	}
}

	@kern-ucore/fs/vfs/inode.h

1 #i‚de‡
__KERN_FS_VFS_INODE_H__


2 
	#__KERN_FS_VFS_INODE_H__


	)

4 
	~<ty≥s.h
>

5 
	~<dev.h
>

6 
	~<pùe.h
>

7 
	~<sfs.h
>

8 
	~<©omic.h
>

9 
	~<as£π.h
>

11 
	g°©
;

12 
	giobuf
;

30 
	söode
 {

32 
devi˚
 
	m__devi˚_öfo
;

33 
pùe_roŸ
 
	m__pùe_roŸ_öfo
;

34 
pùe_öode
 
	m__pùe_öode_öfo
;

35 
sfs_öode
 
	m__sfs_öode_öfo
;

36 } 
	mö_öfo
;

38 
	möode_ty≥_devi˚_öfo
 = 0x1234,

39 
	möode_ty≥_pùe_roŸ_öfo
,

40 
	möode_ty≥_pùe_öode_öfo
,

41 
	möode_ty≥_sfs_öode_öfo
,

42 } 
	mö_ty≥
;

43 
©omic_t
 
	mªf_cou¡
;

44 
©omic_t
 
	m›í_cou¡
;

45 
fs
 *
	mö_fs
;

46 c⁄° 
öode_›s
 *
	mö_›s
;

49 
	#__ö_ty≥
(
ty≥
Ë
öode_ty≥_
##ty≥##
_öfo


	)

51 
	#check_öode_ty≥
(
node
, 
ty≥
Ë(“ode)->
ö_ty≥
 =
	`__ö_ty≥
—y≥))

	)

53 
	#__v›_öfo
(
node
, 
ty≥
) \

55 
öode
 *
__node
 = (
node
); \

56 
	`as£π
(
__node
 !
NULL
 && 
	`check_öode_ty≥
(__node, 
ty≥
)); \

57 &(
__node
->
ö_öfo
.
__
##
ty≥
##
_öfo
); \

58 })

	)

60 
	#v›_öfo
(
node
, 
ty≥
Ë
	`__v›_öfo
“ode,Åy≥)

	)

62 
	#öfo2node
(
öfo
, 
ty≥
) \

63 
	`to_°ru˘
((
öfo
), 
öode
, 
ö_öfo
.
__
##
ty≥
##
_öfo
)

	)

65 
öode
 *
__Æloc_öode
(
ty≥
);

67 
	#Æloc_öode
(
ty≥
Ë
	`__Æloc_öode
(
	`__ö_ty≥
—y≥))

	)

69 
	#MAX_INODE_COUNT
 0x10000

	)

71 
öode_ªf_öc
(
öode
 *
node
);

72 
öode_ªf_dec
(
öode
 *
node
);

73 
öode_›í_öc
(
öode
 *
node
);

74 
öode_›í_dec
(
öode
 *
node
);

76 
öode_öô
(
öode
 *
node
, c⁄° 
öode_›s
 *
›s
, 
fs
 *fs);

77 
öode_kûl
(
öode
 *
node
);

79 
	#VOP_MAGIC
 0x8c4ba476

	)

201 
	söode_›s
 {

202 
	mv›_magic
;

203 (*
	mv›_›í
)(
öode
 *
	mnode
, 
uöt32_t
 
	m›í_Êags
);

204 (*
	mv›_˛o£
)(
öode
 *
	mnode
);

205 (*
	mv›_ªad
)(
öode
 *
	mnode
, 
iobuf
 *
	miob
);

206 (*
	mv›_wrôe
)(
öode
 *
	mnode
, 
iobuf
 *
	miob
);

207 (*
	mv›_f°©
)(
öode
 *
	mnode
, 
°©
 *
	m°©
);

208 (*
	mv›_fsync
)(
öode
 *
	mnode
);

209 (*
	mv›_mkdú
)(
öode
 *
	mnode
, c⁄° *
	m«me
);

210 (*
	mv›_lök
)(
öode
 *
	mnode
, c⁄° *
	m«me
, öodê*
	mlök_node
);

211 (*
	mv›_ª«me
)(
öode
 *
	mnode
, c⁄° *
	m«me
, öodê*
	m√w_node
, c⁄° *
	m√w_«me
);

212 (*
	mv›_ªadlök
)(
öode
 *
	mnode
, 
iobuf
 *
	miob
);

213 (*
	mv›_symlök
)(
öode
 *
	mnode
, c⁄° *
	m«me
, c⁄° *
	m∑th
);

214 (*
	mv›_«mefûe
)(
öode
 *
	mnode
, 
iobuf
 *
	miob
);

215 (*
	mv›_gëdúíåy
)(
öode
 *
	mnode
, 
iobuf
 *
	miob
);

216 (*
	mv›_ª˛aim
)(
öode
 *
	mnode
);

217 (*
	mv›_io˘l
)(
öode
 *
	mnode
, 
	m›
, *
	md©a
);

218 (*
	mv›_gëty≥
)(
öode
 *
	mnode
, 
uöt32_t
 *
	mty≥_°‹e
);

219 (*
	mv›_åy£ek
)(
öode
 *
	mnode
, 
off_t
 
	mpos
);

220 (*
	mv›_åunˇã
)(
öode
 *
	mnode
, 
off_t
 
	mÀn
);

221 (*
	mv›_¸óã
)(
öode
 *
	mnode
, c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, öodê**
	mnode_°‹e
);

222 (*
	mv›_u∆ök
)(
öode
 *
	mnode
, c⁄° *
	m«me
);

223 (*
	mv›_lookup
)(
öode
 *
	mnode
, *
	m∑th
, öodê**
	mnode_°‹e
);

224 (*
	mv›_lookup_∑ª¡
)(
öode
 *
	mnode
, *
	m∑th
, öodê**
	mnode_°‹e
, **
	mídp
);

227 
nuŒ_v›_∑ss
();

228 
nuŒ_v›_övÆ
();

229 
nuŒ_v›_unimp
();

230 
nuŒ_v›_isdú
();

231 
nuŒ_v›_nŸdú
();

236 
öode_check
(
öode
 *
node
, c⁄° *
›°r
);

238 
	#__v›_›
(
node
, 
sym
) \

240 
öode
 *
__node
 = (
node
); \

241 
	`as£π
(
__node
 !
NULL
 && __node->
ö_›s
 !NULL && __node->ö_›s->
v›_
##
sym
 != NULL); \

242 
	`öode_check
(
__node
, #sym); \

243 
__node
->
ö_›s
->
v›_
##
sym
; \

244 })

	)

246 
	#v›_›í
(
node
, 
›í_Êags
Ë(
	`__v›_›
“ode, 
›í
)“ode, o≥n_Êags))

	)

247 
	#v›_˛o£
(
node
Ë(
	`__v›_›
“ode, 
˛o£
)“ode))

	)

248 
	#v›_ªad
(
node
, 
iob
Ë(
	`__v›_›
“ode, 
ªad
)“ode, iob))

	)

249 
	#v›_wrôe
(
node
, 
iob
Ë(
	`__v›_›
“ode, 
wrôe
)“ode, iob))

	)

250 
	#v›_f°©
(
node
, 
°©
Ë(
	`__v›_›
“ode, 
f°©
)“ode, sèt))

	)

251 
	#v›_fsync
(
node
Ë(
	`__v›_›
“ode, 
fsync
)“ode))

	)

252 
	#v›_mkdú
(
node
, 
«me
Ë(
	`__v›_›
“ode, 
mkdú
)“ode,Çame))

	)

253 
	#v›_lök
(
node
, 
«me
, 
lök_node
Ë(
	`__v›_›
“ode, 
lök
)“ode,Çame,Üök_node))

	)

254 
	#v›_ª«me
(
node
, 
«me
, 
√w_node
, 
√w_«me
Ë(
	`__v›_›
“ode, 
ª«me
)“ode,Çame,Çew_node,Çew_«me))

	)

255 
	#v›_ªadlök
(
node
, 
iob
Ë(
	`__v›_›
“ode, 
ªadlök
)“ode, iob))

	)

256 
	#v›_symlök
(
node
, 
«me
, 
∑th
Ë(
	`__v›_›
“ode, 
symlök
)“ode,Çame,Ö©h))

	)

257 
	#v›_«mefûe
(
node
, 
iob
Ë(
	`__v›_›
“ode, 
«mefûe
)“ode, iob))

	)

258 
	#v›_gëdúíåy
(
node
, 
iob
Ë(
	`__v›_›
“ode, 
gëdúíåy
)“ode, iob))

	)

259 
	#v›_ª˛aim
(
node
Ë(
	`__v›_›
“ode, 
ª˛aim
)“ode))

	)

260 
	#v›_io˘l
(
node
, 
›
, 
d©a
Ë(
	`__v›_›
“ode, 
io˘l
)“ode, op, d©a))

	)

261 
	#v›_gëty≥
(
node
, 
ty≥_°‹e
Ë(
	`__v›_›
“ode, 
gëty≥
)“ode,Åy≥_°‹e))

	)

262 
	#v›_åy£ek
(
node
, 
pos
Ë(
	`__v›_›
“ode, 
åy£ek
)“ode,Öos))

	)

263 
	#v›_åunˇã
(
node
, 
Àn
Ë(
	`__v›_›
“ode, 
åunˇã
)“ode,Üí))

	)

264 
	#v›_¸óã
(
node
, 
«me
, 
ex˛
, 
node_°‹e
Ë(
	`__v›_›
“ode, 
¸óã
)“ode,Çame,Éx˛,Çode_°‹e))

	)

265 
	#v›_u∆ök
(
node
, 
«me
Ë(
	`__v›_›
“ode, 
u∆ök
)“ode,Çame))

	)

266 
	#v›_lookup
(
node
, 
∑th
, 
node_°‹e
Ë(
	`__v›_›
“ode, 
lookup
)“ode,Ö©h,Çode_°‹e))

	)

267 
	#v›_lookup_∑ª¡
(
node
, 
∑th
, 
node_°‹e
, 
ídp
Ë(
	`__v›_›
“ode, 
lookup_∑ª¡
)“ode,Ö©h,Çode_°‹e,Éndp))

	)

269 
	#v›_fs
(
node
Ë(“ode)->
ö_fs
)

	)

270 
	#v›_öô
(
node
, 
›s
, 
fs
Ë
	`öode_öô
“ode, ops, fs)

	)

271 
	#v›_kûl
(
node
Ë
	`öode_kûl
“ode)

	)

276 
	#v›_ªf_öc
(
node
Ë
	`öode_ªf_öc
“ode)

	)

277 
	#v›_ªf_dec
(
node
Ë
	`öode_ªf_dec
“ode)

	)

284 
	#v›_›í_öc
(
node
Ë
	`öode_›í_öc
“ode)

	)

285 
	#v›_›í_dec
(
node
Ë
	`öode_›í_dec
“ode)

	)

291 
	#NULL_VOP_PASS
 ((*)
nuŒ_v›_∑ss
)

	)

292 
	#NULL_VOP_INVAL
 ((*)
nuŒ_v›_övÆ
)

	)

293 
	#NULL_VOP_UNIMP
 ((*)
nuŒ_v›_unimp
)

	)

294 
	#NULL_VOP_ISDIR
 ((*)
nuŒ_v›_isdú
)

	)

295 
	#NULL_VOP_NOTDIR
 ((*)
nuŒ_v›_nŸdú
)

	)

297 
ölöe
 

298 
	$öode_ªf_cou¡
(
öode
 *
node
) {

299  
	`©omic_ªad
(&(
node
->
ªf_cou¡
));

300 
	}
}

302 
ölöe
 

303 
	$öode_›í_cou¡
(
öode
 *
node
) {

304  
	`©omic_ªad
(&(
node
->
›í_cou¡
));

305 
	}
}

	@kern-ucore/fs/vfs/vfs.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<¶ab.h
>

5 
	~<vfs.h
>

6 
	~<öode.h
>

7 
	~<£m.h
>

8 
	~<îr‹.h
>

10 
£m≠h‹e_t
 
	gboŸfs_£m
;

11 
öode
 *
	gboŸfs_node
 = 
NULL
;

13 
vfs_devli°_öô
();

15 
fs
 *

16 
	$__Æloc_fs
(
ty≥
) {

17 
fs
 *fs;

18 i‡((
fs
 = 
	`kmÆloc
((fs))Ë!
NULL
) {

19 
fs
->
fs_ty≥
 = 
ty≥
;

21  
fs
;

22 
	}
}

25 
	$vfs_öô
() {

26 
	`£m_öô
(&
boŸfs_£m
, 1);

27 
	`vfs_devli°_öô
();

28 
	}
}

31 
	$lock_boŸfs
() {

32 
	`down
(&
boŸfs_£m
);

33 
	}
}

36 
	$u∆ock_boŸfs
() {

37 
	`up
(&
boŸfs_£m
);

38 
	}
}

44 
	$ch™ge_boŸfs
(
öode
 *
node
) {

45 
öode
 *
ﬁd
;

46 
	`lock_boŸfs
();

48 
ﬁd
 = 
boŸfs_node
, boŸfs_nodê
node
;

50 
	`u∆ock_boŸfs
();

51 i‡(
ﬁd
 !
NULL
) {

52 
	`v›_ªf_dec
(
ﬁd
);

54 
	}
}

65 
	$vfs_£t_boŸfs
(*
f¢ame
) {

66 
öode
 *
node
 = 
NULL
;

67 i‡(
f¢ame
 !
NULL
) {

68 *
s
;

69 i‡((
s
 = 
	`°rchr
(
f¢ame
, ':')Ë=
NULL
 || s[1] != '\0') {

70  -
E_INVAL
;

72 
ªt
;

73 i‡((
ªt
 = 
	`vfs_chdú
(
f¢ame
)) != 0) {

74  
ªt
;

76 i‡((
ªt
 = 
	`vfs_gë_curdú
(&
node
)) != 0) {

77  
ªt
;

80 
	`ch™ge_boŸfs
(
node
);

82 
	}
}

88 
	$vfs_gë_boŸfs
(
öode
 **
node_°‹e
) {

89 
öode
 *
node
 = 
NULL
;

90 i‡(
boŸfs_node
 !
NULL
) {

91 
	`lock_boŸfs
();

93 i‡((
node
 = 
boŸfs_node
Ë!
NULL
) {

94 
	`v›_ªf_öc
(
boŸfs_node
);

97 
	`u∆ock_boŸfs
();

99 i‡(
node
 =
NULL
) {

100  -
E_NOENT
;

102 *
node_°‹e
 = 
node
;

104 
	}
}

	@kern-ucore/fs/vfs/vfs.h

1 #i‚de‡
__KERN_FS_VFS_VFS_H__


2 
	#__KERN_FS_VFS_VFS_H__


	)

4 
	~<ty≥s.h
>

5 
	~<fs.h
>

6 
	~<pùe.h
>

7 
	~<sfs.h
>

9 
	göode
;

10 
	gdevi˚
;

11 
	giobuf
;

36 
	sfs
 {

38 
pùe_fs
 
	m__pùe_öfo
;

39 
sfs_fs
 
	m__sfs_öfo
;

40 } 
	mfs_öfo
;

42 
	mfs_ty≥_pùe_öfo
 = 0x5678,

43 
	mfs_ty≥_sfs_öfo
,

44 } 
	mfs_ty≥
;

45 (*
	mfs_sync
)(
fs
 *
	mfs
);

46 
	möode
 *(*
	mfs_gë_roŸ
)(
fs
 *
	mfs
);

47 (*
	mfs_unmou¡
)(
fs
 *
	mfs
);

48 (*
	mfs_˛ónup
)(
fs
 *
	mfs
);

51 
	#__fs_ty≥
(
ty≥
Ë
fs_ty≥_
##ty≥##
_öfo


	)

53 
	#check_fs_ty≥
(
fs
, 
ty≥
Ë((fs)->
fs_ty≥
 =
	`__fs_ty≥
—y≥))

	)

55 
	#__fs›_öfo
(
_fs
, 
ty≥
) ({ \

56 
fs
 *
__fs
 = (
_fs
); \

57 
	`as£π
(
__fs
 !
NULL
 && 
	`check_fs_ty≥
(__fs, 
ty≥
)); \

58 &(
__fs
->
fs_öfo
.
__
##
ty≥
##
_öfo
); \

59 })

	)

61 
	#fs›_öfo
(
fs
, 
ty≥
Ë
	`__fs›_öfo
(fs,Åy≥)

	)

63 
	#öfo2fs
(
öfo
, 
ty≥
) \

64 
	`to_°ru˘
((
öfo
), 
fs
, 
fs_öfo
.
__
##
ty≥
##
_öfo
)

	)

66 
fs
 *
__Æloc_fs
(
ty≥
);

68 
	#Æloc_fs
(
ty≥
Ë
	`__Æloc_fs
(
	`__fs_ty≥
—y≥))

	)

71 
	#fs›_sync
(
fs
Ë((fs)->
	`fs_sync
(fs))

	)

72 
	#fs›_gë_roŸ
(
fs
Ë((fs)->
	`fs_gë_roŸ
(fs))

	)

73 
	#fs›_unmou¡
(
fs
Ë((fs)->
	`fs_unmou¡
(fs))

	)

74 
	#fs›_˛ónup
(
fs
Ë((fs)->
	`fs_˛ónup
(fs))

	)

82 
vfs_öô
();

83 
vfs_˛ónup
();

84 
vfs_devli°_öô
();

97 
vfs_£t_curdú
(
öode
 *
dú
);

98 
vfs_gë_curdú
(
öode
 **
dú_°‹e
);

99 
vfs_sync
();

100 
vfs_gë_roŸ
(c⁄° *
dev«me
, 
öode
 **
roŸ_°‹e
);

101 c⁄° *
vfs_gë_dev«me
(
fs
 *fs);

121 
vfs_›í
(*
∑th
, 
uöt32_t
 
›í_Êags
, 
öode
 **
öode_°‹e
);

122 
vfs_˛o£
(
öode
 *
node
);

123 
vfs_lök
(*
ﬁd_∑th
, *
√w_∑th
);

124 
vfs_symlök
(*
ﬁd_∑th
, *
√w_∑th
);

125 
vfs_ªadlök
(*
∑th
, 
iobuf
 *
iob
);

126 
vfs_mkdú
(*
∑th
);

127 
vfs_u∆ök
(*
∑th
);

128 
vfs_ª«me
(*
ﬁd_∑th
, *
√w_∑th
);

129 
vfs_chdú
(*
∑th
);

130 
vfs_gëcwd
(
iobuf
 *
iob
);

143 
vfs_lookup
(*
∑th
, 
öode
 **
node_°‹e
);

144 
vfs_lookup_∑ª¡
(*
∑th
, 
öode
 **
node_°‹e
, **
ídp
);

185 
vfs_£t_boŸfs
(*
f¢ame
);

186 
vfs_gë_boŸfs
(
öode
 **
node_°‹e
);

188 
vfs_add_fs
(c⁄° *
dev«me
, 
fs
 *fs);

189 
vfs_add_dev
(c⁄° *
dev«me
, 
öode
 *
devnode
, 
boﬁ
 
mou¡abÀ
);

191 
vfs_mou¡
(c⁄° *
dev«me
, (*
mou¡func
)(
devi˚
 *
dev
, 
fs
 **
fs_°‹e
));

192 
	`vfs_unmou¡
(c⁄° *
dev«me
);

193 
	`vfs_unmou¡_Æl
();

	@kern-ucore/fs/vfs/vfsdev.c

5 
	~<ty≥s.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<vfs.h
>

9 
	~<dev.h
>

10 
	~<öode.h
>

11 
	~<£m.h
>

12 
	~<li°.h
>

13 
	~<¶ab.h
>

14 
	~<uni°d.h
>

15 
	~<îr‹.h
>

16 
	~<as£π.h
>

17 
	~<kio.h
>

39 c⁄° *
	mdev«me
;

40 
öode
 *
	mdevnode
;

41 
fs
 *
	mfs
;

42 
boﬁ
 
	mmou¡abÀ
;

43 
li°_íåy_t
 
	mvdev_lök
;

44 } 
	tvfs_dev_t
;

46 
	#À2vdev
(
À
, 
membî
) \

47 
	`to_°ru˘
((
À
), 
vfs_dev_t
, 
membî
)

	)

49 
li°_íåy_t
 
	gvdev_li°
;

50 
£m≠h‹e_t
 
	gvdev_li°_£m
;

53 
	$lock_vdev_li°
() {

54 
	`down
(&
vdev_li°_£m
);

55 
	}
}

58 
	$u∆ock_vdev_li°
() {

59 
	`up
(&
vdev_li°_£m
);

60 
	}
}

63 
	$vfs_devli°_öô
() {

64 
	`li°_öô
(&
vdev_li°
);

65 
	`£m_öô
(&
vdev_li°_£m
, 1);

66 
	}
}

72 
	$vfs_˛ónup
() {

73 i‡(!
	`li°_em±y
(&
vdev_li°
)) {

74 
	`lock_vdev_li°
();

76 
li°_íåy_t
 *
li°
 = &
vdev_li°
, *
À
 =Üist;

77 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

78 
vfs_dev_t
 *
vdev
 = 
	`À2vdev
(
À
, 
vdev_lök
);

79 i‡(
vdev
->
fs
 !
NULL
) {

80 
	`fs›_˛ónup
(
vdev
->
fs
);

84 
	`u∆ock_vdev_li°
();

86 
	}
}

92 
	$vfs_sync
() {

93 i‡(!
	`li°_em±y
(&
vdev_li°
)) {

94 
	`lock_vdev_li°
();

96 
li°_íåy_t
 *
li°
 = &
vdev_li°
, *
À
 =Üist;

97 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

98 
vfs_dev_t
 *
vdev
 = 
	`À2vdev
(
À
, 
vdev_lök
);

99 i‡(
vdev
->
fs
 !
NULL
) {

100 
	`fs›_sync
(
vdev
->
fs
);

104 
	`u∆ock_vdev_li°
();

107 
	}
}

114 
	$vfs_gë_roŸ
(c⁄° *
dev«me
, 
öode
 **
node_°‹e
) {

115 
	`as£π
(
dev«me
 !
NULL
);

116 
ªt
 = -
E_NO_DEV
;

117 i‡(!
	`li°_em±y
(&
vdev_li°
)) {

118 
	`lock_vdev_li°
();

120 
li°_íåy_t
 *
li°
 = &
vdev_li°
, *
À
 =Üist;

121 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

122 
vfs_dev_t
 *
vdev
 = 
	`À2vdev
(
À
, 
vdev_lök
);

123 i‡(
	`°rcmp
(
dev«me
, 
vdev
->devname) == 0) {

124 
öode
 *
found
 = 
NULL
;

135 i‡(
vdev
->
fs
 !
NULL
) {

136 
found
 = 
	`fs›_gë_roŸ
(
vdev
->
fs
);

138 i‡(!
vdev
->
mou¡abÀ
) {

139 
	`v›_ªf_öc
(
vdev
->
devnode
);

140 
found
 = 
vdev
->
devnode
;

142 i‡(
found
 !
NULL
) {

148 
ªt
 = 0, *
node_°‹e
 = 
found
;

154 
ªt
 = -
E_NA_DEV
;

165 
	`u∆ock_vdev_li°
();

167  
ªt
;

168 
	}
}

174 
	$vfs_gë_dev«me
(
fs
 *fs) {

175 
	`as£π
(
fs
 !
NULL
);

176 
li°_íåy_t
 *
li°
 = &
vdev_li°
, *
À
 =Üist;

177 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

178 
vfs_dev_t
 *
vdev
 = 
	`À2vdev
(
À
, 
vdev_lök
);

179 i‡(
vdev
->
fs
 == fs) {

186  
vdev
->
dev«me
;

189  
NULL
;

190 
	}
}

192 
boﬁ


193 
	$check_dev«me_c⁄Êi˘
(c⁄° *
dev«me
) {

194 
li°_íåy_t
 *
li°
 = &
vdev_li°
, *
À
 =Üist;

195 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

196 
vfs_dev_t
 *
vdev
 = 
	`À2vdev
(
À
, 
vdev_lök
);

197 i‡(
	`°rcmp
(
vdev
->
dev«me
, devname) == 0) {

202 
	}
}

211 
	$vfs_do_add
(c⁄° *
dev«me
, 
öode
 *
devnode
, 
fs
 *fs, 
boﬁ
 
mou¡abÀ
) {

212 
	`as£π
(
dev«me
 !
NULL
);

213 
	`as£π
((
devnode
 =
NULL
 && !
mou¡abÀ
Ë|| (devnodê!NULL && 
	`check_öode_ty≥
(devnode, 
devi˚
)));

214 i‡(
	`°æí
(
dev«me
Ë> 
FS_MAX_DNAME_LEN
) {

215  -
E_TOO_BIG
;

218 
ªt
 = -
E_NO_MEM
;

219 *
s_dev«me
;

220 i‡((
s_dev«me
 = 
	`°rdup
(
dev«me
)Ë=
NULL
) {

221  
ªt
;

224 
vfs_dev_t
 *
vdev
;

225 i‡((
vdev
 = 
	`kmÆloc
((
vfs_dev_t
))Ë=
NULL
) {

226 
Áûed_˛ónup_«me
;

229 
ªt
 = -
E_EXISTS
;

230 
	`lock_vdev_li°
();

231 i‡(!
	`check_dev«me_c⁄Êi˘
(
s_dev«me
)) {

232 
	`u∆ock_vdev_li°
();

233 
Áûed_˛ónup_vdev
;

235 
vdev
->
dev«me
 = 
s_dev«me
;

236 
vdev
->
devnode
 = devnode;

237 
vdev
->
mou¡abÀ
 = mountable;

238 
vdev
->
fs
 = fs;

240 
	`li°_add
(&
vdev_li°
, &(
vdev
->
vdev_lök
));

241 
	`u∆ock_vdev_li°
();

244 
Áûed_˛ónup_vdev
:

245 
	`k‰ì
(
vdev
);

246 
Áûed_˛ónup_«me
:

247 
	`k‰ì
(
s_dev«me
);

248  
ªt
;

249 
	}
}

257 
	$vfs_add_fs
(c⁄° *
dev«me
, 
fs
 *fs) {

258  
	`vfs_do_add
(
dev«me
, 
NULL
, 
fs
, 0);

259 
	}
}

266 
	$vfs_add_dev
(c⁄° *
dev«me
, 
öode
 *
devnode
, 
boﬁ
 
mou¡abÀ
) {

267  
	`vfs_do_add
(
dev«me
, 
devnode
, 
NULL
, 
mou¡abÀ
);

268 
	}
}

275 
	$föd_mou¡
(c⁄° *
dev«me
, 
vfs_dev_t
 **
vdev_°‹e
) {

276 
	`as£π
(
dev«me
 !
NULL
);

277 
li°_íåy_t
 *
li°
 = &
vdev_li°
, *
À
 =Üist;

278 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

279 
vfs_dev_t
 *
vdev
 = 
	`À2vdev
(
À
, 
vdev_lök
);

280 i‡(
vdev
->
mou¡abÀ
 && 
	`°rcmp
(vdev->
dev«me
, devname) == 0) {

281 *
vdev_°‹e
 = 
vdev
;

285  -
E_NO_DEV
;

286 
	}
}

293 
vfs_mou¡
(c⁄° *
dev«me
, (*
mou¡func
)(
devi˚
 *
dev
, 
fs
 **
fs_°‹e
)) {

294 
ªt
;

295 
	`lock_vdev_li°
();

296 
vfs_dev_t
 *
vdev
;

297 i‡((
ªt
 = 
	`föd_mou¡
(
dev«me
, &
vdev
)) != 0) {

298 
out
;

300 i‡(
vdev
->
fs
 !
NULL
) {

301 
ªt
 = -
E_BUSY
;

302 
out
;

304 
	`as£π
(
vdev
->
dev«me
 !
NULL
 && vdev->
mou¡abÀ
);

306 
devi˚
 *
dev
 = 
	`v›_öfo
(
vdev
->
devnode
, device);

307 i‡((
ªt
 = 
	`mou¡func
(
dev
, &(
vdev
->
fs
))) == 0) {

308 
	`as£π
(
vdev
->
fs
 !
NULL
);

309 
	`k¥ötf
("vfs: mou¡ %s.\n", 
vdev
->
dev«me
);

312 
out
:

313 
	`u∆ock_vdev_li°
();

314  
ªt
;

315 
	}
}

322 
	$vfs_unmou¡
(c⁄° *
dev«me
) {

323 
ªt
;

324 
	`lock_vdev_li°
();

325 
vfs_dev_t
 *
vdev
;

326 i‡((
ªt
 = 
	`föd_mou¡
(
dev«me
, &
vdev
)) != 0) {

327 
out
;

329 i‡(
vdev
->
fs
 =
NULL
) {

330 
ªt
 = -
E_INVAL
;

331 
out
;

333 
	`as£π
(
vdev
->
dev«me
 !
NULL
 && vdev->
mou¡abÀ
);

335 i‡((
ªt
 = 
	`fs›_sync
(
vdev
->
fs
)) != 0) {

336 
out
;

338 i‡((
ªt
 = 
	`fs›_unmou¡
(
vdev
->
fs
)) == 0) {

340 
vdev
->
fs
 = 
NULL
;

341 
	`k¥ötf
("vfs: unmou¡ %s.\n", 
vdev
->
dev«me
);

344 
out
:

345 
	`u∆ock_vdev_li°
();

346  
ªt
;

347 
	}
}

353 
	$vfs_unmou¡_Æl
() {

354 i‡(!
	`li°_em±y
(&
vdev_li°
)) {

355 
	`lock_vdev_li°
();

357 
li°_íåy_t
 *
li°
 = &
vdev_li°
, *
À
 =Üist;

358 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

359 
vfs_dev_t
 *
vdev
 = 
	`À2vdev
(
À
, 
vdev_lök
);

360 i‡(
vdev
->
mou¡abÀ
 && vdev->
fs
 !
NULL
) {

361 
ªt
;

362 i‡((
ªt
 = 
	`fs›_sync
(
vdev
->
fs
)) != 0) {

363 
	`k¥ötf
("vfs: w¨nög: syn¯Áûed f‹ %s: %e.\n", 
vdev
->
dev«me
, 
ªt
);

366 i‡((
ªt
 = 
	`fs›_unmou¡
(
vdev
->
fs
)) != 0) {

367 
	`k¥ötf
("vfs: w¨nög: unmou¡ faûed f‹ %s: %e.\n", 
vdev
->
dev«me
, 
ªt
);

371 
vdev
->
fs
 = 
NULL
;

372 
	`k¥ötf
("vfs: unmou¡ %s.\n", 
vdev
->
dev«me
);

376 
	`u∆ock_vdev_li°
();

379 
	}
}

	@kern-ucore/fs/vfs/vfsfile.c

5 
	~<ty≥s.h
>

6 
	~<°rög.h
>

7 
	~<vfs.h
>

8 
	~<öode.h
>

9 
	~<uni°d.h
>

10 
	~<îr‹.h
>

11 
	~<as£π.h
>

15 
	$vfs_›í
(*
∑th
, 
uöt32_t
 
›í_Êags
, 
öode
 **
node_°‹e
) {

16 
boﬁ
 
ˇn_wrôe
 = 0;

17 
›í_Êags
 & 
O_ACCMODE
) {

18 
O_RDONLY
:

20 
O_WRONLY
:

21 
O_RDWR
:

22 
ˇn_wrôe
 = 1;

25  -
E_INVAL
;

28 i‡(
›í_Êags
 & 
O_TRUNC
) {

29 i‡(!
ˇn_wrôe
) {

30  -
E_INVAL
;

34 
ªt
;

35 
öode
 *
dú
, *
node
;

36 i‡(
›í_Êags
 & 
O_CREAT
) {

37 *
«me
;

38 
boﬁ
 
ex˛
 = (
›í_Êags
 & 
O_EXCL
) != 0;

39 i‡((
ªt
 = 
	`vfs_lookup_∑ª¡
(
∑th
, &
dú
, &
«me
)) != 0) {

40  
ªt
;

42 
ªt
 = 
	`v›_¸óã
(
dú
, 
«me
, 
ex˛
, &
node
);

43 
	`v›_ªf_dec
(
dú
);

46 
ªt
 = 
	`vfs_lookup
(
∑th
, &
node
);

49 i‡(
ªt
 != 0) {

50  
ªt
;

52 
	`as£π
(
node
 !
NULL
);

54 i‡((
ªt
 = 
	`v›_›í
(
node
, 
›í_Êags
)) != 0) {

55 
	`v›_ªf_dec
(
node
);

56  
ªt
;

59 
	`v›_›í_öc
(
node
);

60 i‡(
›í_Êags
 & 
O_TRUNC
) {

61 i‡((
ªt
 = 
	`v›_åunˇã
(
node
, 0)) != 0) {

62 
	`v›_›í_dec
(
node
);

63 
	`v›_ªf_dec
(
node
);

64  
ªt
;

67 *
node_°‹e
 = 
node
;

69 
	}
}

73 
	$vfs_˛o£
(
öode
 *
node
) {

89 
	`v›_›í_dec
(
node
);

90 
	`v›_ªf_dec
(
node
);

92 
	}
}

96 
	$vfs_u∆ök
(*
∑th
) {

97 
ªt
;

98 *
«me
;

99 
öode
 *
dú
;

100 i‡((
ªt
 = 
	`vfs_lookup_∑ª¡
(
∑th
, &
dú
, &
«me
)) != 0) {

101  
ªt
;

103 
ªt
 = 
	`v›_u∆ök
(
dú
, 
«me
);

104 
	`v›_ªf_dec
(
dú
);

105  
ªt
;

106 
	}
}

110 
	$vfs_ª«me
(*
ﬁd_∑th
, *
√w_∑th
) {

111 
ªt
;

112 *
ﬁd_«me
, *
√w_«me
;

113 
öode
 *
ﬁd_dú
, *
√w_dú
;

114 i‡((
ªt
 = 
	`vfs_lookup_∑ª¡
(
ﬁd_∑th
, &
ﬁd_dú
, &
ﬁd_«me
)) != 0) {

115  
ªt
;

117 i‡((
ªt
 = 
	`vfs_lookup_∑ª¡
(
√w_∑th
, &
√w_dú
, &
√w_«me
)) != 0) {

118 
	`v›_ªf_dec
(
ﬁd_dú
);

119  
ªt
;

122 i‡(
ﬁd_dú
->
ö_fs
 =
NULL
 || old_dú->ö_f†!
√w_dú
->in_fs) {

123 
ªt
 = -
E_XDEV
;

126 
ªt
 = 
	`v›_ª«me
(
ﬁd_dú
, 
ﬁd_«me
, 
√w_dú
, 
√w_«me
);

128 
	`v›_ªf_dec
(
ﬁd_dú
);

129 
	`v›_ªf_dec
(
√w_dú
);

130  
ªt
;

131 
	}
}

135 
	$vfs_lök
(*
ﬁd_∑th
, *
√w_∑th
) {

136 
ªt
;

137 *
√w_«me
;

138 
öode
 *
ﬁd_node
, *
√w_dú
;

139 i‡((
ªt
 = 
	`vfs_lookup
(
ﬁd_∑th
, &
ﬁd_node
)) != 0) {

140  
ªt
;

142 i‡((
ªt
 = 
	`vfs_lookup_∑ª¡
(
√w_∑th
, &
√w_dú
, &
√w_«me
)) != 0) {

143 
	`v›_ªf_dec
(
ﬁd_node
);

144  
ªt
;

147 i‡(
ﬁd_node
->
ö_fs
 =
NULL
 || old_node->ö_f†!
√w_dú
->in_fs) {

148 
ªt
 = -
E_XDEV
;

151 
ªt
 = 
	`v›_lök
(
√w_dú
, 
√w_«me
, 
ﬁd_node
);

153 
	`v›_ªf_dec
(
ﬁd_node
);

154 
	`v›_ªf_dec
(
√w_dú
);

155  
ªt
;

156 
	}
}

166 
	$vfs_symlök
(*
ﬁd_∑th
, *
√w_∑th
) {

167 
ªt
;

168 *
√w_«me
;

169 
öode
 *
√w_dú
;

170 i‡((
ªt
 = 
	`vfs_lookup_∑ª¡
(
√w_∑th
, &
√w_dú
, &
√w_«me
)) != 0) {

171  
ªt
;

173 
ªt
 = 
	`v›_symlök
(
√w_dú
, 
√w_«me
, 
ﬁd_∑th
);

174 
	`v›_ªf_dec
(
√w_dú
);

175  
ªt
;

176 
	}
}

186 
	$vfs_ªadlök
(*
∑th
, 
iobuf
 *
iob
) {

187 
ªt
;

188 
öode
 *
node
;

189 i‡((
ªt
 = 
	`vfs_lookup
(
∑th
, &
node
)) != 0) {

190  
ªt
;

192 
ªt
 = 
	`v›_ªadlök
(
node
, 
iob
);

193 
	`v›_ªf_dec
(
node
);

194  
ªt
;

195 
	}
}

201 
	$vfs_mkdú
(*
∑th
) {

202 
ªt
;

203 *
«me
;

204 
öode
 *
dú
;

205 i‡((
ªt
 = 
	`vfs_lookup_∑ª¡
(
∑th
, &
dú
, &
«me
)) != 0) {

206  
ªt
;

208 
ªt
 = 
	`v›_mkdú
(
dú
, 
«me
);

209 
	`v›_ªf_dec
(
dú
);

210  
ªt
;

211 
	}
}

	@kern-ucore/fs/vfs/vfslookup.c

5 
	~<ty≥s.h
>

6 
	~<°rög.h
>

7 
	~<vfs.h
>

8 
	~<öode.h
>

9 
	~<îr‹.h
>

10 
	~<as£π.h
>

17 
	$gë_devi˚
(*
∑th
, **
sub∑th
, 
öode
 **
node_°‹e
) {

18 
i
, 
¶ash
 = -1, 
cﬁ⁄
 = -1;

22 
i
 = 0; 
∑th
[i] != '\0'; i ++) {

23 i‡(
∑th
[
i
] =':'Ë{ 
cﬁ⁄
 = i; ; }

24 i‡(
∑th
[
i
] ='/'Ë{ 
¶ash
 = i; ; }

26 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

32 *
sub∑th
 = 
∑th
;

33  
	`vfs_gë_curdú
(
node_°‹e
);

35 i‡(
cﬁ⁄
 > 0) {

37 
∑th
[
cﬁ⁄
] = '\0';

40 
∑th
[++ 
cﬁ⁄
] == '/');

42 *
sub∑th
 = 
∑th
 + 
cﬁ⁄
;

43  
	`vfs_gë_roŸ
(
∑th
, 
node_°‹e
);

51 
ªt
;

52 i‡(*
∑th
 == '/') {

53 i‡((
ªt
 = 
	`vfs_gë_boŸfs
(
node_°‹e
)) != 0) {

54  
ªt
;

58 
	`as£π
(*
∑th
 == ':');

59 
öode
 *
node
;

60 i‡((
ªt
 = 
	`vfs_gë_curdú
(&
node
)) != 0) {

61  
ªt
;

64 
	`as£π
(
node
->
ö_fs
 !
NULL
);

65 *
node_°‹e
 = 
	`fs›_gë_roŸ
(
node
->
ö_fs
);

66 
	`v›_ªf_dec
(
node
);

70 *(++ 
∑th
) == '/');

71 *
sub∑th
 = 
∑th
;

73 
	}
}

81 
	$vfs_lookup
(*
∑th
, 
öode
 **
node_°‹e
) {

82 
ªt
;

83 
öode
 *
node
;

84 i‡((
ªt
 = 
	`gë_devi˚
(
∑th
, &∑th, &
node
)) != 0) {

85  
ªt
;

87 i‡(*
∑th
 != '\0') {

88 
ªt
 = 
	`v›_lookup
(
node
, 
∑th
, 
node_°‹e
);

89 
	`v›_ªf_dec
(
node
);

90  
ªt
;

92 *
node_°‹e
 = 
node
;

94 
	}
}

97 
	$vfs_lookup_∑ª¡
(*
∑th
, 
öode
 **
node_°‹e
, **
ídp
) {

98 
ªt
;

99 
öode
 *
node
;

100 i‡((
ªt
 = 
	`gë_devi˚
(
∑th
, &∑th, &
node
)) != 0) {

101  
ªt
;

103 
ªt
 = (*
∑th
 !'\0'Ë? 
	`v›_lookup_∑ª¡
(
node
,Ö©h, 
node_°‹e
, 
ídp
Ë: -
E_INVAL
;

104 
	`v›_ªf_dec
(
node
);

105  
ªt
;

106 
	}
}

	@kern-ucore/fs/vfs/vfspath.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<vfs.h
>

4 
	~<öode.h
>

5 
	~<iobuf.h
>

6 
	~<°©.h
>

7 
	~<¥oc.h
>

8 
	~<îr‹.h
>

9 
	~<as£π.h
>

11 
öode
 *

12 
	$gë_cwd_nﬁock
() {

13  
	`∂s_ªad
(
cuºít
)->
fs_°ru˘
->
pwd
;

14 
	}
}

17 
	$£t_cwd_nﬁock
(
öode
 *
pwd
) {

18 
	`∂s_ªad
(
cuºít
)->
fs_°ru˘
->
pwd
 =Öwd;

19 
	}
}

22 
	$lock_cfs
() {

23 
	`lock_fs
(
	`∂s_ªad
(
cuºít
)->
fs_°ru˘
);

24 
	}
}

27 
	$u∆ock_cfs
() {

28 
	`u∆ock_fs
(
	`∂s_ªad
(
cuºít
)->
fs_°ru˘
);

29 
	}
}

38 
	$vfs_gë_curdú
(
öode
 **
dú_°‹e
) {

39 
öode
 *
node
;

40 i‡((
node
 = 
	`gë_cwd_nﬁock
()Ë!
NULL
) {

41 
	`v›_ªf_öc
(
node
);

42 *
dú_°‹e
 = 
node
;

45  -
E_NOENT
;

46 
	}
}

53 
	$vfs_£t_curdú
(
öode
 *
dú
) {

54 
ªt
 = 0;

55 
	`lock_cfs
();

56 
öode
 *
ﬁd_dú
;

57 i‡((
ﬁd_dú
 = 
	`gë_cwd_nﬁock
()Ë!
dú
) {

58 i‡(
dú
 !
NULL
) {

59 
uöt32_t
 
ty≥
;

60 i‡((
ªt
 = 
	`v›_gëty≥
(
dú
, &
ty≥
)) != 0) {

61 
out
;

63 i‡(!
	`S_ISDIR
(
ty≥
)) {

64 
ªt
 = -
E_NOTDIR
;

65 
out
;

67 
	`v›_ªf_öc
(
dú
);

69 
	`£t_cwd_nﬁock
(
dú
);

70 i‡(
ﬁd_dú
 !
NULL
) {

71 
	`v›_ªf_dec
(
ﬁd_dú
);

74 
out
:

75 
	`u∆ock_cfs
();

76  
ªt
;

77 
	}
}

84 
	$vfs_chdú
(*
∑th
) {

85 
ªt
;

86 
öode
 *
node
;

87 i‡((
ªt
 = 
	`vfs_lookup
(
∑th
, &
node
)) == 0) {

88 
ªt
 = 
	`vfs_£t_curdú
(
node
);

89 
	`v›_ªf_dec
(
node
);

91  
ªt
;

92 
	}
}

99 
	$vfs_gëcwd
(
iobuf
 *
iob
) {

100 
ªt
;

101 
öode
 *
node
;

102 i‡((
ªt
 = 
	`vfs_gë_curdú
(&
node
)) != 0) {

103  
ªt
;

106 
	`as£π
(
node
->
ö_fs
 !
NULL
);

108 c⁄° *
dev«me
 = 
	`vfs_gë_dev«me
(
node
->
ö_fs
);

109 i‡((
ªt
 = 
	`iobuf_move
(
iob
, (*)
dev«me
, 
	`°æí
(dev«me), 1, 
NULL
)) != 0) {

110 
out
;

112 
cﬁ⁄
 = ':';

113 i‡((
ªt
 = 
	`iobuf_move
(
iob
, &
cﬁ⁄
, (cﬁ⁄), 1, 
NULL
)) != 0) {

114 
out
;

116 
ªt
 = 
	`v›_«mefûe
(
node
, 
iob
);

118 
out
:

119 
	`v›_ªf_dec
(
node
);

120  
ªt
;

121 
	}
}

	@kern-ucore/glue-ucore/clock.h

1 #i‚de‡
__GLUE_UCORE_CLOCK_H__


2 
	#__GLUE_UCORE_CLOCK_H__


	)

4 
	~<ty≥s.h
>

6 vﬁ©ûê
size_t
 
ticks
;

7 
˛ock_öô
();

8 
˛ock_öô_≠
();

	@kern-ucore/glue-ucore/entry.h

1 #i‚de‡
__GLUE_UCORE_ENTRY_H__


2 
	#__GLUE_UCORE_ENTRY_H__


	)

4 vﬁ©ûê
öô_föished
;

	@kern-ucore/glue-ucore/kio.h

1 #i‚de‡
__GLUE_UCORE_KIO_H__


2 
	#__GLUE_UCORE_KIO_H__


	)

4 
	~<ty≥s.h
>

5 
	~<°d¨g.h
>

6 
	~<glue_kio.h
>

8 
k¥ötf
(c⁄° *
fmt
, ...);

9 
vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
);

12 *
ªadlöe
(c⁄° *
¥om±
);

	@kern-ucore/glue-ucore/libs/assert.h

1 #i‚de‡
__KERN_DEBUG_ASSERT_H__


2 
	#__KERN_DEBUG_ASSERT_H__


	)

4 
__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...);

5 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

7 
	#w¨n
(...) \

8 
	`__w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

10 
	#∑nic
(...) \

11 
	`__∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

13 
	#as£π
(
x
) \

15 i‡(!(
x
)) { \

16 
	`∑nic
("assertion failed: %s", #x); \

18 
	}
} 0)

	)

21 
	#°©ic_as£π
(
x
) \

22 
x
Ë{ 0: (x): ; }

	)

	@kern-ucore/glue-ucore/libs/dirent.h

1 #i‚de‡
__LIBS_DIRENT_H__


2 
	#__LIBS_DIRENT_H__


	)

4 
	~<ty≥s.h
>

5 
	~<uni°d.h
>

7 
	sdúít
 {

8 
off_t
 
	moff£t
;

9 
	m«me
[
FS_MAX_FNAME_LEN
 + 1];

	@kern-ucore/glue-ucore/libs/elf.h

1 #i‚de‡
__LIBS_ELF_H__


2 
	#__LIBS_ELF_H__


	)

4 
	~<ty≥s.h
>

6 #ifde‡
__BIG_ENDIAN__


7 
	#ELF_MAGIC
 0x7F454C46U

8 #ñ£

	)

9 
	#ELF_MAGIC
 0x464C457FU

11 

	)

12 #ifde‡
__UCORE_64__


15 
	sñfhdr
 {

16 
uöt32_t
 
	me_magic
;

17 
uöt8_t
 
	me_ñf
[12];

18 
uöt16_t
 
	me_ty≥
;

19 
uöt16_t
 
	me_machöe
;

20 
uöt32_t
 
	me_vîsi⁄
;

21 
uöt64_t
 
	me_íåy
;

22 
uöt64_t
 
	me_phoff
;

23 
uöt64_t
 
	me_shoff
;

24 
uöt32_t
 
	me_Êags
;

25 
uöt16_t
 
	me_ehsize
;

26 
uöt16_t
 
	me_phítsize
;

27 
uöt16_t
 
	me_phnum
;

28 
uöt16_t
 
	me_shítsize
;

29 
uöt16_t
 
	me_shnum
;

30 
uöt16_t
 
	me_sh°∫dx
;

31 }
__©åibuã__
((
∑cked
));

34 
	s¥oghdr
 {

35 
uöt32_t
 
	mp_ty≥
;

36 
uöt32_t
 
	mp_Êags
;

37 
uöt64_t
 
	mp_off£t
;

38 
uöt64_t
 
	mp_va
;

39 
uöt64_t
 
	mp_∑
;

40 
uöt64_t
 
	mp_fûesz
;

41 
uöt64_t
 
	mp_memsz
;

42 
uöt64_t
 
	mp_Æign
;

45 
	s£˘hdr
 {

46 
uöt32_t
 
	msh_«me
;

47 
uöt32_t
 
	msh_ty≥
;

48 
uöt64_t
 
	msh_Êags
;

49 
uöt64_t
 
	msh_addr
;

50 
uöt64_t
 
	msh_off£t
;

51 
uöt64_t
 
	msh_size
;

52 
uöt32_t
 
	msh_lök
;

53 
uöt32_t
 
	msh_öfo
;

54 
uöt64_t
 
	msh_addølign
;

55 
uöt64_t
 
	msh_ítsize
;

56 }
__©åibuã__
((
∑cked
));

58 
	sªloc_s
 {

59 
uöt64_t
 
	mæ_off£t
;

60 
uöt64_t
 
	mæ_öfo
;

61 } 
__©åibuã__
((
∑cked
));

63 
	sªloc_a_s
 {

64 
uöt64_t
 
	mæ_off£t
;

65 
uöt64_t
 
	mæ_öfo
;

66 
öt64_t
 
	mæ_addíd
;

67 } 
__©åibuã__
((
∑cked
));

69 
	ssymèb_s
 {

70 
uöt32_t
 
	msym_«me
;

71 
uöt8_t
 
	msym_öfo
;

72 
uöt8_t
 
	msym_Ÿhî
;

73 
uöt16_t
 
	msym_shndx
;

74 
uöt64_t
 
	msym_addªss
;

75 
uöt64_t
 
	msym_size
;

76 } 
__©åibuã__
((
∑cked
));

78 
	#SH_TYPE_NULL
 0

	)

79 
	#SH_TYPE_PROGBITS
 1

	)

80 
	#SH_TYPE_SYMTAB
 2

	)

81 
	#SH_TYPE_STRTAB
 3

	)

82 
	#SH_TYPE_RELA
 4

	)

83 
	#SH_TYPE_HASH
 5

	)

84 
	#SH_TYPE_DYNAMIC
 6

	)

85 
	#SH_TYPE_NOTE
 7

	)

86 
	#SH_TYPE_NOBITS
 8

	)

87 
	#SH_TYPE_REL
 9

	)

89 
	#SHN_UNDEF
 0

	)

90 
	#SHN_COMMON
 0xfff2

	)

92 
	#GET_RELOC_SYM
(
i
Ë((i)>>32)

	)

93 
	#GET_RELOC_TYPE
(
i
Ë((i)&0xffffffff)

	)

95 
	#GET_SYMTAB_BIND
(
i
Ë((iË>> 4)

	)

96 
	#GET_SYMTAB_TYPE
(
i
Ë((iË& 0xf)

	)

99 
	#STB_LOCAL
 0

	)

100 
	#STB_GLOBAL
 1

	)

101 
	#STB_WEAK
 2

	)

102 
	#STB_LOPROC
 13

	)

103 
	#STB_HIPROC
 15

	)

106 
	#STT_NOTYPE
 0

	)

107 
	#STT_OBJECT
 1

	)

108 
	#STT_FUNC
 2

	)

109 
	#STT_SECTION
 3

	)

110 
	#STT_FILE
 4

	)

111 
	#STT_LOPROC
 13

	)

112 
	#STT_HIPROC
 15

	)

115 
	#ELF_PT_LOAD
 1

	)

118 
	#ELF_PF_X
 1

	)

119 
	#ELF_PF_W
 2

	)

120 
	#ELF_PF_R
 4

	)

124 
	sñfhdr
 {

125 
uöt32_t
 
	me_magic
;

126 
uöt8_t
 
	me_ñf
[12];

127 
uöt16_t
 
	me_ty≥
;

128 
uöt16_t
 
	me_machöe
;

129 
uöt32_t
 
	me_vîsi⁄
;

130 
uöt32_t
 
	me_íåy
;

131 
uöt32_t
 
	me_phoff
;

132 
uöt32_t
 
	me_shoff
;

133 
uöt32_t
 
	me_Êags
;

134 
uöt16_t
 
	me_ehsize
;

135 
uöt16_t
 
	me_phítsize
;

136 
uöt16_t
 
	me_phnum
;

137 
uöt16_t
 
	me_shítsize
;

138 
uöt16_t
 
	me_shnum
;

139 
uöt16_t
 
	me_sh°∫dx
;

143 
	s¥oghdr
 {

144 
uöt32_t
 
	mp_ty≥
;

145 
uöt32_t
 
	mp_off£t
;

146 
uöt32_t
 
	mp_va
;

147 
uöt32_t
 
	mp_∑
;

148 
uöt32_t
 
	mp_fûesz
;

149 
uöt32_t
 
	mp_memsz
;

150 
uöt32_t
 
	mp_Êags
;

151 
uöt32_t
 
	mp_Æign
;

157 
	#ELF_PT_LOAD
 1

	)

160 
	#ELF_PF_X
 1

	)

161 
	#ELF_PF_W
 2

	)

162 
	#ELF_PF_R
 4

	)

	@kern-ucore/glue-ucore/libs/error.h

1 #i‚de‡
__LIBS_ERROR_H__


2 
	#__LIBS_ERROR_H__


	)

5 
	#E_UNSPECIFIED
 1

6 
	#E_BAD_PROC
 2

7 
	#E_INVAL
 3

8 
	#E_NO_MEM
 4

9 
	#E_NO_FREE_PROC
 5

10 
	#E_FAULT
 6

11 
	#E_SWAP_FAULT
 7

12 
	#E_INVAL_ELF
 8

13 
	#E_KILLED
 9

14 
	#E_PANIC
 10

15 
	#E_TIMEOUT
 11

16 
	#E_TOO_BIG
 12

17 
	#E_NO_DEV
 13

18 
	#E_NA_DEV
 14

19 
	#E_BUSY
 15

20 
	#E_NOENT
 16

21 
	#E_ISDIR
 17

22 
	#E_NOTDIR
 18

23 
	#E_XDEV
 19

24 
	#E_UNIMP
 20

25 
	#E_SEEK
 21

26 
	#E_MAX_OPEN
 22

27 
	#E_EXISTS
 23

28 
	#E_NOTEMPTY
 24

29 

	)

30 
	#MAXERROR
 24

	)

	@kern-ucore/glue-ucore/libs/hash.c

1 
	~<°dlib.h
>

4 
	#GOLDEN_RATIO_PRIME_32
 0x9e370001UL

	)

13 
uöt32_t


14 
	$hash32
(
uöt32_t
 
vÆ
, 
bôs
) {

15 
uöt32_t
 
hash
 = 
vÆ
 * 
GOLDEN_RATIO_PRIME_32
;

16  (
hash
 >> (32 - 
bôs
));

17 
	}
}

	@kern-ucore/glue-ucore/libs/list.h

1 #i‚de‡
__LIBS_LIST_H__


2 
	#__LIBS_LIST_H__


	)

4 #i‚de‡
__ASSEMBLER__


6 
	~<ty≥s.h
>

17 
	sli°_íåy
 {

18 
li°_íåy
 *
	m¥ev
, *
	m√xt
;

21 
li°_íåy
 
	tli°_íåy_t
;

23 
ölöe
 
	$li°_öô
(
li°_íåy_t
 *
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$li°_add
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$li°_add_bef‹e
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
	$li°_add_a·î
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$li°_dñ
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
	$li°_dñ_öô
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁ
 
	$li°_em±y
(
li°_íåy_t
 *
li°
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
li°_íåy_t
 *
	$li°_√xt
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
li°_íåy_t
 *
	$li°_¥ev
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
	$__li°_add
(
li°_íåy_t
 *
ñm
,Üi°_íåy_à*
¥ev
,Üi°_íåy_à*
√xt
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
	$__li°_dñ
(
li°_íåy_t
 *
¥ev
,Üi°_íåy_à*
√xt
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 

41 
	$li°_öô
(
li°_íåy_t
 *
ñm
) {

42 
ñm
->
¥ev
 =Élm->
√xt
 =Élm;

43 
	}
}

53 
ölöe
 

54 
	$li°_add
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

55 
	`li°_add_a·î
(
li°ñm
, 
ñm
);

56 
	}
}

66 
ölöe
 

67 
	$li°_add_bef‹e
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

68 
	`__li°_add
(
ñm
, 
li°ñm
->
¥ev
,Üistelm);

69 
	}
}

79 
ölöe
 

80 
	$li°_add_a·î
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

81 
	`__li°_add
(
ñm
, 
li°ñm
,Üi°ñm->
√xt
);

82 
	}
}

91 
ölöe
 

92 
	$li°_dñ
(
li°_íåy_t
 *
li°ñm
) {

93 
	`__li°_dñ
(
li°ñm
->
¥ev
,Üi°ñm->
√xt
);

94 
	}
}

102 
ölöe
 

103 
	$li°_dñ_öô
(
li°_íåy_t
 *
li°ñm
) {

104 
	`li°_dñ
(
li°ñm
);

105 
	`li°_öô
(
li°ñm
);

106 
	}
}

112 
ölöe
 
boﬁ


113 
	$li°_em±y
(
li°_íåy_t
 *
li°
) {

114  
li°
->
√xt
 ==Üist;

115 
	}
}

121 
li°_íåy_t
 *

122 
	$li°_√xt
(
li°_íåy_t
 *
li°ñm
) {

123  
li°ñm
->
√xt
;

124 
	}
}

130 
li°_íåy_t
 *

131 
	$li°_¥ev
(
li°_íåy_t
 *
li°ñm
) {

132  
li°ñm
->
¥ev
;

133 
	}
}

141 
ölöe
 

142 
	$__li°_add
(
li°_íåy_t
 *
ñm
,Üi°_íåy_à*
¥ev
,Üi°_íåy_à*
√xt
) {

143 
¥ev
->
√xt
 =Çext->¥ev = 
ñm
;

144 
ñm
->
√xt
 =Çext;

145 
ñm
->
¥ev
 =Örev;

146 
	}
}

154 
ölöe
 

155 
	$__li°_dñ
(
li°_íåy_t
 *
¥ev
,Üi°_íåy_à*
√xt
) {

156 
¥ev
->
√xt
 =Çext;

157 
√xt
->
¥ev
 =Örev;

158 
	}
}

	@kern-ucore/glue-ucore/libs/mboxbuf.h

1 #i‚de‡
__LIBS_MBOXBUF_H__


2 
	#__LIBS_MBOXBUF_H__


	)

4 
	~<ty≥s.h
>

6 
	#MAX_MSG_SLOTS
 0x1000

	)

7 
	#MAX_MSG_BYTES
 0x10000

	)

9 
	smboxbuf
 {

10 
	m‰om
;

11 
size_t
 
	mÀn
;

12 
size_t
 
	msize
;

13 *
	md©a
;

16 
	smboxöfo
 {

17 
size_t
 
	m¶Ÿs
;

18 
size_t
 
	mmax_¶Ÿs
;

19 
boﬁ
 
	möu£
;

20 
boﬁ
 
	mhas_£ndî
;

21 
boﬁ
 
	mhas_ª˚ivî
;

	@kern-ucore/glue-ucore/libs/printfmt.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<îr‹.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

18 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
 + 1] = {

19 [0] 
NULL
,

20 [
E_UNSPECIFIED
] "unspecifiedÉrror",

21 [
E_BAD_PROC
] "badÖrocess",

22 [
E_INVAL
] "invalidÖarameter",

23 [
E_NO_MEM
] "out of memory",

24 [
E_NO_FREE_PROC
] "out ofÖrocesses",

25 [
E_FAULT
] "segmentation fault",

26 [
E_SWAP_FAULT
] "swap diskÑead/write fault",

27 [
E_INVAL_ELF
] "invalidÉlf file",

28 [
E_KILLED
] "process is killed",

29 [
E_PANIC
] "panic failure",

30 [
E_TIMEOUT
] "timeout",

31 [
E_TOO_BIG
] "argument isÅoo big",

32 [
E_NO_DEV
] "no such device",

33 [
E_NA_DEV
] "deviceÇotávailable",

34 [
E_BUSY
] "device/file is busy",

35 [
E_NOENT
] "no such file or directory",

36 [
E_ISDIR
] "isá directory",

37 [
E_NOTDIR
] "notá directory",

38 [
E_XDEV
] "cross deviceÜink",

39 [
E_UNIMP
] "unimplemented feature",

40 [
E_SEEK
] "illegal seek",

41 [
E_MAX_OPEN
] "too many filesáre open",

42 [
E_EXISTS
] "file or directoryálreadyÉxists",

43 [
E_NOTEMPTY
] "directory isÇotÉmpty",

57 
¥öäum
((*
putch
)(, *, ), 
fd
, *
putd©
,

58 
num
, 
ba£
, 
width
, 
∑dc
) {

59 
ªsu…
 = 
num
;

60 
mod
 = 
	`do_div
(
ªsu…
, 
ba£
);

63 i‡(
num
 >
ba£
) {

64 
	`¥öäum
(
putch
, 
fd
, 
putd©
, 
ªsu…
, 
ba£
, 
width
 - 1, 
∑dc
);

67 -- 
width
 > 0)

68 
	`putch
(
∑dc
, 
putd©
, 
fd
);

71 
	`putch
("0123456789abcdef"[
mod
], 
putd©
, 
fd
);

72 
	}
}

74 
	#GETINT_MACRO


	)

81 #ifde‡
GETINT_MACRO


82 
	#gëuöt
(
≠
, 
lÊag
) \

83 ((
lÊag
 >2Ë? ()
	`va_¨g
(
≠
, ) : \

84 (
lÊag
Ë? ()
	`va_¨g
(
≠
, ) : \

85 ()
	`va_¨g
(
≠
, ) \

86 )

	)

89 
	$gëuöt
(
va_li°
 
≠
, 
lÊag
) {

90 i‡(
lÊag
 >= 2) {

91  
	`va_¨g
(
≠
, );

93 i‡(
lÊag
) {

94  
	`va_¨g
(
≠
, );

97  
	`va_¨g
(
≠
, );

99 
	}
}

107 #ifde‡
GETINT_MACRO


108 
	#gëöt
(
≠
, 
lÊag
) \

109 ((
lÊag
 >2Ë? ()
	`va_¨g
(
≠
, ) : \

110 (
lÊag
Ë? ()
	`va_¨g
(
≠
, ) : \

111 ()
	`va_¨g
(
≠
, ) \

112 )

	)

115 
	$gëöt
(
va_li°
 
≠
, 
lÊag
) {

116 i‡(
lÊag
 >= 2) {

117  
	`va_¨g
(
≠
, );

119 i‡(
lÊag
) {

120  
	`va_¨g
(
≠
, );

123  
	`va_¨g
(
≠
, );

125 
	}
}

136 
¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, ...) {

137 
va_li°
 
≠
;

139 
	`va_°¨t
(
≠
, 
fmt
);

140 
	`v¥ötfmt
(
putch
, 
fd
, 
putd©
, 
fmt
, 
≠
);

141 
	`va_íd
(
≠
);

142 
	}
}

157 
v¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
) {

158 c⁄° *
p
;

159 
ch
, 
îr
;

160 
num
;

161 
ba£
, 
width
, 
¥ecisi⁄
, 
lÊag
, 
ÆtÊag
;

164 (
ch
 = *(*)
fmt
 ++) != '%') {

165 i‡(
ch
 == '\0') {

168 
	`putch
(
ch
, 
putd©
, 
fd
);

172 
∑dc
 = ' ';

173 
width
 = 
¥ecisi⁄
 = -1;

174 
lÊag
 = 
ÆtÊag
 = 0;

176 
ªswôch
:

177 
ch
 = *(*)
fmt
 ++) {

181 
∑dc
 = '-';

182 
ªswôch
;

186 
∑dc
 = '0';

187 
ªswôch
;

191 
¥ecisi⁄
 = 0; ; ++ 
fmt
) {

192 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

193 
ch
 = *
fmt
;

194 i‡(
ch
 < '0' || ch > '9') {

198 
¥o˚ss_¥ecisi⁄
;

201 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

202 
¥o˚ss_¥ecisi⁄
;

205 i‡(
width
 < 0)

206 
width
 = 0;

207 
ªswôch
;

210 
ÆtÊag
 = 1;

211 
ªswôch
;

213 
¥o˚ss_¥ecisi⁄
:

214 i‡(
width
 < 0)

215 
width
 = 
¥ecisi⁄
,Örecision = -1;

216 
ªswôch
;

220 
lÊag
 ++;

221 
ªswôch
;

225 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
, 
fd
);

230 
îr
 = 
	`va_¨g
(
≠
, );

231 i‡(
îr
 < 0) {

232 
îr
 = -err;

234 i‡(
îr
 > 
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
) {

235 
	`¥ötfmt
(
putch
, 
fd
, 
putd©
, "îr‹ %d", 
îr
);

238 
	`¥ötfmt
(
putch
, 
fd
, 
putd©
, "%s", 
p
);

244 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
) {

245 
p
 = "(null)";

247 i‡(
width
 > 0 && 
∑dc
 != '-') {

248 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width --) {

249 
	`putch
(
∑dc
, 
putd©
, 
fd
);

252 ; (
ch
 = *
p
 ++Ë!'\0' && (
¥ecisi⁄
 < 0 || --Öªcisi⁄ >0); 
width
 --) {

253 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~')) {

254 
	`putch
('?', 
putd©
, 
fd
);

257 
	`putch
(
ch
, 
putd©
, 
fd
);

260 ; 
width
 > 0; width --) {

261 
	`putch
(' ', 
putd©
, 
fd
);

267 
num
 = 
	`gëöt
(
≠
, 
lÊag
);

268 i‡(()
num
 < 0) {

269 
	`putch
('-', 
putd©
, 
fd
);

270 
num
 = -()num;

272 
ba£
 = 10;

273 
numbî
;

277 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

278 
ba£
 = 10;

279 
numbî
;

283 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

284 
ba£
 = 8;

285 
numbî
;

289 
	`putch
('0', 
putd©
, 
fd
);

290 
	`putch
('x', 
putd©
, 
fd
);

291 
num
 = ()(
uöçå_t
)
	`va_¨g
(
≠
, *);

292 
ba£
 = 16;

293 
numbî
;

297 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

298 
ba£
 = 16;

299 
numbî
:

300 
	`¥öäum
(
putch
, 
fd
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

305 
	`putch
(
ch
, 
putd©
, 
fd
);

310 
	`putch
('%', 
putd©
, 
fd
);

311 
fmt
 --; fmt[-1] != '%'; fmt --)

316 
	}
}

319 
	s•rötbuf
 {

320 *
	mbuf
;

321 *
	mebuf
;

322 
	m˙t
;

331 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
) {

332 
b
->
˙t
 ++;

333 i‡(
b
->
buf
 < b->
ebuf
) {

334 *
b
->
buf
 ++ = 
ch
;

336 
	}
}

345 
	$¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...) {

346 
va_li°
 
≠
;

347 
˙t
;

348 
	`va_°¨t
(
≠
, 
fmt
);

349 
˙t
 = 
	`v¢¥ötf
(
°r
, 
size
, 
fmt
, 
≠
);

350 
	`va_íd
(
≠
);

351  
˙t
;

352 
	}
}

369 
	$v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

370 
•rötbuf
 
b
 = {
°r
, så + 
size
 - 1, 0};

371 i‡(
°r
 =
NULL
 || 
b
.
buf
 > b.
ebuf
) {

372  -
E_INVAL
;

375 
	`v¥ötfmt
((*)
•röçutch
, 
NO_FD
, &
b
, 
fmt
, 
≠
);

377 *
b
.
buf
 = '\0';

378  
b
.
˙t
;

379 
	}
}

	@kern-ucore/glue-ucore/libs/rand.c

1 
	~<¨ch.h
>

2 
	~<°dlib.h
>

4 
	g√xt
 = 1;

12 
	$ønd
() {

13 
√xt
 = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);

14 
ªsu…
 = (
√xt
 >> 12);

15  ()
	`do_div
(
ªsu…
, 
RAND_MAX
 + 1);

16 
	}
}

23 
	$§™d
(
£ed
) {

24 
√xt
 = 
£ed
;

25 
	}
}

	@kern-ucore/glue-ucore/libs/stat.h

1 #i‚de‡
__LIBS_STAT_H__


2 
	#__LIBS_STAT_H__


	)

4 
	~<ty≥s.h
>

6 
	s°©
 {

7 
uöt32_t
 
	m°_mode
;

8 
size_t
 
	m°_∆öks
;

9 
size_t
 
	m°_blocks
;

10 
size_t
 
	m°_size
;

13 
	#S_IFMT
 070000

14 
	#S_IFREG
 010000

15 
	#S_IFDIR
 020000

16 
	#S_IFLNK
 030000

17 
	#S_IFCHR
 040000

18 
	#S_IFBLK
 050000

19 

	)

20 
	#S_ISREG
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFREG
)

21 
	#S_ISDIR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFDIR
)

22 
	#S_ISLNK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFLNK
)

23 
	#S_ISCHR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFCHR
)

24 
	#S_ISBLK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFBLK
)

25 

	)

	@kern-ucore/glue-ucore/libs/stdarg.h

1 #i‚de‡
__LIBS_STDARG_H__


2 
	#__LIBS_STDARG_H__


	)

5 
__buûtö_va_li°
 
	tva_li°
;

7 
	#va_°¨t
(
≠
, 
œ°
Ë(
	`__buûtö_va_°¨t
◊p,Üa°))

	)

8 
	#va_¨g
(
≠
, 
ty≥
Ë(
	`__buûtö_va_¨g
◊p,Åy≥))

	)

9 
	#va_íd
(
≠
Ë

	)

	@kern-ucore/glue-ucore/libs/stdio.h

1 #i‚de‡
__LIBS_STDIO_H__


2 
	#__LIBS_STDIO_H__


	)

4 
	~<ty≥s.h
>

5 
	~<°d¨g.h
>

8 
˝rötf
(c⁄° *
fmt
, ...);

9 
v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
);

10 
˝utch¨
(
c
);

11 
˝uts
(c⁄° *
°r
);

12 
gëch¨
();

15 *
ªadlöe
(c⁄° *
¥om±
);

18 
¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, ...);

19 
	`v¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
);

20 
	`¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...);

21 
	`v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
);

	@kern-ucore/glue-ucore/libs/stdlib.h

1 #i‚de‡
__LIBS_STDLIB_H__


2 
	#__LIBS_STDLIB_H__


	)

4 
	~<ty≥s.h
>

7 
	#RAND_MAX
 2147483647UL

	)

10 
ønd
();

11 
§™d
(
£ed
);

14 
uöt32_t
 
hash32
(uöt32_à
vÆ
, 
bôs
);

	@kern-ucore/glue-ucore/libs/string.c

1 
	~<°rög.h
>

2 
	~<¨ch.h
>

11 
size_t


12 
	$°æí
(c⁄° *
s
) {

13 
size_t
 
˙t
 = 0;

14 *
s
 ++ != '\0') {

15 
˙t
 ++;

17  
˙t
;

18 
	}
}

33 
size_t


34 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
Àn
) {

35 
size_t
 
˙t
 = 0;

36 
˙t
 < 
Àn
 && *
s
 ++ != '\0') {

37 
˙t
 ++;

39  
˙t
;

40 
	}
}

55 
	$°r˝y
(*
d°
, c⁄° *
§c
) {

56 #ifde‡
__HAVE_ARCH_STRCPY


57  
	`__°r˝y
(
d°
, 
§c
);

59 *
p
 = 
d°
;

60 (*
p
 ++ = *
§c
 ++) != '\0')

62  
d°
;

64 
	}
}

77 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

78 *
p
 = 
d°
;

79 
Àn
 > 0) {

80 i‡((*
p
 = *
§c
) != '\0') {

81 
§c
 ++;

83 
p
 ++, 
Àn
 --;

85  
d°
;

86 
	}
}

97 
	$°rˇt
(*
d°
, c⁄° *
§c
) {

98  
	`°r˝y
(
d°
 + 
	`°æí
(d°), 
§c
);

99 
	}
}

117 
	$°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

118 #ifde‡
__HAVE_ARCH_STRCMP


119  
	`__°rcmp
(
s1
, 
s2
);

121 *
s1
 !'\0' && *s1 =*
s2
) {

122 
s1
 ++, 
s2
 ++;

124  ()(()*
s1
 - ()*
s2
);

126 
	}
}

140 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
) {

141 
n
 > 0 && *
s1
 !'\0' && *s1 =*
s2
) {

142 
n
 --, 
s1
 ++, 
s2
 ++;

144  (
n
 =0Ë? 0 : ()(()*
s1
 - ()*
s2
);

145 
	}
}

156 
	$°rchr
(c⁄° *
s
, 
c
) {

157 *
s
 != '\0') {

158 i‡(*
s
 =
c
) {

159  (*)
s
;

161 
s
 ++;

163  
NULL
;

164 
	}
}

176 
	$°rföd
(c⁄° *
s
, 
c
) {

177 *
s
 != '\0') {

178 i‡(*
s
 =
c
) {

181 
s
 ++;

183  (*)
s
;

184 
	}
}

217 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
) {

218 
√g
 = 0;

219 
vÆ
 = 0;

222 *
s
 == ' ' || *s == '\t') {

223 
s
 ++;

227 i‡(*
s
 == '+') {

228 
s
 ++;

230 i‡(*
s
 == '-') {

231 
s
 ++, 
√g
 = 1;

235 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x')) {

236 
s
 +2, 
ba£
 = 16;

238 i‡(
ba£
 =0 && 
s
[0] == '0') {

239 
s
 ++, 
ba£
 = 8;

241 i‡(
ba£
 == 0) {

242 
ba£
 = 10;

247 
dig
;

249 i‡(*
s
 >= '0' && *s <= '9') {

250 
dig
 = *
s
 - '0';

252 i‡(*
s
 >= 'a' && *s <= 'z') {

253 
dig
 = *
s
 - 'a' + 10;

255 i‡(*
s
 >= 'A' && *s <= 'Z') {

256 
dig
 = *
s
 - 'A' + 10;

261 i‡(
dig
 >
ba£
) {

264 
s
 ++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

268 i‡(
íd±r
) {

269 *
íd±r
 = (*Ë
s
;

271  (
√g
 ? -
vÆ
 : val);

272 
	}
}

284 
	$mem£t
(*
s
, 
c
, 
size_t
 
n
) {

285 #ifde‡
__HAVE_ARCH_MEMSET


286  
	`__mem£t
(
s
, 
c
, 
n
);

288 *
p
 = 
s
;

289 
n
 -- > 0) {

290 *
p
 ++ = 
c
;

292  
s
;

294 
	}
}

306 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

307 #ifde‡
__HAVE_ARCH_MEMMOVE


308  
	`__memmove
(
d°
, 
§c
, 
n
);

310 c⁄° *
s
 = 
§c
;

311 *
d
 = 
d°
;

312 i‡(
s
 < 
d
 && s + 
n
 > d) {

313 
s
 +
n
, 
d
 +=Ç;

314 
n
 -- > 0) {

315 *-- 
d
 = *-- 
s
;

318 
n
 -- > 0) {

319 *
d
 ++ = *
s
 ++;

322  
d°
;

324 
	}
}

341 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

342 #ifde‡
__HAVE_ARCH_MEMCPY


343  
	`__mem˝y
(
d°
, 
§c
, 
n
);

345 c⁄° *
s
 = 
§c
;

346 *
d
 = 
d°
;

347 
n
 -- > 0) {

348 *
d
 ++ = *
s
 ++;

350  
d°
;

352 
	}
}

369 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
) {

370 c⁄° *
s1
 = (c⁄° *)
v1
;

371 c⁄° *
s2
 = (c⁄° *)
v2
;

372 
n
 -- > 0) {

373 i‡(*
s1
 !*
s2
) {

374  ()(()*
s1
 - ()*
s2
);

376 
s1
 ++, 
s2
 ++;

379 
	}
}

	@kern-ucore/glue-ucore/libs/string.h

1 #i‚de‡
__LIBS_STRING_H__


2 
	#__LIBS_STRING_H__


	)

4 
	~<ty≥s.h
>

6 
size_t
 
°æí
(c⁄° *
s
);

7 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
Àn
);

9 *
°r˝y
(*
d°
, c⁄° *
§c
);

10 *
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

11 *
°rˇt
(*
d°
, c⁄° *
§c
);

12 *
°rdup
(c⁄° *
§c
);

13 *
°ødd
(c⁄° *
§c1
, c⁄° *
§c2
);

15 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

16 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

18 *
°rchr
(c⁄° *
s
, 
c
);

19 *
°rföd
(c⁄° *
s
, 
c
);

20 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

22 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

23 *
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

24 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

25 
memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
);

	@kern-ucore/glue-ucore/libs/types.h

1 #i‚de‡
__LIBS_TYPES_H__


2 
	#__LIBS_TYPES_H__


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*)0)

	)

8 
	#CHAR_BIT
 8

	)

11 
	tboﬁ
;

14 
	töt8_t
;

15 
	tuöt8_t
;

16 
	töt16_t
;

17 
	tuöt16_t
;

18 
	töt32_t
;

19 
	tuöt32_t
;

20 
	töt64_t
;

21 
	tuöt64_t
;

23 #i‡
deföed
(
__LP64__
Ë|| deföed(
__64BIT__
Ë|| deföed(
_LP64
)

24 #i‚de‡
__UCORE_64__


25 
	#__UCORE_64__


	)

35 #ifde‡
__UCORE_64__


38 
uöt64_t
 
	tmachöe_w‹d_t
;

41 
öt64_t
 
	töçå_t
;

42 
uöt64_t
 
	tuöçå_t
;

47 
uöt32_t
 
	tmachöe_w‹d_t
;

50 
öt32_t
 
	töçå_t
;

51 
uöt32_t
 
	tuöçå_t
;

56 
uöçå_t
 
	tsize_t
;

59 
öçå_t
 
	toff_t
;

62 
size_t
 
	tµn_t
;

65 
uöçå_t
 
	t£m_t
;

71 
	#ROUNDDOWN
(
a
, 
n
) ({ \

72 
size_t
 
__a
 = (size_t)(
a
); \

73 (
	`ty≥of
(
a
))(
__a
 - __®% (
n
)); \

74 })

	)

77 
	#ROUNDUP
(
a
, 
n
) ({ \

78 
size_t
 
__n
 = (size_t)(
n
); \

79 (
	`ty≥of
(
a
))(
	`ROUNDDOWN
((
size_t
)◊Ë+ 
__n
 - 1, __n)); \

80 })

	)

83 
	#ROUNDUP_DIV
(
a
, 
n
) ({ \

84 
uöt32_t
 
__n
 = (uöt32_t)(
n
); \

85 (
	`ty≥of
(
a
))((◊Ë+ 
__n
 - 1) / __n); \

86 })

	)

89 
	#off£tof
(
ty≥
, 
membî
) \

90 ((
size_t
)(&((
ty≥
 *)0)->
membî
))

	)

98 
	#to_°ru˘
(
±r
, 
ty≥
, 
membî
) \

99 ((
ty≥
 *)((*)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

	@kern-ucore/glue-ucore/libs/unistd.h

1 #i‚de‡
__LIBS_UNISTD_H__


2 
	#__LIBS_UNISTD_H__


	)

4 
	#T_SYSCALL
 0x80

	)

7 
	#SYS_exô
 1

	)

8 
	#SYS_f‹k
 2

	)

9 
	#SYS_waô
 3

	)

10 
	#SYS_exec
 4

	)

11 
	#SYS_˛⁄e
 5

	)

12 
	#SYS_exô_thªad
 9

	)

13 
	#SYS_yõld
 10

	)

14 
	#SYS_¶ìp
 11

	)

15 
	#SYS_kûl
 12

	)

16 
	#SYS_gëtime
 17

	)

17 
	#SYS_gëpid
 18

	)

18 
	#SYS_brk
 19

	)

19 
	#SYS_mm≠
 20

	)

20 
	#SYS_munm≠
 21

	)

21 
	#SYS_shmem
 22

	)

22 
	#SYS_putc
 30

	)

23 
	#SYS_pgdú
 31

	)

24 
	#SYS_£m_öô
 40

	)

25 
	#SYS_£m_po°
 41

	)

26 
	#SYS_£m_waô
 42

	)

27 
	#SYS_£m_‰ì
 43

	)

28 
	#SYS_£m_gë_vÆue
 44

	)

29 
	#SYS_evít_£nd
 48

	)

30 
	#SYS_evít_ªcv
 49

	)

31 
	#SYS_mbox_öô
 50

	)

32 
	#SYS_mbox_£nd
 51

	)

33 
	#SYS_mbox_ªcv
 52

	)

34 
	#SYS_mbox_‰ì
 53

	)

35 
	#SYS_mbox_öfo
 54

	)

36 
	#SYS_›í
 100

	)

37 
	#SYS_˛o£
 101

	)

38 
	#SYS_ªad
 102

	)

39 
	#SYS_wrôe
 103

	)

40 
	#SYS_£ek
 104

	)

41 
	#SYS_f°©
 110

	)

42 
	#SYS_fsync
 111

	)

43 
	#SYS_chdú
 120

	)

44 
	#SYS_gëcwd
 121

	)

45 
	#SYS_mkdú
 122

	)

46 
	#SYS_lök
 123

	)

47 
	#SYS_ª«me
 124

	)

48 
	#SYS_ªadlök
 125

	)

49 
	#SYS_symlök
 126

	)

50 
	#SYS_u∆ök
 127

	)

51 
	#SYS_gëdúíåy
 128

	)

52 
	#SYS_dup
 130

	)

53 
	#SYS_pùe
 140

	)

54 
	#SYS_mkfifo
 141

	)

55 
	#SYS_öô_moduÀ
 200

	)

56 
	#SYS_˛ónup_moduÀ
 201

	)

57 
	#SYS_li°_moduÀ
 202

	)

58 
	#SYS_mod_add
 210

	)

59 
	#SYS_mod_mul
 211

	)

62 
	#CLONE_VM
 0x00000100

63 
	#CLONE_THREAD
 0x00000200

64 
	#CLONE_SEM
 0x00000400

65 
	#CLONE_FS
 0x00000800

66 

	)

68 
	#MMAP_WRITE
 0x00000100

	)

69 
	#MMAP_STACK
 0x00000200

	)

73 
	#O_RDONLY
 0

74 
	#O_WRONLY
 1

75 
	#O_RDWR
 2

77 
	#O_CREAT
 0x00000004

78 
	#O_EXCL
 0x00000008

79 
	#O_TRUNC
 0x00000010

80 
	#O_APPEND
 0x00000020

82 
	#O_ACCMODE
 3

83 

	)

84 
	#NO_FD
 -0x9527

85 

	)

87 
	#LSEEK_SET
 0

88 
	#LSEEK_CUR
 1

89 
	#LSEEK_END
 2

90 

	)

91 
	#FS_MAX_DNAME_LEN
 31

	)

92 
	#FS_MAX_FNAME_LEN
 255

	)

93 
	#FS_MAX_FPATH_LEN
 4095

	)

95 
	#EXEC_MAX_ARG_NUM
 32

	)

96 
	#EXEC_MAX_ARG_LEN
 4095

	)

	@kern-ucore/glue-ucore/mp.h

1 #i‚de‡
__GLUE_UCORE_MP_H__


2 
	#__GLUE_UCORE_MP_H__


	)

4 
	~<glue_mp.h
>

5 
	~<glue_memœyout.h
>

6 
	~<ty≥s.h
>

8 
∂s_œpic_id
;

9 
∂s_l˝u_idx
;

10 
∂s_l˝u_cou¡
;

12 vﬁ©ûê
ùi_øi£
[
LAPIC_COUNT
];

14 
pgd_t
 *
m±i_pgdú
;

15 
uöçå_t
 
m±i_œ
;

16 vﬁ©ûê
m±i_íd
;

18 
mp_öô
();

20 
	gmm_°ru˘
;

22 
kîn_íãr
(
sour˚
);

23 
kîn_Àave
();

24 
mp_£t_mm_∑gëabÀ
(
mm_°ru˘
 *
mm
);

25 
__mp_éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
);

26 
mp_éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
);

27 
mp_éb_upd©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
);

	@kern-ucore/glue-ucore/pmm.c

1 
	~<pmm.h
>

2 
	~<°rög.h
>

3 
	~<îr‹.h
>

4 
	~<memœyout.h
>

5 
	~<sw≠.h
>

6 
	~<mp.h
>

12 
pgd_t
 *

13 
	$gë_pgd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

14  &
pgdú
[
	`PGX
(
œ
)];

15 
	}
}

17 
pud_t
 *

18 
	$gë_pud
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

19 #i‡
PUXSHIFT
 =
PGXSHIFT


20  
	`gë_pgd
(
pgdú
, 
œ
, 
¸óã
);

22 
pgd_t
 *
pgdp
;

23 i‡((
pgdp
 = 
	`gë_pgd
(
pgdú
, 
œ
, 
¸óã
)Ë=
NULL
) {

24  
NULL
;

26 i‡(! 
	`±ï_¥e£¡
(
pgdp
)) {

27 
Page
 *
∑ge
;

28 i‡(!
¸óã
 || (
∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

29  
NULL
;

31 
	`£t_∑ge_ªf
(
∑ge
, 1);

32 
uöçå_t
 
∑
 = 
	`∑ge2∑
(
∑ge
);

33 
	`mem£t
(
	`KADDR
(
∑
), 0, 
PGSIZE
);

34 
	`±ï_m≠
(
pgdp
, 
∑
);

35 
	`±ï_£t_u_wrôe
(
pgdp
);

36 
	`±ï_£t_ac˚s£d
(
pgdp
);

37 
	`±ï_£t_dúty
(
pgdp
);

39  &((
pud_t
 *)
	`KADDR
(
	`PGD_ADDR
(*
pgdp
)))[
	`PUX
(
œ
)];

41 
	}
}

43 
pmd_t
 *

44 
	$gë_pmd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

45 #i‡
PMXSHIFT
 =
PUXSHIFT


46  
	`gë_pud
(
pgdú
, 
œ
, 
¸óã
);

48 
pud_t
 *
pudp
;

49 i‡((
pudp
 = 
	`gë_pud
(
pgdú
, 
œ
, 
¸óã
)Ë=
NULL
) {

50  
NULL
;

52 i‡(! 
	`±ï_¥e£¡
(
pudp
)) {

53 
Page
 *
∑ge
;

54 i‡(!
¸óã
 || (
∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

55  
NULL
;

57 
	`£t_∑ge_ªf
(
∑ge
, 1);

58 
uöçå_t
 
∑
 = 
	`∑ge2∑
(
∑ge
);

59 
	`mem£t
(
	`KADDR
(
∑
), 0, 
PGSIZE
);

60 
	`±ï_m≠
(
pudp
, 
∑
);

61 
	`±ï_£t_u_wrôe
(
pudp
);

62 
	`±ï_£t_ac˚s£d
(
pudp
);

63 
	`±ï_£t_dúty
(
pudp
);

65  &((
pmd_t
 *)
	`KADDR
(
	`PUD_ADDR
(*
pudp
)))[
	`PMX
(
œ
)];

67 
	}
}

69 
±e_t
 *

70 
	$gë_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

71 #i‡
PTXSHIFT
 =
PMXSHIFT


72  
	`gë_pmd
(
pgdú
, 
œ
, 
¸óã
);

74 
pmd_t
 *
pmdp
;

75 i‡((
pmdp
 = 
	`gë_pmd
(
pgdú
, 
œ
, 
¸óã
)Ë=
NULL
) {

76  
NULL
;

78 i‡(! 
	`±ï_¥e£¡
(
pmdp
)) {

79 
Page
 *
∑ge
;

80 i‡(!
¸óã
 || (
∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

81  
NULL
;

83 
	`£t_∑ge_ªf
(
∑ge
, 1);

84 
uöçå_t
 
∑
 = 
	`∑ge2∑
(
∑ge
);

85 
	`mem£t
(
	`KADDR
(
∑
), 0, 
PGSIZE
);

86 
	`±ï_m≠
(
pmdp
, 
∑
);

87 
	`±ï_£t_u_wrôe
(
pmdp
);

88 
	`±ï_£t_ac˚s£d
(
pmdp
);

89 
	`±ï_£t_dúty
(
pmdp
);

91  &((
±e_t
 *)
	`KADDR
(
	`PMD_ADDR
(*
pmdp
)))[
	`PTX
(
œ
)];

93 
	}
}

102 
Page
 *

103 
	$gë_∑ge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 **
±ï_°‹e
) {

104 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 0);

105 i‡(
±ï_°‹e
 !
NULL
) {

106 *
±ï_°‹e
 = 
±ï
;

108 i‡(
±ï
 !
NULL
 && 
	`±ï_¥e£¡
(ptep)) {

109  
	`∑2∑ge
(*
±ï
);

111  
NULL
;

112 
	}
}

123 
	$∑ge_ªmove_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 *
±ï
) {

124 i‡(
	`±ï_¥e£¡
(
±ï
)) {

125 
Page
 *
∑ge
 = 
	`±e2∑ge
(*
±ï
);

126 i‡(!
	`PageSw≠
(
∑ge
)) {

127 i‡(
	`∑ge_ªf_dec
(
∑ge
) == 0) {

128 
	`‰ì_∑ge
(
∑ge
);

132 i‡(
	`±ï_dúty
(
±ï
)) {

133 
	`SëPageDúty
(
∑ge
);

135 
	`∑ge_ªf_dec
(
∑ge
);

137 
	`±ï_unm≠
(
±ï
);

138 
	`mp_éb_övÆid©e
(
pgdú
, 
œ
);

140 i‡(! 
	`±ï_övÆid
(
±ï
)) {

141 
	`sw≠_ªmove_íåy
(*
±ï
);

142 
	`±ï_unm≠
(
±ï
);

144 
	}
}

155 
	$∑ge_ö£π
(
pgd_t
 *
pgdú
, 
Page
 *
∑ge
, 
uöçå_t
 
œ
, 
±e_≥rm_t
 
≥rm
) {

156 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 1);

157 i‡(
±ï
 =
NULL
) {

158  -
E_NO_MEM
;

160 
	`∑ge_ªf_öc
(
∑ge
);

161 i‡(*
±ï
 != 0) {

162 i‡(
	`±ï_¥e£¡
(
±ï
Ë&& 
	`±e2∑ge
(*±ïË=
∑ge
) {

163 
	`∑ge_ªf_dec
(
∑ge
);

164 
out
;

166 
	`∑ge_ªmove_±e
(
pgdú
, 
œ
, 
±ï
);

169 
out
:

170 
	`±ï_m≠
(
±ï
, 
	`∑ge2∑
(
∑ge
));

171 
	`±ï_£t_≥rm
(
±ï
, 
≥rm
);

172 
	`mp_éb_upd©e
(
pgdú
, 
œ
);

174 
	}
}

182 
	$∑ge_ªmove
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
) {

183 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 0);

184 i‡(
±ï
 !
NULL
) {

185 
	`∑ge_ªmove_±e
(
pgdú
, 
œ
, 
±ï
);

187 
	}
}

198 
Page
 *

199 
	$pgdú_Æloc_∑ge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
) {

200 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

201 i‡(
∑ge
 !
NULL
) {

202 i‡(
	`∑ge_ö£π
(
pgdú
, 
∑ge
, 
œ
, 
≥rm
) != 0) {

203 
	`‰ì_∑ge
(
∑ge
);

204  
NULL
;

207  
∑ge
;

208 
	}
}

215 
	$unm≠_ønge_±e
(
pgd_t
 *
pgdú
, 
±e_t
 *
±e
, 
uöçå_t
 
ba£
, uöçå_à
°¨t
, uöçå_à
íd
) {

216 
	`as£π
(
°¨t
 >0 && sèπ < 
íd
 &&Énd <
PTSIZE
);

217 
	`as£π
(
°¨t
 % 
PGSIZE
 =0 && 
íd
 % PGSIZE == 0);

219 
±e_t
 *
±ï
 = &
±e
[
	`PTX
(
°¨t
)];

220 i‡(*
±ï
 != 0) {

221 
	`∑ge_ªmove_±e
(
pgdú
, 
ba£
 + 
°¨t
, 
±ï
);

223 
°¨t
 +
PGSIZE
;

224 } 
°¨t
 !0 && sèπ < 
íd
);

225 
	}
}

228 
	$unm≠_ønge_pmd
(
pgd_t
 *
pgdú
, 
pmd_t
 *
pmd
, 
uöçå_t
 
ba£
, uöçå_à
°¨t
, uöçå_à
íd
) {

229 #i‡
PMXSHIFT
 =
PUXSHIFT


230 
	`unm≠_ønge_±e
(
pgdú
, 
pmd
, 
ba£
, 
°¨t
, 
íd
);

232 
	`as£π
(
°¨t
 >0 && sèπ < 
íd
 &&Énd <
PMSIZE
);

233 
size_t
 
off
, 
size
;

234 
uöçå_t
 
œ
 = 
	`ROUNDDOWN
(
°¨t
, 
PTSIZE
);

236 
off
 = 
°¨t
 - 
œ
, 
size
 = 
PTSIZE
 - off;

237 i‡(
size
 > 
íd
 - 
°¨t
) {

238 
size
 = 
íd
 - 
°¨t
;

240 
pmd_t
 *
pmdp
 = &
pmd
[
	`PMX
(
œ
)];

241 i‡(
	`±ï_¥e£¡
(
pmdp
)) {

242 
	`unm≠_ønge_±e
(
pgdú
, 
	`KADDR
(
	`PMD_ADDR
(*
pmdp
)), 
ba£
 + 
œ
, 
off
, of‡+ 
size
);

244 
°¨t
 +
size
, 
œ
 +
PTSIZE
;

245 } 
°¨t
 !0 && sèπ < 
íd
);

247 
	}
}

250 
	$unm≠_ønge_pud
(
pgd_t
 *
pgdú
, 
pud_t
 *
pud
, 
uöçå_t
 
ba£
, uöçå_à
°¨t
, uöçå_à
íd
) {

251 #i‡
PUXSHIFT
 =
PGXSHIFT


252 
	`unm≠_ønge_pmd
 (
pgdú
, 
pud
, 
ba£
, 
°¨t
, 
íd
);

254 
	`as£π
(
°¨t
 >0 && sèπ < 
íd
 &&Énd <
PUSIZE
);

255 
size_t
 
off
, 
size
;

256 
uöçå_t
 
œ
 = 
	`ROUNDDOWN
(
°¨t
, 
PMSIZE
);

258 
off
 = 
°¨t
 - 
œ
, 
size
 = 
PMSIZE
 - off;

259 i‡(
size
 > 
íd
 - 
°¨t
) {

260 
size
 = 
íd
 - 
°¨t
;

262 
pud_t
 *
pudp
 = &
pud
[
	`PUX
(
œ
)];

263 i‡(
	`±ï_¥e£¡
(
pudp
)) {

264 
	`unm≠_ønge_pmd
(
pgdú
, 
	`KADDR
(
	`PUD_ADDR
(*
pudp
)), 
ba£
 + 
œ
, 
off
, of‡+ 
size
);

266 
°¨t
 +
size
, 
œ
 +
PMSIZE
;

267 } 
°¨t
 !0 && sèπ < 
íd
);

269 
	}
}

272 
	$unm≠_ønge_pgd
(
pgd_t
 *
pgd
, 
uöçå_t
 
°¨t
, uöçå_à
íd
) {

273 
size_t
 
off
, 
size
;

274 
uöçå_t
 
œ
 = 
	`ROUNDDOWN
(
°¨t
, 
PUSIZE
);

276 
off
 = 
°¨t
 - 
œ
, 
size
 = 
PUSIZE
 - off;

277 i‡(
size
 > 
íd
 - 
°¨t
) {

278 
size
 = 
íd
 - 
°¨t
;

280 
pgd_t
 *
pgdp
 = &
pgd
[
	`PGX
(
œ
)];

281 i‡(
	`±ï_¥e£¡
(
pgdp
)) {

282 
	`unm≠_ønge_pud
(
pgd
, 
	`KADDR
(
	`PGD_ADDR
(*
pgdp
)), 
œ
, 
off
, of‡+ 
size
);

284 
°¨t
 +
size
, 
œ
 +
PUSIZE
;

285 } 
°¨t
 !0 && sèπ < 
íd
);

286 
	}
}

289 
	$unm≠_ønge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
) {

290 
	`as£π
(
°¨t
 % 
PGSIZE
 =0 && 
íd
 % PGSIZE == 0);

291 
	`as£π
(
	`USER_ACCESS
(
°¨t
, 
íd
));

292 
	`unm≠_ønge_pgd
(
pgdú
, 
°¨t
, 
íd
);

293 
	}
}

297 
	$exô_ønge_pmd
(
pmd_t
 *
pmd
) {

298 #i‡
PMXSHIFT
 =
PUXSHIFT


301 
uöçå_t
 
œ
 = 0;

303 
pmd_t
 *
pmdp
 = &
pmd
[
	`PMX
(
œ
)];

304 i‡(
	`±ï_¥e£¡
(
pmdp
)) {

305 
	`‰ì_∑ge
(
	`pmd2∑ge
(*
pmdp
)), *pmdp = 0;

307 
œ
 +
PTSIZE
;

308 } 
œ
 !
PMSIZE
);

310 
	}
}

313 
	$exô_ønge_pud
(
pud_t
 *
pud
) {

314 #i‡
PUXSHIFT
 =
PGXSHIFT


315 
	`exô_ønge_pmd
(
pud
);

317 
uöçå_t
 
œ
 = 0;

319 
pud_t
 *
pudp
 = &
pud
[
	`PUX
(
œ
)];

320 i‡(
	`±ï_¥e£¡
(
pudp
)) {

321 
	`exô_ønge_pmd
(
	`KADDR
(
	`PUD_ADDR
(*
pudp
)));

322 
	`‰ì_∑ge
(
	`pud2∑ge
(*
pudp
)), *pudp = 0;

324 
œ
 +
PMSIZE
;

325 } 
œ
 !
PUSIZE
);

327 
	}
}

330 
	$exô_ønge_pgd
(
pgd_t
 *
pgd
, 
uöçå_t
 
°¨t
, uöçå_à
íd
) {

331 
°¨t
 = 
	`ROUNDDOWN
(°¨t, 
PUSIZE
);

333 
pgd_t
 *
pgdp
 = &
pgd
[
	`PGX
(
°¨t
)];

334 i‡(
	`±ï_¥e£¡
(
pgdp
)) {

335 
	`exô_ønge_pud
(
	`KADDR
(
	`PGD_ADDR
(*
pgdp
)));

336 
	`‰ì_∑ge
(
	`pgd2∑ge
(*
pgdp
)), *pgdp = 0;

338 
°¨t
 +
PUSIZE
;

339 } 
°¨t
 !0 && sèπ < 
íd
);

340 
	}
}

343 
	$exô_ønge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
°¨t
, uöçå_à
íd
) {

344 
	`as£π
(
°¨t
 % 
PGSIZE
 =0 && 
íd
 % PGSIZE == 0);

345 
	`as£π
(
	`USER_ACCESS
(
°¨t
, 
íd
));

346 
	`exô_ønge_pgd
(
pgdú
, 
°¨t
, 
íd
);

347 
	}
}

350 
	$c›y_ønge
(
pgd_t
 *
to
,Ögd_à*
‰om
, 
uöçå_t
 
°¨t
, uöçå_à
íd
, 
boﬁ
 
sh¨e
) {

351 
	`as£π
(
°¨t
 % 
PGSIZE
 =0 && 
íd
 % PGSIZE == 0);

352 
	`as£π
(
	`USER_ACCESS
(
°¨t
, 
íd
));

355 
±e_t
 *
±ï
 = 
	`gë_±e
(
‰om
, 
°¨t
, 0), *
≈ãp
;

356 i‡(
±ï
 =
NULL
) {

357 i‡(
	`gë_pud
(
‰om
, 
°¨t
, 0Ë=
NULL
) {

358 
°¨t
 = 
	`ROUNDDOWN
(°¨à+ 
PUSIZE
, PUSIZE);

360 i‡(
	`gë_pmd
(
‰om
, 
°¨t
, 0Ë=
NULL
) {

361 
°¨t
 = 
	`ROUNDDOWN
(°¨à+ 
PMSIZE
, PMSIZE);

364 
°¨t
 = 
	`ROUNDDOWN
(°¨à+ 
PTSIZE
, PTSIZE);

368 i‡(*
±ï
 != 0) {

369 i‡((
≈ãp
 = 
	`gë_±e
(
to
, 
°¨t
, 1)Ë=
NULL
) {

370  -
E_NO_MEM
;

372 
ªt
;

373 
	`as£π
(*
±ï
 !0 && *
≈ãp
 == 0);

374 i‡(
	`±ï_¥e£¡
(
±ï
)) {

375 
±e_≥rm_t
 
≥rm
 = 
	`±ï_gë_≥rm
(
±ï
, 
PTE_USER
);

376 
Page
 *
∑ge
 = 
	`±e2∑ge
(*
±ï
);

377 i‡(!
sh¨e
 && 
	`±ï_s_wrôe
(
±ï
)) {

378 
	`±ï_un£t_s_wrôe
(&
≥rm
);

379 
±e_≥rm_t
 
≥rm_wôh_sw≠_°©
 = 
	`±ï_gë_≥rm
(
±ï
, 
PTE_SWAP
);

380 
	`±ï_£t_≥rm
(&
≥rm_wôh_sw≠_°©
, 
≥rm
);

381 
	`∑ge_ö£π
(
‰om
, 
∑ge
, 
°¨t
, 
≥rm_wôh_sw≠_°©
);

383 
ªt
 = 
	`∑ge_ö£π
(
to
, 
∑ge
, 
°¨t
, 
≥rm
);

384 
	`as£π
(
ªt
 == 0);

387 
sw≠_íåy_t
 
íåy
;

388 
	`±ï_c›y
(&
íåy
, 
±ï
);

389 
	`sw≠_du∂iˇã
(
íåy
);

390 
	`±ï_c›y
(
≈ãp
, &
íåy
);

393 
°¨t
 +
PGSIZE
;

394 } 
°¨t
 !0 && sèπ < 
íd
);

396 
	}
}

	@kern-ucore/libs/rb_tree.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<¶ab.h
>

5 
	~<rb_åì.h
>

6 
	~<as£π.h
>

9 
ölöe
 
rb_node
 *

10 
	$rb_node_¸óã
() {

11  
	`kmÆloc
((
rb_node
));

12 
	}
}

15 
ölöe
 
boﬁ


16 
	$rb_åì_em±y
(
rb_åì
 *
åì
) {

17 
rb_node
 *
nû
 = 
åì
->nû, *
roŸ
 =Åree->root;

18  
roŸ
->
À·
 =
nû
;

19 
	}
}

29 
rb_åì
 *

30 
rb_åì_¸óã
((*
com∑ª
)(
rb_node
 *
node1
,Ñb_nodê*
node2
)) {

31 
	`as£π
(
com∑ª
 !
NULL
);

33 
rb_åì
 *
åì
;

34 
rb_node
 *
nû
, *
roŸ
;

36 i‡((
åì
 = 
	`kmÆloc
((
rb_åì
))Ë=
NULL
) {

37 
bad_åì
;

40 
åì
->
com∑ª
 = compare;

42 i‡((
nû
 = 
	`rb_node_¸óã
()Ë=
NULL
) {

43 
bad_node_˛ónup_åì
;

46 
nû
->
∑ª¡
 =Çû->
À·
 =Çû->
right
 =Çil;

47 
nû
->
ªd
 = 0;

48 
åì
->
nû
 =Çil;

50 i‡((
roŸ
 = 
	`rb_node_¸óã
()Ë=
NULL
) {

51 
bad_node_˛ónup_nû
;

54 
roŸ
->
∑ª¡
 =ÑoŸ->
À·
 =ÑoŸ->
right
 = 
nû
;

55 
roŸ
->
ªd
 = 0;

56 
åì
->
roŸ
 =Ñoot;

57  
åì
;

59 
bad_node_˛ónup_nû
:

60 
	`k‰ì
(
nû
);

61 
bad_node_˛ónup_åì
:

62 
	`k‰ì
(
åì
);

63 
bad_åì
:

64  
NULL
;

65 
	}
}

79 
	#FUNC_ROTATE
(
func_«me
, 
_À·
, 
_right
) \

81 
	`func_«me
(
rb_åì
 *
åì
, 
rb_node
 *
x
) { \

82 
rb_node
 *
nû
 = 
åì
->nû, *
y
 = 
x
->
_right
; \

83 
	`as£π
(
x
 !
åì
->
roŸ
 && x !
nû
 && 
y
 !=Çil); \

84 
x
->
_right
 = 
y
->
_À·
; \

85 i‡(
y
->
_À·
 !
nû
) { \

86 
y
->
_À·
->
∑ª¡
 = 
x
; \

88 
y
->
∑ª¡
 = 
x
->parent; \

89 i‡(
x
 =x->
∑ª¡
->
_À·
) { \

90 
x
->
∑ª¡
->
_À·
 = 
y
; \

93 
x
->
∑ª¡
->
_right
 = 
y
; \

95 
y
->
_À·
 = 
x
; \

96 
x
->
∑ª¡
 = 
y
; \

97 
	`as£π
(!(
nû
->
ªd
)); \

98 }

	)

100 
FUNC_ROTATE
(
rb_À·_rŸ©e
, 
À·
, 
right
);

101 
FUNC_ROTATE
(
rb_right_rŸ©e
, 
right
, 
À·
);

103 #unde‡
FUNC_ROTATE


105 
	#COMPARE
(
åì
, 
node1
, 
node2
) \

106 ((
åì
))->
	`com∑ª
((
node1
), (
node2
))

	)

113 
ölöe
 

114 
	$rb_ö£π_bö¨y
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

115 
rb_node
 *
x
, *
y
, *
z
 = 
node
, *
nû
 = 
åì
->nû, *
roŸ
 =Åree->root;

117 
z
->
À·
 = z->
right
 = 
nû
;

118 
y
 = 
roŸ
, 
x
 = y->
À·
;

119 
x
 !
nû
) {

120 
y
 = 
x
;

121 
x
 = (
	`COMPARE
(
åì
, x, 
node
Ë> 0Ë? x->
À·
 : x->
right
;

123 
z
->
∑ª¡
 = 
y
;

124 i‡(
y
 =
roŸ
 || 
	`COMPARE
(
åì
, y, 
z
) > 0) {

125 
y
->
À·
 = 
z
;

128 
y
->
right
 = 
z
;

130 
	}
}

134 
	$rb_ö£π
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

135 
	`rb_ö£π_bö¨y
(
åì
, 
node
);

136 
node
->
ªd
 = 1;

138 
rb_node
 *
x
 = 
node
, *
y
;

140 
	#RB_INSERT_SUB
(
_À·
, 
_right
) \

142 
y
 = 
x
->
∑ª¡
->∑ª¡->
_right
; \

143 i‡(
y
->
ªd
) { \

144 
x
->
∑ª¡
->
ªd
 = 0; \

145 
y
->
ªd
 = 0; \

146 
x
->
∑ª¡
->∑ª¡->
ªd
 = 1; \

147 
x
 = x->
∑ª¡
->parent; \

150 i‡(
x
 =x->
∑ª¡
->
_right
) { \

151 
x
 = x->
∑ª¡
; \

152 
rb_
##
_À·
##
	`_rŸ©e
(
åì
, 
x
); \

154 
x
->
∑ª¡
->
ªd
 = 0; \

155 
x
->
∑ª¡
->∑ª¡->
ªd
 = 1; \

156 
rb_
##
_right
##
	`_rŸ©e
(
åì
, 
x
->
∑ª¡
->parent); \

158 } 0)

	)

160 
x
->
∑ª¡
->
ªd
) {

161 i‡(
x
->
∑ª¡
 =x->∑ª¡->∑ª¡->
À·
) {

162 
	`RB_INSERT_SUB
(
À·
, 
right
);

165 
	`RB_INSERT_SUB
(
right
, 
À·
);

168 
åì
->
roŸ
->
À·
->
ªd
 = 0;

169 
	`as£π
(!(
åì
->
nû
->
ªd
Ë&& !—ªe->
roŸ
->red));

171 #unde‡
RB_INSERT_SUB


172 
	}
}

179 
ölöe
 
rb_node
 *

180 
	$rb_åì_suc˚ss‹
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

181 
rb_node
 *
x
 = 
node
, *
y
, *
nû
 = 
åì
->nil;

183 i‡((
y
 = 
x
->
right
Ë!
nû
) {

184 
y
->
À·
 !
nû
) {

185 
y
 = y->
À·
;

187  
y
;

190 
y
 = 
x
->
∑ª¡
;

191 
x
 =
y
->
right
) {

192 
x
 = 
y
, y = y->
∑ª¡
;

194 i‡(
y
 =
åì
->
roŸ
) {

195  
nû
;

197  
y
;

199 
	}
}

205 
ölöe
 
rb_node
 *

206 
	$rb_åì_¥ede˚ss‹
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

207 
rb_node
 *
x
 = 
node
, *
y
, *
nû
 = 
åì
->nil;

209 i‡((
y
 = 
x
->
À·
Ë!
nû
) {

210 
y
->
right
 !
nû
) {

211 
y
 = y->
right
;

213  
y
;

216 
y
 = 
x
->
∑ª¡
;

217 
x
 =
y
->
À·
) {

218 i‡(
y
 =
åì
->
roŸ
) {

219  
nû
;

221 
x
 = 
y
, y = y->
∑ª¡
;

223  
y
;

225 
	}
}

232 
rb_node
 *

233 
rb_£¨ch
(
rb_åì
 *
åì
, (*
com∑ª
)(
rb_node
 *
node
, *
key
), *key) {

234 
rb_node
 *
nû
 = 
åì
->nû, *
node
 =Åªe->
roŸ
->
À·
;

235 
r
;

236 
node
 !
nû
 && (
r
 = 
	`com∑ª
“ode, 
key
)) != 0) {

237 
node
 = (
r
 > 0Ë?Çode->
À·
 :Çode->
right
;

239  (
node
 !
nû
Ë?Çodê: 
NULL
;

240 
	}
}

247 
	$rb_dñëe_fixup
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

248 
rb_node
 *
x
 = 
node
, *
w
, *
roŸ
 = 
åì
->roŸ->
À·
;

250 
	#RB_DELETE_FIXUP_SUB
(
_À·
, 
_right
) \

252 
w
 = 
x
->
∑ª¡
->
_right
; \

253 i‡(
w
->
ªd
) { \

254 
w
->
ªd
 = 0; \

255 
x
->
∑ª¡
->
ªd
 = 1; \

256 
rb_
##
_À·
##
	`_rŸ©e
(
åì
, 
x
->
∑ª¡
); \

257 
w
 = 
x
->
∑ª¡
->
_right
; \

259 i‡(!
w
->
_À·
->
ªd
 && !w->
_right
->red) { \

260 
w
->
ªd
 = 1; \

261 
x
 = x->
∑ª¡
; \

264 i‡(!
w
->
_right
->
ªd
) { \

265 
w
->
_À·
->
ªd
 = 0; \

266 
w
->
ªd
 = 1; \

267 
rb_
##
_right
##
	`_rŸ©e
(
åì
, 
w
); \

268 
w
 = 
x
->
∑ª¡
->
_right
; \

270 
w
->
ªd
 = 
x
->
∑ª¡
->red; \

271 
x
->
∑ª¡
->
ªd
 = 0; \

272 
w
->
_right
->
ªd
 = 0; \

273 
rb_
##
_À·
##
	`_rŸ©e
(
åì
, 
x
->
∑ª¡
); \

274 
x
 = 
roŸ
; \

276 } 0)

	)

278 
x
 !
roŸ
 && !x->
ªd
) {

279 i‡(
x
 =x->
∑ª¡
->
À·
) {

280 
	`RB_DELETE_FIXUP_SUB
(
À·
, 
right
);

283 
	`RB_DELETE_FIXUP_SUB
(
right
, 
À·
);

286 
x
->
ªd
 = 0;

288 #unde‡
RB_DELETE_FIXUP_SUB


289 
	}
}

296 
	$rb_dñëe
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

297 
rb_node
 *
x
, *
y
, *
z
 = 
node
;

298 
rb_node
 *
nû
 = 
åì
->nû, *
roŸ
 =Åree->root;

300 
y
 = (
z
->
À·
 =
nû
 || z->
right
 =nûË? z : 
	`rb_åì_suc˚ss‹
(
åì
, z);

301 
x
 = (
y
->
À·
 !
nû
Ë? y->À· : y->
right
;

303 
	`as£π
(
y
 !
roŸ
 && y !
nû
);

305 
x
->
∑ª¡
 = 
y
->parent;

306 i‡(
y
 =y->
∑ª¡
->
À·
) {

307 
y
->
∑ª¡
->
À·
 = 
x
;

310 
y
->
∑ª¡
->
right
 = 
x
;

313 
boﬁ
 
√ed_fixup
 = !(
y
->
ªd
);

315 i‡(
y
 !
z
) {

316 i‡(
z
 =z->
∑ª¡
->
À·
) {

317 
z
->
∑ª¡
->
À·
 = 
y
;

320 
z
->
∑ª¡
->
right
 = 
y
;

322 
z
->
À·
->
∑ª¡
 = z->
right
->∑ª¡ = 
y
;

323 *
y
 = *
z
;

325 i‡(
√ed_fixup
) {

326 
	`rb_dñëe_fixup
(
åì
, 
x
);

328 
	}
}

332 
	$rb_åì_de°roy
(
rb_åì
 *
åì
) {

333 
	`k‰ì
(
åì
->
roŸ
);

334 
	`k‰ì
(
åì
->
nû
);

335 
	`k‰ì
(
åì
);

336 
	}
}

342 
rb_node
 *

343 
	$rb_node_¥ev
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

344 
rb_node
 *
¥ev
 = 
	`rb_åì_¥ede˚ss‹
(
åì
, 
node
);

345  (
¥ev
 !
åì
->
nû
Ë?Öªv : 
NULL
;

346 
	}
}

352 
rb_node
 *

353 
	$rb_node_√xt
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

354 
rb_node
 *
√xt
 = 
	`rb_åì_suc˚ss‹
(
åì
, 
node
);

355  (
√xt
 !
åì
->
nû
Ë?Çexà: 
NULL
;

356 
	}
}

359 
rb_node
 *

360 
	$rb_node_roŸ
(
rb_åì
 *
åì
) {

361 
rb_node
 *
node
 = 
åì
->
roŸ
->
À·
;

362  (
node
 !
åì
->
nû
Ë?Çodê: 
NULL
;

363 
	}
}

366 
rb_node
 *

367 
	$rb_node_À·
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

368 
rb_node
 *
À·
 = 
node
->left;

369  (
À·
 !
åì
->
nû
Ë?Üe· : 
NULL
;

370 
	}
}

373 
rb_node
 *

374 
	$rb_node_right
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

375 
rb_node
 *
right
 = 
node
->right;

376  (
right
 !
åì
->
nû
Ë?Ñighà: 
NULL
;

377 
	}
}

380 
	$check_åì
(
rb_åì
 *
åì
, 
rb_node
 *
node
) {

381 
rb_node
 *
nû
 = 
åì
->nil;

382 i‡(
node
 =
nû
) {

383 
	`as£π
(!
node
->
ªd
);

386 i‡(
node
->
À·
 !
nû
) {

387 
	`as£π
(
	`COMPARE
(
åì
, 
node
,Çode->
À·
) >= 0);

388 
	`as£π
(
node
->
À·
->
∑ª¡
 ==Çode);

390 i‡(
node
->
right
 !
nû
) {

391 
	`as£π
(
	`COMPARE
(
åì
, 
node
,Çode->
right
) <= 0);

392 
	`as£π
(
node
->
right
->
∑ª¡
 ==Çode);

394 i‡(
node
->
ªd
) {

395 
	`as£π
(!
node
->
À·
->
ªd
 && !node->
right
->red);

397 
hb_À·
 = 
	`check_åì
(
åì
, 
node
->
À·
);

398 
hb_right
 = 
	`check_åì
(
åì
, 
node
->
right
);

399 
	`as£π
(
hb_À·
 =
hb_right
);

400 
hb
 = 
hb_À·
;

401 i‡(!
node
->
ªd
) {

402 
hb
 ++;

404  
hb
;

405 
	}
}

408 
	$check_ß„_kmÆloc
(
size_t
 
size
) {

409 *
ªt
 = 
	`kmÆloc
(
size
);

410 
	`as£π
(
ªt
 !
NULL
);

411  
ªt
;

412 
	}
}

414 
	scheck_d©a
 {

415 
	md©a
;

416 
rb_node
 
	mrb_lök
;

419 
	#rbn2d©a
(
node
) \

420 (
	`to_°ru˘
(
node
, 
check_d©a
, 
rb_lök
))

	)

422 
ölöe
 

423 
	$check_com∑ª1
(
rb_node
 *
node1
,Ñb_nodê*
node2
) {

424  
	`rbn2d©a
(
node1
)->
d©a
 -Ñbn2d©a(
node2
)->data;

425 
	}
}

427 
ölöe
 

428 
	$check_com∑ª2
(
rb_node
 *
node
, *
key
) {

429  
	`rbn2d©a
(
node
)->
d©a
 - ()
key
;

430 
	}
}

433 
	$check_rb_åì
() {

434 
rb_åì
 *
åì
 = 
	`rb_åì_¸óã
(
check_com∑ª1
);

435 
	`as£π
(
åì
 !
NULL
);

437 
rb_node
 *
nû
 = 
åì
->nû, *
roŸ
 =Åree->root;

438 
	`as£π
(!
nû
->
ªd
 && 
roŸ
->
À·
 ==Çil);

440 
tŸÆ
 = 100;

441 
check_d©a
 **
Æl
 = 
	`check_ß„_kmÆloc
((check_d©®*Ë* 
tŸÆ
);

443 
i
;

444 
i
 = 0; i < 
tŸÆ
; i ++) {

445 
Æl
[
i
] = 
	`check_ß„_kmÆloc
((
check_d©a
));

446 
Æl
[
i
]->
d©a
 = i;

449 *
m¨k
 = 
	`check_ß„_kmÆloc
((Ë* 
tŸÆ
);

450 
	`mem£t
(
m¨k
, 0, (Ë* 
tŸÆ
);

452 
i
 = 0; i < 
tŸÆ
; i ++) {

453 
m¨k
[
Æl
[
i
]->
d©a
] = 1;

455 
i
 = 0; i < 
tŸÆ
; i ++) {

456 
	`as£π
(
m¨k
[
i
] == 1);

459 
i
 = 0; i < 
tŸÆ
; i ++) {

460 
j
 = (
	`ønd
(Ë% (
tŸÆ
 - 
i
)) + i;

461 
check_d©a
 *
z
 = 
Æl
[
i
];

462 
Æl
[
i
] =áŒ[
j
];

463 
Æl
[
j
] = 
z
;

466 
	`mem£t
(
m¨k
, 0, (Ë* 
tŸÆ
);

467 
i
 = 0; i < 
tŸÆ
; i ++) {

468 
m¨k
[
Æl
[
i
]->
d©a
] = 1;

470 
i
 = 0; i < 
tŸÆ
; i ++) {

471 
	`as£π
(
m¨k
[
i
] == 1);

474 
i
 = 0; i < 
tŸÆ
; i ++) {

475 
	`rb_ö£π
(
åì
, &(
Æl
[
i
]->
rb_lök
));

476 
	`check_åì
(
åì
, 
roŸ
->
À·
);

479 
rb_node
 *
node
;

480 
i
 = 0; i < 
tŸÆ
; i ++) {

481 
node
 = 
	`rb_£¨ch
(
åì
, 
check_com∑ª2
, (*)(
Æl
[
i
]->
d©a
));

482 
	`as£π
(
node
 !
NULL
 &&Çodê=&(
Æl
[
i
]->
rb_lök
));

485 
i
 = 0; i < 
tŸÆ
; i ++) {

486 
node
 = 
	`rb_£¨ch
(
åì
, 
check_com∑ª2
, (*)
i
);

487 
	`as£π
(
node
 !
NULL
 && 
	`rbn2d©a
“ode)->
d©a
 =
i
);

488 
	`rb_dñëe
(
åì
, 
node
);

489 
	`check_åì
(
åì
, 
roŸ
->
À·
);

492 
	`as£π
(!
nû
->
ªd
 && 
roŸ
->
À·
 ==Çil);

494 
max
 = 32;

495 i‡(
max
 > 
tŸÆ
) {

496 
max
 = 
tŸÆ
;

499 
i
 = 0; i < 
max
; i ++) {

500 
Æl
[
i
]->
d©a
 = 
max
;

501 
	`rb_ö£π
(
åì
, &(
Æl
[
i
]->
rb_lök
));

502 
	`check_åì
(
åì
, 
roŸ
->
À·
);

505 
i
 = 0; i < 
max
; i ++) {

506 
node
 = 
	`rb_£¨ch
(
åì
, 
check_com∑ª2
, (*)
max
);

507 
	`as£π
(
node
 !
NULL
 && 
	`rbn2d©a
“ode)->
d©a
 =
max
);

508 
	`rb_dñëe
(
åì
, 
node
);

509 
	`check_åì
(
åì
, 
roŸ
->
À·
);

512 
	`as£π
(
	`rb_åì_em±y
(
åì
));

514 
i
 = 0; i < 
tŸÆ
; i ++) {

515 
	`rb_ö£π
(
åì
, &(
Æl
[
i
]->
rb_lök
));

516 
	`check_åì
(
åì
, 
roŸ
->
À·
);

519 
	`rb_åì_de°roy
(
åì
);

521 
i
 = 0; i < 
tŸÆ
; i ++) {

522 
	`k‰ì
(
Æl
[
i
]);

525 
	`k‰ì
(
m¨k
);

526 
	`k‰ì
(
Æl
);

527 
	}
}

	@kern-ucore/libs/rb_tree.h

1 #i‚de‡
__KERN_LIBS_RB_TREE_H__


2 
	#__KERN_LIBS_RB_TREE_H__


	)

4 
	~<ty≥s.h
>

6 
	srb_node
 {

7 
boﬁ
 
	mªd
;

8 
rb_node
 *
	m∑ª¡
;

9 
rb_node
 *
	mÀ·
, *
	mright
;

10 } 
	trb_node
;

12 
	srb_åì
 {

14 (*
	mcom∑ª
)(
rb_node
 *
	mnode1
,Ñb_nodê*
	mnode2
);

15 
rb_node
 *
	mnû
, *
	mroŸ
;

16 } 
	trb_åì
;

18 
rb_åì
 *
rb_åì_¸óã
((*
com∑ª
)(
rb_node
 *
node1
,Ñb_nodê*
node2
));

19 
	`rb_åì_de°roy
(
rb_åì
 *
åì
);

20 
	`rb_ö£π
(
rb_åì
 *
åì
, 
rb_node
 *
node
);

21 
	`rb_dñëe
(
rb_åì
 *
åì
, 
rb_node
 *
node
);

22 
rb_node
 *
	`rb_£¨ch
(
rb_åì
 *
åì
, (*
com∑ª
)‘b_nodê*
node
, *
key
), *key);

23 
rb_node
 *
	`rb_node_¥ev
(
rb_åì
 *
åì
,Ñb_nodê*
node
);

24 
rb_node
 *
	`rb_node_√xt
(
rb_åì
 *
åì
,Ñb_nodê*
node
);

25 
rb_node
 *
	`rb_node_roŸ
(
rb_åì
 *
åì
);

26 
rb_node
 *
	`rb_node_À·
(
rb_åì
 *
åì
,Ñb_nodê*
node
);

27 
rb_node
 *
	`rb_node_right
(
rb_åì
 *
åì
,Ñb_nodê*
node
);

29 
	`check_rb_åì
();

	@kern-ucore/libs/readline.c

1 
	~<glue_kio.h
>

2 
	~<kio.h
>

4 
	#BUFSIZE
 1024

	)

5 
	gbuf
[
BUFSIZE
];

7 
	#gëch¨
 
kc⁄s_gëc


	)

8 
	#˝utch¨
 
kc⁄s_putc


	)

29 
	$ªadlöe
(c⁄° *
¥om±
) {

30 i‡(
¥om±
 !
NULL
) {

31 
	`k¥ötf
("%s", 
¥om±
);

33 
i
 = 0, 
c
;

35 
c
 = 
	`gëch¨
();

36 i‡(
c
 < 0) {

37  
NULL
;

39 i‡(
c
 >' ' && 
i
 < 
BUFSIZE
 - 1) {

40 
	`˝utch¨
(
c
);

41 
buf
[
i
 ++] = 
c
;

43 i‡(
c
 ='\b' && 
i
 > 0) {

44 
	`˝utch¨
(
c
);

45 
i
 --;

47 i‡(
c
 == '\n' || c == '\r') {

48 
	`˝utch¨
(
c
);

49 
buf
[
i
] = '\0';

50  
buf
;

53 
	}
}

	@kern-ucore/libs/string.c

1 
	~<°rög.h
>

2 
	~<¶ab.h
>

5 
	$°rdup
(c⁄° *
§c
) {

6 *
d°
;

7 
size_t
 
Àn
 = 
	`°æí
(
§c
);

8 i‡((
d°
 = 
	`kmÆloc
(
Àn
 + 1)Ë!
NULL
) {

9 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

10 
d°
[
Àn
] = '\0';

12  
d°
;

13 
	}
}

16 
	$°ødd
(c⁄° *
§c1
, c⁄° *
§c2
) {

17 *
ªt
, *
d°
;

18 
size_t
 
Àn1
 = 
	`°æí
(
§c1
), 
Àn2
 = såÀn(
§c2
);

19 i‡((
ªt
 = 
d°
 = 
	`kmÆloc
(
Àn1
 + 
Àn2
 + 1)Ë!
NULL
) {

20 
	`mem˝y
(
d°
, 
§c1
, 
Àn1
), dst +=Üen1;

21 
	`mem˝y
(
d°
, 
§c2
, 
Àn2
), dst +=Üen2;

22 *
d°
 = '\0';

24  
ªt
;

25 
	}
}

	@kern-ucore/mm/shmem.c

1 
	~<ty≥s.h
>

2 
	~<shmem.h
>

3 
	~<¶ab.h
>

4 
	~<sync.h
>

5 
	~<pmm.h
>

6 
	~<°rög.h
>

7 
	~<sw≠.h
>

8 
	~<îr‹.h
>

9 
	~<£m.h
>

11 
shmem_°ru˘
 *

12 
	$shmem_¸óã
(
size_t
 
Àn
) {

13 
shmem_°ru˘
 *
shmem
 = 
	`kmÆloc
((shmem_struct));

14 i‡(
shmem
 !
NULL
) {

15 
	`li°_öô
(&(
shmem
->
shmn_li°
));

16 
shmem
->
shmn_ˇche
 = 
NULL
;

17 
shmem
->
Àn
 =Üen;

18 
	`£t_shmem_ªf
(
shmem
, 0);

19 
	`£m_öô
(&(
shmem
->
shmem_£m
), 1);

21  
shmem
;

22 
	}
}

24 
shmn_t
 *

25 
	$shmn_¸óã
(
uöçå_t
 
°¨t
) {

26 
	`as£π
(
°¨t
 % 
PGSIZE
 * 
SHMN_NENTRY
 == 0);

27 
shmn_t
 *
shmn
 = 
	`kmÆloc
((shmn_t));

28 i‡(
shmn
 !
NULL
) {

29 
Page
 *
∑ge
;

30 i‡((
∑ge
 = 
	`Æloc_∑ge
()Ë!
NULL
) {

31 
shmn
->
íåy
 = (
±e_t
 *)
	`∑ge2kva
(
∑ge
);

32 
shmn
->
°¨t
 = start;

33 
shmn
->
íd
 = 
°¨t
 + 
PGSIZE
 * 
SHMN_NENTRY
;

34 
	`mem£t
(
shmn
->
íåy
, 0, 
PGSIZE
);

37 
	`k‰ì
(
shmn
);

38 
shmn
 = 
NULL
;

41  
shmn
;

42 
	}
}

44 
ölöe
 

45 
	$shmem_ªmove_íåy_±e
(
±e_t
 *
±ï
) {

46 
	`as£π
(
±ï
 !
NULL
);

47 i‡(
	`±ï_¥e£¡
(
±ï
)) {

48 
Page
 *
∑ge
 = 
	`±e2∑ge
(*
±ï
);

49 i‡(!
	`PageSw≠
(
∑ge
)) {

50 i‡(
	`∑ge_ªf_dec
(
∑ge
) == 0) {

51 
	`‰ì_∑ge
(
∑ge
);

55 i‡(
	`±ï_dúty
(
±ï
)) {

56 
	`SëPageDúty
(
∑ge
);

58 
	`∑ge_ªf_dec
(
∑ge
);

60 
	`±ï_unm≠
(
±ï
);

62 i‡(! 
	`±ï_övÆid
(
±ï
)) {

63 
	`sw≠_ªmove_íåy
(*
±ï
);

64 
	`±ï_unm≠
(
±ï
);

66 
	}
}

69 
	$shmn_de°roy
(
shmn_t
 *
shmn
) {

70 
i
;

71 
i
 = 0; i < 
SHMN_NENTRY
; i ++) {

72 
	`shmem_ªmove_íåy_±e
(
shmn
->
íåy
 + 
i
);

74 
	`‰ì_∑ge
(
	`kva2∑ge
(
shmn
->
íåy
));

75 
	`k‰ì
(
shmn
);

76 
	}
}

78 
shmn_t
 *

79 
	$föd_shmn
(
shmem_°ru˘
 *
shmem
, 
uöçå_t
 
addr
) {

80 
shmn_t
 *
shmn
 = 
shmem
->
shmn_ˇche
;

81 i‡(!(
shmn
 !
NULL
 && shmn->
°¨t
 <
addr
 &&ádd∏< shmn->
íd
)) {

82 
shmn
 = 
NULL
;

83 
li°_íåy_t
 *
li°
 = &(
shmem
->
shmn_li°
), *
À
 =Üist;

84 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

85 
shmn_t
 *
tmp
 = 
	`À2shmn
(
À
, 
li°_lök
);

86 i‡(
tmp
->
°¨t
 <
addr
 &&ádd∏<Åmp->
íd
) {

87 
shmn
 = 
tmp
;

92 i‡(
shmn
 !
NULL
) {

93 
shmem
->
shmn_ˇche
 = 
shmn
;

95  
shmn
;

96 
	}
}

98 
ölöe
 

99 
	$check_shmn_ovîœp
(
shmn_t
 *
¥ev
, shmn_à*
√xt
) {

100 
	`as£π
(
¥ev
->
°¨t
 <Öªv->
íd
);

101 
	`as£π
(
¥ev
->
íd
 <
√xt
->
°¨t
);

102 
	`as£π
(
√xt
->
°¨t
 <Çext->
íd
);

103 
	}
}

106 
	$ö£π_shmn
(
shmem_°ru˘
 *
shmem
, 
shmn_t
 *
shmn
) {

107 
li°_íåy_t
 *
li°
 = &(
shmem
->
shmn_li°
), *
À
 =Üist;

108 
li°_íåy_t
 *
À_¥ev
 = 
li°
, *
À_√xt
;

109 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

110 
shmn_t
 *
shmn_¥ev
 = 
	`À2shmn
(
À
, 
li°_lök
);

111 i‡(
shmn_¥ev
->
°¨t
 > 
shmn
->start) {

114 
À_¥ev
 = 
À
;

117 
À_√xt
 = 
	`li°_√xt
(
À_¥ev
);

120 i‡(
À_¥ev
 !
li°
) {

121 
	`check_shmn_ovîœp
(
	`À2shmn
(
À_¥ev
, 
li°_lök
), 
shmn
);

123 i‡(
À_√xt
 !
li°
) {

124 
	`check_shmn_ovîœp
(
shmn
, 
	`À2shmn
(
À_√xt
, 
li°_lök
));

127 
	`li°_add_a·î
(
À_¥ev
, &(
shmn
->
li°_lök
));

128 
	}
}

131 
	$shmem_de°roy
(
shmem_°ru˘
 *
shmem
) {

132 
li°_íåy_t
 *
li°
 = &(
shmem
->
shmn_li°
), *
À
;

133 (
À
 = 
	`li°_√xt
(
li°
)) !=Üist) {

134 
	`li°_dñ
(
À
);

135 
	`shmn_de°roy
(
	`À2shmn
(
À
, 
li°_lök
));

137 
	`k‰ì
(
shmem
);

138 
	}
}

140 
±e_t
 *

141 
	$shmem_gë_íåy
(
shmem_°ru˘
 *
shmem
, 
uöçå_t
 
addr
, 
boﬁ
 
¸óã
) {

142 
	`as£π
(
addr
 < 
shmem
->
Àn
);

143 
addr
 = 
	`ROUNDDOWN
◊ddr, 
PGSIZE
);

144 
shmn_t
 *
shmn
 = 
	`föd_shmn
(
shmem
, 
addr
);

146 
	`as£π
(
shmn
 =
NULL
 || (shmn->
°¨t
 <
addr
 &&ádd∏< shmn->
íd
));

147 i‡(
shmn
 =
NULL
) {

148 
uöçå_t
 
°¨t
 = 
	`ROUNDDOWN
(
addr
, 
PGSIZE
 * 
SHMN_NENTRY
);

149 i‡(!
¸óã
 || (
shmn
 = 
	`shmn_¸óã
(
°¨t
)Ë=
NULL
) {

150  
NULL
;

152 
	`ö£π_shmn
(
shmem
, 
shmn
);

154 
ödex
 = (
addr
 - 
shmn
->
°¨t
Ë/ 
PGSIZE
;

155 i‡(
shmn
->
íåy
[
ödex
] == 0) {

156 i‡(
¸óã
) {

157 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

158 i‡(
∑ge
 !
NULL
) {

159 
	`±ï_m≠
(&(
shmn
->
íåy
[
ödex
]), 
	`∑ge2∑
(
∑ge
));

160 
	`∑ge_ªf_öc
(
∑ge
);

164  
shmn
->
íåy
 + 
ödex
;

165 
	}
}

168 
	$shmem_ö£π_íåy
(
shmem_°ru˘
 *
shmem
, 
uöçå_t
 
addr
, 
±e_t
 
íåy
) {

169 
±e_t
 *
±ï
 = 
	`shmem_gë_íåy
(
shmem
, 
addr
, 1);

170 i‡(
±ï
 =
NULL
) {

171  -
E_NO_MEM
;

173 i‡(! 
	`±ï_övÆid
(
±ï
)) {

174 
	`shmem_ªmove_íåy_±e
(
±ï
);

176 i‡(
	`±ï_¥e£¡
(&
íåy
)) {

177 
	`∑ge_ªf_öc
(
	`±e2∑ge
(
íåy
));

179 i‡(! 
	`±ï_övÆid
(&
íåy
)) {

180 
	`sw≠_du∂iˇã
(
íåy
);

182 
	`±ï_c›y
(
±ï
, &
íåy
);

184 
	}
}

187 
	$shmem_ªmove_íåy
(
shmem_°ru˘
 *
shmem
, 
uöçå_t
 
addr
) {

188  
	`shmem_ö£π_íåy
(
shmem
, 
addr
, 0);

189 
	}
}

	@kern-ucore/mm/shmem.h

1 #i‚de‡
__KERN_MM_SHMEM_H__


2 
	#__KERN_MM_SHMEM_H__


	)

4 
	~<ty≥s.h
>

5 
	~<©omic.h
>

6 
	~<li°.h
>

7 
	~<sync.h
>

8 
	~<memœyout.h
>

9 
	~<£m.h
>

11 
	sshmn_s
 {

12 
uöçå_t
 
	m°¨t
;

13 
uöçå_t
 
	míd
;

14 
±e_t
 *
	míåy
;

15 
li°_íåy_t
 
	mli°_lök
;

16 } 
	tshmn_t
;

18 
	#SHMN_NENTRY
 (
PGSIZE
 / (
±e_t
))

	)

20 
	#À2shmn
(
À
, 
membî
) \

21 
	`to_°ru˘
((
À
), 
shmn_t
, 
membî
)

	)

23 
	sshmem_°ru˘
 {

24 
li°_íåy_t
 
	mshmn_li°
;

25 
shmn_t
 *
	mshmn_ˇche
;

26 
size_t
 
	mÀn
;

27 
©omic_t
 
	mshmem_ªf
;

28 
£m≠h‹e_t
 
	mshmem_£m
;

31 
shmem_°ru˘
 *
shmem_¸óã
(
size_t
 
Àn
);

32 
shmem_de°roy
(
shmem_°ru˘
 *
shmem
);

33 
±e_t
 *
shmem_gë_íåy
(
shmem_°ru˘
 *
shmem
, 
uöçå_t
 
addr
, 
boﬁ
 
¸óã
);

34 
shmem_ö£π_íåy
(
shmem_°ru˘
 *
shmem
, 
uöçå_t
 
addr
, 
±e_t
 
íåy
);

35 
shmem_ªmove_íåy
(
shmem_°ru˘
 *
shmem
, 
uöçå_t
 
addr
);

37 
ölöe
 

38 
	$shmem_ªf
(
shmem_°ru˘
 *
shmem
) {

39  
	`©omic_ªad
(&(
shmem
->
shmem_ªf
));

40 
	}
}

42 
ölöe
 

43 
	$£t_shmem_ªf
(
shmem_°ru˘
 *
shmem
, 
vÆ
) {

44 
	`©omic_£t
(&(
shmem
->
shmem_ªf
), 
vÆ
);

45 
	}
}

47 
ölöe
 

48 
	$shmem_ªf_öc
(
shmem_°ru˘
 *
shmem
) {

49  
	`©omic_add_ªtu∫
(&(
shmem
->
shmem_ªf
), 1);

50 
	}
}

52 
ölöe
 

53 
	$shmem_ªf_dec
(
shmem_°ru˘
 *
shmem
) {

54  
	`©omic_sub_ªtu∫
(&(
shmem
->
shmem_ªf
), 1);

55 
	}
}

57 
ölöe
 

58 
	$lock_shmem
(
shmem_°ru˘
 *
shmem
) {

59 
	`down
(&(
shmem
->
shmem_£m
));

60 
	}
}

62 
ölöe
 

63 
	$u∆ock_shmem
(
shmem_°ru˘
 *
shmem
) {

64 
	`up
(&(
shmem
->
shmem_£m
));

65 
	}
}

	@kern-ucore/mm/slab.c

1 
	~<ty≥s.h
>

2 
	~<li°.h
>

3 
	~<memœyout.h
>

4 
	~<as£π.h
>

5 
	~<¶ab.h
>

6 
	~<sync.h
>

7 
	~<pmm.h
>

8 
	~<°dio.h
>

9 
	~<rb_åì.h
>

10 
	~<kio.h
>

11 
	~<mp.h
>

66 
	#BUFCTL_END
 0xFFFFFFFFL

67 
	#SLAB_LIMIT
 0xFFFFFFFEL

68 

	)

69 
size_t
 
	tkmem_buf˘l_t
;

71 
	s¶ab_s
 {

72 
li°_íåy_t
 
	m¶ab_lök
;

73 *
	ms_mem
;

74 
size_t
 
	möu£
;

75 
size_t
 
	moff£t
;

76 
kmem_buf˘l_t
 
	m‰ì
;

77 } 
	t¶ab_t
;

80 
	#À2¶ab
(
À
, 
membî
) \

81 
	`to_°ru˘
((
À
), 
¶ab_t
, 
membî
)

	)

83 
kmem_ˇche_s
 
	tkmem_ˇche_t
;

86 
	skmem_ˇche_s
 {

87 
li°_íåy_t
 
	m¶abs_fuŒ
;

88 
li°_íåy_t
 
	m¶abs_nŸfuŒ
;

90 
size_t
 
	mobjsize
;

91 
size_t
 
	mnum
;

92 
size_t
 
	moff£t
;

93 
boﬁ
 
	moff_¶ab
;

96 
size_t
 
	m∑ge_‹dî
;

98 
kmem_ˇche_t
 *
	m¶ab_ˇchï
;

101 
	#MIN_SIZE_ORDER
 5

102 
	#MAX_SIZE_ORDER
 17

103 
	#SLAB_CACHE_NUM
 (
MAX_SIZE_ORDER
 - 
MIN_SIZE_ORDER
 + 1)

	)

105 
kmem_ˇche_t
 
	g¶ab_ˇche
[
SLAB_CACHE_NUM
];

107 
öô_kmem_ˇche
(
kmem_ˇche_t
 *
ˇchï
, 
size_t
 
objsize
, size_à
Æign
);

108 
check_¶ab
();

112 
	$¶ab_öô
() {

113 
size_t
 
i
;

115 
size_t
 
Æign
 = 16;

116 
i
 = 0; i < 
SLAB_CACHE_NUM
; i ++) {

117 
	`öô_kmem_ˇche
(
¶ab_ˇche
 + 
i
, 1 << (ò+ 
MIN_SIZE_ORDER
), 
Æign
);

119 
	`check_¶ab
();

120 
	}
}

123 
size_t


124 
	$¶ab_Æloˇãd
() {

125 
size_t
 
tŸÆ
 = 0;

126 
i
;

127 
boﬁ
 
öå_Êag
;

128 
	`loˇl_öå_ßve
(
öå_Êag
);

130 
i
 = 0; i < 
SLAB_CACHE_NUM
; i ++) {

131 
kmem_ˇche_t
 *
ˇchï
 = 
¶ab_ˇche
 + 
i
;

132 
li°_íåy_t
 *
li°
, *
À
;

133 
li°
 = 
À
 = &(
ˇchï
->
¶abs_fuŒ
);

134 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

135 
tŸÆ
 +
ˇchï
->
num
 * cachï->
objsize
;

137 
li°
 = 
À
 = &(
ˇchï
->
¶abs_nŸfuŒ
);

138 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

139 
¶ab_t
 *
¶abp
 = 
	`À2¶ab
(
À
, 
¶ab_lök
);

140 
tŸÆ
 +
¶abp
->
öu£
 * 
ˇchï
->
objsize
;

144 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

145  
tŸÆ
;

146 
	}
}

149 
size_t


150 
	$¶ab_mgmt_size
(
size_t
 
num
, size_à
Æign
) {

151  
	`ROUNDUP
((
¶ab_t
Ë+ 
num
 * (
kmem_buf˘l_t
), 
Æign
);

152 
	}
}

156 
	$ˇche_e°im©e
(
size_t
 
‹dî
, size_à
objsize
, size_à
Æign
, 
boﬁ
 
off_¶ab
, size_à*
ªmaödî
, size_à*
num
) {

157 
size_t
 
ƒ_objs
, 
mgmt_size
;

158 
size_t
 
¶ab_size
 = (
PGSIZE
 << 
‹dî
);

160 i‡(
off_¶ab
) {

161 
mgmt_size
 = 0;

162 
ƒ_objs
 = 
¶ab_size
 / 
objsize
;

163 i‡(
ƒ_objs
 > 
SLAB_LIMIT
) {

164 
ƒ_objs
 = 
SLAB_LIMIT
;

168 
ƒ_objs
 = (
¶ab_size
 - (
¶ab_t
)Ë/ (
objsize
 + (
kmem_buf˘l_t
));

169 
	`¶ab_mgmt_size
(
ƒ_objs
, 
Æign
Ë+Çr_obj†* 
objsize
 > 
¶ab_size
) {

170 
ƒ_objs
 --;

172 i‡(
ƒ_objs
 > 
SLAB_LIMIT
) {

173 
ƒ_objs
 = 
SLAB_LIMIT
;

175 
mgmt_size
 = 
	`¶ab_mgmt_size
(
ƒ_objs
, 
Æign
);

177 *
num
 = 
ƒ_objs
;

178 *
ªmaödî
 = 
¶ab_size
 - 
ƒ_objs
 * 
objsize
 - 
mgmt_size
;

179 
	}
}

189 
	$ˇlcuœã_¶ab_‹dî
(
kmem_ˇche_t
 *
ˇchï
, 
size_t
 
objsize
, size_à
Æign
, 
boﬁ
 
off_¶ab
, size_à*
À·_ovî
) {

190 
size_t
 
‹dî
;

191 
‹dî
 = 0; ordî <
KMALLOC_MAX_ORDER
; order ++) {

192 
size_t
 
num
, 
ªmaödî
;

193 
	`ˇche_e°im©e
(
‹dî
, 
objsize
, 
Æign
, 
off_¶ab
, &
ªmaödî
, &
num
);

194 i‡(
num
 != 0) {

195 i‡(
off_¶ab
) {

196 
size_t
 
off_¶ab_limô
 = 
objsize
 - (
¶ab_t
);

197 
off_¶ab_limô
 /(
kmem_buf˘l_t
);

198 i‡(
num
 > 
off_¶ab_limô
) {

199 
	`∑nic
("off_¶ab: objsizê%d,Çum = %d.", 
objsize
, 
num
);

202 i‡(
ªmaödî
 * 8 <(
PGSIZE
 << 
‹dî
)) {

203 
ˇchï
->
num
 =Çum;

204 
ˇchï
->
∑ge_‹dî
 = 
‹dî
;

205 i‡(
À·_ovî
 !
NULL
) {

206 *
À·_ovî
 = 
ªmaödî
;

212 
	`∑nic
("calculate_slab_over: failed.");

213 
	}
}

216 
ölöe
 
size_t


217 
	$gë‹dî
(
size_t
 
n
) {

218 
size_t
 
‹dî
 = 
MIN_SIZE_ORDER
, 
‹dî_size
 = (1 << order);

219 ; 
‹dî
 <
MAX_SIZE_ORDER
; ordî ++, 
‹dî_size
 <<= 1) {

220 i‡(
n
 <
‹dî_size
) {

221  
‹dî
;

224 
	`∑nic
("gë‹dî faûed. %d\n", 
n
);

225 
	}
}

229 
	$öô_kmem_ˇche
(
kmem_ˇche_t
 *
ˇchï
, 
size_t
 
objsize
, size_à
Æign
) {

230 
	`li°_öô
(&(
ˇchï
->
¶abs_fuŒ
));

231 
	`li°_öô
(&(
ˇchï
->
¶abs_nŸfuŒ
));

233 
objsize
 = 
	`ROUNDUP
(objsize, 
Æign
);

234 
ˇchï
->
objsize
 = objsize;

235 
ˇchï
->
off_¶ab
 = (
objsize
 >(
PGSIZE
 >> 3));

237 
size_t
 
À·_ovî
;

238 
	`ˇlcuœã_¶ab_‹dî
(
ˇchï
, 
objsize
, 
Æign
, cachï->
off_¶ab
, &
À·_ovî
);

240 
	`as£π
(
ˇchï
->
num
 > 0);

242 
size_t
 
mgmt_size
 = 
	`¶ab_mgmt_size
(
ˇchï
->
num
, 
Æign
);

244 i‡(
ˇchï
->
off_¶ab
 && 
À·_ovî
 >
mgmt_size
) {

245 
ˇchï
->
off_¶ab
 = 0;

248 i‡(
ˇchï
->
off_¶ab
) {

249 
ˇchï
->
off£t
 = 0;

250 
ˇchï
->
¶ab_ˇchï
 = 
¶ab_ˇche
 + (
	`gë‹dî
(
mgmt_size
Ë- 
MIN_SIZE_ORDER
);

253 
ˇchï
->
off£t
 = 
mgmt_size
;

255 
	}
}

257 *
kmem_ˇche_Æloc
(
kmem_ˇche_t
 *
ˇchï
);

259 
	#¶ab_buf˘l
(
¶abp
) \

260 ((
kmem_buf˘l_t
*)(((
¶ab_t
 *)(
¶abp
)Ë+ 1))

	)

264 
¶ab_t
 *

265 
	$kmem_ˇche_¶abmgmt
(
kmem_ˇche_t
 *
ˇchï
, 
Page
 *
∑ge
) {

266 *
objp
 = 
	`∑ge2kva
(
∑ge
);

267 
¶ab_t
 *
¶abp
;

269 i‡(
ˇchï
->
off_¶ab
) {

270 i‡((
¶abp
 = 
	`kmem_ˇche_Æloc
(
ˇchï
->
¶ab_ˇchï
)Ë=
NULL
) {

271  
NULL
;

275 
¶abp
 = 
	`∑ge2kva
(
∑ge
);

277 
¶abp
->
öu£
 = 0;

278 
¶abp
->
off£t
 = 
ˇchï
->offset;

279 
¶abp
->
s_mem
 = 
objp
 + 
ˇchï
->
off£t
;

280  
¶abp
;

281 
	}
}

283 
	#SET_PAGE_CACHE
(
∑ge
, 
ˇchï
) \

285 
Page
 *
__∑ge
 = (Pagê*)(
∑ge
); \

286 
kmem_ˇche_t
 **
__ˇchïp
 = (kmem_ˇche_à**)&(
__∑ge
->
∑ge_lök
.
√xt
); \

287 *
__ˇchïp
 = (
kmem_ˇche_t
 *)(
ˇchï
); \

288 } 0)

	)

290 
	#SET_PAGE_SLAB
(
∑ge
, 
¶abp
) \

292 
Page
 *
__∑ge
 = (Pagê*)(
∑ge
); \

293 
¶ab_t
 **
__ˇchïp
 = (¶ab_à**)&(
__∑ge
->
∑ge_lök
.
¥ev
); \

294 *
__ˇchïp
 = (
¶ab_t
 *)(
¶abp
); \

295 } 0)

	)

299 
boﬁ


300 
	$kmem_ˇche_grow
(
kmem_ˇche_t
 *
ˇchï
) {

301 
Page
 *
∑ge
 = 
	`Æloc_∑ges
(1 << 
ˇchï
->
∑ge_‹dî
);

302 i‡(
∑ge
 =
NULL
) {

303 
Áûed
;

306 
¶ab_t
 *
¶abp
;

307 i‡((
¶abp
 = 
	`kmem_ˇche_¶abmgmt
(
ˇchï
, 
∑ge
)Ë=
NULL
) {

308 
o›s
;

311 
size_t
 
‹dî_size
 = (1 << 
ˇchï
->
∑ge_‹dî
);

314 
	`SET_PAGE_CACHE
(
∑ge
, 
ˇchï
);

315 
	`SET_PAGE_SLAB
(
∑ge
, 
¶abp
);

317 
	`SëPageSœb
(
∑ge
);

318 
∑ge
 = 
	`NEXT_PAGE
(page);

319 } -- 
‹dî_size
);

321 
i
;

322 
i
 = 0; i < 
ˇchï
->
num
; i ++) {

323 
	`¶ab_buf˘l
(
¶abp
)[
i
] = i + 1;

325 
	`¶ab_buf˘l
(
¶abp
)[
ˇchï
->
num
 - 1] = 
BUFCTL_END
;

326 
¶abp
->
‰ì
 = 0;

328 
boﬁ
 
öå_Êag
;

329 
	`loˇl_öå_ßve
(
öå_Êag
);

331 
	`li°_add
(&(
ˇchï
->
¶abs_nŸfuŒ
), &(
¶abp
->
¶ab_lök
));

333 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

336 
o›s
:

337 
	`‰ì_∑ges
(
∑ge
, 1 << 
ˇchï
->
∑ge_‹dî
);

338 
Áûed
:

340 
	}
}

344 
	$kmem_ˇche_Æloc_⁄e
(
kmem_ˇche_t
 *
ˇchï
, 
¶ab_t
 *
¶abp
) {

345 
¶abp
->
öu£
 ++;

346 *
objp
 = 
¶abp
->
s_mem
 + sœbp->
‰ì
 * 
ˇchï
->
objsize
;

347 
¶abp
->
‰ì
 = 
	`¶ab_buf˘l
(slabp)[slabp->free];

349 i‡(
¶abp
->
‰ì
 =
BUFCTL_END
) {

350 
	`li°_dñ
(&(
¶abp
->
¶ab_lök
));

351 
	`li°_add
(&(
ˇchï
->
¶abs_fuŒ
), &(
¶abp
->
¶ab_lök
));

353  
objp
;

354 
	}
}

359 
	$kmem_ˇche_Æloc
(
kmem_ˇche_t
 *
ˇchï
) {

360 *
objp
;

361 
boﬁ
 
öå_Êag
;

363 
åy_agaö
:

364 
	`loˇl_öå_ßve
(
öå_Êag
);

365 i‡(
	`li°_em±y
(&(
ˇchï
->
¶abs_nŸfuŒ
))) {

366 
Æloc_√w_¶ab
;

368 
¶ab_t
 *
¶abp
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï
->
¶abs_nŸfuŒ
)), 
¶ab_lök
);

369 
objp
 = 
	`kmem_ˇche_Æloc_⁄e
(
ˇchï
, 
¶abp
);

370 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

371  
objp
;

373 
Æloc_√w_¶ab
:

374 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

375 i‡(
	`kmem_ˇche_grow
(
ˇchï
)) {

376 
åy_agaö
;

378  
NULL
;

379 
	}
}

384 
	$kmÆloc
(
size_t
 
size
) {

385 
	`as£π
(
size
 > 0);

386 
size_t
 
‹dî
 = 
	`gë‹dî
(
size
);

387 i‡(
‹dî
 > 
MAX_SIZE_ORDER
) {

388  
NULL
;

390  
	`kmem_ˇche_Æloc
(
¶ab_ˇche
 + (
‹dî
 - 
MIN_SIZE_ORDER
));

391 
	}
}

393 
kmem_ˇche_‰ì
(
kmem_ˇche_t
 *
ˇchï
, *
obj
);

397 
	$kmem_¶ab_de°roy
(
kmem_ˇche_t
 *
ˇchï
, 
¶ab_t
 *
¶abp
) {

398 
Page
 *
∑ge
 = 
	`kva2∑ge
(
¶abp
->
s_mem
 - sœbp->
off£t
);

400 
Page
 *
p
 = 
∑ge
;

401 
size_t
 
‹dî_size
 = (1 << 
ˇchï
->
∑ge_‹dî
);

403 
	`as£π
(
	`PageSœb
(
p
));

404 
	`CÀ¨PageSœb
(
p
);

405 
p
 = 
	`NEXT_PAGE
(p);

406 } -- 
‹dî_size
);

408 
	`‰ì_∑ges
(
∑ge
, 1 << 
ˇchï
->
∑ge_‹dî
);

410 i‡(
ˇchï
->
off_¶ab
) {

411 
	`kmem_ˇche_‰ì
(
ˇchï
->
¶ab_ˇchï
, 
¶abp
);

413 
	}
}

418 
	$kmem_ˇche_‰ì_⁄e
(
kmem_ˇche_t
 *
ˇchï
, 
¶ab_t
 *
¶abp
, *
objp
) {

420 
size_t
 
objƒ
 = (
objp
 - 
¶abp
->
s_mem
Ë/ 
ˇchï
->
objsize
;

421 
	`¶ab_buf˘l
(
¶abp
)[
objƒ
] = sœbp->
‰ì
;

422 
¶abp
->
‰ì
 = 
objƒ
;

424 
¶abp
->
öu£
 --;

426 i‡(
¶abp
->
öu£
 == 0) {

427 
	`li°_dñ
(&(
¶abp
->
¶ab_lök
));

428 
	`kmem_¶ab_de°roy
(
ˇchï
, 
¶abp
);

430 i‡(
¶abp
->
öu£
 =
ˇchï
->
num
 -1 ) {

431 
	`li°_dñ
(&(
¶abp
->
¶ab_lök
));

432 
	`li°_add
(&(
ˇchï
->
¶abs_nŸfuŒ
), &(
¶abp
->
¶ab_lök
));

434 
	}
}

436 
	#GET_PAGE_CACHE
(
∑ge
) \

437 (
kmem_ˇche_t
 *)((
∑ge
)->
∑ge_lök
.
√xt
)

	)

439 
	#GET_PAGE_SLAB
(
∑ge
) \

440 (
¶ab_t
 *)((
∑ge
)->
∑ge_lök
.
¥ev
)

	)

444 
	$kmem_ˇche_‰ì
(
kmem_ˇche_t
 *
ˇchï
, *
objp
) {

445 
boﬁ
 
öå_Êag
;

446 
Page
 *
∑ge
 = 
	`kva2∑ge
(
objp
);

448 i‡(!
	`PageSœb
(
∑ge
)) {

449 
	`∑nic
("nŸá sœbÖagê%08x\n", 
objp
);

451 
	`loˇl_öå_ßve
(
öå_Êag
);

453 
	`kmem_ˇche_‰ì_⁄e
(
ˇchï
, 
	`GET_PAGE_SLAB
(
∑ge
), 
objp
);

455 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

456 
	}
}

460 
	$k‰ì
(*
objp
) {

461 
	`kmem_ˇche_‰ì
(
	`GET_PAGE_CACHE
(
	`kva2∑ge
(
objp
)), objp);

462 
	}
}

464 
ölöe
 

465 
	$check_¶ab_em±y
() {

466 
i
;

467 
i
 = 0; i < 
SLAB_CACHE_NUM
; i ++) {

468 
kmem_ˇche_t
 *
ˇchï
 = 
¶ab_ˇche
 + 
i
;

469 
	`as£π
(
	`li°_em±y
(&(
ˇchï
->
¶abs_fuŒ
)));

470 
	`as£π
(
	`li°_em±y
(&(
ˇchï
->
¶abs_nŸfuŒ
)));

472 
	}
}

475 
	$check_¶ab
() {

476 
i
;

477 *
v0
, *
v1
;

479 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

480 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

483 
	`check_¶ab_em±y
();

484 
	`as£π
(
	`¶ab_Æloˇãd
() == 0);

486 
kmem_ˇche_t
 *
ˇchï0
, *
ˇchï1
;

488 
ˇchï0
 = 
¶ab_ˇche
;

489 
	`as£π
(
ˇchï0
->
objsize
 =32 && cachï0->
num
 > 1 && !ˇchï0->
off_¶ab
);

490 
	`as£π
((
v0
 = 
	`kmÆloc
(16)Ë!
NULL
);

492 
¶ab_t
 *
¶abp0
, *
¶abp1
;

494 
	`as£π
(!
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

495 
¶abp0
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_nŸfuŒ
)), 
¶ab_lök
);

496 
	`as£π
(
¶abp0
->
öu£
 =1 && 
	`li°_√xt
(&(¶abp0->
¶ab_lök
)Ë=&(
ˇchï0
->
¶abs_nŸfuŒ
));

498 
Page
 *
p0
, *
p1
;

499 
size_t
 
‹dî_size
;

501 
p0
 = 
	`kva2∑ge
(
¶abp0
->
s_mem
 - sœbp0->
off£t
), 
p1
 =Ö0;

502 
‹dî_size
 = (1 << 
ˇchï0
->
∑ge_‹dî
);

503 
i
 = 0; i < 
ˇchï0
->
∑ge_‹dî
; i ++, 
p1
 = 
	`NEXT_PAGE
(p1)) {

504 
	`as£π
(
	`PageSœb
(
p1
));

505 
	`as£π
(
	`GET_PAGE_CACHE
(
p1
Ë=
ˇchï0
 && 
	`GET_PAGE_SLAB
’1Ë=
¶abp0
);

508 
	`as£π
(
v0
 =
¶abp0
->
s_mem
);

509 
	`as£π
((
v1
 = 
	`kmÆloc
(16)Ë!
NULL
 && v1 =
v0
 + 32);

511 
	`k‰ì
(
v0
);

512 
	`as£π
(
¶abp0
->
‰ì
 == 0);

513 
	`k‰ì
(
v1
);

514 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

516 
i
 = 0; i < 
ˇchï0
->
∑ge_‹dî
; i ++, 
p0
 = 
	`NEXT_PAGE
(p0)) {

517 
	`as£π
(!
	`PageSœb
(
p0
));

520 
v0
 = 
	`kmÆloc
(16);

521 
	`as£π
(!
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

522 
¶abp0
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_nŸfuŒ
)), 
¶ab_lök
);

524 
i
 = 0; i < 
ˇchï0
->
num
 - 1; i ++) {

525 
	`kmÆloc
(16);

528 
	`as£π
(
¶abp0
->
öu£
 =
ˇchï0
->
num
);

529 
	`as£π
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_fuŒ
)Ë=&(
¶abp0
->
¶ab_lök
));

530 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

532 
v1
 = 
	`kmÆloc
(16);

533 
	`as£π
(!
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

534 
¶abp1
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_nŸfuŒ
)), 
¶ab_lök
);

536 
	`k‰ì
(
v0
);

537 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_fuŒ
)));

538 
	`as£π
(
	`li°_√xt
(&(
¶abp0
->
¶ab_lök
)Ë=&(
¶abp1
->slab_link)

539 || 
	`li°_√xt
(&(
¶abp1
->
¶ab_lök
)Ë=&(
¶abp0
->slab_link));

541 
	`k‰ì
(
v1
);

542 
	`as£π
(!
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

543 
	`as£π
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_nŸfuŒ
)Ë=&(
¶abp0
->
¶ab_lök
));

544 
	`as£π
(
	`li°_√xt
(&(
¶abp0
->
¶ab_lök
)Ë=&(
ˇchï0
->
¶abs_nŸfuŒ
));

546 
v1
 = 
	`kmÆloc
(16);

547 
	`as£π
(
v1
 =
v0
);

548 
	`as£π
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_fuŒ
)Ë=&(
¶abp0
->
¶ab_lök
));

549 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

551 
i
 = 0; i < 
ˇchï0
->
num
; i ++) {

552 
	`k‰ì
(
v1
 + 
i
 * 
ˇchï0
->
objsize
);

555 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_fuŒ
)));

556 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

558 
ˇchï0
 = 
¶ab_ˇche
;

560 
boﬁ
 
has_off_¶ab
 = 0;

561 
i
 = 0; i < 
SLAB_CACHE_NUM
; i ++, 
ˇchï0
 ++) {

562 i‡(
ˇchï0
->
off_¶ab
) {

563 
has_off_¶ab
 = 1;

564 
ˇchï1
 = 
ˇchï0
->
¶ab_ˇchï
;

565 i‡(!
ˇchï1
->
off_¶ab
) {

571 i‡(!
has_off_¶ab
) {

572 
check_∑ss
;

575 
	`as£π
(
ˇchï0
->
off_¶ab
 && !
ˇchï1
->off_slab);

576 
	`as£π
(
ˇchï1
 < 
ˇchï0
);

578 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_fuŒ
)));

579 
	`as£π
(
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

581 
	`as£π
(
	`li°_em±y
(&(
ˇchï1
->
¶abs_fuŒ
)));

582 
	`as£π
(
	`li°_em±y
(&(
ˇchï1
->
¶abs_nŸfuŒ
)));

584 
v0
 = 
	`kmÆloc
(
ˇchï0
->
objsize
);

585 
p0
 = 
	`kva2∑ge
(
v0
);

586 
	`as£π
(
	`∑ge2kva
(
p0
Ë=
v0
);

588 i‡(
ˇchï0
->
num
 == 1) {

589 
	`as£π
(!
	`li°_em±y
(&(
ˇchï0
->
¶abs_fuŒ
)));

590 
¶abp0
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_fuŒ
)), 
¶ab_lök
);

593 
	`as£π
(!
	`li°_em±y
(&(
ˇchï0
->
¶abs_nŸfuŒ
)));

594 
¶abp0
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï0
->
¶abs_nŸfuŒ
)), 
¶ab_lök
);

597 
	`as£π
(
¶abp0
 !
NULL
);

599 i‡(
ˇchï1
->
num
 == 1) {

600 
	`as£π
(!
	`li°_em±y
(&(
ˇchï1
->
¶abs_fuŒ
)));

601 
¶abp1
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï1
->
¶abs_fuŒ
)), 
¶ab_lök
);

604 
	`as£π
(!
	`li°_em±y
(&(
ˇchï1
->
¶abs_nŸfuŒ
)));

605 
¶abp1
 = 
	`À2¶ab
(
	`li°_√xt
(&(
ˇchï1
->
¶abs_nŸfuŒ
)), 
¶ab_lök
);

608 
	`as£π
(
¶abp1
 !
NULL
);

610 
‹dî_size
 = (1 << 
ˇchï0
->
∑ge_‹dî
);

611 
i
 = 0; i < 
‹dî_size
; i ++, 
p0
 = 
	`NEXT_PAGE
(p0)) {

612 
	`as£π
(
	`PageSœb
(
p0
));

613 
	`as£π
(
	`GET_PAGE_CACHE
(
p0
Ë=
ˇchï0
 && 
	`GET_PAGE_SLAB
’0Ë=
¶abp0
);

616 
	`k‰ì
(
v0
);

618 
check_∑ss
:

620 
	`check_rb_åì
();

621 
	`check_¶ab_em±y
();

622 
	`as£π
(
	`¶ab_Æloˇãd
() == 0);

623 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

624 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

626 
	`k¥ötf
("check_slab() succeeded!\n");

627 
	}
}

	@kern-ucore/mm/slab.h

1 #i‚de‡
__KERN_MM_SLAB_H__


2 
	#__KERN_MM_SLAB_H__


	)

4 
	~<ty≥s.h
>

6 
	#KMALLOC_MAX_ORDER
 10

	)

8 
¶ab_öô
();

10 *
kmÆloc
(
size_t
 
n
);

11 
k‰ì
(*
objp
);

13 
size_t
 
¶ab_Æloˇãd
();

	@kern-ucore/mm/swap.c

1 
	~<pmm.h
>

2 
	~<vmm.h
>

3 
	~<sw≠.h
>

4 
	~<sw≠fs.h
>

5 
	~<¶ab.h
>

6 
	~<as£π.h
>

7 
	~<°dio.h
>

8 
	~<¨ch.h
>

9 
	~<îr‹.h
>

10 
	~<©omic.h
>

11 
	~<°rög.h
>

12 
	~<°dlib.h
>

13 
	~<shmem.h
>

14 
	~<¥oc.h
>

15 
	~<waô.h
>

16 
	~<sync.h
>

17 
	~<kio.h
>

18 
	~<mp.h
>

19 
	~<sched.h
>

79 
size_t
 
	gmax_sw≠_off£t
;

83 
li°_íåy_t
 
	msw≠_li°
;

84 
size_t
 
	mƒ_∑ges
;

85 } 
	tsw≠_li°_t
;

89 
sw≠_li°_t
 
	ga˘ive_li°
;

91 
sw≠_li°_t
 
	göa˘ive_li°
;

93 
	#ƒ_a˘ive_∑ges
 (
a˘ive_li°
.
ƒ_∑ges
)

	)

94 
	#ƒ_öa˘ive_∑ges
 (
öa˘ive_li°
.
ƒ_∑ges
)

	)

100 *
	gmem_m≠
;

102 
	#SWAP_UNUSED
 0xFFFF

	)

103 
	#MAX_SWAP_REF
 0xFFFE

	)

105 vﬁ©ûê
boﬁ
 
	gsw≠_öô_ok
 = 0;

107 
	#HASH_SHIFT
 10

	)

108 
	#HASH_LIST_SIZE
 (1 << 
HASH_SHIFT
)

	)

109 
	#íåy_hash‚
(
x
Ë(
	`hash32
(x, 
HASH_SHIFT
))

	)

112 
li°_íåy_t
 
	ghash_li°
[
HASH_LIST_SIZE
];

114 
check_sw≠
();

115 
check_mm_sw≠
();

116 
check_mm_shm_sw≠
();

118 
£m≠h‹e_t
 
	gsw≠_ö_£m
;

120 vﬁ©ûê
	g¥essuª
 = 0;

121 
waô_queue_t
 
	gksw≠d_d⁄e
;

125 
	$sw≠_li°_öô
(
sw≠_li°_t
 *
li°
) {

126 
	`li°_öô
(&(
li°
->
sw≠_li°
));

127 
li°
->
ƒ_∑ges
 = 0;

128 
	}
}

131 
ölöe
 

132 
	$sw≠_a˘ive_li°_add
(
Page
 *
∑ge
) {

133 
	`as£π
(
	`PageSw≠
(
∑ge
));

134 
	`SëPageA˘ive
(
∑ge
);

135 
sw≠_li°_t
 *
li°
 = &
a˘ive_li°
;

136 
li°
->
ƒ_∑ges
 ++;

137 
	`li°_add_bef‹e
(&(
li°
->
sw≠_li°
), &(
∑ge
->
sw≠_lök
));

138 
	}
}

141 
ölöe
 

142 
	$sw≠_öa˘ive_li°_add
(
Page
 *
∑ge
) {

143 
	`as£π
(
	`PageSw≠
(
∑ge
));

144 
	`CÀ¨PageA˘ive
(
∑ge
);

145 
sw≠_li°_t
 *
li°
 = &
öa˘ive_li°
;

146 
li°
->
ƒ_∑ges
 ++;

147 
	`li°_add_bef‹e
(&(
li°
->
sw≠_li°
), &(
∑ge
->
sw≠_lök
));

148 
	}
}

151 
ölöe
 

152 
	$sw≠_li°_dñ
(
Page
 *
∑ge
) {

153 
	`as£π
(
	`PageSw≠
(
∑ge
));

154 (
	`PageA˘ive
(
∑ge
Ë? &
a˘ive_li°
 : &
öa˘ive_li°
)->
ƒ_∑ges
 --;

155 
	`li°_dñ
(&(
∑ge
->
sw≠_lök
));

156 
	}
}

161 
	$sw≠_öô
() {

162 
	`sw≠fs_öô
();

163 
	`sw≠_li°_öô
(&
a˘ive_li°
);

164 
	`sw≠_li°_öô
(&
öa˘ive_li°
);

166 i‡(!(512 <
max_sw≠_off£t
 && max_sw≠_off£à< 
MAX_SWAP_OFFSET_LIMIT
)) {

167 
	`∑nic
("bad max_sw≠_off£à%08x.\n", 
max_sw≠_off£t
);

170 
mem_m≠
 = 
	`kmÆloc
((Ë* 
max_sw≠_off£t
);

171 
	`as£π
(
mem_m≠
 !
NULL
);

173 
size_t
 
off£t
;

174 
off£t
 = 0; off£à< 
max_sw≠_off£t
; offset ++) {

175 
mem_m≠
[
off£t
] = 
SWAP_UNUSED
;

178 
i
;

179 
i
 = 0; i < 
HASH_LIST_SIZE
; i ++) {

180 
	`li°_öô
(
hash_li°
 + 
i
);

183 
	`£m_öô
(&
sw≠_ö_£m
, 1);

185 
	`check_sw≠
();

186 
	`check_mm_sw≠
();

187 
	`check_mm_shm_sw≠
();

189 
	`waô_queue_öô
(&
ksw≠d_d⁄e
);

190 
sw≠_öô_ok
 = 1;

191 
	}
}

195 
boﬁ


196 
	$åy_‰ì_∑ges
(
size_t
 
n
) {

197 
¥oc_°ru˘
 *
cuºít
 = 
	`∂s_ªad
(current);

199 i‡(!
sw≠_öô_ok
 || 
ksw≠d
 =
NULL
) {

202 i‡(
cuºít
 =
ksw≠d
) {

203 
	`∑nic
("kswapd callÅry_free_pages!!.\n");

205 i‡(
n
 >= (1 << 7)) {

208 
¥essuª
 +
n
;

210 
waô_t
 
__waô
, *
waô
 = &__wait;

212 
boﬁ
 
öå_Êag
;

213 
	`loˇl_öå_ßve
(
öå_Êag
);

215 
	`waô_öô
(
waô
, 
cuºít
);

216 
cuºít
->
°©e
 = 
PROC_SLEEPING
;

217 
cuºít
->
waô_°©e
 = 
WT_KSWAPD
;

218 
	`waô_queue_add
(&
ksw≠d_d⁄e
, 
waô
);

219 i‡(
ksw≠d
->
waô_°©e
 =
WT_TIMER
) {

220 
	`wakeup_¥oc
(
ksw≠d
);

223 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

225 
	`scheduÀ
();

227 
	`as£π
(!
	`waô_ö_queue
(
waô
Ë&& waô->
wakeup_Êags
 =
WT_KSWAPD
);

229 
	}
}

232 
	$ksw≠d_wakeup_Æl
() {

233 
boﬁ
 
öå_Êag
;

234 
	`loˇl_öå_ßve
(
öå_Êag
);

236 
	`wakeup_queue
(&
ksw≠d_d⁄e
, 
WT_KSWAPD
, 1);

238 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

239 
	}
}

241 
sw≠_íåy_t
 
åy_Æloc_sw≠_íåy
();

245 
boﬁ


246 
	$sw≠_∑ge_add
(
Page
 *
∑ge
, 
sw≠_íåy_t
 
íåy
) {

247 
	`as£π
(!
	`PageSw≠
(
∑ge
));

248 i‡(
íåy
 == 0) {

249 i‡((
íåy
 = 
	`åy_Æloc_sw≠_íåy
()) == 0) {

252 
	`as£π
(
mem_m≠
[
	`sw≠_off£t
(
íåy
)] =
SWAP_UNUSED
);

253 
mem_m≠
[
	`sw≠_off£t
(
íåy
)] = 0;

254 
	`SëPageDúty
(
∑ge
);

256 
	`SëPageSw≠
(
∑ge
);

257 
∑ge
->
ödex
 = 
íåy
;

258 
	`li°_add
(
hash_li°
 + 
	`íåy_hash‚
(
íåy
), &(
∑ge
->
∑ge_lök
));

260 
	}
}

264 
	$sw≠_∑ge_dñ
(
Page
 *
∑ge
) {

265 
	`as£π
(
	`PageSw≠
(
∑ge
));

266 
	`CÀ¨PageSw≠
(
∑ge
);

267 
	`li°_dñ
(&(
∑ge
->
∑ge_lök
));

268 
	}
}

272 
	$sw≠_‰ì_∑ge
(
Page
 *
∑ge
) {

273 
	`as£π
(
	`PageSw≠
(
∑ge
Ë&& 
	`∑ge_ªf
(page) == 0);

274 
	`sw≠_∑ge_dñ
(
∑ge
);

275 
	`‰ì_∑ge
(
∑ge
);

276 
	}
}

279 
Page
 *

280 
	$sw≠_hash_föd
(
sw≠_íåy_t
 
íåy
) {

281 
li°_íåy_t
 *
li°
 = 
hash_li°
 + 
	`íåy_hash‚
(
íåy
), *
À
=Üist;

282 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

283 
Page
 *
∑ge
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

284 i‡(
∑ge
->
ödex
 =
íåy
) {

285  
∑ge
;

288  
NULL
;

289 
	}
}

292 
sw≠_íåy_t


293 
	$åy_Æloc_sw≠_íåy
() {

294 
size_t
 
√xt
 = 1;

295 
size_t
 
em±y
 = 0, 
zîo
 = 0, 
íd
 = 
√xt
;

297 
mem_m≠
[
√xt
]) {

298 
SWAP_UNUSED
:

299 
em±y
 = 
√xt
;

302 i‡(
zîo
 == 0) {

303 
zîo
 = 
√xt
;

307 i‡(++ 
√xt
 =
max_sw≠_off£t
) {

308 
√xt
 = 1;

310 } 
em±y
 =0 && 
√xt
 !
íd
);

312 
sw≠_íåy_t
 
íåy
 = 0;

313 i‡(
em±y
 != 0) {

314 
íåy
 = (
em±y
 << 8);

316 i‡(
zîo
 != 0) {

317 
íåy
 = (
zîo
 << 8);

318 
Page
 *
∑ge
 = 
	`sw≠_hash_föd
(
íåy
);

319 
	`as£π
(
∑ge
 !
NULL
 && 
	`PageSw≠
(page));

320 
	`sw≠_li°_dñ
(
∑ge
);

321 i‡(
	`∑ge_ªf
(
∑ge
) == 0) {

322 
	`sw≠_‰ì_∑ge
(
∑ge
);

325 
	`sw≠_∑ge_dñ
(
∑ge
);

327 
mem_m≠
[
zîo
] = 
SWAP_UNUSED
;

330 
Áûed_cou¡î
 = 0;

331 i‡(
íåy
 =0 && ((++ 
Áûed_cou¡î
) % 0x1000) == 0) {

332 
	`w¨n
("swap:Åry_alloc_swap_entry: failedÅoo manyÅimes.\n");

334  
íåy
;

335 
	}
}

340 
	$sw≠_ªmove_íåy
(
sw≠_íåy_t
 
íåy
) {

341 
size_t
 
off£t
 = 
	`sw≠_off£t
(
íåy
);

342 
	`as£π
(
mem_m≠
[
off£t
] > 0);

343 i‡(-- 
mem_m≠
[
off£t
] == 0) {

344 
Page
 *
∑ge
 = 
	`sw≠_hash_föd
(
íåy
);

345 i‡(
∑ge
 !
NULL
) {

346 i‡(
	`∑ge_ªf
(
∑ge
) != 0) {

349 
	`sw≠_li°_dñ
(
∑ge
);

350 
	`sw≠_‰ì_∑ge
(
∑ge
);

352 
mem_m≠
[
off£t
] = 
SWAP_UNUSED
;

354 
	}
}

358 
	$sw≠_∑ge_cou¡
(
Page
 *
∑ge
) {

359 i‡(!
	`PageSw≠
(
∑ge
)) {

362 
size_t
 
off£t
 = 
	`sw≠_off£t
(
∑ge
->
ödex
);

363 
	`as£π
(
mem_m≠
[
off£t
] >= 0);

364  
mem_m≠
[
off£t
];

365 
	}
}

369 
	$sw≠_du∂iˇã
(
sw≠_íåy_t
 
íåy
) {

370 
size_t
 
off£t
 = 
	`sw≠_off£t
(
íåy
);

371 
	`as£π
(
mem_m≠
[
off£t
] >0 && mem_m≠[off£t] < 
MAX_SWAP_REF
);

372 
mem_m≠
[
off£t
] ++;

373 
	}
}

378 
	$sw≠_ö_∑ge
(
sw≠_íåy_t
 
íåy
, 
Page
 **
∑gï
) {

379 i‡(
∑gï
 =
NULL
) {

380  -
E_INVAL
;

382 
size_t
 
off£t
 = 
	`sw≠_off£t
(
íåy
);

383 
	`as£π
(
mem_m≠
[
off£t
] >= 0);

385 
ªt
;

386 
Page
 *
∑ge
, *
√w∑ge
;

387 i‡((
∑ge
 = 
	`sw≠_hash_föd
(
íåy
)Ë!
NULL
) {

388 
found
;

391 
√w∑ge
 = 
	`Æloc_∑ge
();

393 
	`down
(&
sw≠_ö_£m
);

394 i‡((
∑ge
 = 
	`sw≠_hash_föd
(
íåy
)Ë!
NULL
) {

395 i‡(
√w∑ge
 !
NULL
) {

396 
	`‰ì_∑ge
(
√w∑ge
);

398 
found_u∆ock
;

400 i‡(
√w∑ge
 =
NULL
) {

401 
ªt
 = -
E_NO_MEM
;

402 
Áûed_u∆ock
;

404 
∑ge
 = 
√w∑ge
;

405 i‡(
	`sw≠fs_ªad
(
íåy
, 
∑ge
) != 0) {

406 
	`‰ì_∑ge
(
∑ge
);

407 
ªt
 = -
E_SWAP_FAULT
;

408 
Áûed_u∆ock
;

410 
	`sw≠_∑ge_add
(
∑ge
, 
íåy
);

411 
	`sw≠_a˘ive_li°_add
(
∑ge
);

413 
found_u∆ock
:

414 
	`up
(&
sw≠_ö_£m
);

415 
found
:

416 *
∑gï
 = 
∑ge
;

419 
Áûed_u∆ock
:

420 
	`up
(&
sw≠_ö_£m
);

421  
ªt
;

422 
	}
}

427 
	$sw≠_c›y_íåy
(
sw≠_íåy_t
 
íåy
, sw≠_íåy_à*
°‹e
) {

428 i‡(
°‹e
 =
NULL
) {

429  -
E_INVAL
;

432 
ªt
 = -
E_NO_MEM
;

433 
Page
 *
∑ge
, *
√w∑ge
;

434 
	`sw≠_du∂iˇã
(
íåy
);

435 i‡((
√w∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

436 
Áûed
;

438 i‡((
ªt
 = 
	`sw≠_ö_∑ge
(
íåy
, &
∑ge
)) != 0) {

439 
Áûed_‰ì_∑ge
;

441 
ªt
 = -
E_NO_MEM
;

442 i‡(!
	`sw≠_∑ge_add
(
√w∑ge
, 0)) {

443 
Áûed_‰ì_∑ge
;

445 
	`sw≠_a˘ive_li°_add
(
√w∑ge
);

446 
	`mem˝y
(
	`∑ge2kva
(
√w∑ge
),Öage2kva(
∑ge
), 
PGSIZE
);

447 *
°‹e
 = 
√w∑ge
->
ödex
;

448 
ªt
 = 0;

449 
out
:

450 
	`sw≠_ªmove_íåy
(
íåy
);

451  
ªt
;

453 
Áûed_‰ì_∑ge
:

454 
	`‰ì_∑ge
(
√w∑ge
);

455 
Áûed
:

456 
out
;

457 
	}
}

460 
boﬁ


461 
	$åy_‰ì_sw≠_íåy
(
sw≠_íåy_t
 
íåy
) {

462 
size_t
 
off£t
 = 
	`sw≠_off£t
(
íåy
);

463 i‡(
mem_m≠
[
off£t
] == 0) {

464 
mem_m≠
[
off£t
] = 
SWAP_UNUSED
;

468 
	}
}

473 
	$∑ge_œundî
() {

474 
size_t
 
maxsˇn
 = 
ƒ_öa˘ive_∑ges
, 
‰ì_cou¡
 = 0;

475 
li°_íåy_t
 *
li°
 = &(
öa˘ive_li°
.
sw≠_li°
), *
À
 = 
	`li°_√xt
(list);

476 
maxsˇn
 -- > 0 && 
À
 !
li°
) {

477 
Page
 *
∑ge
 = 
	`À2∑ge
(
À
, 
sw≠_lök
);

478 
À
 = 
	`li°_√xt
(le);

479 i‡(!(
	`PageSw≠
(
∑ge
Ë&& !
	`PageA˘ive
(page))) {

480 
	`∑nic
("inactive: wrong swapÜist.\n");

482 
	`sw≠_li°_dñ
(
∑ge
);

483 i‡(
	`∑ge_ªf
(
∑ge
) != 0) {

484 
	`sw≠_a˘ive_li°_add
(
∑ge
);

487 
sw≠_íåy_t
 
íåy
 = 
∑ge
->
ödex
;

488 i‡(!
	`åy_‰ì_sw≠_íåy
(
íåy
)) {

489 i‡(
	`PageDúty
(
∑ge
)) {

490 
	`CÀ¨PageDúty
(
∑ge
);

491 
	`sw≠_du∂iˇã
(
íåy
);

492 i‡(
	`sw≠fs_wrôe
(
íåy
, 
∑ge
) != 0) {

493 
	`SëPageDúty
(
∑ge
);

495 
mem_m≠
[
	`sw≠_off£t
(
íåy
)] --;

496 i‡(
	`∑ge_ªf
(
∑ge
) != 0) {

497 
	`sw≠_a˘ive_li°_add
(
∑ge
);

500 i‡(
	`PageDúty
(
∑ge
)) {

501 
	`sw≠_öa˘ive_li°_add
(
∑ge
);

504 
	`åy_‰ì_sw≠_íåy
(
íåy
);

507 
‰ì_cou¡
 ++;

508 
	`sw≠_‰ì_∑ge
(
∑ge
);

510  
‰ì_cou¡
;

511 
	}
}

515 
	$ªfûl_öa˘ive_sˇn
() {

516 
size_t
 
maxsˇn
 = 
ƒ_a˘ive_∑ges
;

517 
li°_íåy_t
 *
li°
 = &(
a˘ive_li°
.
sw≠_li°
), *
À
 = 
	`li°_√xt
(list);

518 
maxsˇn
 -- > 0 && 
À
 !
li°
) {

519 
Page
 *
∑ge
 = 
	`À2∑ge
(
À
, 
sw≠_lök
);

520 
À
 = 
	`li°_√xt
(le);

521 i‡(!(
	`PageSw≠
(
∑ge
Ë&& 
	`PageA˘ive
(page))) {

522 
	`∑nic
("active: wrong swapÜist.\n");

524 i‡(
	`∑ge_ªf
(
∑ge
) == 0) {

525 
	`sw≠_li°_dñ
(
∑ge
);

526 
	`sw≠_öa˘ive_li°_add
(
∑ge
);

529 
	}
}

533 
	$sw≠_out_vma
(
mm_°ru˘
 *
mm
, 
vma_°ru˘
 *
vma
, 
uöçå_t
 
addr
, 
size_t
 
ªquúe
) {

534 i‡(
ªquúe
 =0 || !(
addr
 >
vma
->
vm_°¨t
 &&ádd∏< vma->
vm_íd
)) {

537 
uöçå_t
 
íd
;

538 
size_t
 
‰ì_cou¡
 = 0;

539 
addr
 = 
	`ROUNDDOWN
◊ddr, 
PGSIZE
), 
íd
 = 
	`ROUNDUP
(
vma
->
vm_íd
, PGSIZE);

540 
addr
 < 
íd
 && 
ªquúe
 != 0) {

541 
±e_t
 *
±ï
 = 
	`gë_±e
(
mm
->
pgdú
, 
addr
, 0);

542 i‡(
±ï
 =
NULL
) {

543 i‡(
	`gë_pud
(
mm
->
pgdú
, 
addr
, 0Ë=
NULL
) {

544 
addr
 = 
	`ROUNDDOWN
◊dd∏+ 
PUSIZE
, PUSIZE);

546 i‡(
	`gë_pmd
(
mm
->
pgdú
, 
addr
, 0Ë=
NULL
) {

547 
addr
 = 
	`ROUNDDOWN
◊dd∏+ 
PMSIZE
, PMSIZE);

550 
addr
 = 
	`ROUNDDOWN
◊dd∏+ 
PTSIZE
, PTSIZE);

554 i‡(
	`±ï_¥e£¡
(
±ï
)) {

555 
Page
 *
∑ge
 = 
	`±e2∑ge
(*
±ï
);

556 
	`as£π
(!
	`PageRe£rved
(
∑ge
));

557 i‡(
	`±ï_ac˚s£d
(
±ï
)) {

558 
	`±ï_un£t_ac˚s£d
(
±ï
);

559 
	`mp_éb_övÆid©e
(
mm
->
pgdú
, 
addr
);

560 
åy_√xt_íåy
;

562 i‡(!
	`PageSw≠
(
∑ge
)) {

563 i‡(!
	`sw≠_∑ge_add
(
∑ge
, 0)) {

564 
åy_√xt_íåy
;

566 
	`sw≠_a˘ive_li°_add
(
∑ge
);

568 i‡(
	`±ï_dúty
(
±ï
)) {

569 
	`SëPageDúty
(
∑ge
);

571 
sw≠_íåy_t
 
íåy
 = 
∑ge
->
ödex
;

572 
	`sw≠_du∂iˇã
(
íåy
);

573 
	`∑ge_ªf_dec
(
∑ge
);

574 
	`±ï_c›y
(
±ï
, &
íåy
);

575 
	`mp_éb_övÆid©e
(
mm
->
pgdú
, 
addr
);

576 
mm
->
sw≠_addªss
 = 
addr
 + 
PGSIZE
;

577 
‰ì_cou¡
 ++, 
ªquúe
 --;

578 i‡((
vma
->
vm_Êags
 & 
VM_SHARE
Ë&& 
	`∑ge_ªf
(
∑ge
) == 1) {

579 
uöçå_t
 
shmem_addr
 = 
addr
 - 
vma
->
vm_°¨t
 + vma->
shmem_off
;

580 
±e_t
 *
sh_±ï
 = 
	`shmem_gë_íåy
(
vma
->
shmem
, 
shmem_addr
, 0);

581 
	`as£π
(
sh_±ï
 !
NULL
 && ! 
	`±ï_övÆid
(sh_ptep));

582 i‡(
	`±ï_¥e£¡
(
sh_±ï
)) {

583 
	`shmem_ö£π_íåy
(
vma
->
shmem
, 
shmem_addr
, 
íåy
);

587 
åy_√xt_íåy
:

588 
addr
 +
PGSIZE
;

590  
‰ì_cou¡
;

591 
	}
}

595 
	$sw≠_out_mm
(
mm_°ru˘
 *
mm
, 
size_t
 
ªquúe
) {

596 
	`as£π
(
mm
 !
NULL
);

597 i‡(
ªquúe
 =0 || 
mm
->
m≠_cou¡
 == 0) {

600 
	`as£π
(!
	`li°_em±y
(&(
mm
->
mm≠_li°
)));

602 
uöçå_t
 
addr
 = 
mm
->
sw≠_addªss
;

603 
vma_°ru˘
 *
vma
;

605 i‡((
vma
 = 
	`föd_vma
(
mm
, 
addr
)Ë=
NULL
) {

606 
addr
 = 
mm
->
sw≠_addªss
 = 0;

607 
vma
 = 
	`À2vma
(
	`li°_√xt
(&(
mm
->
mm≠_li°
)), 
li°_lök
);

609 
	`as£π
(
vma
 !
NULL
 && 
addr
 <vma->
vm_íd
);

611 i‡(
addr
 < 
vma
->
vm_°¨t
) {

612 
addr
 = 
vma
->
vm_°¨t
;

615 
i
;

616 
size_t
 
‰ì_cou¡
 = 0;

617 
i
 = 0; i <
mm
->
m≠_cou¡
; i ++) {

618 
ªt
 = 
	`sw≠_out_vma
(
mm
, 
vma
, 
addr
, 
ªquúe
);

619 
‰ì_cou¡
 +
ªt
, 
ªquúe
 -=Ñet;

620 i‡(
ªquúe
 == 0) {

623 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&(
vma
->
li°_lök
));

624 i‡(
À
 =&(
mm
->
mm≠_li°
)) {

625 
À
 = 
	`li°_√xt
(le);

627 
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

628 
addr
 = 
vma
->
vm_°¨t
;

630  
‰ì_cou¡
;

631 
	}
}

634 
	$ksw≠d_maö
(*
¨g
) {

635 
gu¨d
 = 0;

637 i‡(
¥essuª
 > 0) {

638 
√eds
 = (
¥essuª
 << 5), 
rounds
 = 16;

639 
li°_íåy_t
 *
li°
 = &
¥oc_mm_li°
;

640 
	`as£π
(!
	`li°_em±y
(
li°
));

641 
√eds
 > 0 && 
rounds
 -- > 0) {

642 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(
li°
);

643 
	`li°_dñ
(
À
);

644 
	`li°_add_bef‹e
(
li°
, 
À
);

645 
mm_°ru˘
 *
mm
 = 
	`À2mm
(
À
, 
¥oc_mm_lök
);

646 
√eds
 -
	`sw≠_out_mm
(
mm
, (needs < 32) ?Çeeds : 32);

649 
¥essuª
 -
	`∑ge_œundî
();

650 
	`ªfûl_öa˘ive_sˇn
();

651 i‡(
¥essuª
 > 0) {

652 i‡((++ 
gu¨d
) >= 1000) {

653 
gu¨d
 = 0;

654 
	`w¨n
("kswapd: may out of memory");

658 
¥essuª
 = 0, 
gu¨d
 = 0;

659 
	`ksw≠d_wakeup_Æl
();

660 
	`do_¶ìp
(1000);

662 
	}
}

666 
	$check_sw≠
() {

667 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

668 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

670 
size_t
 
off£t
;

671 
off£t
 = 2; off£à< 
max_sw≠_off£t
; offset ++) {

672 
mem_m≠
[
off£t
] = 1;

675 
mm_°ru˘
 *
mm
 = 
	`mm_¸óã
();

676 
	`as£π
(
mm
 !
NULL
);

678 
mm_°ru˘
 *
check_mm_°ru˘
;

679 
	`as£π
(
check_mm_°ru˘
 =
NULL
);

681 
check_mm_°ru˘
 = 
mm
;

683 
pgd_t
 *
pgdú
 = 
mm
->pgdú = 
	`öô_pgdú_gë
();

684 
	`as£π
(
pgdú
[
	`PGX
(
TEST_PAGE
)] == 0);

686 
vma_°ru˘
 *
vma
 = 
	`vma_¸óã
(
TEST_PAGE
, TEST_PAGE + 
PTSIZE
, 
VM_WRITE
 | 
VM_READ
);

687 
	`as£π
(
vma
 !
NULL
);

689 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

691 
Page
 *
Ω0
 = 
	`Æloc_∑ge
(), *
Ω1
 =álloc_page();

692 
	`as£π
(
Ω0
 !
NULL
 && 
Ω1
 != NULL);

694 
±e_≥rm_t
 
≥rm
;

695 
	`±ï_unm≠
 (&
≥rm
);

696 
	`±ï_£t_u_wrôe
(&
≥rm
);

697 
ªt
 = 
	`∑ge_ö£π
(
pgdú
, 
Ω1
, 
TEST_PAGE
, 
≥rm
);

698 
	`as£π
(
ªt
 =0 && 
	`∑ge_ªf
(
Ω1
) == 1);

700 
	`∑ge_ªf_öc
(
Ω1
);

701 
ªt
 = 
	`∑ge_ö£π
(
pgdú
, 
Ω0
, 
TEST_PAGE
, 
≥rm
);

702 
	`as£π
(
ªt
 =0 && 
	`∑ge_ªf
(
Ω1
Ë=1 &&Öage_ªf(
Ω0
) == 1);

706 
sw≠_íåy_t
 
íåy
 = 
	`åy_Æloc_sw≠_íåy
();

707 
	`as£π
(
	`sw≠_off£t
(
íåy
) == 1);

708 
mem_m≠
[1] = 1;

709 
	`as£π
(
	`åy_Æloc_sw≠_íåy
() == 0);

713 
	`sw≠_∑ge_add
(
Ω1
, 
íåy
);

714 
	`sw≠_a˘ive_li°_add
(
Ω1
);

715 
	`as£π
(
	`PageSw≠
(
Ω1
));

717 
mem_m≠
[1] = 0;

718 
íåy
 = 
	`åy_Æloc_sw≠_íåy
();

719 
	`as£π
(
	`sw≠_off£t
(
íåy
) == 1);

720 
	`as£π
(!
	`PageSw≠
(
Ω1
));

724 
	`as£π
(
	`sw≠_hash_föd
(
íåy
Ë=
NULL
);

725 
mem_m≠
[1] = 2;

726 
	`sw≠_ªmove_íåy
(
íåy
);

727 
	`as£π
(
mem_m≠
[1] == 1);

729 
	`sw≠_∑ge_add
(
Ω1
, 
íåy
);

730 
	`sw≠_öa˘ive_li°_add
(
Ω1
);

731 
	`sw≠_ªmove_íåy
(
íåy
);

732 
	`as£π
(
	`PageSw≠
(
Ω1
));

733 
	`as£π
(
Ω1
->
ödex
 =
íåy
 && 
mem_m≠
[1] == 0);

737 
	`as£π
(
	`∑ge_ªf
(
Ω1
) == 1);

738 
	`as£π
(
ƒ_a˘ive_∑ges
 =0 && 
ƒ_öa˘ive_∑ges
 == 1);

739 
	`as£π
(
	`li°_√xt
(&(
öa˘ive_li°
.
sw≠_li°
)Ë=&(
Ω1
->
sw≠_lök
));

741 
	`∑ge_œundî
();

742 
	`as£π
(
ƒ_a˘ive_∑ges
 =1 && 
ƒ_öa˘ive_∑ges
 == 0);

743 
	`as£π
(
	`PageSw≠
(
Ω1
Ë&& 
	`PageA˘ive
(rp1));

745 
íåy
 = 
	`åy_Æloc_sw≠_íåy
();

746 
	`as£π
(
	`sw≠_off£t
(
íåy
) == 1);

747 
	`as£π
(!
	`PageSw≠
(
Ω1
Ë&& 
ƒ_a˘ive_∑ges
 == 0);

748 
	`as£π
(
	`li°_em±y
(&(
a˘ive_li°
.
sw≠_li°
)));

752 
	`as£π
(
	`∑ge_ªf
(
Ω1
) == 1);

753 
	`sw≠_∑ge_add
(
Ω1
, 0);

754 
	`as£π
(
	`PageSw≠
(
Ω1
Ë&& 
	`sw≠_off£t
‘p1->
ödex
) == 1);

755 
	`sw≠_öa˘ive_li°_add
(
Ω1
);

756 
mem_m≠
[1] = 1;

757 
	`as£π
(
ƒ_öa˘ive_∑ges
 == 1);

758 
	`∑ge_ªf_dec
(
Ω1
);

760 
size_t
 
cou¡
 = 
	`ƒ_u£d_∑ges
();

761 
	`sw≠_ªmove_íåy
(
íåy
);

762 
	`as£π
(
ƒ_öa˘ive_∑ges
 =0 && 
	`ƒ_u£d_∑ges
(Ë=
cou¡
 - 1);

766 
±e_t
 *
±ï0
 = 
	`gë_±e
(
pgdú
, 
TEST_PAGE
, 0), *
±ï1
;

767 
	`as£π
(
±ï0
 !
NULL
 && 
	`±e2∑ge
(*±ï0Ë=
Ω0
);

769 
ªt
 = 
	`sw≠_out_mm
(
mm
, 0);

770 
	`as£π
(
ªt
 == 0);

772 
ªt
 = 
	`sw≠_out_mm
(
mm
, 10);

773 
	`as£π
(
ªt
 =1 && 
mm
->
sw≠_addªss
 =
TEST_PAGE
 + 
PGSIZE
);

775 
ªt
 = 
	`sw≠_out_mm
(
mm
, 10);

776 
	`as£π
(
ªt
 =0 && *
±ï0
 =
íåy
 && 
mem_m≠
[1] == 1);

777 
	`as£π
(
	`PageDúty
(
Ω0
Ë&& 
	`PageA˘ive
‘p0Ë&& 
	`∑ge_ªf
(rp0) == 0);

778 
	`as£π
(
ƒ_a˘ive_∑ges
 =1 && 
	`li°_√xt
(&(
a˘ive_li°
.
sw≠_li°
)Ë=&(
Ω0
->
sw≠_lök
));

782 
	`ªfûl_öa˘ive_sˇn
();

783 
	`as£π
(!
	`PageA˘ive
(
Ω0
Ë&& 
	`∑ge_ªf
(rp0) == 0);

784 
	`as£π
(
ƒ_öa˘ive_∑ges
 =1 && 
	`li°_√xt
(&(
öa˘ive_li°
.
sw≠_li°
)Ë=&(
Ω0
->
sw≠_lök
));

786 
	`∑ge_ªf_öc
(
Ω0
);

787 
	`∑ge_œundî
();

788 
	`as£π
(
	`PageA˘ive
(
Ω0
Ë&& 
	`∑ge_ªf
(rp0) == 1);

789 
	`as£π
(
ƒ_a˘ive_∑ges
 =1 && 
	`li°_√xt
(&(
a˘ive_li°
.
sw≠_li°
)Ë=&(
Ω0
->
sw≠_lök
));

791 
	`∑ge_ªf_dec
(
Ω0
);

792 
	`ªfûl_öa˘ive_sˇn
();

793 
	`as£π
(!
	`PageA˘ive
(
Ω0
));

797 
i
;

798 
i
 = 0; i < 
PGSIZE
; i ++) {

799 ((*)
	`∑ge2kva
(
Ω0
))[
i
] = ()i;

802 
	`∑ge_œundî
();

803 
	`as£π
(
ƒ_öa˘ive_∑ges
 =0 && 
	`li°_em±y
(&(
öa˘ive_li°
.
sw≠_li°
)));

804 
	`as£π
(
mem_m≠
[1] == 1);

806 
Ω1
 = 
	`Æloc_∑ge
();

807 
	`as£π
(
Ω1
 !
NULL
);

808 
ªt
 = 
	`sw≠fs_ªad
(
íåy
, 
Ω1
);

809 
	`as£π
(
ªt
 == 0);

811 
i
 = 0; i < 
PGSIZE
; i ++) {

812 
	`as£π
(((*)
	`∑ge2kva
(
Ω1
))[
i
] == ()i);

817 *(*)(
TEST_PAGE
) = 0xEF;

819 
Ω0
 = 
	`±e2∑ge
(*
±ï0
);

820 
	`as£π
(
	`∑ge_ªf
(
Ω0
) == 1);

821 
	`as£π
(
	`PageSw≠
(
Ω0
Ë&& 
	`PageA˘ive
(rp0));

823 
íåy
 = 
	`åy_Æloc_sw≠_íåy
();

824 
	`as£π
(
	`sw≠_off£t
(
íåy
Ë=1 && 
mem_m≠
[1] =
SWAP_UNUSED
);

825 
	`as£π
(!
	`PageSw≠
(
Ω0
Ë&& 
ƒ_a˘ive_∑ges
 =0 && 
ƒ_öa˘ive_∑ges
 == 0);

829 
	`as£π
(
Ω0
 =
	`±e2∑ge
(*
±ï0
));

830 
	`as£π
(!
	`PageSw≠
(
Ω0
));

832 
ªt
 = 
	`sw≠_out_mm
(
mm
, 10);

833 
	`as£π
(
ªt
 == 0);

834 
	`as£π
(!
	`PageSw≠
(
Ω0
Ë&& 
	`±ï_¥e£¡
(
±ï0
));

838 
ªt
 = 
	`sw≠_out_mm
(
mm
, 10);

839 
	`as£π
(
ªt
 == 1);

840 
	`as£π
(*
±ï0
 =
íåy
 && 
	`∑ge_ªf
(
Ω0
Ë=0 && 
mem_m≠
[1] == 1);

842 
cou¡
 = 
	`ƒ_u£d_∑ges
();

843 
	`ªfûl_öa˘ive_sˇn
();

844 
	`∑ge_œundî
();

845 
	`as£π
(
cou¡
 - 1 =
	`ƒ_u£d_∑ges
());

847 
ªt
 = 
	`sw≠fs_ªad
(
íåy
, 
Ω1
);

848 
	`as£π
(
ªt
 =0 && *(*)(
	`∑ge2kva
(
Ω1
)) == ()0xEF);

849 
	`‰ì_∑ge
(
Ω1
);

853 
±ï1
 = 
	`gë_±e
(
pgdú
, 
TEST_PAGE
 + 
PGSIZE
, 0);

854 
	`as£π
(
±ï1
 !
NULL
 && 
	`±ï_övÆid
(ptep1));

855 
	`sw≠_du∂iˇã
(*
±ï0
);

856 
	`±ï_c›y
(
±ï1
, 
±ï0
);

857 
	`mp_éb_övÆid©e
 (
pgdú
, 
TEST_PAGE
 + 
PGSIZE
);

862 *(*)(
TEST_PAGE
 + 1) = 0x88;

863 *(*)(
TEST_PAGE
 + 
PGSIZE
) = 0x8F;

864 *(*)(
TEST_PAGE
 + 
PGSIZE
 + 1) = 0xFF;

865 
	`as£π
(
	`±e2∑ge
(*
±ï0
Ë!±e2∑ge(*
±ï1
));

866 
	`as£π
(*(*)(
TEST_PAGE
) == ()0xEF);

867 
	`as£π
(*(*)(
TEST_PAGE
 + 1) == ()0x88);

868 
	`as£π
(*(*)(
TEST_PAGE
 + 
PGSIZE
) == ()0x8F);

869 
	`as£π
(*(*)(
TEST_PAGE
 + 
PGSIZE
 + 1) == ()0xFF);

871 
Ω0
 = 
	`±e2∑ge
(*
±ï0
);

872 
Ω1
 = 
	`±e2∑ge
(*
±ï1
);

873 
	`as£π
(!
	`PageSw≠
(
Ω0
Ë&& PageSw≠(
Ω1
Ë&& 
	`PageA˘ive
(rp1));

875 
íåy
 = 
	`åy_Æloc_sw≠_íåy
();

876 
	`as£π
(!
	`PageSw≠
(
Ω0
Ë&& !PageSw≠(
Ω1
));

877 
	`as£π
(
	`sw≠_off£t
(
íåy
Ë=1 && 
mem_m≠
[1] =
SWAP_UNUSED
);

878 
	`as£π
(
	`li°_em±y
(&(
a˘ive_li°
.
sw≠_li°
)));

879 
	`as£π
(
	`li°_em±y
(&(
öa˘ive_li°
.
sw≠_li°
)));

881 
	`±ï_£t_ac˚s£d
(&
≥rm
);

882 
	`∑ge_ö£π
(
pgdú
, 
Ω0
, 
TEST_PAGE
 + 
PGSIZE
, 
≥rm
);

886 *(*)(
TEST_PAGE
Ë*(*)(TEST_PAGE + 
PGSIZE
) = 0xEE;

887 
mm
->
sw≠_addªss
 = 
TEST_PAGE
 + 
PGSIZE
 * 2;

888 
ªt
 = 
	`sw≠_out_mm
(
mm
, 2);

889 
	`as£π
(
ªt
 == 0);

890 
	`as£π
(
	`±ï_¥e£¡
(
±ï0
Ë&& ! 
	`±ï_ac˚s£d
(ptep0));

891 
	`as£π
(
	`±ï_¥e£¡
(
±ï1
Ë&& ! 
	`±ï_ac˚s£d
(ptep1));

893 
ªt
 = 
	`sw≠_out_mm
(
mm
, 2);

894 
	`as£π
(
ªt
 == 2);

895 
	`as£π
(
mem_m≠
[1] =2 && 
	`∑ge_ªf
(
Ω0
) == 0);

897 
	`ªfûl_öa˘ive_sˇn
();

898 
	`∑ge_œundî
();

899 
	`as£π
(
mem_m≠
[1] =2 && 
	`sw≠_hash_föd
(
íåy
Ë=
NULL
);

903 
	`sw≠_ªmove_íåy
(
íåy
);

904 
	`±ï_unm≠
(
±ï1
);

905 
	`as£π
(
mem_m≠
[1] == 1);

907 
sw≠_íåy_t
 
°‹e
;

908 
ªt
 = 
	`sw≠_c›y_íåy
(
íåy
, &
°‹e
);

909 
	`as£π
(
ªt
 =-
E_NO_MEM
);

910 
mem_m≠
[2] = 
SWAP_UNUSED
;

912 
ªt
 = 
	`sw≠_c›y_íåy
(
íåy
, &
°‹e
);

913 
	`as£π
(
ªt
 =0 && 
	`sw≠_off£t
(
°‹e
Ë=2 && 
mem_m≠
[2] == 0);

914 
mem_m≠
[2] = 1;

915 
	`±ï_c›y
(
±ï1
, &
°‹e
);

917 
	`as£π
(*(*)(
TEST_PAGE
 + 
PGSIZE
) == ()0xEE && *(*)(TEST_PAGE + PGSIZE + 1)== ()0x88);

919 *(*)(
TEST_PAGE
 + 
PGSIZE
) = 1, *(*)(TEST_PAGE + PGSIZE + 1) = 2;

920 
	`as£π
(*(*)
TEST_PAGE
 == ()0xEE && *(*)(TEST_PAGE + 1) == ()0x88);

922 
ªt
 = 
	`sw≠_ö_∑ge
(
íåy
, &
Ω0
);

923 
	`as£π
(
ªt
 == 0);

924 
ªt
 = 
	`sw≠_ö_∑ge
(
°‹e
, &
Ω1
);

925 
	`as£π
(
ªt
 == 0);

926 
	`as£π
(
Ω1
 !
Ω0
);

930 
	`sw≠_li°_dñ
(
Ω0
), sw≠_li°_dñ(
Ω1
);

931 
	`sw≠_∑ge_dñ
(
Ω0
), sw≠_∑ge_dñ(
Ω1
);

933 
	`as£π
(
	`∑ge_ªf
(
Ω0
Ë=1 &&Öage_ªf(
Ω1
) == 1);

934 
	`as£π
(
ƒ_a˘ive_∑ges
 =0 && 
	`li°_em±y
(&(
a˘ive_li°
.
sw≠_li°
)));

935 
	`as£π
(
ƒ_öa˘ive_∑ges
 =0 && 
	`li°_em±y
(&(
öa˘ive_li°
.
sw≠_li°
)));

937 
i
 = 0; i < 
HASH_LIST_SIZE
; i ++) {

938 
	`as£π
(
	`li°_em±y
(
hash_li°
 + 
i
));

941 
	`∑ge_ªmove
(
pgdú
, 
TEST_PAGE
);

942 
	`∑ge_ªmove
(
pgdú
, (
TEST_PAGE
 + 
PGSIZE
));

944 #i‡
PMXSHIFT
 !
PUXSHIFT


945 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PMD_ADDR
(*
	`gë_pmd
(
pgdú
, 
TEST_PAGE
, 0))));

947 #i‡
PUXSHIFT
 !
PGXSHIFT


948 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PUD_ADDR
(*
	`gë_pud
(
pgdú
, 
TEST_PAGE
, 0))));

950 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PGD_ADDR
(*
	`gë_pgd
(
pgdú
, 
TEST_PAGE
, 0))));

951 
pgdú
[
	`PGX
(
TEST_PAGE
)] = 0;

953 
mm
->
pgdú
 = 
NULL
;

954 
	`mm_de°roy
(
mm
);

955 
check_mm_°ru˘
 = 
NULL
;

957 
	`as£π
(
ƒ_a˘ive_∑ges
 =0 && 
ƒ_öa˘ive_∑ges
 == 0);

958 
off£t
 = 0; off£à< 
max_sw≠_off£t
; offset ++) {

959 
mem_m≠
[
off£t
] = 
SWAP_UNUSED
;

962 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

963 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

965 
	`k¥ötf
("check_swap() succeeded.\n");

966 
	}
}

	@kern-ucore/mm/swap.h

1 #i‚de‡
__KERN_MM_SWAP_H__


2 
	#__KERN_MM_SWAP_H__


	)

4 
	~<ty≥s.h
>

5 
	~<memœyout.h
>

15 
	#MAX_SWAP_OFFSET_LIMIT
 (1 << 24)

	)

17 
size_t
 
max_sw≠_off£t
;

23 
	#sw≠_off£t
(
íåy
) ({ \

24 
size_t
 
__off£t
 = (
íåy
 >> 8); \

25 i‡(!(
__off£t
 > 0 && __off£à< 
max_sw≠_off£t
)) { \

26 
	`∑nic
("övÆid sw≠_íåy_à%08x.\n", 
íåy
); \

28 
__off£t
; \

29 })

	)

31 
sw≠_öô
();

32 
boﬁ
 
åy_‰ì_∑ges
(
size_t
 
n
);

34 
sw≠_ªmove_íåy
(
sw≠_íåy_t
 
íåy
);

35 
sw≠_∑ge_cou¡
(
Page
 *
∑ge
);

36 
sw≠_du∂iˇã
(
sw≠_íåy_t
 
íåy
);

37 
sw≠_ö_∑ge
(
sw≠_íåy_t
 
íåy
, 
Page
 **
∑gï
);

38 
sw≠_c›y_íåy
(
sw≠_íåy_t
 
íåy
, sw≠_íåy_à*
°‹e
);

40 
	$ksw≠d_maö
(*
¨g
Ë
	`__©åibuã__
((
n‹ëu∫
));

	@kern-ucore/mm/vmm.c

1 
	~<vmm.h
>

2 
	~<sync.h
>

3 
	~<¶ab.h
>

4 
	~<°rög.h
>

5 
	~<as£π.h
>

6 
	~<°dio.h
>

7 
	~<îr‹.h
>

8 
	~<pmm.h
>

9 
	~<¨ch.h
>

10 
	~<sw≠.h
>

11 
	~<shmem.h
>

12 
	~<¥oc.h
>

13 
	~<£m.h
>

14 
	~<kio.h
>

45 
check_vmm
();

46 
check_vma_°ru˘
();

47 
check_pgÁu…
();

50 
	$lock_mm
(
mm_°ru˘
 *
mm
) {

51 i‡(
mm
 !
NULL
) {

52 
	`down
(&(
mm
->
mm_£m
));

53 
¥oc_°ru˘
 *
cuºít
 = 
	`∂s_ªad
(current);

54 i‡(
cuºít
 !
NULL
) {

55 
mm
->
locked_by
 = 
cuºít
->
pid
;

58 
	}
}

61 
	$u∆ock_mm
(
mm_°ru˘
 *
mm
) {

62 i‡(
mm
 !
NULL
) {

63 
	`up
(&(
mm
->
mm_£m
));

64 
mm
->
locked_by
 = 0;

66 
	}
}

68 
boﬁ


69 
	$åy_lock_mm
(
mm_°ru˘
 *
mm
) {

70 i‡(
mm
 !
NULL
) {

71 i‡(!
	`åy_down
(&(
mm
->
mm_£m
))) {

74 
¥oc_°ru˘
 *
cuºít
 = 
	`∂s_ªad
(current);

75 i‡(
cuºít
 !
NULL
) {

76 
mm
->
locked_by
 = 
cuºít
->
pid
;

80 
	}
}

83 
mm_°ru˘
 *

84 
	$mm_¸óã
() {

85 
mm_°ru˘
 *
mm
 = 
	`kmÆloc
((mm_struct));

86 i‡(
mm
 !
NULL
) {

87 
	`li°_öô
(&(
mm
->
mm≠_li°
));

88 
mm
->
mm≠_åì
 = 
NULL
;

89 
mm
->
mm≠_ˇche
 = 
NULL
;

90 
mm
->
pgdú
 = 
NULL
;

91 
mm
->
m≠_cou¡
 = 0;

92 
mm
->
sw≠_addªss
 = 0;

93 
	`£t_mm_cou¡
(
mm
, 0);

94 
mm
->
locked_by
 = 0;

95 
mm
->
brk_°¨t
 = mm->
brk
 = 0;

96 
	`li°_öô
(&(
mm
->
¥oc_mm_lök
));

97 
	`£m_öô
(&(
mm
->
mm_£m
), 1);

98 
mm
->
œpic
 = -1;

100  
mm
;

101 
	}
}

104 
vma_°ru˘
 *

105 
	$vma_¸óã
(
uöçå_t
 
vm_°¨t
, uöçå_à
vm_íd
, 
uöt32_t
 
vm_Êags
) {

106 
vma_°ru˘
 *
vma
 = 
	`kmÆloc
((vma_struct));

107 i‡(
vma
 !
NULL
) {

108 
vma
->
vm_°¨t
 = vm_start;

109 
vma
->
vm_íd
 = vm_end;

110 
vma
->
vm_Êags
 = vm_flags;

111 
vma
->
shmem
 = 
NULL
;

112 
vma
->
shmem_off
 = 0;

114  
vma
;

115 
	}
}

119 
	$vma_de°roy
(
vma_°ru˘
 *
vma
) {

120 i‡(
vma
->
vm_Êags
 & 
VM_SHARE
) {

121 i‡(
	`shmem_ªf_dec
(
vma
->
shmem
) == 0) {

122 
	`shmem_de°roy
(
vma
->
shmem
);

125 
	`k‰ì
(
vma
);

126 
	}
}

129 
ölöe
 
vma_°ru˘
 *

130 
	$föd_vma_rb
(
rb_åì
 *
åì
, 
uöçå_t
 
addr
) {

131 
rb_node
 *
node
 = 
	`rb_node_roŸ
(
åì
);

132 
vma_°ru˘
 *
vma
 = 
NULL
, *
tmp
;

133 
node
 !
NULL
) {

134 
tmp
 = 
	`rbn2vma
(
node
, 
rb_lök
);

135 i‡(
tmp
->
vm_íd
 > 
addr
) {

136 
vma
 = 
tmp
;

137 i‡(
tmp
->
vm_°¨t
 <
addr
) {

140 
node
 = 
	`rb_node_À·
(
åì
,Çode);

143 
node
 = 
	`rb_node_right
(
åì
,Çode);

146  
vma
;

147 
	}
}

150 
vma_°ru˘
 *

151 
	$föd_vma
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
) {

152 
vma_°ru˘
 *
vma
 = 
NULL
;

153 i‡(
mm
 !
NULL
) {

154 
vma
 = 
mm
->
mm≠_ˇche
;

155 i‡(!(
vma
 !
NULL
 && vma->
vm_°¨t
 <
addr
 && vma->
vm_íd
 >áddr)) {

156 i‡(
mm
->
mm≠_åì
 !
NULL
) {

157 
vma
 = 
	`föd_vma_rb
(
mm
->
mm≠_åì
, 
addr
);

160 
boﬁ
 
found
 = 0;

161 
li°_íåy_t
 *
li°
 = &(
mm
->
mm≠_li°
), *
À
 =Üist;

162 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

163 
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

164 i‡(
addr
 < 
vma
->
vm_íd
) {

165 
found
 = 1;

169 i‡(!
found
) {

170 
vma
 = 
NULL
;

174 i‡(
vma
 !
NULL
) {

175 
mm
->
mm≠_ˇche
 = 
vma
;

178  
vma
;

179 
	}
}

181 
vma_°ru˘
 *

182 
	$föd_vma_öãr£˘i⁄
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
°¨t
, uöçå_à
íd
) {

183 
vma_°ru˘
 *
vma
 = 
	`föd_vma
(
mm
, 
°¨t
);

184 i‡(
vma
 !
NULL
 && 
íd
 <vma->
vm_°¨t
) {

185 
vma
 = 
NULL
;

187  
vma
;

188 
	}
}

191 
ölöe
 

192 
	$vma_com∑ª
(
rb_node
 *
node1
,Ñb_nodê*
node2
) {

193 
vma_°ru˘
 *
vma1
 = 
	`rbn2vma
(
node1
, 
rb_lök
);

194 
vma_°ru˘
 *
vma2
 = 
	`rbn2vma
(
node2
, 
rb_lök
);

195 
uöçå_t
 
°¨t1
 = 
vma1
->
vm_°¨t
, 
°¨t2
 = 
vma2
->vm_start;

196  (
°¨t1
 < 
°¨t2
) ? -1 : (start1 > start2) ? 1 : 0;

197 
	}
}

200 
ölöe
 

201 
	$check_vma_ovîœp
(
vma_°ru˘
 *
¥ev
, vma_°ru˘ *
√xt
) {

202 
	`as£π
(
¥ev
->
vm_°¨t
 <Öªv->
vm_íd
);

203 
	`as£π
(
¥ev
->
vm_íd
 <
√xt
->
vm_°¨t
);

204 
	`as£π
(
√xt
->
vm_°¨t
 <Çext->
vm_íd
);

205 
	}
}

208 
ölöe
 

209 
	$ö£π_vma_rb
(
rb_åì
 *
åì
, 
vma_°ru˘
 *
vma
, vma_°ru˘ **
vma_¥evp
) {

210 
rb_node
 *
node
 = &(
vma
->
rb_lök
), *
¥ev
;

211 
	`rb_ö£π
(
åì
, 
node
);

212 i‡(
vma_¥evp
 !
NULL
) {

213 
¥ev
 = 
	`rb_node_¥ev
(
åì
, 
node
);

214 *
vma_¥evp
 = (
¥ev
 !
NULL
Ë? 
	`rbn2vma
’ªv, 
rb_lök
) : NULL;

216 
	}
}

220 
	$ö£π_vma_°ru˘
(
mm_°ru˘
 *
mm
, 
vma_°ru˘
 *
vma
) {

221 
	`as£π
(
vma
->
vm_°¨t
 < vma->
vm_íd
);

222 
li°_íåy_t
 *
li°
 = &(
mm
->
mm≠_li°
);

223 
li°_íåy_t
 *
À_¥ev
 = 
li°
, *
À_√xt
;

224 i‡(
mm
->
mm≠_åì
 !
NULL
) {

225 
vma_°ru˘
 *
mm≠_¥ev
;

226 
	`ö£π_vma_rb
(
mm
->
mm≠_åì
, 
vma
, &
mm≠_¥ev
);

227 i‡(
mm≠_¥ev
 !
NULL
) {

228 
À_¥ev
 = &(
mm≠_¥ev
->
li°_lök
);

232 
li°_íåy_t
 *
À
 = 
li°
;

233 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

234 
vma_°ru˘
 *
mm≠_¥ev
 = 
	`À2vma
(
À
, 
li°_lök
);

235 i‡(
mm≠_¥ev
->
vm_°¨t
 > 
vma
->vm_start) {

238 
À_¥ev
 = 
À
;

242 
À_√xt
 = 
	`li°_√xt
(
À_¥ev
);

245 i‡(
À_¥ev
 !
li°
) {

246 
	`check_vma_ovîœp
(
	`À2vma
(
À_¥ev
, 
li°_lök
), 
vma
);

248 i‡(
À_√xt
 !
li°
) {

249 
	`check_vma_ovîœp
(
vma
, 
	`À2vma
(
À_√xt
, 
li°_lök
));

252 
vma
->
vm_mm
 = 
mm
;

253 
	`li°_add_a·î
(
À_¥ev
, &(
vma
->
li°_lök
));

255 
mm
->
m≠_cou¡
 ++;

256 i‡(
mm
->
mm≠_åì
 =
NULL
 && mm->
m≠_cou¡
 >
RB_MIN_MAP_COUNT
) {

259 
mm
->
mm≠_åì
 = 
	`rb_åì_¸óã
(
vma_com∑ª
);

261 i‡(
mm
->
mm≠_åì
 !
NULL
) {

262 
li°_íåy_t
 *
li°
 = &(
mm
->
mm≠_li°
), *
À
 =Üist;

263 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

264 
	`ö£π_vma_rb
(
mm
->
mm≠_åì
, 
	`À2vma
(
À
, 
li°_lök
), 
NULL
);

268 
	}
}

272 
	$ªmove_vma_°ru˘
(
mm_°ru˘
 *
mm
, 
vma_°ru˘
 *
vma
) {

273 
	`as£π
(
mm
 =
vma
->
vm_mm
);

274 i‡(
mm
->
mm≠_åì
 !
NULL
) {

275 
	`rb_dñëe
(
mm
->
mm≠_åì
, &(
vma
->
rb_lök
));

277 
	`li°_dñ
(&(
vma
->
li°_lök
));

278 i‡(
vma
 =
mm
->
mm≠_ˇche
) {

279 
mm
->
mm≠_ˇche
 = 
NULL
;

281 
mm
->
m≠_cou¡
 --;

283 
	}
}

287 
	$mm_de°roy
(
mm_°ru˘
 *
mm
) {

288 
	`as£π
(
	`mm_cou¡
(
mm
) == 0);

289 i‡(
mm
->
mm≠_åì
 !
NULL
) {

290 
	`rb_åì_de°roy
(
mm
->
mm≠_åì
);

292 
li°_íåy_t
 *
li°
 = &(
mm
->
mm≠_li°
), *
À
;

293 (
À
 = 
	`li°_√xt
(
li°
)) !=Üist) {

294 
	`li°_dñ
(
À
);

295 
	`vma_de°roy
(
	`À2vma
(
À
, 
li°_lök
));

297 
	`k‰ì
(
mm
);

298 
	}
}

303 
	$vmm_öô
() {

304 
	`check_vmm
();

305 
	}
}

308 
	$mm_m≠
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
size_t
 
Àn
, 
uöt32_t
 
vm_Êags
,

309 
vma_°ru˘
 **
vma_°‹e
) {

310 
uöçå_t
 
°¨t
 = 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), 
íd
 = 
	`ROUNDUP
◊dd∏+ 
Àn
, PGSIZE);

311 i‡(!
	`USER_ACCESS
(
°¨t
, 
íd
)) {

312  -
E_INVAL
;

315 
	`as£π
(
mm
 !
NULL
);

317 
ªt
 = -
E_INVAL
;

319 
vma_°ru˘
 *
vma
;

320 i‡((
vma
 = 
	`föd_vma
(
mm
, 
°¨t
)Ë!
NULL
 && 
íd
 > vma->
vm_°¨t
) {

321 
out
;

323 
ªt
 = -
E_NO_MEM
;

324 
vm_Êags
 &~
VM_SHARE
;

325 i‡((
vma
 = 
	`vma_¸óã
(
°¨t
, 
íd
, 
vm_Êags
)Ë=
NULL
) {

326 
out
;

328 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

329 i‡(
vma_°‹e
 !
NULL
) {

330 *
vma_°‹e
 = 
vma
;

332 
ªt
 = 0;

334 
out
:

335  
ªt
;

336 
	}
}

339 
	$mm_m≠_shmem
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
uöt32_t
 
vm_Êags
,

340 
shmem_°ru˘
 *
shmem
, 
vma_°ru˘
 **
vma_°‹e
) {

341 i‡((
addr
 % 
PGSIZE
Ë!0 || 
shmem
 =
NULL
) {

342  -
E_INVAL
;

344 
ªt
;

345 
vma_°ru˘
 *
vma
;

346 
	`shmem_ªf_öc
(
shmem
);

347 i‡((
ªt
 = 
	`mm_m≠
(
mm
, 
addr
, 
shmem
->
Àn
, 
vm_Êags
, &
vma
)) != 0) {

348 
	`shmem_ªf_dec
(
shmem
);

349  
ªt
;

351 
vma
->
shmem
 = shmem;

352 
vma
->
shmem_off
 = 0;

353 
vma
->
vm_Êags
 |
VM_SHARE
;

354 i‡(
vma_°‹e
 !
NULL
) {

355 *
vma_°‹e
 = 
vma
;

358 
	}
}

361 
	$vma_ªsize
(
vma_°ru˘
 *
vma
, 
uöçå_t
 
°¨t
, uöçå_à
íd
) {

362 
	`as£π
(
°¨t
 % 
PGSIZE
 =0 && 
íd
 % PGSIZE == 0);

363 
	`as£π
(
vma
->
vm_°¨t
 <
°¨t
 && sèπ < 
íd
 &&Énd <vma->
vm_íd
);

364 i‡(
vma
->
vm_Êags
 & 
VM_SHARE
) {

365 
vma
->
shmem_off
 +
°¨t
 - vma->
vm_°¨t
;

367 
vma
->
vm_°¨t
 = 
°¨t
, vma->
vm_íd
 = 
íd
;

368 
	}
}

371 
	$mm_unm≠
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
size_t
 
Àn
) {

372 
uöçå_t
 
°¨t
 = 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), 
íd
 = 
	`ROUNDUP
◊dd∏+ 
Àn
, PGSIZE);

373 i‡(!
	`USER_ACCESS
(
°¨t
, 
íd
)) {

374  -
E_INVAL
;

377 
	`as£π
(
mm
 !
NULL
);

379 
vma_°ru˘
 *
vma
;

380 i‡((
vma
 = 
	`föd_vma
(
mm
, 
°¨t
)Ë=
NULL
 || 
íd
 <vma->
vm_°¨t
) {

384 i‡(
vma
->
vm_°¨t
 < 
°¨t
 && 
íd
 < vma->
vm_íd
) {

385 
vma_°ru˘
 *
nvma
;

386 i‡((
nvma
 = 
	`vma_¸óã
(
vma
->
vm_°¨t
, 
°¨t
, vma->
vm_Êags
)Ë=
NULL
) {

387  -
E_NO_MEM
;

389 
	`vma_ªsize
(
vma
, 
íd
, vma->
vm_íd
);

390 
	`ö£π_vma_°ru˘
(
mm
, 
nvma
);

391 
	`unm≠_ønge
(
mm
->
pgdú
, 
°¨t
, 
íd
);

395 
li°_íåy_t
 
‰ì_li°
, *
À
;

396 
	`li°_öô
(&
‰ì_li°
);

397 
vma
->
vm_°¨t
 < 
íd
) {

398 
À
 = 
	`li°_√xt
(&(
vma
->
li°_lök
));

399 
	`ªmove_vma_°ru˘
(
mm
, 
vma
);

400 
	`li°_add
(&
‰ì_li°
, &(
vma
->
li°_lök
));

401 i‡(
À
 =&(
mm
->
mm≠_li°
)) {

404 
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

407 
À
 = 
	`li°_√xt
(&
‰ì_li°
);

408 
À
 !&
‰ì_li°
) {

409 
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

410 
À
 = 
	`li°_√xt
(le);

411 
uöçå_t
 
un_°¨t
, 
un_íd
;

412 i‡(
vma
->
vm_°¨t
 < 
°¨t
) {

413 
un_°¨t
 = 
°¨t
, 
un_íd
 = 
vma
->
vm_íd
;

414 
	`vma_ªsize
(
vma
, vma->
vm_°¨t
, 
un_°¨t
);

415 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

418 
un_°¨t
 = 
vma
->
vm_°¨t
, 
un_íd
 = vma->
vm_íd
;

419 i‡(
íd
 < 
un_íd
) {

420 
un_íd
 = 
íd
;

421 
	`vma_ªsize
(
vma
, 
un_íd
, vma->
vm_íd
);

422 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

425 
	`vma_de°roy
(
vma
);

428 
	`unm≠_ønge
(
mm
->
pgdú
, 
un_°¨t
, 
un_íd
);

431 
	}
}

434 
	$dup_mm≠
(
mm_°ru˘
 *
to
, mm_°ru˘ *
‰om
) {

435 
	`as£π
(
to
 !
NULL
 && 
‰om
 != NULL);

436 
li°_íåy_t
 *
li°
 = &(
‰om
->
mm≠_li°
), *
À
 =Üist;

437 (
À
 = 
	`li°_¥ev
÷e)Ë!
li°
) {

438 
vma_°ru˘
 *
vma
, *
nvma
;

439 
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

440 
nvma
 = 
	`vma_¸óã
(
vma
->
vm_°¨t
, vma->
vm_íd
, vma->
vm_Êags
);

441 i‡(
nvma
 =
NULL
) {

442  -
E_NO_MEM
;

445 i‡(
vma
->
vm_Êags
 & 
VM_SHARE
) {

446 
nvma
->
shmem
 = 
vma
->shmem;

447 
nvma
->
shmem_off
 = 
vma
->shmem_off;

448 
	`shmem_ªf_öc
(
vma
->
shmem
);

451 
	`ö£π_vma_°ru˘
(
to
, 
nvma
);

452 
boﬁ
 
sh¨e
 = (
vma
->
vm_Êags
 & 
VM_SHARE
);

453 i‡(
	`c›y_ønge
(
to
->
pgdú
, 
‰om
->pgdú, 
vma
->
vm_°¨t
, vma->
vm_íd
, 
sh¨e
) != 0) {

454  -
E_NO_MEM
;

458 
	}
}

461 
	$exô_mm≠
(
mm_°ru˘
 *
mm
) {

462 
	`as£π
(
mm
 !
NULL
 && 
	`mm_cou¡
(mm) == 0);

463 
pgd_t
 *
pgdú
 = 
mm
->pgdir;

464 
li°_íåy_t
 *
li°
 = &(
mm
->
mm≠_li°
), *
À
 =Üist;

465 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

466 
vma_°ru˘
 *
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

467 
	`unm≠_ønge
(
pgdú
, 
vma
->
vm_°¨t
, vma->
vm_íd
);

469 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

470 
vma_°ru˘
 *
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

471 
	`exô_ønge
(
pgdú
, 
vma
->
vm_°¨t
, vma->
vm_íd
);

473 
	}
}

475 
uöçå_t


476 
	$gë_unm≠≥d_¨ó
(
mm_°ru˘
 *
mm
, 
size_t
 
Àn
) {

477 i‡(
Àn
 =0 ||Üí > 
USERTOP
) {

480 
uöçå_t
 
°¨t
 = 
USERTOP
 - 
Àn
;

481 
li°_íåy_t
 *
li°
 = &(
mm
->
mm≠_li°
), *
À
 =Üist;

482 (
À
 = 
	`li°_¥ev
÷e)Ë!
li°
) {

483 
vma_°ru˘
 *
vma
 = 
	`À2vma
(
À
, 
li°_lök
);

484 i‡(
°¨t
 >
vma
->
vm_íd
) {

485  
°¨t
;

487 i‡(
°¨t
 + 
Àn
 > 
vma
->
vm_°¨t
) {

488 i‡(
Àn
 >
vma
->
vm_°¨t
) {

491 
°¨t
 = 
vma
->
vm_°¨t
 - 
Àn
;

494  (
°¨t
 >
USERBASE
) ? start : 0;

495 
	}
}

498 
	$mm_brk
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
size_t
 
Àn
) {

499 
uöçå_t
 
°¨t
 = 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), 
íd
 = 
	`ROUNDUP
◊dd∏+ 
Àn
, PGSIZE);

500 i‡(!
	`USER_ACCESS
(
°¨t
, 
íd
)) {

501  -
E_INVAL
;

504 
ªt
;

505 i‡((
ªt
 = 
	`mm_unm≠
(
mm
, 
°¨t
, 
íd
 - start)) != 0) {

506  
ªt
;

508 
uöt32_t
 
vm_Êags
 = 
VM_READ
 | 
VM_WRITE
;

509 
vma_°ru˘
 *
vma
 = 
	`föd_vma
(
mm
, 
°¨t
 - 1);

510 i‡(
vma
 !
NULL
 && vma->
vm_íd
 =
°¨t
 && vma->
vm_Êags
 == vm_flags) {

511 
vma
->
vm_íd
 = 
íd
;

514 i‡((
vma
 = 
	`vma_¸óã
(
°¨t
, 
íd
, 
vm_Êags
)Ë=
NULL
) {

515  -
E_NO_MEM
;

517 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

519 
	}
}

521 
boﬁ


522 
	$u£r_mem_check
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
size_t
 
Àn
, 
boﬁ
 
wrôe
) {

523 i‡(
mm
 !
NULL
) {

524 i‡(!
	`USER_ACCESS
(
addr
,ádd∏+ 
Àn
)) {

527 
vma_°ru˘
 *
vma
;

528 
uöçå_t
 
°¨t
 = 
addr
, 
íd
 =ádd∏+ 
Àn
;

529 
°¨t
 < 
íd
) {

530 i‡((
vma
 = 
	`föd_vma
(
mm
, 
°¨t
)Ë=
NULL
 || sèπ < vma->
vm_°¨t
) {

533 i‡(!(
vma
->
vm_Êags
 & ((
wrôe
Ë? 
VM_WRITE
 : 
VM_READ
))) {

536 i‡(
wrôe
 && (
vma
->
vm_Êags
 & 
VM_STACK
)) {

537 i‡(
°¨t
 < 
vma
->
vm_°¨t
 + 
PGSIZE
) {

541 
°¨t
 = 
vma
->
vm_íd
;

545  
	`KERN_ACCESS
(
addr
,ádd∏+ 
Àn
);

546 
	}
}

550 
	$check_vmm
() {

551 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

552 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

554 
	`check_vma_°ru˘
();

555 
	`check_pgÁu…
();

557 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

558 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

560 
	`k¥ötf
("check_vmm() succeeded.\n");

561 
	}
}

564 
	$check_vma_°ru˘
() {

565 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

566 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

568 
mm_°ru˘
 *
mm
 = 
	`mm_¸óã
();

569 
	`as£π
(
mm
 !
NULL
);

571 
°ï1
 = 
RB_MIN_MAP_COUNT
 * 2, 
°ï2
 = step1 * 10;

573 
i
;

574 
i
 = 
°ï1
; i >= 0; i --) {

575 
vma_°ru˘
 *
vma
 = 
	`vma_¸óã
(
i
 * 5, i * 5 + 2, 0);

576 
	`as£π
(
vma
 !
NULL
);

577 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

580 
i
 = 
°ï1
 + 1; i <
°ï2
; i ++) {

581 
vma_°ru˘
 *
vma
 = 
	`vma_¸óã
(
i
 * 5, i * 5 + 2, 0);

582 
	`as£π
(
vma
 !
NULL
);

583 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

586 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&(
mm
->
mm≠_li°
));

588 
i
 = 0; i <
°ï2
; i ++) {

589 
	`as£π
(
À
 !&(
mm
->
mm≠_li°
));

590 
vma_°ru˘
 *
mm≠
 = 
	`À2vma
(
À
, 
li°_lök
);

591 
	`as£π
(
mm≠
->
vm_°¨t
 =
i
 * 5 && mm≠->
vm_íd
 == i * 5 + 2);

592 
À
 = 
	`li°_√xt
(le);

595 
i
 = 0; i < 5 * 
°ï2
 + 2; i ++) {

596 
vma_°ru˘
 *
vma
 = 
	`föd_vma
(
mm
, 
i
);

597 
	`as£π
(
vma
 !
NULL
);

598 
j
 = 
i
 / 5;

599 i‡(
i
 >5 * 
j
 + 2) {

600 
j
 ++;

602 
	`as£π
(
vma
->
vm_°¨t
 =
j
 * 5 && vma->
vm_íd
 == j * 5 + 2);

605 
	`mm_de°roy
(
mm
);

607 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

608 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

610 
	`k¥ötf
("check_vma_struct() succeeded!\n");

611 
	}
}

613 
mm_°ru˘
 *
	gcheck_mm_°ru˘
;

617 
	$check_pgÁu…
() {

618 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

619 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

621 
check_mm_°ru˘
 = 
	`mm_¸óã
();

622 
	`as£π
(
check_mm_°ru˘
 !
NULL
);

624 
mm_°ru˘
 *
mm
 = 
check_mm_°ru˘
;

625 
pgd_t
 *
pgdú
 = 
mm
->pgdú = 
	`öô_pgdú_gë
();

626 
	`as£π
(
pgdú
[
	`PGX
(
TEST_PAGE
)] == 0);

628 
vma_°ru˘
 *
vma
 = 
	`vma_¸óã
(
TEST_PAGE
, TEST_PAGE + 
PTSIZE
, 
VM_WRITE
);

629 
	`as£π
(
vma
 !
NULL
);

631 
	`ö£π_vma_°ru˘
(
mm
, 
vma
);

632 
uöçå_t
 
addr
 = 
TEST_PAGE
 + 0x100;

633 
	`as£π
(
	`föd_vma
(
mm
, 
addr
Ë=
vma
);

635 
i
, 
sum
 = 0;

636 
i
 = 0; i < 100; i ++) {

637 *(*)(
addr
 + 
i
) = i;

638 
sum
 +
i
;

640 
i
 = 0; i < 100; i ++) {

641 
sum
 -*(*)(
addr
 + 
i
);

643 
	`as£π
(
sum
 == 0);

645 
	`∑ge_ªmove
(
pgdú
, 
	`ROUNDDOWN
(
addr
, 
PGSIZE
));

646 #i‡
PMXSHIFT
 !
PUXSHIFT


647 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PMD_ADDR
(*
	`gë_pmd
(
pgdú
, 
addr
, 0))));

649 #i‡
PUXSHIFT
 !
PGXSHIFT


650 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PUD_ADDR
(*
	`gë_pud
(
pgdú
, 
addr
, 0))));

652 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PGD_ADDR
(*
	`gë_pgd
(
pgdú
, 
addr
, 0))));

653 
pgdú
[
	`PGX
(
TEST_PAGE
)] = 0;

655 
mm
->
pgdú
 = 
NULL
;

656 
	`mm_de°roy
(
mm
);

657 
check_mm_°ru˘
 = 
NULL
;

659 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

660 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

662 
	`k¥ötf
("check_pgfault() succeeded!\n");

663 
	}
}

666 
	$do_pgÁu…
(
mm_°ru˘
 *
mm
, 
machöe_w‹d_t
 
îr‹_code
, 
uöçå_t
 
addr
) {

667 
¥oc_°ru˘
 *
cuºít
 = 
	`∂s_ªad
(current);

669 i‡(
mm
 =
NULL
) {

670 
	`as£π
(
cuºít
 !
NULL
);

671 
	`∑nic
("page fault in kernelÅhread:Öid = %d, %d %08x.\n",

672 
cuºít
->
pid
, 
îr‹_code
, 
addr
);

675 
boﬁ
 
√ed_u∆ock
 = 1;

676 i‡(!
	`åy_lock_mm
(
mm
)) {

677 i‡(
cuºít
 !
NULL
 && 
mm
->
locked_by
 =cuºít->
pid
) {

678 
√ed_u∆ock
 = 0;

681 
	`lock_mm
(
mm
);

685 
ªt
 = -
E_INVAL
;

686 
vma_°ru˘
 *
vma
 = 
	`föd_vma
(
mm
, 
addr
);

687 i‡(
vma
 =
NULL
 || vma->
vm_°¨t
 > 
addr
) {

688 
Áûed
;

690 i‡(
vma
->
vm_Êags
 & 
VM_STACK
) {

691 i‡(
addr
 < 
vma
->
vm_°¨t
 + 
PGSIZE
) {

692 
Áûed
;

696 
îr‹_code
 & 3) {

700 i‡(!(
vma
->
vm_Êags
 & 
VM_WRITE
)) {

701 
Áûed
;

705 
Áûed
;

707 i‡(!(
vma
->
vm_Êags
 & (
VM_READ
 | 
VM_EXEC
))) {

708 
Áûed
;

712 
±e_≥rm_t
 
≥rm
;

713 
	`±ï_unm≠
 (&
≥rm
);

714 
	`±ï_£t_u_ªad
(&
≥rm
);

715 i‡(
vma
->
vm_Êags
 & 
VM_WRITE
) {

716 
	`±ï_£t_u_wrôe
(&
≥rm
);

718 
addr
 = 
	`ROUNDDOWN
◊ddr, 
PGSIZE
);

720 
ªt
 = -
E_NO_MEM
;

722 
±e_t
 *
±ï
;

723 i‡((
±ï
 = 
	`gë_±e
(
mm
->
pgdú
, 
addr
, 1)Ë=
NULL
) {

724 
Áûed
;

726 i‡(
	`±ï_övÆid
(
±ï
)) {

727 i‡(!(
vma
->
vm_Êags
 & 
VM_SHARE
)) {

728 i‡(
	`pgdú_Æloc_∑ge
(
mm
->
pgdú
, 
addr
, 
≥rm
Ë=
NULL
) {

729 
Áûed
;

733 
	`lock_shmem
(
vma
->
shmem
);

734 
uöçå_t
 
shmem_addr
 = 
addr
 - 
vma
->
vm_°¨t
 + vma->
shmem_off
;

735 
±e_t
 *
sh_±ï
 = 
	`shmem_gë_íåy
(
vma
->
shmem
, 
shmem_addr
, 1);

736 i‡(
sh_±ï
 =
NULL
 || 
	`±ï_övÆid
(sh_ptep)) {

737 
	`u∆ock_shmem
(
vma
->
shmem
);

738 
Áûed
;

740 
	`u∆ock_shmem
(
vma
->
shmem
);

741 i‡(
	`±ï_¥e£¡
(
sh_±ï
)) {

742 
	`∑ge_ö£π
(
mm
->
pgdú
, 
	`∑2∑ge
(*
sh_±ï
), 
addr
, 
≥rm
);

745 
	`sw≠_du∂iˇã
(*
±ï
);

746 
	`±ï_c›y
(
±ï
, 
sh_±ï
);

751 
Page
 *
∑ge
, *
√w∑ge
 = 
NULL
;

752 
boﬁ
 
cow
 = ((
vma
->
vm_Êags
 & (
VM_SHARE
 | 
VM_WRITE
)Ë=VM_WRITE), 
may_c›y
 = 1;

754 i‡(!(!
	`±ï_¥e£¡
(
±ï
Ë|| ((
îr‹_code
 & 2Ë&& !
	`±ï_u_wrôe
’ãpË&& 
cow
)))

757 
	`k¥ötf
("%∞%∞%d %d\n", *
±ï
, 
addr
, 
îr‹_code
, 
cow
);

758 
	`as£π
(0);

761 i‡(
cow
) {

762 
√w∑ge
 = 
	`Æloc_∑ge
();

764 i‡(
	`±ï_¥e£¡
(
±ï
)) {

765 
∑ge
 = 
	`±e2∑ge
(*
±ï
);

768 i‡((
ªt
 = 
	`sw≠_ö_∑ge
(*
±ï
, &
∑ge
)) != 0) {

769 i‡(
√w∑ge
 !
NULL
) {

770 
	`‰ì_∑ge
(
√w∑ge
);

772 
Áûed
;

774 i‡(!(
îr‹_code
 & 2Ë&& 
cow
) {

775 
	`±ï_un£t_s_wrôe
(&
≥rm
);

776 
may_c›y
 = 0;

780 i‡(
cow
 && 
may_c›y
) {

781 i‡(
	`∑ge_ªf
(
∑ge
Ë+ 
	`sw≠_∑ge_cou¡
(page) > 1) {

782 i‡(
√w∑ge
 =
NULL
) {

783 
Áûed
;

785 
	`mem˝y
(
	`∑ge2kva
(
√w∑ge
),Öage2kva(
∑ge
), 
PGSIZE
);

786 
∑ge
 = 
√w∑ge
,Çew∑gê
NULL
;

789 
	`∑ge_ö£π
(
mm
->
pgdú
, 
∑ge
, 
addr
, 
≥rm
);

790 i‡(
√w∑ge
 !
NULL
) {

791 
	`‰ì_∑ge
(
√w∑ge
);

794 
ªt
 = 0;

796 
Áûed
:

797 i‡(
√ed_u∆ock
) {

798 
	`u∆ock_mm
(
mm
);

800  
ªt
;

801 
	}
}

	@kern-ucore/mm/vmm.h

1 #i‚de‡
__KERN_MM_VMM_H__


2 
	#__KERN_MM_VMM_H__


	)

4 
	~<ty≥s.h
>

5 
	~<li°.h
>

6 
	~<memœyout.h
>

7 
	~<rb_åì.h
>

8 
	~<sync.h
>

9 
	~<shmem.h
>

10 
	~<©omic.h
>

11 
	~<£m.h
>

14 
	gmm_°ru˘
;

17 
	svma_°ru˘
 {

18 
mm_°ru˘
 *
	mvm_mm
;

19 
uöçå_t
 
	mvm_°¨t
;

20 
uöçå_t
 
	mvm_íd
;

21 
uöt32_t
 
	mvm_Êags
;

22 
rb_node
 
	mrb_lök
;

23 
li°_íåy_t
 
	mli°_lök
;

24 
shmem_°ru˘
 *
	mshmem
;

25 
size_t
 
	mshmem_off
;

28 
	#À2vma
(
À
, 
membî
) \

29 
	`to_°ru˘
((
À
), 
vma_°ru˘
, 
membî
)

	)

31 
	#rbn2vma
(
node
, 
membî
) \

32 
	`to_°ru˘
((
node
), 
vma_°ru˘
, 
membî
)

	)

34 
	#VM_READ
 0x00000001

	)

35 
	#VM_WRITE
 0x00000002

	)

36 
	#VM_EXEC
 0x00000004

	)

37 
	#VM_STACK
 0x00000008

	)

38 
	#VM_SHARE
 0x00000010

	)

40 
	smm_°ru˘
 {

41 
li°_íåy_t
 
	mmm≠_li°
;

42 
rb_åì
 *
	mmm≠_åì
;

43 
vma_°ru˘
 *
	mmm≠_ˇche
;

44 
pgd_t
 *
	mpgdú
;

45 
	mm≠_cou¡
;

46 
uöçå_t
 
	msw≠_addªss
;

47 
©omic_t
 
	mmm_cou¡
;

48 
	mlocked_by
;

49 
uöçå_t
 
	mbrk_°¨t
, 
	mbrk
;

50 
li°_íåy_t
 
	m¥oc_mm_lök
;

51 
£m≠h‹e_t
 
	mmm_£m
;

52 
	mœpic
;

55 
lock_mm
(
mm_°ru˘
 *
mm
);

56 
u∆ock_mm
(
mm_°ru˘
 *
mm
);

57 
boﬁ
 
åy_lock_mm
(
mm_°ru˘
 *
mm
);

59 
	#À2mm
(
À
, 
membî
) \

60 
	`to_°ru˘
((
À
), 
mm_°ru˘
, 
membî
)

	)

62 
	#RB_MIN_MAP_COUNT
 32

63 

	)

64 
vma_°ru˘
 *
föd_vma
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
);

65 
vma_°ru˘
 *
föd_vma_öãr£˘i⁄
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
°¨t
, uöçå_à
íd
);

66 
vma_°ru˘
 *
vma_¸óã
(
uöçå_t
 
vm_°¨t
, uöçå_à
vm_íd
, 
uöt32_t
 
vm_Êags
);

67 
ö£π_vma_°ru˘
(
mm_°ru˘
 *
mm
, 
vma_°ru˘
 *
vma
);

69 
mm_°ru˘
 *
mm_¸óã
();

70 
mm_de°roy
(
mm_°ru˘
 *
mm
);

72 
vmm_öô
();

73 
mm_m≠
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
size_t
 
Àn
, 
uöt32_t
 
vm_Êags
,

74 
vma_°ru˘
 **
vma_°‹e
);

75 
mm_m≠_shmem
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
uöt32_t
 
vm_Êags
,

76 
shmem_°ru˘
 *
shmem
, 
vma_°ru˘
 **
vma_°‹e
);

77 
mm_unm≠
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
size_t
 
Àn
);

78 
dup_mm≠
(
mm_°ru˘
 *
to
, mm_°ru˘ *
‰om
);

79 
exô_mm≠
(
mm_°ru˘
 *
mm
);

80 
uöçå_t
 
gë_unm≠≥d_¨ó
(
mm_°ru˘
 *
mm
, 
size_t
 
Àn
);

81 
mm_brk
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
addr
, 
size_t
 
Àn
);

83 
do_pgÁu…
(
mm_°ru˘
 *
mm
, 
machöe_w‹d_t
 
îr‹_code
, 
uöçå_t
 
addr
);

84 
boﬁ
 
u£r_mem_check
(
mm_°ru˘
 *
mm
, 
uöçå_t
 
°¨t
, 
size_t
 
Àn
, boﬁ 
wrôe
);

86 
boﬁ
 
c›y_‰om_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
, boﬁ 
wrôabÀ
);

87 
boﬁ
 
c›y_to_u£r
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

88 
boﬁ
 
c›y_°rög
(
mm_°ru˘
 *
mm
, *
d°
, c⁄° *
§c
, 
size_t
 
maxn
);

90 
ölöe
 

91 
	$mm_cou¡
(
mm_°ru˘
 *
mm
) {

92  
	`©omic_ªad
(&(
mm
->
mm_cou¡
));

93 
	}
}

95 
ölöe
 

96 
	$£t_mm_cou¡
(
mm_°ru˘
 *
mm
, 
vÆ
) {

97 
	`©omic_£t
(&(
mm
->
mm_cou¡
), 
vÆ
);

98 
	}
}

100 
ölöe
 

101 
	$mm_cou¡_öc
(
mm_°ru˘
 *
mm
) {

102  
	`©omic_add_ªtu∫
(&(
mm
->
mm_cou¡
), 1);

103 
	}
}

105 
ölöe
 

106 
	$mm_cou¡_dec
(
mm_°ru˘
 *
mm
) {

107  
	`©omic_sub_ªtu∫
(&(
mm
->
mm_cou¡
), 1);

108 
	}
}

	@kern-ucore/module/mod.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<kio.h
>

4 
	~<fûe.h
>

5 
	~<°©.h
>

6 
	~<¶ab.h
>

7 
	~<ñf.h
>

8 
	~<bô£¨ch.h
>

9 
	~<mmu.h
>

10 
	~<vmm.h
>

11 
	~<mod_lﬂdî.h
>

12 
	~<mod.h
>

13 
	~<mod_m™agî.h
>

14 
	~<îr‹.h
>

16 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

18 
	#EXPORT
(
«me
Ë
	`touch_exp‹t_sym
(#«me, (
uöçå_t
)&«me, 0)

	)

19 (*
	gvoidfunc
)();

21 
	gko_poﬁ
[10240];

22 
uöçå_t
 
	gko_poﬁ_poöãr
;

24 
	$ªgi°î_mod_add
(
func_add_t
 
f
) {

25 
	`mod_touch_symbﬁ
(
MOD_ADD
, (*)
f
, 0);

26 
	}
}

28 
	$uƒegi°î_mod_add
() {

29 
	`mod_dißbÀ_symbﬁ
(
MOD_ADD
);

30 
	}
}

32 
	$ªgi°î_mod_mul
(
func_mul_t
 
f
) {

33 
	`mod_touch_symbﬁ
(
MOD_MUL
, (*)
f
, 0);

34 
	}
}

36 
	$uƒegi°î_mod_mul
() {

37 
	`mod_dißbÀ_symbﬁ
(
MOD_MUL
);

38 
	}
}

40 
	$lﬂd_mod_fûe
(*
«me
, 
uöçå_t
 *
addr
, 
uöt32_t
 *
size
) {

41 
fd
 = 
	`fûe_›í
(
«me
, 
O_RDONLY
);

42 i‡(
fd
 < 0) {

43 
	`îr‹
("ˇ¬Ÿ föd kî√»obje˘ fûe: %s\n", 
«me
);

46 
°©
 
mod_°©
;

47 
	`mem£t
(&
mod_°©
, 0, (mod_stat));

48 
	`fûe_f°©
(
fd
, &
mod_°©
);

49 i‡(
mod_°©
.
°_size
 <= 0 || mod_stat.st_size > (1<<20)) {

50 
	`îr‹
("wr⁄g obj fûêsize: %d\n", 
mod_°©
.
°_size
);

53 
	`öfo
("lﬂdög kî¿moduÀ: %s, sizê%d\n", 
«me
, 
mod_°©
.
°_size
);

54 * 
buf„r
 = (*)
ko_poﬁ_poöãr
;

55 i‡(
buf„r
 =
NULL
) {

56 
	`îr‹
("notÉnough memoryÅoÜoadÅhe module\n");

59 
size_t
 
c›õd
;

60 
	`fûe_ªad
(
fd
, 
buf„r
, 
mod_°©
.
°_size
, &
c›õd
);

61 
	`öfo
("[ II ] moduÀ size: %d, memáddr: %x\n", 
c›õd
, 
buf„r
);

62 
ko_poﬁ_poöãr
 +
c›õd
;

63 *
addr
 = (
uöçå_t
)
buf„r
;

64 *
size
 = 
mod_°©
.
°_size
;

66 
	}
}

68 
	$lﬂd_moduÀ
(* 
«me
) {

69 
ñf_mod_öfo_s
 *
öfo
 = (ñf_mod_öfo_†*)
	`kmÆloc
((elf_mod_info_s));

70 
	`add_moduÀ
(
«me
, 
öfo
);

72 
ªt
 = 0;

73 
uöçå_t
 
mod_addr
;

74 
uöt32_t
 
mod_size
;

75 i‡((
ªt
 = 
	`lﬂd_mod_fûe
(
«me
, &
mod_addr
, &
mod_size
)) != 0) {

76  
ªt
;

79 
	`ñf_mod_lﬂd
(
mod_addr
, 
mod_size
, 
öfo
);

81 ((
voidfunc
)
öfo
->
lﬂd_±r
)();

82  
ªt
;

83 
	}
}

85 
	$u∆ﬂd_moduÀ
(c⁄° *
«me
) {

86 
ñf_mod_öfo_s
 *
öfo
 = 
	`gë_moduÀ
(
«me
);

87 i‡(
öfo
 =
NULL
) {

88 
	`îr‹
("moduÀ infÿnŸ found f‹ %s\n", 
«me
);

91 ((
voidfunc
)
öfo
->
u∆ﬂd_±r
)();

93  
	`dñ_moduÀ
(
«me
);

94 
	}
}

96 
	$mod_öô
() {

97 
	`k¥ötf
("[ II ] mod_init\n");

98 
ko_poﬁ_poöãr
 = (
uöçå_t
)
ko_poﬁ
;

100 
	`mod_lﬂdî_öô
();

102 
	`öfo
("[ II ]Éxporting kernel symbols\n");

104 
	`EXPORT
(
k¥ötf
);

105 
	`EXPORT
(
ªgi°î_mod_add
);

106 
	`EXPORT
(
uƒegi°î_mod_add
);

107 
	`EXPORT
(
ªgi°î_mod_mul
);

108 
	`EXPORT
(
uƒegi°î_mod_mul
);

112 
	`k¥ötf
("[ II ] mod_init done\n");

113 
	}
}

115 
	#MX_MOD_PATH_LEN
 1024

	)

116 
	gtmp_∑th
[
MX_MOD_PATH_LEN
];

118 
	$do_öô_moduÀ
(c⁄° *
«me
) {

120 i‡(
	`moduÀ_lﬂded
(
«me
)) {

121 
	`k¥ötf
("[ WW ] moduÀ %†ÆªadyÜﬂded\n", 
«me
);

124 
ªt
;

126 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

127 
	`lock_mm
(
mm
);

128 
size
 = 
	`°æí
(
«me
);

129 i‡(!
	`c›y_‰om_u£r
(
mm
, 
tmp_∑th
, 
«me
, 
size
, 1)) {

130 
	`u∆ock_mm
(
mm
);

131  -
E_INVAL
;

133 
	`u∆ock_mm
(
mm
);

134 
tmp_∑th
[
size
] = '\0';

136 
ªt
 = 
	`lﬂd_moduÀ
(
tmp_∑th
);

137  
ªt
;

138 
	}
}

140 
	$do_˛ónup_moduÀ
(c⁄° *
«me
) {

141 i‡(!
	`moduÀ_lﬂded
(
«me
)) {

142 
	`k¥ötf
("[ EE ] moduÀ %†nŸÜﬂded\n", 
«me
);

145 
ªt
;

147 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

148 
	`lock_mm
(
mm
);

149 
size
 = 
	`°æí
(
«me
);

150 i‡(!
	`c›y_‰om_u£r
(
mm
, 
tmp_∑th
, 
«me
, 
size
, 1)) {

151 
	`u∆ock_mm
(
mm
);

152  -
E_INVAL
;

154 
	`u∆ock_mm
(
mm
);

155 
tmp_∑th
[
size
] = '\0';

157 
ªt
 = 
	`u∆ﬂd_moduÀ
(
«me
);

158  
ªt
;

159 
	}
}

161 
	$do_mod_add
(
a
, 
b
) {

162 
c
 = 0;

163 
idx
 = 
	`föd_exp‹t_sym
(
MOD_ADD
, 0);

164 i‡(
idx
 < 0 || !
	`gë_sym_±r
(idx)) {

165 
	`k¥ötf
("[ EE ] moduleáddÇotÜoaded into kernel\n");

168 ((
func_add_t
)
	`gë_sym_±r
(
idx
))(
a
, 
b
, &
c
);

169  
c
;

170 
	}
}

172 
	$do_mod_mul
(
a
, 
b
) {

173 
c
 = 0;

174 
idx
 = 
	`föd_exp‹t_sym
(
MOD_MUL
, 0);

175 i‡(
idx
 < 0 || !
	`gë_sym_±r
(idx)) {

176 
	`k¥ötf
("[ EE ] module mulÇotÜoaded into kernel\n");

179 ((
func_mul_t
)
	`gë_sym_±r
(
idx
))(
a
, 
b
, &
c
);

180  
c
;

181 
	}
}

	@kern-ucore/module/mod.h

1 #i‚de‡
__KERN_MODULE_MOD_H__


2 
	#__KERN_MODULE_MOD_H__


	)

4 
	~<°dio.h
>

5 
	~<li°.h
>

7 
	#MOD_INIT_MODULE
 "öô_moduÀ"

	)

8 
	#MOD_CLEANUP_MODULE
 "˛ónup_moduÀ"

	)

10 
	#MOD_ADD
 "moduÀ_func_add"

	)

11 
	#MOD_MUL
 "moduÀ_func_mul"

	)

13 (*
	tfunc_add_t
)(
	ta
, 
	tb
, *
	tc
);

14 (*
	tfunc_mul_t
)(
	ta
, 
	tb
, *
	tc
);

16 
	smoduÀ
 {

20 
	sñf_mod_öfo_s
 {

21 
uöçå_t
 
image
;

22 
uöt32_t
 
image_size
;

24 
uöçå_t
 
±r
;

25 
uöçå_t
 
comm⁄_±r
;

26 
uöt32_t
 
comm⁄_size
;

27 
uöçå_t
 
lﬂd_±r
;

28 
uöçå_t
 
u∆ﬂd_±r
;

31 
	`mod_öô
();

32 
	`ñf_mod_lﬂd
(
uöçå_t
 
image
, 
uöt32_t
 
image_size
, 
ñf_mod_öfo_s
 * 
öfo
);

34 
	`moduÀ_func_add
(
a
, 
b
, *
c
);

35 
	`moduÀ_func_mul
(
a
, 
b
, *
c
);

37 
	`ªgi°î_mod_add
(
func_add_t
 
f
);

38 
	`uƒegi°î_mod_add
();

40 
	`ªgi°î_mod_add
(
func_mul_t
 
f
);

41 
	`uƒegi°î_mod_add
();

43 
	`do_öô_moduÀ
(c⁄° *
«me
);

44 
	`do_˛ónup_moduÀ
(c⁄° *
«me
);

46 
	`do_mod_add
(
a
, 
b
);

47 
	`do_mod_mul
(
a
, 
b
);

	@kern-ucore/module/mod_loader.c

1 
	~"mod.h
"

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<kio.h
>

5 
	~<fûe.h
>

6 
	~<°©.h
>

7 
	~<¶ab.h
>

8 
	~<ñf.h
>

9 
	~<bô£¨ch.h
>

10 
	~<mmu.h
>

11 
	~<mod_lﬂdî.h
>

13 
	#CHARS_MAX
 10240

	)

14 
uöt32_t
 
	gch¨_cou¡
;

15 
	gch¨s
[
CHARS_MAX
];

17 
	#EXPORT_SYM_COUNT_MAX
 1024

	)

18 
	#EXPORT_SYM_HASH
 197

	)

20 
uöt32_t
 
	gex_sym_cou¡
;

22 
	gex_sym_f
[
EXPORT_SYM_HASH
];

23 c⁄° *
	gex_sym_«me
[
EXPORT_SYM_COUNT_MAX
];

24 
uöçå_t
 
	gex_sym_±r
[
EXPORT_SYM_COUNT_MAX
];

25 
uöt32_t
 
	gex_sym_Êags
[
EXPORT_SYM_COUNT_MAX
];

26 
	gex_sym_n
[
EXPORT_SYM_COUNT_MAX
];

28 
uöt32_t
 
sym_hash
(c⁄° *
«me
, uöt32_à
Àn
);

29 
ñf_hód_check
(* 
ñf
);

30 
ñf_mod_∑r£
(
uöçå_t
 
ñf
, c⁄° *
«me
, 
exp‹t_symbﬁ
, uöçå_à* 
comm⁄_d©a
, 
uöt32_t
 * 
comm⁄_size
, uöçå_à* 
mod_lﬂd_±r
, uöçå_à* 
mod_u∆ﬂd_±r
);

32 
	$mod_lﬂdî_öô
() {

33 
ex_sym_cou¡
 = 0;

34 
ch¨_cou¡
 = 0;

36 
	`mem£t
(
ex_sym_f
, -1, (ex_sym_f));

37 
	}
}

39 
uöçå_t
 
	$gë_sym_±r
(
idx
) {

40 i‡(
idx
 < 0 || idx >
ex_sym_cou¡
) {

43  
ex_sym_±r
[
idx
];

44 
	}
}

46 
	$ñf_mod_lﬂd
(
uöçå_t
 
image
, 
uöt32_t
 
image_size
, 
ñf_mod_öfo_s
 * 
öfo
) {

47 
öfo
->
image
 = image;

48 
öfo
->
image_size
 = image_size;

50 i‡(
	`ñf_hód_check
((*)
image
)) {

54 i‡(
	`ñf_mod_∑r£
(
image
, "", 0, &
öfo
->
comm⁄_±r
, &öfo->
comm⁄_size
, &öfo->
lﬂd_±r
, &öfo->
u∆ﬂd_±r
)) {

59 
	}
}

61 c⁄° * 
	$gë_symbﬁ_°rög
(
uöçå_t
 
ñf
, 
uöt32_t
 
ödex
) {

62 
uöt32_t
 
i
;

63 
ñfhdr
 * 
eh
;

64 
£˘hdr
 * 
sh
;

67 
eh
 = (
ñfhdr
 *)
ñf
;

69 
i
 = 0; i < 
eh
->
e_shnum
; i++) {

70 
sh
 = (
£˘hdr
 *)(
ñf
 + 
eh
->
e_shoff
 + (
i
 *Éh->
e_shítsize
));

71 i‡(
sh
->
sh_ty≥
 =
SH_TYPE_SYMTAB
) {

73 
sh
 = (
£˘hdr
 *)(
ñf
 + 
eh
->
e_shoff
 + (sh->
sh_lök
 *Éh->
e_shítsize
));

74 i‡(
sh
->
sh_ty≥
 =
SH_TYPE_STRTAB
) {

75 i‡(
ödex
 == 0) {

78  (*)(
ñf
 + 
sh
->
sh_off£t
 + 
ödex
);

84 
	}
}

86 
uöçå_t
 
	$gë_£˘i⁄_off£t
(
uöçå_t
 
ñf
, 
uöt32_t
 
öfo
) {

87 
ñfhdr
 * 
eh
;

88 
£˘hdr
 * 
sh
;

89 
eh
 = (
ñfhdr
 *)
ñf
;

90 
sh
 = (
£˘hdr
 *)(
ñf
 + 
eh
->
e_shoff
 + (
öfo
 *Éh->
e_shítsize
));

92 
uöçå_t
 
ªsu…
;

94 i‡(
sh
->
sh_ty≥
 =
SH_TYPE_NOBITS
) {

95 
ªsu…
 = 
sh
->
sh_addr
;

97 
ªsu…
 = 
sh
->
sh_off£t
;

99  
ªsu…
;

100 
	}
}

102 
	$föd_exp‹t_sym
(c⁄° *
«me
, 
touch
) {

103 
«me_Àn
 = 
	`°æí
(
«me
);

104 
h
 = 
	`sym_hash
(
«me
, 
«me_Àn
);

105 
cur
 = 
ex_sym_f
[
h
];

107 
cur
 != -1) {

108 i‡(
	`°rcmp
(
ex_sym_«me
[
cur
], 
«me
) == 0) {

111 
cur
 = 
ex_sym_n
[cur];

115 i‡(
cur
 =-1 && 
touch
) {

116 
cur
 = 
ex_sym_cou¡
++;

117 
ex_sym_n
[
cur
] = 
ex_sym_f
[
h
];

118 
ex_sym_f
[
h
] = 
cur
;

120 * 
_«me
 = 
ch¨s
 + 
ch¨_cou¡
;

121 
	`memmove
(
_«me
, 
«me
, 
«me_Àn
);

122 
ch¨_cou¡
 +
«me_Àn
;

123 
ch¨s
[
ch¨_cou¡
++] = 0;

124 
ex_sym_«me
[
cur
] = 
_«me
;

126  
cur
;

127 
	}
}

130 
	$mod_touch_symbﬁ
(c⁄° *
«me
, * 
±r
, 
uöt32_t
 
Êags
) {

131 
idx
 = 
	`föd_exp‹t_sym
(
«me
, 1);

132 
ex_sym_±r
[
idx
] = (
uöçå_t
)
±r
;

133 
ex_sym_Êags
[
idx
] = 
Êags
;

134 
	}
}

136 
	$mod_dißbÀ_symbﬁ
(c⁄° *
«me
) {

137 
idx
 = 
	`föd_exp‹t_sym
(
«me
, 0);

138 i‡(
idx
 >= 0) {

139 
ex_sym_±r
[
idx
] = 0;

141 
	}
}

143 
	$ñf_mod_¸óã_symbﬁ
(c⁄° *
«me
, *
±r
, 
uöt32_t
 
Êags
) {

144 
idx
 = 
	`föd_exp‹t_sym
(
«me
, 1);

145 i‡(
idx
 !
ex_sym_cou¡
 - 1) {

148 
ex_sym_±r
[
idx
] = (
uöçå_t
)
±r
;

149 
ex_sym_Êags
[
idx
] = 
Êags
;

151 
	}
}

153 
	$ñf_mod_gë_symbﬁ
(c⁄° *
«me
, **
±r
, 
uöt32_t
 *
Êags
) {

154 
idx
 = 
	`föd_exp‹t_sym
(
«me
, 0);

155 i‡(
idx
 == -1) {

158 i‡(
±r
 !
NULL
) {

159 *
±r
 = (*)
ex_sym_±r
[
idx
];

161 i‡(
Êags
 !
NULL
) {

162 *
Êags
 = 
ex_sym_Êags
[
idx
];

165 
	}
}

167 
symèb_s
 * 
	$fûl_symbﬁ_°ru˘
(
uöçå_t
 
ñf
, 
uöt32_t
 
symbﬁ
) {

168 
uöt32_t
 
i
;

169 
ñfhdr
 *
eh
;

170 
£˘hdr
 * 
sh
;

171 
symèb_s
 * 
symèb
;

173 
eh
 = (
ñfhdr
 *)
ñf
;

174 
i
 = 0; i < 
eh
->
e_shnum
; i++) {

175 
sh
 = (
£˘hdr
 *)(
ñf
 + 
eh
->
e_shoff
 + (
i
 *Éh->
e_shítsize
));

176 i‡(
sh
->
sh_ty≥
 =
SH_TYPE_SYMTAB
) {

177 
symèb
 = (
symèb_s
*)(
ñf
 + 
sh
->
sh_off£t
 + (
symbﬁ
 * sh->
sh_ítsize
));

178  (
symèb_s
 *)
symèb
;

181  (
symèb_s
 *)0;

182 
	}
}

184 
	$ñf_mod_∑r£
(
uöçå_t
 
ñf
, c⁄° *
«me
, 
exp‹t_symbﬁ
,

185 
uöçå_t
 * 
comm⁄_d©a
, 
uöt32_t
 * 
comm⁄_size
,

186 
uöçå_t
 * 
mod_lﬂd_±r
, uöçå_à* 
mod_u∆ﬂd_±r
) {

187 
uöt32_t
 
i
, 
x
;

188 
uöçå_t
 
ªloc_addr
;

189 * 
mem_addr
;

191 
ñfhdr
 *
eh
;

192 
£˘hdr
 *
sh
;

193 
ªloc_a_s
 *
ªloc
;

194 
symèb_s
 *
symèb
;

196 
uöçå_t
 
cur_comm⁄_Æloc
 = 0;

197 
uöçå_t
 
cur_comm⁄_Æign
 = 1;

199 
eh
 = (
ñfhdr
 *)
ñf
;

201 
	`öfo
("shnum = %d, shsizê%d\n", 
eh
->
e_shnum
,Éh->
e_shítsize
);

204 
i
 = 0; i < 
eh
->
e_shnum
; i++) {

205 
sh
 = (
£˘hdr
*)(
ñf
 + 
eh
->
e_shoff
 + (
i
 *Éh->
e_shítsize
));

206 
	`öfo
("shÅy≥ = %d\n", 
sh
->
sh_ty≥
);

209 i‡(
sh
->
sh_ty≥
 =
SH_TYPE_SYMTAB
) {

212 
x
 = 0; x < 
sh
->
sh_size
; x +sh->
sh_ítsize
) {

213 
symèb
 = (
symèb_s
 *)(
ñf
 + 
sh
->
sh_off£t
 + 
x
);

214 
	`öfo
("found sym: [%s] info[%02x] size[%d]áddr[%08x]\n",

215 
	`gë_symbﬁ_°rög
(
ñf
, 
symèb
->
sym_«me
),

216 
symèb
->
sym_öfo
,

217 
symèb
->
sym_size
,

218 
symèb
->
sym_addªss
);

221 i‡(
symèb
->
sym_shndx
 !
SHN_UNDEF
 && symtab->sym_shndx < 0xff00) {

223 
	`öfo
(" vÆuêoff£à[%08x]\n", 
	`gë_£˘i⁄_off£t
(
ñf
, 
symèb
->
sym_shndx
Ë+ symèb->
sym_addªss
);

224 c⁄° * 
sym_«me
 = 
	`gë_symbﬁ_°rög
(
ñf
, 
symèb
->sym_name);

228 
	`GET_SYMTAB_BIND
(
symèb
->
sym_öfo
)) {

229 
STB_GLOBAL
:

230 
	`öfo
(" global symbol\n");

231 
STB_LOCAL
:

234 i‡(
	`°rcmp
(
sym_«me
, 
MOD_INIT_MODULE
) == 0) {

235 *
mod_lﬂd_±r
 = 
	`gë_£˘i⁄_off£t
(
ñf
, 
symèb
->
sym_shndx
Ë+ symèb->
sym_addªss
 +Élf;

236 } i‡(
	`°rcmp
(
sym_«me
, 
MOD_CLEANUP_MODULE
) == 0) {

237 *
mod_u∆ﬂd_±r
 = 
	`gë_£˘i⁄_off£t
(
ñf
, 
symèb
->
sym_shndx
Ë+ symèb->
sym_addªss
 +Élf;

241 i‡(
	`GET_SYMTAB_BIND
(
symèb
->
sym_öfo
Ë=1 && 
exp‹t_symbﬁ
) {

242 
	`mod_touch_symbﬁ
(
sym_«me
, (*)(
	`gë_£˘i⁄_off£t
(
ñf
, 
symèb
->
sym_shndx
Ë+ symèb->
sym_addªss
 +Élf), 0);

247 
STB_WEAK
:

248 
	`öfo
(" weak symbol\n");

249 i‡(
exp‹t_symbﬁ
) {

250 
	`ñf_mod_¸óã_symbﬁ
(
sym_«me
, (*)(
symèb
->
sym_addªss
 + 
ñf
), 0);

256 } i‡(
symèb
->
sym_shndx
 =
SHN_COMMON
) {

258 
	`îr‹
("not implemented\n");

260 
	`öfo
("shndx[%04x]\n", 
symèb
->
sym_shndx
);

265 } i‡(
sh
->
sh_ty≥
 =
SH_TYPE_NOBITS
) {

266 
	`öfo
("bs†£˘i⁄,áŒo¯%d byãálig¿0x%x\n", 
sh
->
sh_size
, sh->
sh_addølign
);

267 i‡(
	`bsf
(
sh
->
sh_addølign
 !
	`b§
(sh->sh_addralign))) {

268 
	`îr‹
(" badálign\n");

273 i‡(
sh
->
sh_addølign
 > 
cur_comm⁄_Æign
) {

274 
cur_comm⁄_Æign
 = 
sh
->
sh_addølign
;

277 
cur_comm⁄_Æloc
 = ((cur_comm⁄_Ælo¯- 1Ë| (
sh
->
sh_addølign
 - 1)) + 1;

278 
sh
->
sh_addr
 = 
cur_comm⁄_Æloc
;

279 
cur_comm⁄_Æloc
 +
sh
->
sh_size
;

283 
uöçå_t
 
comm⁄_•a˚
;

284 i‡(
cur_comm⁄_Æign
 > 
PGSIZE
) {

285 
	`îr‹
("align failed\n");

287 } i‡(
cur_comm⁄_Æloc
 > 0) {

289 
comm⁄_•a˚
 = (
uöçå_t
)
	`kmÆloc
(
cur_comm⁄_Æloc
);

290 
	`mem£t
((*)
comm⁄_•a˚
, 0, 
cur_comm⁄_Æloc
);

292 *
comm⁄_d©a
 = 
comm⁄_•a˚
;

293 *
comm⁄_size
 = 
cur_comm⁄_Æloc
;

295 *
comm⁄_d©a
 = 0;

296 *
comm⁄_size
 = 0;

300 
i
 = 0; i < 
eh
->
e_shnum
; i++) {

301 
sh
 = (
£˘hdr
 *)(
ñf
 + 
eh
->
e_shoff
 + (
i
 *Éh->
e_shítsize
));

303 i‡(
sh
->
sh_ty≥
 =
SH_TYPE_RELA
) {

304 
x
 = 0; x < 
sh
->
sh_size
; x +sh->
sh_ítsize
) {

305 
ªloc
 = (
ªloc_a_s
 *)(
ñf
 + 
sh
->
sh_off£t
 + 
x
);

306 
symèb
 = 
	`fûl_symbﬁ_°ru˘
(
ñf
, 
	`GET_RELOC_SYM
(
ªloc
->
æ_öfo
));

308 
	`öfo
("reloc[%02x] offset[%08x] for [%s], sym offset[%08x]\n",

309 
	`GET_RELOC_TYPE
(
ªloc
->
æ_öfo
),

310 
ªloc
->
æ_off£t
,

311 
	`gë_symbﬁ_°rög
(
ñf
, 
symèb
->
sym_«me
),

312 
symèb
->
sym_addªss
);

314 
mem_addr
 = (*)(
ñf
 + 
ªloc
->
æ_off£t
 + 
	`gë_£˘i⁄_off£t
”lf, 
sh
->
sh_öfo
));

317 i‡(
symèb
->
sym_shndx
 =
SHN_UNDEF
) {

318 c⁄° *
sym_«me
 = 
	`gë_symbﬁ_°rög
(
ñf
, 
symèb
->sym_name);

319 
idx
 = 
	`föd_exp‹t_sym
(
sym_«me
, 0);

320 i‡(
idx
 == -1) {

321 i‡(
	`°rcmp
(
sym_«me
, 
«me
) == 0) {

322 
ªloc_addr
 = 
ñf
;

324 
	`îr‹
("uƒesﬁved symbﬁ \"%s\", së wôh 0\n", 
sym_«me
);

325 
ªloc_addr
 = 0;

328 
	`öfo
("exã∫Æ symbﬁ %†add∏%p\n", 
sym_«me
, 
ex_sym_±r
[
idx
]);

329 
ªloc_addr
 = 
ex_sym_±r
[
idx
];

331 } i‡(
symèb
->
sym_shndx
 < 0xff00) {

332 
	`öfo
("£˘i⁄ off£à%16x,ádd∏%16x\n", 
	`gë_£˘i⁄_off£t
(
ñf
, 
symèb
->
sym_shndx
), symèb->
sym_addªss
);

333 i‡(((
£˘hdr
 *)(
ñf
 + 
eh
->
e_shoff
 + (
symèb
->
sym_shndx
 *Éh->
e_shítsize
)))->
sh_ty≥
 =
SH_TYPE_NOBITS
) {

334 
ªloc_addr
 = 
comm⁄_•a˚
;

336 
ªloc_addr
 = 
ñf
;

338 
ªloc_addr
 +
	`gë_£˘i⁄_off£t
(
ñf
, 
symèb
->
sym_shndx
);

339 
ªloc_addr
 +
symèb
->
sym_addªss
;

340 } i‡(
symèb
->
sym_shndx
 =
SHN_COMMON
) {

341 
ªloc_addr
 = 
comm⁄_•a˚
 + 
symèb
->
sym_addªss
;

343 
	`îr‹
("unhandled syn_shndx\n");

346 
	`GET_RELOC_TYPE
(
ªloc
->
æ_öfo
)) {

348 
ªloc_addr
 =Ññoc_add∏- (
uöçå_t
)
mem_addr
;

350 *(
uöt32_t
 *)
mem_addr
 = 
ªloc_addr
 + 
ªloc
->
æ_addíd
;

351 
	`öfo
("fû»ª»addªs†%08xÅÿ%08x\n", *(
uöt32_t
 *)
mem_addr
, mem_addr);

355 *(
uöt32_t
 *)
mem_addr
 = 
ªloc_addr
 + 
ªloc
->
æ_addíd
;

356 
	`öfo
("fû»ª»addªs†%08xÅÿ%08x\n", *(
uöt32_t
 *)
mem_addr
, mem_addr);

360 
	`îr‹
("unsuµ‹ãdÑñoˇti⁄Åy≥ (%x)\n", 
	`GET_RELOC_TYPE
(
ªloc
->
æ_öfo
));

365 } i‡(
sh
->
sh_ty≥
 =
SH_TYPE_REL
) {

366 
	`îr‹
("relocation SH_TYPE_RELÇot implemented\n");

371 
	}
}

373 
	$ñf_hód_check
(* 
ñf
) {

374 
	`öfo
("beginÉlf header check\n");

375 
ñfhdr
 * 
eh
 = (ñfhd∏*)
ñf
;

376 i‡(
eh
->
e_magic
 !
ELF_MAGIC
) {

377 
	`îr‹
("övÆid sig«tuª: %x\n", 
eh
->
e_magic
);

381 i‡(
eh
->
e_ñf
[0] != 0x2) {

382 
	`îr‹
("not ELFCLASS64");

386 i‡(
eh
->
e_ty≥
 != 0x01) {

387 
	`îr‹
("îr‹Åy≥: %d\n", 
eh
->
e_ty≥
);

391 i‡(
eh
->
e_machöe
 != 0x3e) {

392 
	`îr‹
("îr‹ machöêty≥: %d \n", 
eh
->
e_machöe
);

396 i‡(
eh
->
e_íåy
 != 0x0) {

397 
	`îr‹
("îr‹É¡ry code: %d\n", 
eh
->
e_íåy
);

401 
	`öfo
("elf head checkÖassed !\n");

403 
	}
}

405 
	$touch_exp‹t_sym
(c⁄° *
«me
, 
uöçå_t
 
±r
, 
uöt32_t
 
Êags
) {

406 
«me_Àn
 = 
	`°æí
(
«me
);

407 
h
 = 
	`sym_hash
(
«me
, 
«me_Àn
);

408 
cur
 = 
ex_sym_f
[
h
];

410 
cur
 != -1) {

411 i‡(
	`°rcmp
(
ex_sym_«me
[
cur
], 
«me
) == 0) {

415 
cur
 = 
ex_sym_n
[cur];

419 i‡(
cur
 == -1) {

420 
cur
 = 
ex_sym_cou¡
++;

421 
ex_sym_n
[
cur
] = 
ex_sym_f
[
h
];

422 
ex_sym_f
[
h
] = 
cur
;

424 * 
_«me
 = 
ch¨s
 + 
ch¨_cou¡
;

425 
	`memmove
(
_«me
, 
«me
, 
«me_Àn
);

426 
ch¨_cou¡
 +
«me_Àn
;

427 
ex_sym_«me
[
cur
] = 
_«me
;

428 
ch¨s
[
ch¨_cou¡
++] = 0;

431 
ex_sym_±r
[
cur
] = 
±r
;

432 
ex_sym_Êags
[
cur
] = 
Êags
;

433 
	}
}

435 
uöt32_t
 
	$sym_hash
(c⁄° *
«me
, 
uöt32_t
 
Àn
) {

436 
i
;

437 
uöt32_t
 
ªt
 = 0;

438 
i
 = 0; i !
Àn
; i++) {

439 
ªt
 = (ªà* 13 + 
«me
[
i
]Ë% 
EXPORT_SYM_HASH
;

441  
ªt
;

442 
	}
}

	@kern-ucore/module/mod_loader.h

1 #i‚de‡
__KERN_MODULE_MODLOADER_H__


2 
	#__KERN_MODULE_MODLOADER_H__


	)

4 
mod_lﬂdî_öô
();

5 
föd_exp‹t_sym
(c⁄° *
«me
, 
touch
);

6 
mod_touch_symbﬁ
(c⁄° *
«me
, * 
±r
, 
uöt32_t
 
Êags
);

7 
mod_dißbÀ_symbﬁ
(c⁄° *
«me
);

8 
touch_exp‹t_sym
(c⁄° *
«me
, 
uöçå_t
 
±r
, 
uöt32_t
 
Êags
);

9 
uöçå_t
 
gë_sym_±r
(
idx
);

11 
	#îr‹
(
x
 ...Ë
	`k¥ötf
("[ EE ] %s:%d, ", 
__FILE__
, 
__LINE__
);k¥ötf(x)

	)

14 #ifde‡
DEBUG_KERN_MODULE


15 
	#öfo
(
x
 ...Ë
	`k¥ötf
("[ II ] ");k¥ötf(x)

	)

17 
	#öfo
(
x
 ...)

	)

	@kern-ucore/module/mod_manager.c

1 
	~<°rög.h
>

2 
	~<°dio.h
>

3 
	~<¶ab.h
>

4 
	~<mod.h
>

5 
	~<kio.h
>

7 
	#uöt32_t
 

	)

8 
	#MX
 97

	)

9 
	#ouçut
(
x
...Ë
	`k¥ötf
(x)

	)

11 * 
	gèbÀ
[
MX
];

12 
ñf_mod_öfo_s
 * 
	gmoduÀs
[
MX
];

14 
uöt32_t
 
	$hash
(c⁄° * 
°r
) {

15 
uöt32_t
 
hash
 = 0;

16 *
°r
) {

17 
hash
 = (*
°r
++) + (hash << 6) + (hash << 16) - hash;

19  (
hash
 & 0x7fffffffË% 
MX
;

20 
	}
}

22 
	$hash_loˇã
(c⁄° *
°r
) {

23 
uöt32_t
 
loc
 = 
	`hash
(
°r
);

24 
uöt32_t
 
‹i
 = 
loc
;

25 
èbÀ
[
loc
] && 
	`°rcmp
—abÀ[loc], 
°r
)) {

26 
loc
++;

27 i‡(
loc
 >
MX
) {

28 
loc
 %
MX
;

30 i‡(
loc
 =
‹i
) {

34  
loc
;

35 
	}
}

40 
	$hash_föd
(c⁄° *
°r
) {

41 
uöt32_t
 
loc
 = 
	`hash
(
°r
);

42 
uöt32_t
 
‹i
 = 
loc
;

44 i‡(!
èbÀ
[
loc
]) {

47 i‡(
	`°rcmp
(
èbÀ
[
loc
], 
°r
) == 0) {

48  
loc
;

50 
loc
++;

51 i‡(
loc
 >
MX
) {

52 
loc
 %
MX
;

54 i‡(
loc
 =
‹i
) {

59 
	}
}

61 
	$hash_ö£π
(c⁄° *
«me
) {

62 
Àn
 = 
	`°æí
(
«me
);

63 
ödex
 = 
	`hash_loˇã
(
«me
);

64 i‡(
ödex
 < 0 || 
Àn
 < 0 || 
èbÀ
[index]) {

67 
èbÀ
[
ödex
] = (*)
	`kmÆloc
(
Àn
 + 1);

68 
	`mem˝y
(
èbÀ
[
ödex
], 
«me
, 
Àn
 + 1);

69  
ödex
;

70 
	}
}

72 
	$hash_ªmove
(c⁄° *
«me
) {

73 
ödex
 = 
	`hash_föd
(
«me
);

74 i‡(
ödex
 =-1 || !
èbÀ
[ödex] || 
	`°rcmp
(
«me
,Åable[index])) {

77 
èbÀ
[
ödex
] = 
NULL
;

78  
ödex
;

79 
	}
}

81 
	$add_moduÀ
(c⁄° *
«me
, 
ñf_mod_öfo_s
 * 
öfo
) {

82 
ªt
 = 
	`hash_ö£π
(
«me
);

83 i‡(
ªt
 >= 0) {

84 
moduÀs
[
ªt
] = 
öfo
;

86  
ªt
;

87 
	}
}

89 
	$dñ_moduÀ
(c⁄° *
«me
) {

90 
ªt
 = 
	`hash_ªmove
(
«me
);

91 i‡(
ªt
 >= 0) {

92 
moduÀs
[
ªt
] = 
NULL
;

94  
ªt
;

95 
	}
}

97 
ñf_mod_öfo_s
 * 
	$gë_moduÀ
(c⁄° *
«me
) {

98 
ªt
 = 
	`hash_föd
(
«me
);

99 i‡(
ªt
 >= 0) {

100  
moduÀs
[
ªt
];

102  
NULL
;

103 
	}
}

109 
	$moduÀ_lﬂded
(c⁄° *
«me
) {

110  
	`hash_föd
(
«me
) >= 0;

111 
	}
}

113 
	$¥öt_lﬂded_moduÀ
() {

114 
	`ouçut
("module size\n");

115 
i
;

116 
i
 = 0; i < 
MX
; i++) {

117 i‡(
èbÀ
[
i
]) {

118 
	`ouçut
("%† %d\n", 
èbÀ
[
i
], 
moduÀs
[i]->
image_size
);

121 
	}
}

	@kern-ucore/module/mod_manager.h

1 #i‚de‡
__KERN_MODULE_MOD_MANAGER_H__


2 
	#__KERN_MODULE_MOD_MANAGER_H__


	)

4 
	~<mod.h
>

6 
add_moduÀ
(c⁄° *
«me
, 
ñf_mod_öfo_s
 * 
öfo
);

7 
dñ_moduÀ
(c⁄° *
«me
);

8 
moduÀ_lﬂded
(c⁄° *
«me
);

9 
¥öt_lﬂded_moduÀ
();

10 
ñf_mod_öfo_s
 * 
gë_moduÀ
(c⁄° *
«me
);

	@kern-ucore/process/proc.c

1 
	~<¥oc.h
>

2 
	~<¶ab.h
>

3 
	~<°rög.h
>

4 
	~<sync.h
>

5 
	~<pmm.h
>

6 
	~<îr‹.h
>

7 
	~<sched.h
>

8 
	~<ñf.h
>

9 
	~<vmm.h
>

10 
	~<å≠.h
>

11 
	~<uni°d.h
>

12 
	~<°dio.h
>

13 
	~<sched.h
>

14 
	~<°dlib.h
>

15 
	~<as£π.h
>

16 
	~<ñf.h
>

17 
	~<fs.h
>

18 
	~<vfs.h
>

19 
	~<sysfûe.h
>

20 
	~<sw≠.h
>

21 
	~<mbox.h
>

22 
	~<kio.h
>

23 
	~<°dio.h
>

24 
	~<mp.h
>

72 
PLS
 
¥oc_°ru˘
 *
	g∂s_cuºít
;

73 
PLS
 
¥oc_°ru˘
 *
	g∂s_idÀ¥oc
;

74 
¥oc_°ru˘
 *
	göô¥oc
;

75 
¥oc_°ru˘
 *
	gksw≠d
;

77 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

78 
	#idÀ¥oc
 (
	`∂s_ªad
(
idÀ¥oc
))

	)

81 
li°_íåy_t
 
	g¥oc_li°
;

83 
li°_íåy_t
 
	g¥oc_mm_li°
;

85 
	#HASH_SHIFT
 10

	)

86 
	#HASH_LIST_SIZE
 (1 << 
HASH_SHIFT
)

	)

87 
	#pid_hash‚
(
x
Ë(
	`hash32
(x, 
HASH_SHIFT
))

	)

90 
li°_íåy_t
 
	ghash_li°
[
HASH_LIST_SIZE
];

91 
	gƒ_¥o˚ss
 = 0;

93 
__do_exô
();

94 
__do_kûl
(
¥oc_°ru˘
 *
¥oc
, 
îr‹_code
);

98 
	$£t_¥oc_«me
(
¥oc_°ru˘
 *
¥oc
, c⁄° *
«me
) {

99 
	`mem£t
(
¥oc
->
«me
, 0, (proc->name));

100  
	`mem˝y
(
¥oc
->
«me
,Çame, 
PROC_NAME_LEN
);

101 
	}
}

105 
	$gë_¥oc_«me
(
¥oc_°ru˘
 *
¥oc
) {

106 
«me
[
PROC_NAME_LEN
 + 1];

107 
	`mem£t
(
«me
, 0, (name));

108  
	`mem˝y
(
«me
, 
¥oc
->«me, 
PROC_NAME_LEN
);

109 
	}
}

113 
	$£t_löks
(
¥oc_°ru˘
 *
¥oc
) {

114 
	`li°_add
(&
¥oc_li°
, &(
¥oc
->
li°_lök
));

115 
¥oc
->
y±r
 = 
NULL
;

116 i‡((
¥oc
->
›å
 =Öroc->
∑ª¡
->
˝å
Ë!
NULL
) {

117 
¥oc
->
›å
->
y±r
 =Öroc;

119 
¥oc
->
∑ª¡
->
˝å
 =Öroc;

120 
ƒ_¥o˚ss
 ++;

121 
	}
}

125 
	$ªmove_löks
(
¥oc_°ru˘
 *
¥oc
) {

126 
	`li°_dñ
(&(
¥oc
->
li°_lök
));

127 i‡(
¥oc
->
›å
 !
NULL
) {

128 
¥oc
->
›å
->
y±r
 =Öroc->yptr;

130 i‡(
¥oc
->
y±r
 !
NULL
) {

131 
¥oc
->
y±r
->
›å
 =Öroc->optr;

134 
¥oc
->
∑ª¡
->
˝å
 =Öroc->
›å
;

136 
ƒ_¥o˚ss
 --;

137 
	}
}

141 
	$gë_pid
() {

142 
	`°©ic_as£π
(
MAX_PID
 > 
MAX_PROCESS
);

143 
¥oc_°ru˘
 *
¥oc
;

144 
li°_íåy_t
 *
li°
 = &
¥oc_li°
, *
À
;

145 
√xt_ß„
 = 
MAX_PID
, 
œ°_pid
 = MAX_PID;

146 i‡(++ 
œ°_pid
 >
MAX_PID
) {

147 
œ°_pid
 = 
	`∂s_ªad
(
l˝u_cou¡
);

148 
öside
;

150 i‡(
œ°_pid
 >
√xt_ß„
) {

151 
öside
:

152 
√xt_ß„
 = 
MAX_PID
;

153 
ª≥©
:

154 
À
 = 
li°
;

155 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

156 
¥oc
 = 
	`À2¥oc
(
À
, 
li°_lök
);

157 i‡(
¥oc
->
pid
 =
œ°_pid
) {

158 i‡(++ 
œ°_pid
 >
√xt_ß„
) {

159 i‡(
œ°_pid
 >
MAX_PID
) {

160 
œ°_pid
 = 1;

162 
√xt_ß„
 = 
MAX_PID
;

163 
ª≥©
;

166 i‡(
¥oc
->
pid
 > 
œ°_pid
 && 
√xt_ß„
 >Öroc->pid) {

167 
√xt_ß„
 = 
¥oc
->
pid
;

171  
œ°_pid
;

172 
	}
}

177 
	$¥oc_run
(
¥oc_°ru˘
 *
¥oc
) {

178 i‡(
¥oc
 !
cuºít
) {

179 
boﬁ
 
öå_Êag
;

180 
¥oc_°ru˘
 *
¥ev
 = 
cuºít
, *
√xt
 = 
¥oc
;

182 
	`loˇl_öå_ßve
(
öå_Êag
);

184 
	`∂s_wrôe
(
cuºít
, 
¥oc
);

185 
	`lﬂd_r•0
(
√xt
->
k°ack
 + 
KSTACKSIZE
);

186 
	`mp_£t_mm_∑gëabÀ
(
√xt
->
mm
);

187 
	`swôch_to
(&(
¥ev
->
c⁄ãxt
), &(
√xt
->context));

189 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

191 
	}
}

195 
	$hash_¥oc
(
¥oc_°ru˘
 *
¥oc
) {

196 
	`li°_add
(
hash_li°
 + 
	`pid_hash‚
(
¥oc
->
pid
), &’roc->
hash_lök
));

197 
	}
}

201 
	$unhash_¥oc
(
¥oc_°ru˘
 *
¥oc
) {

202 
	`li°_dñ
(&(
¥oc
->
hash_lök
));

203 
	}
}

206 
¥oc_°ru˘
 *

207 
	$föd_¥oc
(
pid
) {

208 i‡(0 < 
pid
 &&Öid < 
MAX_PID
) {

209 
li°_íåy_t
 *
li°
 = 
hash_li°
 + 
	`pid_hash‚
(
pid
), *
À
 =Üist;

210 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

211 
¥oc_°ru˘
 *
¥oc
 = 
	`À2¥oc
(
À
, 
hash_lök
);

212 i‡(
¥oc
->
pid
 ==Öid) {

213  
¥oc
;

217  
NULL
;

218 
	}
}

222 
	$£tup_k°ack
(
¥oc_°ru˘
 *
¥oc
) {

223 
Page
 *
∑ge
 = 
	`Æloc_∑ges
(
KSTACKPAGE
);

224 i‡(
∑ge
 !
NULL
) {

225 
¥oc
->
k°ack
 = (
uöçå_t
)
	`∑ge2kva
(
∑ge
);

228  -
E_NO_MEM
;

229 
	}
}

233 
	$put_k°ack
(
¥oc_°ru˘
 *
¥oc
) {

234 
	`‰ì_∑ges
(
	`kva2∑ge
((*)(
¥oc
->
k°ack
)), 
KSTACKPAGE
);

235 
	}
}

239 
	$£tup_pgdú
(
mm_°ru˘
 *
mm
) {

240 
Page
 *
∑ge
;

241 i‡((
∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

242  -
E_NO_MEM
;

244 
pgd_t
 *
pgdú
 = 
	`∑ge2kva
(
∑ge
);

245 
	`mem˝y
(
pgdú
, 
	`öô_pgdú_gë
(), 
PGSIZE
);

246 
	`m≠_pgdú
 (
pgdú
);

247 
mm
->
pgdú
 =Ögdir;

249 
	}
}

253 
	$put_pgdú
(
mm_°ru˘
 *
mm
) {

254 
	`‰ì_∑ge
(
	`kva2∑ge
(
mm
->
pgdú
));

255 
	}
}

259 
	$de_thªad
(
¥oc_°ru˘
 *
¥oc
) {

260 i‡(!
	`li°_em±y
(&(
¥oc
->
thªad_group
))) {

261 
boﬁ
 
öå_Êag
;

262 
	`loˇl_öå_ßve
(
öå_Êag
);

264 
	`li°_dñ_öô
(&(
¥oc
->
thªad_group
));

266 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

269 
	`de_thªad_¨ch_hook
 (
¥oc
);

270 
	}
}

273 
¥oc_°ru˘
 *

274 
	$√xt_thªad
(
¥oc_°ru˘
 *
¥oc
) {

275  
	`À2¥oc
(
	`li°_√xt
(&(
¥oc
->
thªad_group
)),Åhread_group);

276 
	}
}

281 
	$c›y_mm
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
) {

282 
mm_°ru˘
 *
mm
, *
ﬁdmm
 = 
cuºít
->mm;

285 i‡(
ﬁdmm
 =
NULL
) {

288 i‡(
˛⁄e_Êags
 & 
CLONE_VM
) {

289 
mm
 = 
ﬁdmm
;

290 
good_mm
;

293 
ªt
 = -
E_NO_MEM
;

294 i‡((
mm
 = 
	`mm_¸óã
()Ë=
NULL
) {

295 
bad_mm
;

297 i‡(
	`£tup_pgdú
(
mm
) != 0) {

298 
bad_pgdú_˛ónup_mm
;

301 
	`lock_mm
(
ﬁdmm
);

303 
ªt
 = 
	`dup_mm≠
(
mm
, 
ﬁdmm
);

305 
	`u∆ock_mm
(
ﬁdmm
);

307 i‡(
ªt
 != 0) {

308 
bad_dup_˛ónup_mm≠
;

311 
good_mm
:

312 i‡(
mm
 !
ﬁdmm
) {

313 
mm
->
brk_°¨t
 = 
ﬁdmm
->brk_start;

314 
mm
->
brk
 = 
ﬁdmm
->brk;

315 
boﬁ
 
öå_Êag
;

316 
	`loˇl_öå_ßve
(
öå_Êag
);

318 
	`li°_add
(&(
¥oc_mm_li°
), &(
mm
->
¥oc_mm_lök
));

320 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

322 
	`mm_cou¡_öc
(
mm
);

323 
¥oc
->
mm
 = mm;

324 
	`£t_pgdú
 (
¥oc
, 
mm
->
pgdú
);

326 
bad_dup_˛ónup_mm≠
:

327 
	`exô_mm≠
(
mm
);

328 
	`put_pgdú
(
mm
);

329 
bad_pgdú_˛ónup_mm
:

330 
	`mm_de°roy
(
mm
);

331 
bad_mm
:

332  
ªt
;

333 
	}
}

336 
	$c›y_£m
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
) {

337 
£m_queue_t
 *
£m_queue
, *
ﬁd_£m_queue
 = 
cuºít
->sem_queue;

340 i‡(
ﬁd_£m_queue
 =
NULL
) {

344 i‡(
˛⁄e_Êags
 & 
CLONE_SEM
) {

345 
£m_queue
 = 
ﬁd_£m_queue
;

346 
good_£m_queue
;

349 
ªt
 = -
E_NO_MEM
;

350 i‡((
£m_queue
 = 
	`£m_queue_¸óã
()Ë=
NULL
) {

351 
bad_£m_queue
;

354 
	`down
(&(
ﬁd_£m_queue
->
£m
));

355 
ªt
 = 
	`dup_£m_queue
(
£m_queue
, 
ﬁd_£m_queue
);

356 
	`up
(&(
ﬁd_£m_queue
->
£m
));

358 i‡(
ªt
 != 0) {

359 
bad_dup_˛ónup_£m
;

362 
good_£m_queue
:

363 
	`£m_queue_cou¡_öc
(
£m_queue
);

364 
¥oc
->
£m_queue
 = sem_queue;

367 
bad_dup_˛ónup_£m
:

368 
	`exô_£m_queue
(
£m_queue
);

369 
	`£m_queue_de°roy
(
£m_queue
);

370 
bad_£m_queue
:

371  
ªt
;

372 
	}
}

375 
	$put_£m_queue
(
¥oc_°ru˘
 *
¥oc
) {

376 
£m_queue_t
 *
£m_queue
 = 
¥oc
->sem_queue;

377 i‡(
£m_queue
 !
NULL
) {

378 i‡(
	`£m_queue_cou¡_dec
(
£m_queue
) == 0) {

379 
	`exô_£m_queue
(
£m_queue
);

380 
	`£m_queue_de°roy
(
£m_queue
);

383 
	}
}

386 
	$c›y_fs
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
) {

387 
fs_°ru˘
 *fs_°ru˘, *
ﬁd_fs_°ru˘
 = 
cuºít
->fs_struct;

388 
	`as£π
(
ﬁd_fs_°ru˘
 !
NULL
);

390 i‡(
˛⁄e_Êags
 & 
CLONE_FS
) {

391 
fs_°ru˘
 = 
ﬁd_fs_°ru˘
;

392 
good_fs_°ru˘
;

395 
ªt
 = -
E_NO_MEM
;

396 i‡((
fs_°ru˘
 = 
	`fs_¸óã
()Ë=
NULL
) {

397 
bad_fs_°ru˘
;

400 i‡((
ªt
 = 
	`dup_fs
(
fs_°ru˘
, 
ﬁd_fs_°ru˘
)) != 0) {

401 
bad_dup_˛ónup_fs
;

404 
good_fs_°ru˘
:

405 
	`fs_cou¡_öc
(
fs_°ru˘
);

406 
¥oc
->
fs_°ru˘
 = fs_struct;

409 
bad_dup_˛ónup_fs
:

410 
	`fs_de°roy
(
fs_°ru˘
);

411 
bad_fs_°ru˘
:

412  
ªt
;

413 
	}
}

416 
	$put_fs
(
¥oc_°ru˘
 *
¥oc
) {

417 
fs_°ru˘
 *fs_°ru˘ = 
¥oc
->fs_struct;

418 i‡(
fs_°ru˘
 !
NULL
) {

419 i‡(
	`fs_cou¡_dec
(
fs_°ru˘
) == 0) {

420 
	`fs_de°roy
(
fs_°ru˘
);

423 
	}
}

427 
	$may_kûÀd
() {

429 i‡(
cuºít
->
Êags
 & 
PF_EXITING
) {

430 
	`__do_exô
();

432 
	}
}

440 
	$do_f‹k
(
uöt32_t
 
˛⁄e_Êags
, 
uöçå_t
 
°ack
, 
å≠‰ame
 *
tf
) {

441 
ªt
 = -
E_NO_FREE_PROC
;

442 
¥oc_°ru˘
 *
¥oc
;

443 i‡(
ƒ_¥o˚ss
 >
MAX_PROCESS
) {

444 
f‹k_out
;

447 
ªt
 = -
E_NO_MEM
;

449 i‡((
¥oc
 = 
	`Æloc_¥oc
()Ë=
NULL
) {

450 
f‹k_out
;

453 
¥oc
->
∑ª¡
 = 
cuºít
;

454 
	`li°_öô
(&(
¥oc
->
thªad_group
));

455 
	`as£π
(
cuºít
->
waô_°©e
 == 0);

457 
	`as£π
(
cuºít
->
time_¶i˚
 >= 0);

458 
¥oc
->
time_¶i˚
 = 
cuºít
->time_slice / 2;

459 
cuºít
->
time_¶i˚
 -
¥oc
->time_slice;

461 i‡(
	`£tup_k°ack
(
¥oc
) != 0) {

462 
bad_f‹k_˛ónup_¥oc
;

464 i‡(
	`c›y_£m
(
˛⁄e_Êags
, 
¥oc
) != 0) {

465 
bad_f‹k_˛ónup_k°ack
;

467 i‡(
	`c›y_fs
(
˛⁄e_Êags
, 
¥oc
) != 0) {

468 
bad_f‹k_˛ónup_£m
;

470 i‡(
	`c›y_mm
(
˛⁄e_Êags
, 
¥oc
) != 0) {

471 
bad_f‹k_˛ónup_fs
;

473 i‡(
	`c›y_thªad
(
˛⁄e_Êags
, 
¥oc
, 
°ack
, 
tf
) != 0) {

474 
bad_f‹k_˛ónup_£m
;

477 
boﬁ
 
öå_Êag
;

478 
	`loˇl_öå_ßve
(
öå_Êag
);

480 
¥oc
->
pid
 = 
	`gë_pid
();

481 
	`hash_¥oc
(
¥oc
);

482 
	`£t_löks
(
¥oc
);

483 i‡(
˛⁄e_Êags
 & 
CLONE_THREAD
) {

484 
	`li°_add_bef‹e
(&(
cuºít
->
thªad_group
), &(
¥oc
->thread_group));

487 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

489 
	`wakeup_¥oc
(
¥oc
);

491 
ªt
 = 
¥oc
->
pid
;

492 
f‹k_out
:

493  
ªt
;

495 
bad_f‹k_˛ónup_fs
:

496 
	`put_fs
(
¥oc
);

497 
bad_f‹k_˛ónup_£m
:

498 
	`put_£m_queue
(
¥oc
);

499 
bad_f‹k_˛ónup_k°ack
:

500 
	`put_k°ack
(
¥oc
);

501 
bad_f‹k_˛ónup_¥oc
:

502 
	`k‰ì
(
¥oc
);

503 
f‹k_out
;

504 
	}
}

511 
	$__do_exô
() {

512 i‡(
cuºít
 =
idÀ¥oc
) {

513 
	`∑nic
("idleprocÉxit.\n");

515 i‡(
cuºít
 =
öô¥oc
) {

516 
	`∑nic
("initprocÉxit.\n");

519 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

520 i‡(
mm
 !
NULL
) {

521 
mm
->
œpic
 = -1;

522 
	`mp_£t_mm_∑gëabÀ
(
NULL
);

523 i‡(
	`mm_cou¡_dec
(
mm
) == 0) {

524 
	`exô_mm≠
(
mm
);

525 
	`put_pgdú
(
mm
);

526 
boﬁ
 
öå_Êag
;

527 
	`loˇl_öå_ßve
(
öå_Êag
);

529 
	`li°_dñ
(&(
mm
->
¥oc_mm_lök
));

531 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

532 
	`mm_de°roy
(
mm
);

534 
cuºít
->
mm
 = 
NULL
;

536 
	`put_fs
(
cuºít
);

537 
	`put_£m_queue
(
cuºít
);

538 
cuºít
->
°©e
 = 
PROC_ZOMBIE
;

540 
boﬁ
 
öå_Êag
;

541 
¥oc_°ru˘
 *
¥oc
, *
∑ª¡
;

542 
	`loˇl_öå_ßve
(
öå_Êag
);

544 
¥oc
 = 
∑ª¡
 = 
cuºít
->parent;

546 i‡(
¥oc
->
waô_°©e
 =
WT_CHILD
) {

547 
	`wakeup_¥oc
(
¥oc
);

549 
¥oc
 = 
	`√xt_thªad
(proc);

550 } 
¥oc
 !
∑ª¡
);

552 i‡((
∑ª¡
 = 
	`√xt_thªad
(
cuºít
)) == current) {

553 
∑ª¡
 = 
öô¥oc
;

555 
	`de_thªad
(
cuºít
);

556 
cuºít
->
˝å
 !
NULL
) {

557 
¥oc
 = 
cuºít
->
˝å
;

558 
cuºít
->
˝å
 = 
¥oc
->
›å
;

560 
¥oc
->
y±r
 = 
NULL
;

561 i‡((
¥oc
->
›å
 = 
∑ª¡
->
˝å
Ë!
NULL
) {

562 
∑ª¡
->
˝å
->
y±r
 = 
¥oc
;

564 
¥oc
->
∑ª¡
 =Öarent;

565 
∑ª¡
->
˝å
 = 
¥oc
;

566 i‡(
¥oc
->
°©e
 =
PROC_ZOMBIE
) {

567 i‡(
∑ª¡
->
waô_°©e
 =
WT_CHILD
) {

568 
	`wakeup_¥oc
(
∑ª¡
);

574 
	`wakeup_queue
(&(
cuºít
->
evít_box
.
waô_queue
), 
WT_INTERRUPTED
, 1);

576 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

578 
	`scheduÀ
();

579 
	`∑nic
("__do_exô wû»nŸÑëu∫!! %d %d.\n", 
cuºít
->
pid
, cuºít->
exô_code
);

580 
	}
}

584 
	$do_exô
(
îr‹_code
) {

585 
boﬁ
 
öå_Êag
;

586 
	`loˇl_öå_ßve
(
öå_Êag
);

588 
li°_íåy_t
 *
li°
 = &(
cuºít
->
thªad_group
), *
À
 =Üist;

589 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

590 
¥oc_°ru˘
 *
¥oc
 = 
	`À2¥oc
(
À
, 
thªad_group
);

591 
	`__do_kûl
(
¥oc
, 
îr‹_code
);

594 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

595  
	`do_exô_thªad
(
îr‹_code
);

596 
	}
}

600 
	$do_exô_thªad
(
îr‹_code
) {

601 
cuºít
->
exô_code
 = 
îr‹_code
;

602  
	`__do_exô
();

603 
	}
}

606 
	$lﬂd_icode_ªad
(
fd
, *
buf
, 
size_t
 
Àn
, 
off_t
 
off£t
) {

607 
ªt
;

608 i‡((
ªt
 = 
	`sysfûe_£ek
(
fd
, 
off£t
, 
LSEEK_SET
)) != 0) {

609  
ªt
;

611 i‡((
ªt
 = 
	`sysfûe_ªad
(
fd
, 
buf
, 
Àn
)) !=Üen) {

612  (
ªt
 < 0) ?Ñet : -1;

615 
	}
}

618 
	$lﬂd_icode
(
fd
, 
¨gc
, **
k¨gv
) {

619 
	`as£π
(
¨gc
 >0 &&árg¯<
EXEC_MAX_ARG_NUM
);

620 i‡(
cuºít
->
mm
 !
NULL
) {

621 
	`∑nic
("load_icode: current->mm must beÉmpty.\n");

624 
ªt
 = -
E_NO_MEM
;

626 
mm_°ru˘
 *
mm
;

627 i‡((
mm
 = 
	`mm_¸óã
()Ë=
NULL
) {

628 
bad_mm
;

631 i‡(
	`£tup_pgdú
(
mm
) != 0) {

632 
bad_pgdú_˛ónup_mm
;

635 
mm
->
brk_°¨t
 = 0;

637 
Page
 *
∑ge
;

639 
ñfhdr
 
__ñf
, *
ñf
 = &__elf;

640 i‡((
ªt
 = 
	`lﬂd_icode_ªad
(
fd
, 
ñf
, (
ñfhdr
), 0)) != 0) {

641 
bad_ñf_˛ónup_pgdú
;

644 i‡(
ñf
->
e_magic
 !
ELF_MAGIC
) {

645 
ªt
 = -
E_INVAL_ELF
;

646 
bad_ñf_˛ónup_pgdú
;

649 
¥oghdr
 
__ph
, *
ph
 = &__ph;

650 
uöt32_t
 
vm_Êags
, 
phnum
;

651 
±e_≥rm_t
 
≥rm
 = 0;

652 
phnum
 = 0;Öhnum < 
ñf
->
e_phnum
;Öhnum ++) {

653 
off_t
 
phoff
 = 
ñf
->
e_phoff
 + (
¥oghdr
Ë* 
phnum
;

654 i‡((
ªt
 = 
	`lﬂd_icode_ªad
(
fd
, 
ph
, (
¥oghdr
), 
phoff
)) != 0) {

655 
bad_˛ónup_mm≠
;

657 i‡(
ph
->
p_ty≥
 !
ELF_PT_LOAD
) {

660 i‡(
ph
->
p_fûesz
 >Öh->
p_memsz
) {

661 
ªt
 = -
E_INVAL_ELF
;

662 
bad_˛ónup_mm≠
;

664 
vm_Êags
 = 0;

665 
	`±ï_£t_u_ªad
(&
≥rm
);

666 i‡(
ph
->
p_Êags
 & 
ELF_PF_X
Ë
vm_Êags
 |
VM_EXEC
;

667 i‡(
ph
->
p_Êags
 & 
ELF_PF_W
Ë
vm_Êags
 |
VM_WRITE
;

668 i‡(
ph
->
p_Êags
 & 
ELF_PF_R
Ë
vm_Êags
 |
VM_READ
;

669 i‡(
vm_Êags
 & 
VM_WRITE
Ë
	`±ï_£t_u_wrôe
(&
≥rm
);

671 i‡((
ªt
 = 
	`mm_m≠
(
mm
, 
ph
->
p_va
,Öh->
p_memsz
, 
vm_Êags
, 
NULL
)) != 0) {

672 
bad_˛ónup_mm≠
;

675 i‡(
mm
->
brk_°¨t
 < 
ph
->
p_va
 +Öh->
p_memsz
) {

676 
mm
->
brk_°¨t
 = 
ph
->
p_va
 +Öh->
p_memsz
;

679 
off_t
 
off£t
 = 
ph
->
p_off£t
;

680 
size_t
 
off
, 
size
;

681 
uöçå_t
 
°¨t
 = 
ph
->
p_va
, 
íd
, 
œ
 = 
	`ROUNDDOWN
(°¨t, 
PGSIZE
);

683 
íd
 = 
ph
->
p_va
 +Öh->
p_fûesz
;

684 
°¨t
 < 
íd
) {

685 i‡((
∑ge
 = 
	`pgdú_Æloc_∑ge
(
mm
->
pgdú
, 
œ
, 
≥rm
)Ë=
NULL
) {

686 
ªt
 = -
E_NO_MEM
;

687 
bad_˛ónup_mm≠
;

689 
off
 = 
°¨t
 - 
œ
, 
size
 = 
PGSIZE
 - off,Üa += PGSIZE;

690 i‡(
íd
 < 
œ
) {

691 
size
 -
œ
 - 
íd
;

693 i‡((
ªt
 = 
	`lﬂd_icode_ªad
(
fd
, 
	`∑ge2kva
(
∑ge
Ë+ 
off
, 
size
, 
off£t
)) != 0) {

694 
bad_˛ónup_mm≠
;

696 
°¨t
 +
size
, 
off£t
 += size;

699 
íd
 = 
ph
->
p_va
 +Öh->
p_memsz
;

701 i‡(
°¨t
 < 
œ
) {

703 i‡(
°¨t
 =
íd
) {

706 
off
 = 
°¨t
 + 
PGSIZE
 - 
œ
, 
size
 = PGSIZE - off;

707 i‡(
íd
 < 
œ
) {

708 
size
 -
œ
 - 
íd
;

710 
	`mem£t
(
	`∑ge2kva
(
∑ge
Ë+ 
off
, 0, 
size
);

711 
°¨t
 +
size
;

712 
	`as£π
((
íd
 < 
œ
 && 
°¨t
 ==Énd) || (end >=Üa && start ==Üa));

715 
°¨t
 < 
íd
) {

716 i‡((
∑ge
 = 
	`pgdú_Æloc_∑ge
(
mm
->
pgdú
, 
œ
, 
≥rm
)Ë=
NULL
) {

717 
ªt
 = -
E_NO_MEM
;

718 
bad_˛ónup_mm≠
;

720 
off
 = 
°¨t
 - 
œ
, 
size
 = 
PGSIZE
 - off,Üa += PGSIZE;

721 i‡(
íd
 < 
œ
) {

722 
size
 -
œ
 - 
íd
;

724 
	`mem£t
(
	`∑ge2kva
(
∑ge
Ë+ 
off
, 0, 
size
);

725 
°¨t
 +
size
;

728 
	`sysfûe_˛o£
(
fd
);

730 
mm
->
brk_°¨t
 = mm->
brk
 = 
	`ROUNDUP
(mm->brk_°¨t, 
PGSIZE
);

732 
vm_Êags
 = 
VM_READ
 | 
VM_WRITE
 | 
VM_STACK
;

733 i‡((
ªt
 = 
	`mm_m≠
(
mm
, 
USTACKTOP
 - 
USTACKSIZE
, USTACKSIZE, 
vm_Êags
, 
NULL
)) != 0) {

734 
bad_˛ónup_mm≠
;

737 
boﬁ
 
öå_Êag
;

738 
	`loˇl_öå_ßve
(
öå_Êag
);

740 
	`li°_add
(&(
¥oc_mm_li°
), &(
mm
->
¥oc_mm_lök
));

742 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

743 
	`mm_cou¡_öc
(
mm
);

744 
cuºít
->
mm
 = mm;

745 
	`£t_pgdú
(
cuºít
, 
mm
->
pgdú
);

746 
mm
->
œpic
 = 
	`∂s_ªad
(
œpic_id
);

747 
	`mp_£t_mm_∑gëabÀ
(
mm
);

749 i‡(
	`öô_√w_c⁄ãxt
 (
cuºít
, 
ñf
, 
¨gc
, 
k¨gv
) < 0)

750 
bad_˛ónup_mm≠
;

752 
ªt
 = 0;

753 
out
:

754  
ªt
;

755 
bad_˛ónup_mm≠
:

756 
	`exô_mm≠
(
mm
);

757 
bad_ñf_˛ónup_pgdú
:

758 
	`put_pgdú
(
mm
);

759 
bad_pgdú_˛ónup_mm
:

760 
	`mm_de°roy
(
mm
);

761 
bad_mm
:

762 
out
;

763 
	}
}

766 
	$put_k¨gv
(
¨gc
, **
k¨gv
) {

767 
¨gc
 > 0) {

768 
	`k‰ì
(
k¨gv
[-- 
¨gc
]);

770 
	}
}

773 
	$c›y_k¨gv
(
mm_°ru˘
 *
mm
, 
¨gc
, **
k¨gv
, c⁄° **
¨gv
) {

774 
i
, 
ªt
 = -
E_INVAL
;

775 *
¨gv_k
;

776 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
¨gv
, (c⁄° *Ë* 
¨gc
, 0)) {

777  
ªt
;

779 
i
 = 0; i < 
¨gc
; i ++) {

780 *
buf„r
;

781 i‡((
buf„r
 = 
	`kmÆloc
(
EXEC_MAX_ARG_LEN
 + 1)Ë=
NULL
) {

782 
Áûed_nomem
;

784 i‡(!
	`c›y_‰om_u£r
 (
mm
, &
¨gv_k
, 
¨gv
 + 
i
,  (*), 0) ||

785 !
	`c›y_°rög
(
mm
, 
buf„r
, 
¨gv_k
, 
EXEC_MAX_ARG_LEN
 + 1)) {

786 
	`k‰ì
(
buf„r
);

787 
Áûed_˛ónup
;

789 
k¨gv
[
i
] = 
buf„r
;

793 
Áûed_nomem
:

794 
ªt
 = -
E_NO_MEM
;

795 
Áûed_˛ónup
:

796 
	`put_k¨gv
(
i
, 
k¨gv
);

797  
ªt
;

798 
	}
}

801 
	$do_execve
(c⁄° *
«me
, 
¨gc
, c⁄° **
¨gv
) {

802 
	`°©ic_as£π
(
EXEC_MAX_ARG_LEN
 >
FS_MAX_FPATH_LEN
);

803 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

804 i‡(!(
¨gc
 >1 &&árg¯<
EXEC_MAX_ARG_NUM
)) {

805  -
E_INVAL
;

808 
loˇl_«me
[
PROC_NAME_LEN
 + 1];

809 
	`mem£t
(
loˇl_«me
, 0, (local_name));

811 *
k¨gv
[
EXEC_MAX_ARG_NUM
];

812 c⁄° *
∑th
;

814 
ªt
 = -
E_INVAL
;

815 
	`lock_mm
(
mm
);

816 i‡(
«me
 =
NULL
) {

817 
	`¢¥ötf
(
loˇl_«me
, ÷oˇl_«me), "<nuŒ> %d", 
cuºít
->
pid
);

820 i‡(!
	`c›y_°rög
(
mm
, 
loˇl_«me
, 
«me
, (local_name))) {

821 
	`u∆ock_mm
(
mm
);

822  
ªt
;

825 i‡((
ªt
 = 
	`c›y_k¨gv
(
mm
, 
¨gc
, 
k¨gv
, 
¨gv
)) != 0) {

826 
	`u∆ock_mm
(
mm
);

827  
ªt
;

830 
	`c›y_‰om_u£r
 (
mm
, &
∑th
, 
¨gv
,  (*), 0);

831 
	`u∆ock_mm
(
mm
);

833 
	`fs_˛o£Æl
(
cuºít
->
fs_°ru˘
);

837 
fd
;

838 i‡((
ªt
 = 
fd
 = 
	`sysfûe_›í
(
∑th
, 
O_RDONLY
)) < 0) {

839 
execve_exô
;

842 i‡(
mm
 !
NULL
) {

843 
mm
->
œpic
 = -1;

844 
	`mp_£t_mm_∑gëabÀ
(
NULL
);

845 i‡(
	`mm_cou¡_dec
(
mm
) == 0) {

846 
	`exô_mm≠
(
mm
);

847 
	`put_pgdú
(
mm
);

848 
boﬁ
 
öå_Êag
;

849 
	`loˇl_öå_ßve
(
öå_Êag
);

851 
	`li°_dñ
(&(
mm
->
¥oc_mm_lök
));

853 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

854 
	`mm_de°roy
(
mm
);

856 
cuºít
->
mm
 = 
NULL
;

858 
	`put_£m_queue
(
cuºít
);

860 
ªt
 = -
E_NO_MEM
;

861 i‡((
cuºít
->
£m_queue
 = 
	`£m_queue_¸óã
()Ë=
NULL
) {

862 
execve_exô
;

864 
	`£m_queue_cou¡_öc
(
cuºít
->
£m_queue
);

866 i‡((
ªt
 = 
	`lﬂd_icode
(
fd
, 
¨gc
, 
k¨gv
)) != 0) {

867 
execve_exô
;

870 
	`de_thªad
(
cuºít
);

871 
	`£t_¥oc_«me
(
cuºít
, 
loˇl_«me
);

873 i‡(
	`do_execve_¨ch_hook
 (
¨gc
, 
k¨gv
) < 0)

874 
execve_exô
;

876 
	`put_k¨gv
(
¨gc
, 
k¨gv
);

879 
execve_exô
:

880 
	`put_k¨gv
(
¨gc
, 
k¨gv
);

881 
	`do_exô
(
ªt
);

882 
	`∑nic
("ÆªadyÉxô: %e.\n", 
ªt
);

883 
	}
}

887 
	$do_yõld
() {

888 
cuºít
->
√ed_ªsched
 = 1;

890 
	}
}

896 
	$do_waô
(
pid
, *
code_°‹e
) {

897 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

898 i‡(
code_°‹e
 !
NULL
) {

899 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
code_°‹e
, (), 1)) {

900  -
E_INVAL
;

904 
¥oc_°ru˘
 *
¥oc
, *
˝roc
;

905 
boﬁ
 
öå_Êag
, 
haskid
;

906 
ª≥©
:

907 
˝roc
 = 
cuºít
;

908 
haskid
 = 0;

909 i‡(
pid
 != 0) {

910 
¥oc
 = 
	`föd_¥oc
(
pid
);

911 i‡(
¥oc
 !
NULL
) {

913 i‡(
¥oc
->
∑ª¡
 =
˝roc
) {

914 
haskid
 = 1;

915 i‡(
¥oc
->
°©e
 =
PROC_ZOMBIE
) {

916 
found
;

920 
˝roc
 = 
	`√xt_thªad
(cproc);

921 } 
˝roc
 !
cuºít
);

926 
¥oc
 = 
˝roc
->
˝å
;

927 ; 
¥oc
 !
NULL
;Öro¯¥oc->
›å
) {

928 
haskid
 = 1;

929 i‡(
¥oc
->
°©e
 =
PROC_ZOMBIE
) {

930 
found
;

933 
˝roc
 = 
	`√xt_thªad
(cproc);

934 } 
˝roc
 !
cuºít
);

936 i‡(
haskid
) {

937 
cuºít
->
°©e
 = 
PROC_SLEEPING
;

938 
cuºít
->
waô_°©e
 = 
WT_CHILD
;

939 
	`scheduÀ
();

940 
	`may_kûÀd
();

941 
ª≥©
;

943  -
E_BAD_PROC
;

945 
found
:

946 i‡(
¥oc
 =
idÀ¥oc
 ||Öro¯=
öô¥oc
) {

947 
	`∑nic
("wait idleproc or initproc.\n");

949 
exô_code
 = 
¥oc
->exit_code;

950 
	`loˇl_öå_ßve
(
öå_Êag
);

952 
	`unhash_¥oc
(
¥oc
);

953 
	`ªmove_löks
(
¥oc
);

955 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

956 
	`put_k°ack
(
¥oc
);

957 
	`k‰ì
(
¥oc
);

959 
ªt
 = 0;

960 i‡(
code_°‹e
 !
NULL
) {

961 
	`lock_mm
(
mm
);

963 i‡(!
	`c›y_to_u£r
(
mm
, 
code_°‹e
, &
exô_code
, ())) {

964 
ªt
 = -
E_INVAL
;

967 
	`u∆ock_mm
(
mm
);

969  
ªt
;

970 
	}
}

974 
	$__do_kûl
(
¥oc_°ru˘
 *
¥oc
, 
îr‹_code
) {

975 i‡(!(
¥oc
->
Êags
 & 
PF_EXITING
)) {

976 
¥oc
->
Êags
 |
PF_EXITING
;

977 
¥oc
->
exô_code
 = 
îr‹_code
;

978 i‡(
¥oc
->
waô_°©e
 & 
WT_INTERRUPTED
) {

979 
	`wakeup_¥oc
(
¥oc
);

983  -
E_KILLED
;

984 
	}
}

988 
	$do_kûl
(
pid
, 
îr‹_code
) {

989 
¥oc_°ru˘
 *
¥oc
;

990 i‡((
¥oc
 = 
	`föd_¥oc
(
pid
)Ë!
NULL
) {

991  
	`__do_kûl
(
¥oc
, 
îr‹_code
);

993  -
E_INVAL
;

994 
	}
}

999 
	$do_brk
(
uöçå_t
 *
brk_°‹e
) {

1000 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

1001 i‡(
mm
 =
NULL
) {

1002 
	`∑nic
("kernelÅhread call sys_brk!!.\n");

1004 i‡(
brk_°‹e
 =
NULL
) {

1005  -
E_INVAL
;

1008 
uöçå_t
 
brk
;

1010 
	`lock_mm
(
mm
);

1011 i‡(!
	`c›y_‰om_u£r
(
mm
, &
brk
, 
brk_°‹e
, (
uöçå_t
), 1)) {

1012 
	`u∆ock_mm
(
mm
);

1013  -
E_INVAL
;

1016 i‡(
brk
 < 
mm
->
brk_°¨t
) {

1017 
out_u∆ock
;

1019 
uöçå_t
 
√wbrk
 = 
	`ROUNDUP
(
brk
, 
PGSIZE
), 
ﬁdbrk
 = 
mm
->brk;

1020 
	`as£π
(
ﬁdbrk
 % 
PGSIZE
 == 0);

1021 i‡(
√wbrk
 =
ﬁdbrk
) {

1022 
out_u∆ock
;

1024 i‡(
√wbrk
 < 
ﬁdbrk
) {

1025 i‡(
	`mm_unm≠
(
mm
, 
√wbrk
, 
ﬁdbrk
 -Çewbrk) != 0) {

1026 
out_u∆ock
;

1030 i‡(
	`föd_vma_öãr£˘i⁄
(
mm
, 
ﬁdbrk
, 
√wbrk
 + 
PGSIZE
Ë!
NULL
) {

1031 
out_u∆ock
;

1033 i‡(
	`mm_brk
(
mm
, 
ﬁdbrk
, 
√wbrk
 - oldbrk) != 0) {

1034 
out_u∆ock
;

1037 
mm
->
brk
 = 
√wbrk
;

1038 
out_u∆ock
:

1039 
	`c›y_to_u£r
 (
mm
, 
brk_°‹e
, &mm->
brk
,  (
uöçå_t
));

1040 
	`u∆ock_mm
(
mm
);

1042 
	}
}

1047 
	$do_¶ìp
(
time
) {

1048 i‡(
time
 == 0) {

1051 
boﬁ
 
öå_Êag
;

1052 
	`loˇl_öå_ßve
(
öå_Êag
);

1053 
timî_t
 
__timî
, *
timî
 = 
	`timî_öô
(&__timî, 
cuºít
, 
time
);

1054 
cuºít
->
°©e
 = 
PROC_SLEEPING
;

1055 
cuºít
->
waô_°©e
 = 
WT_TIMER
;

1056 
	`add_timî
(
timî
);

1057 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

1059 
	`scheduÀ
();

1061 
	`dñ_timî
(
timî
);

1063 
	}
}

1067 
	$do_mm≠
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
) {

1068 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

1069 i‡(
mm
 =
NULL
) {

1070 
	`∑nic
("kernelÅhread call mmap!!.\n");

1072 i‡(
addr_°‹e
 =
NULL
 || 
Àn
 == 0) {

1073  -
E_INVAL
;

1076 
ªt
 = -
E_INVAL
;

1078 
uöçå_t
 
addr
;

1080 
	`lock_mm
(
mm
);

1081 i‡(!
	`c›y_‰om_u£r
(
mm
, &
addr
, 
addr_°‹e
, (
uöçå_t
), 1)) {

1082 
out_u∆ock
;

1085 
uöçå_t
 
°¨t
 = 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), 
íd
 = 
	`ROUNDUP
◊dd∏+ 
Àn
, PGSIZE);

1086 
addr
 = 
°¨t
, 
Àn
 = 
íd
 - start;

1088 
uöt32_t
 
vm_Êags
 = 
VM_READ
;

1089 i‡(
mm≠_Êags
 & 
MMAP_WRITE
Ë
vm_Êags
 |
VM_WRITE
;

1090 i‡(
mm≠_Êags
 & 
MMAP_STACK
Ë
vm_Êags
 |
VM_STACK
;

1092 
ªt
 = -
E_NO_MEM
;

1093 i‡(
addr
 == 0) {

1094 i‡((
addr
 = 
	`gë_unm≠≥d_¨ó
(
mm
, 
Àn
)) == 0) {

1095 
out_u∆ock
;

1098 i‡((
ªt
 = 
	`mm_m≠
(
mm
, 
addr
, 
Àn
, 
vm_Êags
, 
NULL
)) == 0) {

1099 
	`c›y_to_u£r
 (
mm
, 
addr_°‹e
, &
addr
,  (
uöçå_t
));

1101 
out_u∆ock
:

1102 
	`u∆ock_mm
(
mm
);

1103  
ªt
;

1104 
	}
}

1108 
	$do_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àn
) {

1109 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

1110 i‡(
mm
 =
NULL
) {

1111 
	`∑nic
("kernelÅhread call munmap!!.\n");

1113 i‡(
Àn
 == 0) {

1114  -
E_INVAL
;

1116 
ªt
;

1117 
	`lock_mm
(
mm
);

1119 
ªt
 = 
	`mm_unm≠
(
mm
, 
addr
, 
Àn
);

1121 
	`u∆ock_mm
(
mm
);

1122  
ªt
;

1123 
	}
}

1127 
	$do_shmem
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
) {

1128 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

1129 i‡(
mm
 =
NULL
) {

1130 
	`∑nic
("kernelÅhread call mmap!!.\n");

1132 i‡(
addr_°‹e
 =
NULL
 || 
Àn
 == 0) {

1133  -
E_INVAL
;

1136 
ªt
 = -
E_INVAL
;

1138 
uöçå_t
 
addr
;

1140 
	`lock_mm
(
mm
);

1141 i‡(!
	`c›y_‰om_u£r
(
mm
, &
addr
, 
addr_°‹e
, (
uöçå_t
), 1)) {

1142 
out_u∆ock
;

1145 
uöçå_t
 
°¨t
 = 
	`ROUNDDOWN
(
addr
, 
PGSIZE
), 
íd
 = 
	`ROUNDUP
◊dd∏+ 
Àn
, PGSIZE);

1146 
addr
 = 
°¨t
, 
Àn
 = 
íd
 - start;

1148 
uöt32_t
 
vm_Êags
 = 
VM_READ
;

1149 i‡(
mm≠_Êags
 & 
MMAP_WRITE
Ë
vm_Êags
 |
VM_WRITE
;

1150 i‡(
mm≠_Êags
 & 
MMAP_STACK
Ë
vm_Êags
 |
VM_STACK
;

1152 
ªt
 = -
E_NO_MEM
;

1153 i‡(
addr
 == 0) {

1154 i‡((
addr
 = 
	`gë_unm≠≥d_¨ó
(
mm
, 
Àn
)) == 0) {

1155 
out_u∆ock
;

1158 
shmem_°ru˘
 *
shmem
;

1159 i‡((
shmem
 = 
	`shmem_¸óã
(
Àn
)Ë=
NULL
) {

1160 
out_u∆ock
;

1162 i‡((
ªt
 = 
	`mm_m≠_shmem
(
mm
, 
addr
, 
vm_Êags
, 
shmem
, 
NULL
)) != 0) {

1163 
	`as£π
(
	`shmem_ªf
(
shmem
) == 0);

1164 
	`shmem_de°roy
(
shmem
);

1165 
out_u∆ock
;

1167 
	`c›y_to_u£r
 (
mm
, 
addr_°‹e
, &
addr
,  (
uöçå_t
));

1168 
out_u∆ock
:

1169 
	`u∆ock_mm
(
mm
);

1170  
ªt
;

1171 
	}
}

1173 
	#__KERNEL_EXECVE
(
«me
, 
∑th
, ...) ({ \

1174 c⁄° *
¨gv
[] = {
∑th
, ##
__VA_ARGS__
, 
NULL
}; \

1175 
	`k¥ötf
("kernel_execve:Öid = %d,Çame = \"%s\".\n", \

1176 
cuºít
->
pid
, 
«me
); \

1177 
	`kî√l_execve
(
«me
, 
¨gv
); \

1178 })

	)

1180 
	#KERNEL_EXECVE
(
x
, ...Ë
	`__KERNEL_EXECVE
(#x, "bö/"#x, ##
__VA_ARGS__
)

	)

1182 
	#KERNEL_EXECVE2
(
x
, ...Ë
	`KERNEL_EXECVE
(x, ##
__VA_ARGS__
)

	)

1184 
	#__KERNEL_EXECVE3
(
x
, 
s
, ...Ë
	`KERNEL_EXECVE
(x, #s, ##
__VA_ARGS__
)

	)

1186 
	#KERNEL_EXECVE3
(
x
, 
s
, ...Ë
	`__KERNEL_EXECVE3
(x, s, ##
__VA_ARGS__
)

	)

1190 
	$u£r_maö
(*
¨g
) {

1191 #ifde‡
TEST


1192 #ifde‡
TESTSCRIPT


1193 
	`KERNEL_EXECVE3
(
TEST
, 
TESTSCRIPT
);

1195 
	`KERNEL_EXECVE2
(
TEST
);

1198 
	`KERNEL_EXECVE
(
sh
);

1200 
	`∑nic
("user_mainÉxecve failed.\n");

1201 
	}
}

1205 
	$öô_maö
(*
¨g
) {

1206 
pid
;

1207 i‡((
pid
 = 
	`kî√l_thªad
(
ksw≠d_maö
, 
NULL
, 0)) <= 0) {

1208 
	`∑nic
("kswapd init failed.\n");

1210 
ksw≠d
 = 
	`föd_¥oc
(
pid
);

1211 
	`£t_¥oc_«me
(
ksw≠d
, "kswapd");

1213 
ªt
;

1214 
roŸ
[] = "disk0:";

1215 i‡((
ªt
 = 
	`vfs_£t_boŸfs
(
roŸ
)) != 0) {

1216 
	`∑nic
("£àboŸ f†Áûed: %e.\n", 
ªt
);

1219 
size_t
 
ƒ_u£d_∑ges_°‹e
 = 
	`ƒ_u£d_∑ges
();

1220 
size_t
 
¶ab_Æloˇãd_°‹e
 = 
	`¶ab_Æloˇãd
();

1222 
ƒ_¥o˚ss_°‹e
 = 
ƒ_¥o˚ss
;

1224 
pid
 = 
	`kî√l_thªad
(
u£r_maö
, 
NULL
, 0);

1225 i‡(
pid
 <= 0) {

1226 
	`∑nic
("create user_main failed.\n");

1229 
	`do_waô
(0, 
NULL
) == 0) {

1230 i‡(
ƒ_¥o˚ss_°‹e
 =
ƒ_¥o˚ss
) {

1233 
	`scheduÀ
();

1236 
	`as£π
(
ksw≠d
 !
NULL
);

1238 
i
;

1239 
i
 = 0; i < 10; i ++) {

1240 i‡(
ksw≠d
->
waô_°©e
 =
WT_TIMER
) {

1241 
	`wakeup_¥oc
(
ksw≠d
);

1243 
	`scheduÀ
();

1246 
	`mbox_˛ónup
();

1247 
	`fs_˛ónup
();

1249 
	`k¥ötf
("all user-modeÖrocesses have quit.\n");

1250 
	`as£π
(
öô¥oc
->
˝å
 =
ksw≠d
 && inô¥oc->
y±r
 =
NULL
 && inô¥oc->
›å
 == NULL);

1251 
	`as£π
(
ksw≠d
->
˝å
 =
NULL
 && ksw≠d->
y±r
 =NULL && ksw≠d->
›å
 == NULL);

1252 
	`as£π
(
ƒ_¥o˚ss
 =2 + 
	`∂s_ªad
(
l˝u_cou¡
));

1253 
	`as£π
(
ƒ_u£d_∑ges_°‹e
 =
	`ƒ_u£d_∑ges
());

1254 
	`as£π
(
¶ab_Æloˇãd_°‹e
 =
	`¶ab_Æloˇãd
());

1255 
	`k¥ötf
("init check memoryÖass.\n");

1257 
	}
}

1262 
	$¥oc_öô
() {

1263 
i
;

1264 
l˝u_idx
 = 
	`∂s_ªad
(lcpu_idx);

1265 
œpic_id
 = 
	`∂s_ªad
(lapic_id);

1266 
l˝u_cou¡
 = 
	`∂s_ªad
(lcpu_count);

1268 
	`li°_öô
(&
¥oc_li°
);

1269 
	`li°_öô
(&
¥oc_mm_li°
);

1270 
i
 = 0; i < 
HASH_LIST_SIZE
; i ++) {

1271 
	`li°_öô
(
hash_li°
 + 
i
);

1274 
	`∂s_wrôe
(
idÀ¥oc
, 
	`Æloc_¥oc
());

1275 i‡(
idÀ¥oc
 =
NULL
) {

1276 
	`∑nic
("cannotálloc idleproc.\n");

1279 
idÀ¥oc
->
pid
 = 
l˝u_idx
;

1280 
idÀ¥oc
->
°©e
 = 
PROC_RUNNABLE
;

1283 
idÀ¥oc
->
√ed_ªsched
 = 1;

1284 
idÀ¥oc
->
tf
 = 
NULL
;

1285 i‡((
idÀ¥oc
->
fs_°ru˘
 = 
	`fs_¸óã
()Ë=
NULL
) {

1286 
	`∑nic
("create fs_struct (idleproc) failed.\n");

1288 
	`fs_cou¡_öc
(
idÀ¥oc
->
fs_°ru˘
);

1290 
«mebuf
[32];

1291 
	`¢¥ötf
(
«mebuf
, 32, "idÀ/%d", 
œpic_id
);

1293 
	`£t_¥oc_«me
(
idÀ¥oc
, 
«mebuf
);

1294 
ƒ_¥o˚ss
 ++;

1296 
	`∂s_wrôe
(
cuºít
, 
idÀ¥oc
);

1298 
pid
 = 
	`kî√l_thªad
(
öô_maö
, 
NULL
, 0);

1299 i‡(
pid
 <= 0) {

1300 
	`∑nic
("create init_main failed.\n");

1303 
öô¥oc
 = 
	`föd_¥oc
(
pid
);

1304 
	`£t_¥oc_«me
(
öô¥oc
, "init");

1306 
	`as£π
(
idÀ¥oc
 !
NULL
 && idÀ¥oc->
pid
 =
l˝u_idx
);

1307 
	`as£π
(
öô¥oc
 !
NULL
 && inô¥oc->
pid
 =
l˝u_cou¡
);

1308 
	}
}

1311 
	$¥oc_öô_≠
()

1313 
l˝u_idx
 = 
	`∂s_ªad
(lcpu_idx);

1314 
œpic_id
 = 
	`∂s_ªad
(lapic_id);

1316 
	`∂s_wrôe
(
idÀ¥oc
, 
	`Æloc_¥oc
());

1317 i‡(
idÀ¥oc
 =
NULL
) {

1318 
	`∑nic
("cannotálloc idleproc.\n");

1321 
idÀ¥oc
->
pid
 = 
l˝u_idx
;

1322 
idÀ¥oc
->
°©e
 = 
PROC_RUNNABLE
;

1325 
idÀ¥oc
->
√ed_ªsched
 = 1;

1326 
idÀ¥oc
->
tf
 = 
NULL
;

1327 i‡((
idÀ¥oc
->
fs_°ru˘
 = 
	`fs_¸óã
()Ë=
NULL
) {

1328 
	`∑nic
("create fs_struct (idleproc) failed.\n");

1330 
	`fs_cou¡_öc
(
idÀ¥oc
->
fs_°ru˘
);

1332 
«mebuf
[32];

1333 
	`¢¥ötf
(
«mebuf
, 32, "idÀ/%d", 
œpic_id
);

1335 
	`£t_¥oc_«me
(
idÀ¥oc
, 
«mebuf
);

1336 
ƒ_¥o˚ss
 ++;

1338 
	`∂s_wrôe
(
cuºít
, 
idÀ¥oc
);

1340 
	`as£π
(
idÀ¥oc
 !
NULL
 && idÀ¥oc->
pid
 =
l˝u_idx
);

1341 
	}
}

	@kern-ucore/process/proc.h

1 #i‚de‡
__KERN_PROCESS_PROC_H__


2 
	#__KERN_PROCESS_PROC_H__


	)

4 
	~<ty≥s.h
>

5 
	~<li°.h
>

6 
	~<å≠.h
>

7 
	~<memœyout.h
>

8 
	~<uni°d.h
>

9 
	~<£m.h
>

10 
	~<evít.h
>

11 
	~<glue_mp.h
>

12 
	~<ñf.h
>

13 
	~<¨ch_¥oc.h
>

16 
	e¥oc_°©e
 {

17 
	mPROC_UNINIT
 = 0,

18 
	mPROC_SLEEPING
,

19 
	mPROC_RUNNABLE
,

20 
	mPROC_ZOMBIE
,

23 
	#PROC_IS_IDLE
(
¥oc
Ë((’roc)->
©åibuã
 & 
PROC_ATTR_ROLE
Ë=
PROC_ATTR_ROLE_IDLE
)

	)

25 
	#PROC_NAME_LEN
 15

	)

26 
	#MAX_PROCESS
 4096

	)

27 
	#MAX_PID
 (
MAX_PROCESS
 * 2)

	)

29 
li°_íåy_t
 
¥oc_li°
;

30 
li°_íåy_t
 
¥oc_mm_li°
;

32 
	göode
;

33 
	gfs_°ru˘
;

35 
	s¥oc_°ru˘
 {

36 
¥oc_°©e
 
	m°©e
;

37 
	mpid
;

38 
	mruns
;

39 
uöçå_t
 
	mk°ack
;

40 vﬁ©ûê
boﬁ
 
	m√ed_ªsched
;

41 
¥oc_°ru˘
 *
	m∑ª¡
;

42 
mm_°ru˘
 *
	mmm
;

43 
c⁄ãxt
 
	mc⁄ãxt
;

44 
å≠‰ame
 *
	mtf
;

45 
uöçå_t
 
	m¸3
;

46 
uöt32_t
 
	mÊags
;

47 
	m«me
[
PROC_NAME_LEN
 + 1];

48 
li°_íåy_t
 
	mli°_lök
;

49 
li°_íåy_t
 
	mhash_lök
;

50 
	mexô_code
;

51 
uöt32_t
 
	mwaô_°©e
;

52 
¥oc_°ru˘
 *
	m˝å
, *
	my±r
, *
	m›å
;

53 
li°_íåy_t
 
	mthªad_group
;

55 
¨ch_¥oc_°ru˘
 
	m¨ch
;

57 
run_queue
 *
	mrq
;

58 
li°_íåy_t
 
	mrun_lök
;

59 
	mtime_¶i˚
;

60 
£m_queue_t
 *
	m£m_queue
;

61 
evít_t
 
	mevít_box
;

62 
fs_°ru˘
 *
	mfs_°ru˘
;

65 
	#PF_EXITING
 0x00000001

66 

	)

68 
	#WT_CHILD
 (0x00000001 | 
WT_INTERRUPTED
)

69 
	#WT_TIMER
 (0x00000002 | 
WT_INTERRUPTED
)

70 
	#WT_KSWAPD
 0x00000003

71 
	#WT_KBD
 (0x00000004 | 
WT_INTERRUPTED
)

72 
	#WT_KSEM
 0x00000100

73 
	#WT_USEM
 (0x00000101 | 
WT_INTERRUPTED
)

74 
	#WT_EVENT_SEND
 (0x00000110 | 
WT_INTERRUPTED
)

75 
	#WT_EVENT_RECV
 (0x00000111 | 
WT_INTERRUPTED
)

76 
	#WT_MBOX_SEND
 (0x00000120 | 
WT_INTERRUPTED
)

77 
	#WT_MBOX_RECV
 (0x00000121 | 
WT_INTERRUPTED
)

78 
	#WT_PIPE
 (0x00000200 | 
WT_INTERRUPTED
)

79 
	#WT_INTERRUPTED
 0x80000000

80 

	)

81 
	#À2¥oc
(
À
, 
membî
) \

82 
	`to_°ru˘
((
À
), 
¥oc_°ru˘
, 
membî
)

	)

84 
¥oc_°ru˘
 *
∂s_cuºít
;

85 
¥oc_°ru˘
 *
∂s_idÀ¥oc
;

86 
¥oc_°ru˘
 *
öô¥oc
;

87 
¥oc_°ru˘
 *
ksw≠d
;

89 
¥oc_öô
();

90 
¥oc_öô_≠
();

92 
¥oc_run
(
¥oc_°ru˘
 *
¥oc
);

93 
kî√l_thªad
((*
‚
)(*), *
¨g
, 
uöt32_t
 
˛⁄e_Êags
);

95 *
	`£t_¥oc_«me
(
¥oc_°ru˘
 *
¥oc
, c⁄° *
«me
);

96 *
	`gë_¥oc_«me
(
¥oc_°ru˘
 *
¥oc
);

97 
	$˝u_idÀ
(Ë
	`__©åibuã__
((
n‹ëu∫
));

98 
	`kî√l_thªad_íåy
();

100 
¥oc_°ru˘
 *
	`föd_¥oc
(
pid
);

101 
	`may_kûÀd
();

102 
	`do_f‹k
(
uöt32_t
 
˛⁄e_Êags
, 
uöçå_t
 
°ack
, 
å≠‰ame
 *
tf
);

103 
	`do_exô
(
îr‹_code
);

104 
	`do_exô_thªad
(
îr‹_code
);

105 
	`do_execve
(c⁄° *
«me
, 
¨gc
, c⁄° **
¨gv
);

106 
	`do_yõld
();

107 
	`do_waô
(
pid
, *
code_°‹e
);

108 
	`do_kûl
(
pid
, 
îr‹_code
);

109 
	`do_brk
(
uöçå_t
 *
brk_°‹e
);

110 
	`do_¶ìp
(
time
);

111 
	`do_mm≠
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
);

112 
	`do_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àn
);

113 
	`do_shmem
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
);

116 
¥oc_°ru˘
 * 
	`Æloc_¥oc
();

117 
	`swôch_to
(
c⁄ãxt
 *
‰om
, c⁄ãxà*
to
);

118 
	`de_thªad_¨ch_hook
 (
¥oc_°ru˘
 *
¥oc
);

119 
	`c›y_thªad
(
uöt32_t
 
˛⁄e_Êags
, 
¥oc_°ru˘
 *
¥oc
,

120 
uöçå_t
 
u£r_°ack
, 
å≠‰ame
 *
tf
);

121 
	`öô_√w_c⁄ãxt
 (
¥oc_°ru˘
 *
¥oc
, 
ñfhdr
 *
ñf
, 
¨gc
, ** 
k¨gv
);

122 
	`kî√l_thªad
((*
‚
)(*), *
¨g
, 
uöt32_t
 
˛⁄e_Êags
);

123 
	`kî√l_execve
(c⁄° *
«me
, c⁄° **
¨gv
);

124 
	`do_execve_¨ch_hook
 (
¨gc
, **
k¨gv
);

	@kern-ucore/schedule/sched.c

1 
	~<li°.h
>

2 
	~<sync.h
>

3 
	~<¥oc.h
>

4 
	~<sched.h
>

5 
	~<°dio.h
>

6 
	~<as£π.h
>

7 
	~<sched_MLFQ.h
>

8 
	~<kio.h
>

9 
	~<mp.h
>

11 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

12 
	#idÀ¥oc
 (
	`∂s_ªad
(
idÀ¥oc
))

	)

16 
	#SLICEPOOL_SIZE
 21

	)

18 
uöt16_t
 
	gsched_öfo_pid
[
PGSIZE
 / (uint16_t)];

19 
uöt16_t
 
	gsched_öfo_times
[
PGSIZE
 / (uint16_t)];

20 
	gsched_öfo_hód
[8];

21 
	gsched_¶i˚s
[8][
SLICEPOOL_SIZE
];

22 
	gsched_cﬁÀ˘_öfo
 = 1;

25 
	$db_sched
 (
löes
)

27 
	`k¥ötf
("\n");

29 
l˝u_cou¡
 = 
	`∂s_ªad
(lcpu_count);

30 
i
, 
j
, 
k
;

32 
	`k¥ötf
(" ");

33 
i
 = 0; i < 
l˝u_cou¡
; i++)

34 
	`k¥ötf
("| CPU%d ", 
i
);

35 
	`k¥ötf
("\n");

37 
i
 = 0; i < 
löes
; i++) {

38 
	`k¥ötf
(" %4d ", 
i
);

39 
k
 = 0; k < 
l˝u_cou¡
; k++) {

40 
j
 = 
sched_öfo_hód
[
k
] - 
i
;

41 i‡(
j
 < 0)

42 
j
 +
PGSIZE
 / (
uöt16_t
Ë/ 
l˝u_cou¡
;

43 
	`k¥ötf
(" %4d(%4dË", 
sched_öfo_pid
[
j
*
l˝u_cou¡
 + 
k
], 
sched_öfo_times
[j*lcpu_count + k]);

45 
	`k¥ötf
("\n");

47 
	}
}

50 
	$db_time
 (
uöt16_t
 
À·
, uöt16_à
right
)

52 
	`k¥ötf
("\n");

54 
l˝u_cou¡
 = 
	`∂s_ªad
(lcpu_count);

55 
i
, 
j
;

56 
i
 = 0; i < 
l˝u_cou¡
; i++) {

57 
	`k¥ötf
("O¿CPU%d: ", 
i
);

58 
sum
 = 0, 
tŸÆ
 = 
PGSIZE
 / (
uöt16_t
Ë/ 
l˝u_cou¡
;

59 
j
 = 0; j < 
tŸÆ
; j++) {

60 
uöt16_t
 
pid
 = 
sched_öfo_pid
[
j
*
l˝u_cou¡
 + 
i
];

61 i‡(
pid
 >
À·
 &&Öid <
right
)

62 
sum
 +
sched_öfo_times
[
j
*
l˝u_cou¡
 + 
i
];

64 
	`k¥ötf
("%4d", 
sum
);

65 
sum
 = 0;

66 
j
 = 
À·
; j <
right
; j++)

67 
sum
 +
sched_¶i˚s
[
i
][
j
 % 
SLICEPOOL_SIZE
];

68 
	`k¥ötf
("(%4d)\n", 
sum
);

70 
	}
}

75 
li°_íåy_t
 
	gtimî_li°
;

77 
sched_˛ass
 *
	gsched_˛ass
;

79 
run_queue
 *
	grq
;

81 
ölöe
 

82 
	$sched_˛ass_íqueue
(
¥oc_°ru˘
 *
¥oc
) {

83 i‡(
¥oc
 !
idÀ¥oc
) {

84 
sched_˛ass
->
	`íqueue
(
rq
, 
¥oc
);

86 
	}
}

88 
ölöe
 

89 
	$sched_˛ass_dequeue
(
¥oc_°ru˘
 *
¥oc
) {

90 
sched_˛ass
->
	`dequeue
(
rq
, 
¥oc
);

91 
	}
}

93 
ölöe
 
¥oc_°ru˘
 *

94 
	$sched_˛ass_pick_√xt
() {

95  
sched_˛ass
->
	`pick_√xt
(
rq
);

96 
	}
}

99 
	$sched_˛ass_¥oc_tick
(
¥oc_°ru˘
 *
¥oc
) {

100 i‡(
¥oc
 !
idÀ¥oc
) {

101 
sched_˛ass
->
	`¥oc_tick
(
rq
, 
¥oc
);

104 
¥oc
->
√ed_ªsched
 = 1;

106 
	}
}

108 
run_queue
 
	g__rq
[4];

111 
	$sched_öô
() {

112 
	`li°_öô
(&
timî_li°
);

114 
rq
 = 
__rq
;

115 
	`li°_öô
(&(
rq
->
rq_lök
));

116 
rq
->
max_time_¶i˚
 = 8;

118 
i
;

119 
i
 = 1; i < (
__rq
) / (__rq[0]); i ++) {

120 
	`li°_add_bef‹e
(&(
rq
->
rq_lök
), &(
__rq
[
i
].rq_link));

121 
__rq
[
i
].
max_time_¶i˚
 = 
rq
->max_time_slice * (1 << i);

124 
sched_˛ass
 = &
MLFQ_sched_˛ass
;

125 
sched_˛ass
->
	`öô
(
rq
);

127 
	`k¥ötf
("sched cœss: %s\n", 
sched_˛ass
->
«me
);

128 
	}
}

131 
	$wakeup_¥oc
(
¥oc_°ru˘
 *
¥oc
) {

132 
	`as£π
(
¥oc
->
°©e
 !
PROC_ZOMBIE
);

133 
boﬁ
 
öå_Êag
;

134 
	`loˇl_öå_ßve
(
öå_Êag
);

136 i‡(
¥oc
->
°©e
 !
PROC_RUNNABLE
) {

137 
¥oc
->
°©e
 = 
PROC_RUNNABLE
;

138 
¥oc
->
waô_°©e
 = 0;

139 i‡(
¥oc
 !
cuºít
) {

140 
	`as£π
(
¥oc
->
pid
 >
	`∂s_ªad
(
l˝u_cou¡
));

141 
	`sched_˛ass_íqueue
(
¥oc
);

145 
	`w¨n
("wakeupÑunnableÖrocess.\n");

148 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

149 
	}
}

151 
	~<vmm.h
>

153 
	#MT_SUPPORT


	)

156 
	$scheduÀ
() {

157 
boﬁ
 
öå_Êag
;

158 
¥oc_°ru˘
 *
√xt
;

159 #i‚de‡
MT_SUPPORT


160 
li°_íåy_t
 
hód
;

161 
œpic_id
 = 
	`∂s_ªad
(lapic_id);

164 
	`loˇl_öå_ßve
(
öå_Êag
);

165 
l˝u_cou¡
 = 
	`∂s_ªad
(lcpu_count);

167 
cuºít
->
√ed_ªsched
 = 0;

168 #i‚de‡
MT_SUPPORT


169 i‡(
cuºít
->
mm
)

171 
	`as£π
(
cuºít
->
mm
->
œpic
 =
œpic_id
);

172 
cuºít
->
mm
->
œpic
 = -1;

175 i‡(
cuºít
->
°©e
 =
PROC_RUNNABLE
 && cuºít->
pid
 >
l˝u_cou¡
) {

176 
	`sched_˛ass_íqueue
(
cuºít
);

178 #i‚de‡
MT_SUPPORT


179 
	`li°_öô
(&
hód
);

182 
√xt
 = 
	`sched_˛ass_pick_√xt
();

183 i‡(
√xt
 !
NULL
Ë
	`sched_˛ass_dequeue
(next);

185 i‡(
√xt
 &&Çext->
mm
 &&Çext->mm->
œpic
 != -1)

187 
	`li°_add
(&
hód
, &(
√xt
->
run_lök
));

191 
li°_íåy_t
 *
cur
;

192 (
cur
 = 
	`li°_√xt
(&
hód
)) != &head)

194 
	`li°_dñ_öô
(
cur
);

195 
	`sched_˛ass_íqueue
(
	`À2¥oc
(
cur
, 
run_lök
));

202 
√xt
 = 
	`sched_˛ass_pick_√xt
();

203 i‡(
√xt
 !
NULL
)

204 
	`sched_˛ass_dequeue
(
√xt
);

206 i‡(
√xt
 =
NULL
) {

207 
√xt
 = 
idÀ¥oc
;

209 
√xt
->
runs
 ++;

211 i‡(
sched_cﬁÀ˘_öfo
) {

212 
l˝u_cou¡
 = 
	`∂s_ªad
(lcpu_count);

213 
l˝u_idx
 = 
	`∂s_ªad
(lcpu_idx);

214 
loc
 = 
sched_öfo_hód
[
l˝u_idx
];

215 
¥ev
 = 
sched_öfo_pid
[
loc
*
l˝u_cou¡
 + 
l˝u_idx
];

216 i‡(
√xt
->
pid
 =
¥ev
)

217 
sched_öfo_times
[
loc
*
l˝u_cou¡
 + 
l˝u_idx
] ++;

219 
sched_öfo_hód
[
l˝u_idx
] ++;

220 i‡(
sched_öfo_hód
[
l˝u_idx
] >
PGSIZE
 / (
uöt16_t
Ë/ 
l˝u_cou¡
)

221 
sched_öfo_hód
[
l˝u_idx
] = 0;

222 
loc
 = 
sched_öfo_hód
[
l˝u_idx
];

223 
uöt16_t
 
¥ev_pid
 = 
sched_öfo_pid
[
loc
*
l˝u_cou¡
 + 
l˝u_idx
];

224 
uöt16_t
 
¥ev_times
 = 
sched_öfo_times
[
loc
*
l˝u_cou¡
 + 
l˝u_idx
];

225 i‡(
¥ev_times
 > 0 && 
¥ev_pid
 >
l˝u_cou¡
 + 2)

226 
sched_¶i˚s
[
l˝u_idx
][
¥ev_pid
 % 
SLICEPOOL_SIZE
] +
¥ev_times
;

227 
sched_öfo_pid
[
loc
*
l˝u_cou¡
 + 
l˝u_idx
] = 
√xt
->
pid
;

228 
sched_öfo_times
[
loc
*
l˝u_cou¡
 + 
l˝u_idx
] = 1;

231 #i‚de‡
MT_SUPPORT


232 
	`as£π
(!
√xt
->
mm
 ||Çext->mm->
œpic
 == -1);

233 i‡(
√xt
->
mm
)

234 
√xt
->
mm
->
œpic
 = 
œpic_id
;

236 i‡(
√xt
 !
cuºít
) {

237 
	`¥oc_run
(
√xt
);

240 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

241 
	}
}

244 
	$add_timî
(
timî_t
 *
timî
) {

245 
boﬁ
 
öå_Êag
;

246 
	`loˇl_öå_ßve
(
öå_Êag
);

248 
	`as£π
(
timî
->
expúes
 > 0 &&Åimî->
¥oc
 !
NULL
);

249 
	`as£π
(
	`li°_em±y
(&(
timî
->
timî_lök
)));

250 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&
timî_li°
);

251 
À
 !&
timî_li°
) {

252 
timî_t
 *
√xt
 = 
	`À2timî
(
À
, 
timî_lök
);

253 i‡(
timî
->
expúes
 < 
√xt
->expires) {

254 
√xt
->
expúes
 -
timî
->expires;

257 
timî
->
expúes
 -
√xt
->expires;

258 
À
 = 
	`li°_√xt
(le);

260 
	`li°_add_bef‹e
(
À
, &(
timî
->
timî_lök
));

262 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

263 
	}
}

266 
	$dñ_timî
(
timî_t
 *
timî
) {

267 
boﬁ
 
öå_Êag
;

268 
	`loˇl_öå_ßve
(
öå_Êag
);

270 i‡(!
	`li°_em±y
(&(
timî
->
timî_lök
))) {

271 i‡(
timî
->
expúes
 != 0) {

272 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&(
timî
->
timî_lök
));

273 i‡(
À
 !&
timî_li°
) {

274 
timî_t
 *
√xt
 = 
	`À2timî
(
À
, 
timî_lök
);

275 
√xt
->
expúes
 +
timî
->expires;

278 
	`li°_dñ_öô
(&(
timî
->
timî_lök
));

281 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

282 
	}
}

285 
	$run_timî_li°
() {

286 
boﬁ
 
öå_Êag
;

287 
	`loˇl_öå_ßve
(
öå_Êag
);

289 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&
timî_li°
);

290 i‡(
À
 !&
timî_li°
) {

291 
timî_t
 *
timî
 = 
	`À2timî
(
À
, 
timî_lök
);

292 
	`as£π
(
timî
->
expúes
 != 0);

293 
timî
->
expúes
 --;

294 
timî
->
expúes
 == 0) {

295 
À
 = 
	`li°_√xt
(le);

296 
¥oc_°ru˘
 *
¥oc
 = 
timî
->proc;

297 i‡(
¥oc
->
waô_°©e
 != 0) {

298 
	`as£π
(
¥oc
->
waô_°©e
 & 
WT_INTERRUPTED
);

301 
	`w¨n
("¥o˚s†%d'†waô_°©ê=0.\n", 
¥oc
->
pid
);

303 
	`wakeup_¥oc
(
¥oc
);

304 
	`dñ_timî
(
timî
);

305 i‡(
À
 =&
timî_li°
) {

308 
timî
 = 
	`À2timî
(
À
, 
timî_lök
);

311 
	`sched_˛ass_¥oc_tick
(
cuºít
);

313 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

314 
	}
}

	@kern-ucore/schedule/sched.h

1 #i‚de‡
__KERN_SCHEDULE_SCHED_H__


2 
	#__KERN_SCHEDULE_SCHED_H__


	)

4 
	~<ty≥s.h
>

5 
	~<li°.h
>

7 
	g¥oc_°ru˘
;

10 
	mexpúes
;

11 
¥oc_°ru˘
 *
	m¥oc
;

12 
li°_íåy_t
 
	mtimî_lök
;

13 } 
	ttimî_t
;

15 
	#À2timî
(
À
, 
membî
) \

16 
	`to_°ru˘
((
À
), 
timî_t
, 
membî
)

	)

18 
ölöe
 
timî_t
 *

19 
	$timî_öô
(
timî_t
 *
timî
, 
¥oc_°ru˘
 *
¥oc
, 
expúes
) {

20 
timî
->
expúes
 =Éxpires;

21 
timî
->
¥oc
 =Öroc;

22 
	`li°_öô
(&(
timî
->
timî_lök
));

23  
timî
;

24 
	}
}

26 
	grun_queue
;

31 
	ssched_˛ass
 {

33 c⁄° *
	m«me
;

35 (*
	möô
)(
run_queue
 *
	mrq
);

37 (*
	míqueue
)(
run_queue
 *
	mrq
, 
¥oc_°ru˘
 *
	m¥oc
);

39 (*
	mdequeue
)(
run_queue
 *
	mrq
, 
¥oc_°ru˘
 *
	m¥oc
);

41 
	m¥oc_°ru˘
 *(*
	mpick_√xt
)(
run_queue
 *
	mrq
);

43 (*
	m¥oc_tick
)(
run_queue
 *
	mrq
, 
¥oc_°ru˘
 *
	m¥oc
);

53 
	srun_queue
 {

54 
li°_íåy_t
 
	mrun_li°
;

55 
	m¥oc_num
;

56 
	mmax_time_¶i˚
;

57 
li°_íåy_t
 
	mrq_lök
;

60 
	#À2rq
(
À
, 
membî
) \

61 
	`to_°ru˘
((
À
), 
run_queue
, 
membî
)

	)

63 
sched_öô
();

64 
wakeup_¥oc
(
¥oc_°ru˘
 *
¥oc
);

65 
scheduÀ
();

66 
add_timî
(
timî_t
 *
timî
);

67 
dñ_timî
(
timî_t
 *
timî
);

68 
run_timî_li°
();

	@kern-ucore/schedule/sched_MLFQ.c

1 
	~<ty≥s.h
>

2 
	~<li°.h
>

3 
	~<¥oc.h
>

4 
	~<as£π.h
>

5 
	~<sched.h
>

6 
	~<sched_RR.h
>

7 
	~<sched_MLFQ.h
>

9 
sched_˛ass
 *
	gsched_˛ass
;

12 
	$MLFQ_öô
(
run_queue
 *
rq
) {

13 
sched_˛ass
 = &
RR_sched_˛ass
;

14 
li°_íåy_t
 *
li°
 = &(
rq
->
rq_lök
), *
À
 =Üist;

16 
sched_˛ass
->
	`öô
(
	`À2rq
(
À
, 
rq_lök
));

17 
À
 = 
	`li°_√xt
(le);

18 } 
À
 !
li°
);

19 
	}
}

22 
	$MLFQ_íqueue
(
run_queue
 *
rq
, 
¥oc_°ru˘
 *
¥oc
) {

23 
	`as£π
(
	`li°_em±y
(&(
¥oc
->
run_lök
)));

24 
run_queue
 *
ƒq
 = 
rq
;

25 i‡(
¥oc
->
rq
 !
NULL
 &&Öroc->
time_¶i˚
 == 0) {

26 
ƒq
 = 
	`À2rq
(
	`li°_√xt
(&(
¥oc
->
rq
->
rq_lök
)),Ñq_link);

27 i‡(
ƒq
 =
rq
) {

28 
ƒq
 = 
¥oc
->
rq
;

31 
sched_˛ass
->
	`íqueue
(
ƒq
, 
¥oc
);

32 
	}
}

35 
	$MLFQ_dequeue
(
run_queue
 *
rq
, 
¥oc_°ru˘
 *
¥oc
) {

36 
	`as£π
(!
	`li°_em±y
(&(
¥oc
->
run_lök
)));

37 
sched_˛ass
->
	`dequeue
(
¥oc
->
rq
,Öroc);

38 
	}
}

40 
¥oc_°ru˘
 *

41 
	$MLFQ_pick_√xt
(
run_queue
 *
rq
) {

42 
¥oc_°ru˘
 *
√xt
;

43 
li°_íåy_t
 *
li°
 = &(
rq
->
rq_lök
), *
À
 =Üist;

45 i‡((
√xt
 = 
sched_˛ass
->
	`pick_√xt
(
	`À2rq
(
À
, 
rq_lök
))Ë!
NULL
) {

48 
À
 = 
	`li°_√xt
(le);

49 } 
À
 !
li°
);

50  
√xt
;

51 
	}
}

54 
	$MLFQ_¥oc_tick
(
run_queue
 *
rq
, 
¥oc_°ru˘
 *
¥oc
) {

55 
sched_˛ass
->
	`¥oc_tick
(
¥oc
->
rq
,Öroc);

56 
	}
}

58 
sched_˛ass
 
	gMLFQ_sched_˛ass
 = {

59 .
«me
 = "MLFQ_scheduler",

60 .
	göô
 = 
MLFQ_öô
,

61 .
	gíqueue
 = 
MLFQ_íqueue
,

62 .
	gdequeue
 = 
MLFQ_dequeue
,

63 .
	gpick_√xt
 = 
MLFQ_pick_√xt
,

64 .
	g¥oc_tick
 = 
MLFQ_¥oc_tick
,

	@kern-ucore/schedule/sched_MLFQ.h

1 #i‚de‡
__KERN_SCHEDULE_SCHED_MLFQ_H__


2 
	#__KERN_SCHEDULE_SCHED_MLFQ_H__


	)

4 
	~<sched.h
>

6 
sched_˛ass
 
MLFQ_sched_˛ass
;

	@kern-ucore/schedule/sched_RR.c

1 
	~<ty≥s.h
>

2 
	~<li°.h
>

3 
	~<¥oc.h
>

4 
	~<as£π.h
>

5 
	~<sched_RR.h
>

8 
	$RR_öô
(
run_queue
 *
rq
) {

9 
	`li°_öô
(&(
rq
->
run_li°
));

10 
rq
->
¥oc_num
 = 0;

11 
	}
}

14 
	$RR_íqueue
(
run_queue
 *
rq
, 
¥oc_°ru˘
 *
¥oc
) {

15 
	`as£π
(
	`li°_em±y
(&(
¥oc
->
run_lök
)));

16 
	`li°_add_bef‹e
(&(
rq
->
run_li°
), &(
¥oc
->
run_lök
));

17 i‡(
¥oc
->
time_¶i˚
 =0 ||Öroc->time_¶i˚ > 
rq
->
max_time_¶i˚
) {

18 
¥oc
->
time_¶i˚
 = 
rq
->
max_time_¶i˚
;

20 
¥oc
->
rq
 =Ñq;

21 
rq
->
¥oc_num
 ++;

22 
	}
}

25 
	$RR_dequeue
(
run_queue
 *
rq
, 
¥oc_°ru˘
 *
¥oc
) {

26 
	`as£π
(!
	`li°_em±y
(&(
¥oc
->
run_lök
)Ë&&Öroc->
rq
 ==Ñq);

27 
	`li°_dñ_öô
(&(
¥oc
->
run_lök
));

28 
rq
->
¥oc_num
 --;

29 
	}
}

31 
¥oc_°ru˘
 *

32 
	$RR_pick_√xt
(
run_queue
 *
rq
) {

33 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&(
rq
->
run_li°
));

34 i‡(
À
 !&(
rq
->
run_li°
)) {

35  
	`À2¥oc
(
À
, 
run_lök
);

37  
NULL
;

38 
	}
}

41 
	$RR_¥oc_tick
(
run_queue
 *
rq
, 
¥oc_°ru˘
 *
¥oc
) {

42 i‡(
¥oc
->
time_¶i˚
 > 0) {

43 
¥oc
->
time_¶i˚
 --;

45 i‡(
¥oc
->
time_¶i˚
 == 0) {

46 
¥oc
->
√ed_ªsched
 = 1;

48 
	}
}

50 
sched_˛ass
 
	gRR_sched_˛ass
 = {

51 .
«me
 = "RR_scheduler",

52 .
	göô
 = 
RR_öô
,

53 .
	gíqueue
 = 
RR_íqueue
,

54 .
	gdequeue
 = 
RR_dequeue
,

55 .
	gpick_√xt
 = 
RR_pick_√xt
,

56 .
	g¥oc_tick
 = 
RR_¥oc_tick
,

	@kern-ucore/schedule/sched_RR.h

1 #i‚de‡
__KERN_SCHEDULE_SCHED_RR_H__


2 
	#__KERN_SCHEDULE_SCHED_RR_H__


	)

4 
	~<sched.h
>

6 
sched_˛ass
 
RR_sched_˛ass
;

	@kern-ucore/sync/event.c

1 
	~<ty≥s.h
>

2 
	~<waô.h
>

3 
	~<¥oc.h
>

4 
	~<vmm.h
>

5 
	~<ùc.h
>

6 
	~<sync.h
>

7 
	~<as£π.h
>

8 
	~<îr‹.h
>

9 
	~<˛ock.h
>

10 
	~<evít.h
>

12 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

13 
	#idÀ¥oc
 (
	`∂s_ªad
(
idÀ¥oc
))

	)

16 
	$evít_box_öô
(
evít_t
 *
evít_box
) {

17 
	`waô_queue_öô
(&(
evít_box
->
waô_queue
));

18 
	}
}

20 
uöt32_t


21 
	$£nd_evít
(
¥oc_°ru˘
 *
¥oc
, 
timî_t
 *
timî
) {

22 
boﬁ
 
öå_Êag
;

23 
	`loˇl_öå_ßve
(
öå_Êag
);

24 
waô_t
 
__waô
, *
waô
 = &__wait;

25 
waô_queue_t
 *
waô_queue
 = &(
¥oc
->
evít_box
.wait_queue);

26 
	`waô_cuºít_£t
(
waô_queue
, 
waô
, 
WT_EVENT_SEND
);

27 
	`ùc_add_timî
(
timî
);

28 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

30 
	`scheduÀ
();

32 
	`loˇl_öå_ßve
(
öå_Êag
);

33 
	`ùc_dñ_timî
(
timî
);

34 
	`waô_cuºít_dñ
(
waô_queue
, 
waô
);

35 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

37 i‡(
waô
->
wakeup_Êags
 !
WT_EVENT_SEND
) {

38  
waô
->
wakeup_Êags
;

41 
	}
}

44 
	$ùc_evít_£nd
(
pid
, 
evít
, 
timeout
) {

45 
¥oc_°ru˘
 *
¥oc
;

46 i‡((
¥oc
 = 
	`föd_¥oc
(
pid
)Ë=
NULL
 ||Öroc->
°©e
 =
PROC_ZOMBIE
) {

47  -
E_INVAL
;

49 i‡(
¥oc
 =
cuºít
 ||Öro¯=
idÀ¥oc
 ||Öro¯=
öô¥oc
 ||Öro¯=
ksw≠d
) {

50  -
E_INVAL
;

52 i‡(
¥oc
->
waô_°©e
 =
WT_EVENT_RECV
) {

53 
	`wakeup_¥oc
(
¥oc
);

55 
cuºít
->
evít_box
.
evít
 =Évent;

57 
ßved_ticks
;

58 
timî_t
 
__timî
, *
timî
 = 
	`ùc_timî_öô
(
timeout
, &
ßved_ticks
, &__timer);

60 
uöt32_t
 
Êags
;

61 i‡((
Êags
 = 
	`£nd_evít
(
¥oc
, 
timî
)) == 0) {

64 
	`as£π
(
Êags
 =
WT_INTERRUPTED
);

65  
	`ùc_check_timeout
(
timeout
, 
ßved_ticks
);

66 
	}
}

69 
	$ªcv_evít
(*
pid_°‹e
, *
evít_°‹e
, 
timî_t
 *
timî
) {

70 
boﬁ
 
öå_Êag
;

71 
	`loˇl_öå_ßve
(
öå_Êag
);

72 
waô_queue_t
 *
waô_queue
 = &(
cuºít
->
evít_box
.wait_queue);

73 i‡(
	`waô_queue_em±y
(
waô_queue
)) {

74 
cuºít
->
°©e
 = 
PROC_SLEEPING
;

75 
cuºít
->
waô_°©e
 = 
WT_EVENT_RECV
;

76 
	`ùc_add_timî
(
timî
);

77 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

79 
	`scheduÀ
();

81 
	`loˇl_öå_ßve
(
öå_Êag
);

82 
	`ùc_dñ_timî
(
timî
);

85 
ªt
 = -1;

87 
waô_t
 *
waô
;

88 i‡((
waô
 = 
	`waô_queue_fú°
(
waô_queue
)Ë!
NULL
) {

89 
¥oc_°ru˘
 *
¥oc
 = 
waô
->proc;

90 *
pid_°‹e
 = 
¥oc
->
pid
, *
evít_°‹e
 =Öroc->
evít_box
.
evít
, 
ªt
 = 0;

91 
	`wakeup_waô
(
waô_queue
, 
waô
, 
WT_EVENT_SEND
, 1);

93 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

94  
ªt
;

95 
	}
}

98 
	$ùc_evít_ªcv
(*
pid_°‹e
, *
evít_°‹e
, 
timeout
) {

99 i‡(
evít_°‹e
 =
NULL
) {

100  -
E_INVAL
;

103 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

104 i‡(
pid_°‹e
 !
NULL
) {

105 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
pid_°‹e
, (), 1)) {

106  -
E_INVAL
;

109 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
evít_°‹e
, (), 1)) {

110  -
E_INVAL
;

113 
ßved_ticks
;

114 
timî_t
 
__timî
, *
timî
 = 
	`ùc_timî_öô
(
timeout
, &
ßved_ticks
, &__timer);

116 
pid
, 
evít
, 
ªt
;

117 i‡((
ªt
 = 
	`ªcv_evít
(&
pid
, &
evít
, 
timî
)) == 0) {

118 
	`lock_mm
(
mm
);

120 
ªt
 = -
E_INVAL
;

121 i‡(
pid_°‹e
 =
NULL
 || 
	`c›y_to_u£r
(
mm
,Öid_°‹e, &
pid
, ())) {

122 i‡(
	`c›y_to_u£r
(
mm
, 
evít_°‹e
, &
evít
, ())) {

123 
ªt
 = 0;

127 
	`u∆ock_mm
(
mm
);

128  
ªt
;

130  
	`ùc_check_timeout
(
timeout
, 
ßved_ticks
);

131 
	}
}

	@kern-ucore/sync/event.h

1 #i‚de‡
__KERN_SYNC_EVENT_H__


2 
	#__KERN_SYNC_EVENT_H__


	)

4 
	~<ty≥s.h
>

5 
	~<waô.h
>

8 
	mevít
;

9 
waô_queue_t
 
	mwaô_queue
;

10 } 
	tevít_t
;

12 
evít_box_öô
(
evít_t
 *
evít_box
);

14 
ùc_evít_£nd
(
pid
, 
evít
, 
timeout
);

15 
ùc_evít_ªcv
(*
pid_°‹e
, *
evít_°‹e
, 
timeout
);

	@kern-ucore/sync/ipc.h

1 #i‚de‡
__KERN_SYNC_IPC_H__


2 
	#__KERN_SYNC_IPC_H__


	)

4 
	~<˛ock.h
>

5 
	~<sync.h
>

6 
	~<¥oc.h
>

7 
	~<sched.h
>

8 
	~<îr‹.h
>

10 
ölöe
 

11 
	$ùc_add_timî
(
timî_t
 *
timî
) {

12 i‡(
timî
 !
NULL
) {

13 
	`add_timî
(
timî
);

15 
	}
}

17 
ölöe
 

18 
	$ùc_dñ_timî
(
timî_t
 *
timî
) {

19 i‡(
timî
 !
NULL
) {

20 
	`dñ_timî
(
timî
);

22 
	}
}

24 
ölöe
 
timî_t
 *

25 
	$ùc_timî_öô
(
timeout
, *
ßved_ticks
, 
timî_t
 *
timî
) {

26 i‡(
timeout
 != 0) {

27 *
ßved_ticks
 = 
ticks
;

28  
	`timî_öô
(
timî
, 
	`∂s_ªad
(
cuºít
), 
timeout
);

30  
NULL
;

31 
	}
}

33 
ölöe
 

34 
	$ùc_check_timeout
(
timeout
, 
ßved_ticks
) {

35 i‡(
timeout
 != 0) {

36 
dñt
 = ()(
ticks
 - 
ßved_ticks
);

37 i‡(
dñt
 >
timeout
) {

38  -
E_TIMEOUT
;

42 
	}
}

	@kern-ucore/sync/mbox.c

1 
	~<ty≥s.h
>

2 
	~<mmu.h
>

3 
	~<pmm.h
>

4 
	~<vmm.h
>

5 
	~<ùc.h
>

6 
	~<¥oc.h
>

7 
	~<¶ab.h
>

8 
	~<£m.h
>

9 
	~<mbox.h
>

10 
	~<mboxbuf.h
>

11 
	~<waô.h
>

12 
	~<li°.h
>

13 
	~<îr‹.h
>

14 
	~<as£π.h
>

15 
	~<˛ock.h
>

16 
	~<°rög.h
>

18 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

20 
	smsg_£g
 {

21 
msg_£g
 *
	m√xt
;

24 
	smsg_msg
 {

25 
	mpid
;

26 
	mbyãs
;

27 
msg_£g
* 
	m√xt
;

28 
li°_íåy_t
 
	mmsg_lök
;

31 
	#À2msg
(
À
, 
membî
) \

32 
	`to_°ru˘
((
À
), 
msg_msg
, 
membî
)

	)

34 
	embox_°©e
 {

35 
	mCLOSED
 = 0,

36 
	mOPENED
 = 1,

37 
	mCLOSING
 = 2,

40 
	smsg_mbox
 {

41 
	mid
;

42 
	möu£
;

43 
mbox_°©e
 
	m°©e
;

44 
	mmax_¶Ÿs
, 
	m¶Ÿs
;

45 
li°_íåy_t
 
	mmsg_lök
;

46 
waô_queue_t
 
	m£ndîs
;

47 
waô_queue_t
 
	mª˚ivîs
;

50 
	#À2mbox
(
À
, 
membî
) \

51 
	`to_°ru˘
((
À
), 
msg_mbox
, 
membî
)

	)

53 
	#MAX_MBOX_NUM
 8192

	)

54 
	#MBOX_P_PAGE
 (
PGSIZE
 / (
msg_mbox
))

	)

55 
	#MAX_MBOX_PAGES
 ((
MAX_MBOX_NUM
 + 
MBOX_P_PAGE
 - 1Ë/ MBOX_P_PAGE)

	)

56 
	#MAX_MSG_DATALEN
 (512 - (
msg_msg
))

	)

58 
msg_mbox
 *
	gmbox_m≠
[
MAX_MBOX_PAGES
];

59 
li°_íåy_t
 
	g‰ì_mbox_li°
;

60 
£m≠h‹e_t
 
	g£m_mbox_m≠
;

63 
	$mbox_öô
() {

64 
i
;

65 
i
 = 0; i < 
MAX_MBOX_PAGES
; i ++) {

66 
mbox_m≠
[
i
] = 
NULL
;

68 
	`£m_öô
(&
£m_mbox_m≠
, 1);

69 
	`li°_öô
(&
‰ì_mbox_li°
);

70 
	`°©ic_as£π
(
MBOX_P_PAGE
 != 0);

71 
	}
}

73 
msg_mbox
 *

74 
	$gë_mbox
(
id
) {

75 i‡(
id
 >0 && id < 
MAX_MBOX_NUM
) {

76 
i
 = 
id
 / 
MBOX_P_PAGE
, 
j
 = id % MBOX_P_PAGE;

77 i‡(
mbox_m≠
[
i
] !
NULL
) {

78 
msg_mbox
 *
mbox
 = 
mbox_m≠
[
i
] + 
j
;

79 i‡(
mbox
->
°©e
 =
OPENED
) {

80  
mbox
;

84  
NULL
;

85 
	}
}

88 
	$mbox_‰ì
(
msg_mbox
 *
mbox
) {

89 
	`as£π
(
mbox
->
°©e
 =
CLOSING
 && mbox->
öu£
 == 0);

90 
	`as£π
(
	`li°_em±y
(&(
mbox
->
msg_lök
)));

91 
	`as£π
(
	`waô_queue_em±y
(&(
mbox
->
£ndîs
)));

92 
	`as£π
(
	`waô_queue_em±y
(&(
mbox
->
ª˚ivîs
)));

93 
mbox
->
°©e
 = 
CLOSED
;

94 
mbox
->
max_¶Ÿs
 = mbox->
¶Ÿs
 = 0;

95 
	`li°_add_bef‹e
(&(
‰ì_mbox_li°
), &(
mbox
->
msg_lök
));

96 
	}
}

99 
	$add_msg
(
msg_mbox
 *
mbox
, 
msg_msg
 *
msg
, 
boﬁ
 
≠≥nd
) {

100 
	`as£π
(
mbox
->
°©e
 =
OPENED
);

101 
mbox
->
¶Ÿs
 ++;

102 
li°_íåy_t
 *
li°
 = &(
mbox
->
msg_lök
), *
À
 = &(
msg
->msg_link);

103 i‡(
≠≥nd
) {

104 
	`li°_add_bef‹e
(
li°
, 
À
);

107 
	`li°_add_a·î
(
li°
, 
À
);

109 
	`wakeup_fú°
(&(
mbox
->
ª˚ivîs
), 
WT_MBOX_RECV
, 1);

110 
	}
}

113 
	$pick_msg
(
msg_mbox
 *
mbox
, 
size_t
 
max_byãs
, 
msg_msg
 **
msg_°‹e
) {

114 
	`as£π
(
mbox
->
°©e
 =
OPENED
 && mbox->
¶Ÿs
 > 0);

115 
	`as£π
(!
	`li°_em±y
(&(
mbox
->
msg_lök
)));

116 
msg_msg
 *
msg
 = 
	`À2msg
(
	`li°_√xt
(&(
mbox
->
msg_lök
)), msg_link);

117 i‡(
max_byãs
 < 
msg
->
byãs
) {

118  -
E_TOO_BIG
;

120 
mbox
->
¶Ÿs
 --, *
msg_°‹e
 = 
msg
;

121 
	`li°_dñ
(&(
msg
->
msg_lök
));

122 
	`wakeup_fú°
(&(
mbox
->
£ndîs
), 
WT_MBOX_SEND
, 1);

124 
	}
}

126 
msg_mbox
 *

127 
	$√w_mbox
(
max_¶Ÿs
) {

128 
boﬁ
 
öå_Êag
;

129 
msg_mbox
 *
mbox
 = 
NULL
;

130 
	`loˇl_öå_ßve
(
öå_Êag
);

131 i‡(
	`li°_em±y
(&
‰ì_mbox_li°
)) {

132 
i
, 
id
;

133 
i
 = 0; i < 
MAX_MBOX_PAGES
; i ++) {

134 i‡(
mbox_m≠
[
i
] =
NULL
) {

138 i‡(
i
 =
MAX_MBOX_PAGES
) {

139 
out
;

141 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

143 
Page
 *
∑ge
 = 
	`Æloc_∑ge
();

145 
	`loˇl_öå_ßve
(
öå_Êag
);

146 i‡(
∑ge
 !
NULL
) {

147 
id
 = 
i
 * 
MBOX_P_PAGE
;

148 
mbox
 = 
mbox_m≠
[
i
] = (
msg_mbox
 *)
	`∑ge2kva
(
∑ge
);

149 
i
 = 0; i < 
MBOX_P_PAGE
; i ++, 
id
 ++, 
mbox
 ++) {

150 
mbox
->
id
 = id, mbox->
öu£
 = 0;

151 
mbox
->
°©e
 = 
CLOSED
;

152 
mbox
->
max_¶Ÿs
 = mbox->
¶Ÿs
 = 0;

153 
	`li°_öô
(&(
mbox
->
msg_lök
));

154 
	`waô_queue_öô
(&(
mbox
->
£ndîs
));

155 
	`waô_queue_öô
(&(
mbox
->
ª˚ivîs
));

156 
	`li°_add_bef‹e
(&(
‰ì_mbox_li°
), &(
mbox
->
msg_lök
));

159 i‡(
	`li°_em±y
(&
‰ì_mbox_li°
)) {

160 
out
;

163 
	`as£π
(!
	`li°_em±y
(&
‰ì_mbox_li°
));

164 
mbox
 = 
	`À2mbox
(
	`li°_√xt
(&
‰ì_mbox_li°
), 
msg_lök
);

165 
	`li°_dñ_öô
(&(
mbox
->
msg_lök
));

166 
mbox
->
°©e
 = 
OPENED
;

167 
mbox
->
max_¶Ÿs
 = max_slots;

169 
out
:

170 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

171  
mbox
;

172 
	}
}

175 
	$ùc_mbox_öô
(
max_¶Ÿs
) {

176 i‡(
max_¶Ÿs
 =0 || max_¶Ÿ†> 
MAX_MSG_SLOTS
) {

177  -
E_INVAL
;

179 
ªt
 = -
E_NO_MEM
;

180 
msg_mbox
 *
mbox
;

181 
	`down
(&
£m_mbox_m≠
);

182 i‡((
mbox
 = 
	`√w_mbox
(
max_¶Ÿs
)Ë!
NULL
) {

183 
ªt
 = 
mbox
->
id
;

185 
	`up
(&
£m_mbox_m≠
);

186  
ªt
;

187 
	}
}

190 
	$‰ì_£g
(
msg_£g
 *
£g
) {

191 i‡(
£g
->
√xt
 !
NULL
) {

192 
	`‰ì_£g
(
£g
->
√xt
);

194 
	`k‰ì
(
£g
);

195 
	}
}

198 
	$‰ì_msg
(
msg_msg
 *
msg
) {

199 i‡(
msg
->
√xt
 !
NULL
) {

200 
	`‰ì_£g
(
msg
->
√xt
);

202 
	`k‰ì
(
msg
);

203 
	}
}

205 
msg_msg
 *

206 
	$lﬂd_msg
(c⁄° *
§c
, 
size_t
 
Àn
) {

207 
size_t
 
Æí
, 
byãs
 = 
Àn
;

208 i‡((
Æí
 = 
Àn
Ë> 
MAX_MSG_DATALEN
) {

209 
Æí
 = 
MAX_MSG_DATALEN
;

211 
msg_msg
 *
msg
;

212 i‡((
msg
 = 
	`kmÆloc
((
msg_msg
Ë+ 
Æí
)Ë=
NULL
) {

213  
NULL
;

216 
msg_£g
 **
£gp
 = &(
msg
->
√xt
);

218 *
d°
 = 
msg
 + 1;

219 
öside
;

221 
Àn
 > 0) {

222 i‡((
Æí
 = 
Àn
Ë> 
MAX_MSG_DATALEN
) {

223 
Æí
 = 
MAX_MSG_DATALEN
;

225 
msg_£g
 *
£g
;

226 i‡((
£g
 = 
	`kmÆloc
((
msg_£g
Ë+ 
Æí
)Ë=
NULL
) {

227 
Áûed
;

229 *
£gp
 = 
£g
, seg∞&(£g->
√xt
);

230 
d°
 = 
£g
 + 1;

231 
öside
:

232 
	`c›y_‰om_u£r
 (
cuºít
->
mm
, 
d°
, 
§c
, 
Æí
, 0);

233 
Àn
 -
Æí
, 
§c
 = ((*)src) +álen;

234 *
£gp
 = 
NULL
;

237 
msg
->
byãs
 = bytes;

238 
msg
->
pid
 = 
cuºít
->pid;

239  
msg
;

241 
Áûed
:

242 
	`‰ì_msg
(
msg
);

243  
NULL
;

244 
	}
}

246 
uöt32_t


247 
	$£nd_msg
(
msg_mbox
 *
mbox
, 
msg_msg
 *
msg
, 
timî_t
 *
timî
) {

248 
uöt32_t
 
ªt
;

249 
boﬁ
 
öå_Êag
;

250 
	`loˇl_öå_ßve
(
öå_Êag
);

251 
mbox
->
öu£
 ++;

252 
waô_t
 
__waô
, *
waô
 = &__wait;

253 
mbox
->
max_¶Ÿs
 <mbox->
¶Ÿs
) {

254 
	`as£π
(
mbox
->
°©e
 =
OPENED
);

255 
	`waô_cuºít_£t
(&(
mbox
->
£ndîs
), 
waô
, 
WT_MBOX_SEND
);

256 
	`ùc_add_timî
(
timî
);

257 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

259 
	`scheduÀ
();

261 
	`loˇl_öå_ßve
(
öå_Êag
);

262 
	`ùc_dñ_timî
(
timî
);

263 
	`waô_cuºít_dñ
(&(
mbox
->
£ndîs
), 
waô
);

264 i‡(
mbox
->
°©e
 !
OPENED
 || 
waô
->
wakeup_Êags
 !
WT_MBOX_SEND
) {

265 i‡((
ªt
 = 
waô
->
wakeup_Êags
Ë=
WT_MBOX_SEND
) {

266 
ªt
 = 
WT_INTERRUPTED
;

268 
out
;

271 
	`as£π
(
mbox
->
°©e
 =
OPENED
 && mbox->
max_¶Ÿs
 > mbox->
¶Ÿs
);

273 
ªt
 = 0, 
	`add_msg
(
mbox
, 
msg
, 1);

275 
out
:

276 
mbox
->
öu£
 --;

277 i‡(
mbox
->
°©e
 !
OPENED
) {

278 
	`as£π
(
ªt
 !0 && 
mbox
->
°©e
 =
CLOSING
);

279 i‡(
mbox
->
öu£
 == 0) {

280 
	`mbox_‰ì
(
mbox
);

283 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

284  
ªt
;

285 
	}
}

288 
	$ùc_mbox_£nd
(
id
, 
mboxbuf
 *
buf
, 
timeout
) {

289 i‡(
	`gë_mbox
(
id
Ë=
NULL
) {

290  -
E_INVAL
;

293 
msg_msg
 *
msg
;

294 
msg_mbox
 *
mbox
;

295 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

296 
mboxbuf
 
__loˇl_buf
, *
loˇl_buf
 = &__local_buf;

298 
ªt
 = -
E_INVAL
;

300 
	`lock_mm
(
mm
);

302 i‡(
	`c›y_‰om_u£r
(
mm
, 
loˇl_buf
, 
buf
, (
mboxbuf
), 0)) {

303 
size_t
 
Àn
 = 
loˇl_buf
->len;

304 i‡(0 < 
Àn
 &&Üí <
MAX_MSG_BYTES
) {

305 *
§c
 = 
loˇl_buf
->
d©a
;

306 i‡(
	`u£r_mem_check
(
mm
, (
uöçå_t
)
§c
, 
Àn
, 0)) {

307 
ªt
 = ((
msg
 = 
	`lﬂd_msg
(
§c
, 
Àn
)Ë!
NULL
Ë? 0 : -
E_NO_MEM
;

312 
	`u∆ock_mm
(
mm
);

314 i‡(
ªt
 == 0) {

315 
ªt
 = -
E_INVAL
;

316 i‡((
mbox
 = 
	`gë_mbox
(
id
)Ë!
NULL
) {

317 
ßved_ticks
;

318 
timî_t
 
__timî
, *
timî
 = 
	`ùc_timî_öô
(
timeout
, &
ßved_ticks
, &__timer);

320 
uöt32_t
 
Êags
;

321 i‡((
Êags
 = 
	`£nd_msg
(
mbox
, 
msg
, 
timî
)) == 0) {

324 
	`as£π
(
Êags
 =
WT_INTERRUPTED
);

325 
ªt
 = 
	`ùc_check_timeout
(
timeout
, 
ßved_ticks
);

327 
	`‰ì_msg
(
msg
);

329  
ªt
;

330 
	}
}

333 
	$°‹e_msg
(
msg_msg
 *
msg
, *
d°
) {

334 
size_t
 
Æí
, 
Àn
 = 
msg
->
byãs
;

335 i‡((
Æí
 = 
Àn
Ë> 
MAX_MSG_DATALEN
) {

336 
Æí
 = 
MAX_MSG_DATALEN
;

339 
msg_£g
 *
£g
 = 
msg
->
√xt
;

341 c⁄° *
§c
 = 
msg
 + 1;

342 
öside
;

344 
Àn
 > 0) {

345 i‡((
Æí
 = 
Àn
Ë> 
MAX_MSG_DATALEN
) {

346 
Æí
 = 
MAX_MSG_DATALEN
;

348 
	`as£π
(
£g
 !
NULL
);

349 
§c
 = 
£g
 + 1, seg = seg->
√xt
;

350 
öside
:

351 
	`c›y_to_u£r
 (
cuºít
->
mm
, 
d°
, 
§c
, 
Æí
);

352 
Àn
 -
Æí
, 
d°
 = ((*)dst) +álen;

354 
	}
}

357 
	$ªcv_msg
(
msg_mbox
 *
mbox
, 
size_t
 
max_byãs
, 
msg_msg
 **
msg_°‹e
, 
timî_t
 *
timî
) {

358 
ªt
 = -1;

359 
boﬁ
 
öå_Êag
;

360 
	`loˇl_öå_ßve
(
öå_Êag
);

361 
mbox
->
öu£
 ++;

362 
waô_t
 
__waô
, *
waô
 = &__wait;

363 
mbox
->
¶Ÿs
 == 0) {

364 
	`as£π
(
mbox
->
°©e
 =
OPENED
);

365 
	`waô_cuºít_£t
(&(
mbox
->
ª˚ivîs
), 
waô
, 
WT_MBOX_RECV
);

366 
	`ùc_add_timî
(
timî
);

367 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

369 
	`scheduÀ
();

371 
	`loˇl_öå_ßve
(
öå_Êag
);

372 
	`ùc_dñ_timî
(
timî
);

373 
	`waô_cuºít_dñ
(&(
mbox
->
ª˚ivîs
), 
waô
);

374 i‡(
mbox
->
°©e
 !
OPENED
 || 
waô
->
wakeup_Êags
 !
WT_MBOX_RECV
) {

375 
out
;

378 
	`as£π
(
mbox
->
°©e
 =
OPENED
 && mbox->
¶Ÿs
 > 0);

379 
	`as£π
(!
	`li°_em±y
(&(
mbox
->
msg_lök
)));

381 i‡((
ªt
 = 
	`pick_msg
(
mbox
, 
max_byãs
, 
msg_°‹e
)) != 0) {

382 
	`wakeup_fú°
(&(
mbox
->
ª˚ivîs
), 
WT_MBOX_RECV
, 1);

385 
out
:

386 
mbox
->
öu£
 --;

387 i‡(
mbox
->
°©e
 !
OPENED
) {

388 
	`as£π
(
ªt
 !0 && 
mbox
->
°©e
 =
CLOSING
);

389 i‡(
mbox
->
öu£
 == 0) {

390 
	`mbox_‰ì
(
mbox
);

393 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

394  
ªt
;

395 
	}
}

398 
	$ùc_mbox_ªcv
(
id
, 
mboxbuf
 *
buf
, 
timeout
) {

399 i‡(
	`gë_mbox
(
id
Ë=
NULL
) {

400  -
E_INVAL
;

403 
size_t
 
size
;

404 
msg_msg
 *
msg
;

405 
msg_mbox
 *
mbox
;

406 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

407 
mboxbuf
 
__loˇl_buf
, *
loˇl_buf
 = &__local_buf;

409 
ªt
 = -
E_INVAL
;

411 
	`lock_mm
(
mm
);

413 i‡(
	`c›y_‰om_u£r
(
mm
, 
loˇl_buf
, 
buf
, (
mboxbuf
), 1)) {

414 i‡((
size
 = 
loˇl_buf
->size) > 0) {

415 *
d°
 = 
loˇl_buf
->
d©a
;

416 i‡(
	`u£r_mem_check
(
mm
, (
uöçå_t
)
d°
, 
size
, 1)) {

417 
ªt
 = 0;

422 
	`u∆ock_mm
(
mm
);

424 i‡(
ªt
 !0 || (
mbox
 = 
	`gë_mbox
(
id
)Ë=
NULL
) {

425  -
E_INVAL
;

428 
ßved_ticks
;

429 
timî_t
 
__timî
, *
timî
 = 
	`ùc_timî_öô
(
timeout
, &
ßved_ticks
, &__timer);

430 i‡((
ªt
 = 
	`ªcv_msg
(
mbox
, 
size
, &
msg
, 
timî
)) != 0) {

431 i‡(
ªt
 == -1) {

432  
	`ùc_check_timeout
(
timeout
, 
ßved_ticks
);

434  
ªt
;

437 
ªt
 = -
E_INVAL
;

439 
	`lock_mm
(
mm
);

441 
size_t
 
Àn
;

442 
loˇl_buf
->
Àn
 =Üí = 
msg
->
byãs
,Üoˇl_buf->
‰om
 = msg->
pid
;

443 i‡(
	`c›y_to_u£r
(
mm
, 
buf
, 
loˇl_buf
, (
mboxbuf
))) {

444 *
d°
 = 
loˇl_buf
->
d©a
;

445 i‡(
	`u£r_mem_check
(
mm
, (
uöçå_t
)
d°
, 
Àn
, 1)) {

446 
ªt
 = 0, 
	`°‹e_msg
(
msg
, 
d°
);

450 
	`u∆ock_mm
(
mm
);

452 i‡(
ªt
 !0 && (
mbox
 = 
	`gë_mbox
(
id
)Ë!
NULL
) {

453 
boﬁ
 
loˇl_öå
;

454 
	`loˇl_öå_ßve
(
loˇl_öå
);

456 
	`add_msg
(
mbox
, 
msg
, 0);

458 
	`loˇl_öå_ª°‹e
(
loˇl_öå
);

459  
ªt
;

461 
	`‰ì_msg
(
msg
);

462  
ªt
;

463 
	}
}

466 
	$ùc_mbox_‰ì
(
id
) {

467 
msg_mbox
 *
mbox
;

468 i‡((
mbox
 = 
	`gë_mbox
(
id
)Ë=
NULL
) {

469  -
E_INVAL
;

471 
boﬁ
 
öå_Êag
;

472 
	`loˇl_öå_ßve
(
öå_Êag
);

474 
mbox
->
°©e
 = 
CLOSING
;

476 
li°_íåy_t
 *
li°
 = &(
mbox
->
msg_lök
), *
À
;

477 (
À
 = 
	`li°_√xt
(
li°
)) !=Üist) {

478 
	`li°_dñ
(
À
);

479 
	`‰ì_msg
(
	`À2msg
(
À
, 
msg_lök
));

481 
	`wakeup_queue
(&(
mbox
->
£ndîs
), 
WT_INTERRUPTED
, 1);

482 
	`wakeup_queue
(&(
mbox
->
ª˚ivîs
), 
WT_INTERRUPTED
, 1);

484 i‡(
mbox
->
öu£
 == 0) {

485 
	`mbox_‰ì
(
mbox
);

488 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

490 
	}
}

493 
	$ùc_mbox_öfo
(
id
, 
mboxöfo
 *
öfo
) {

494 
msg_mbox
 *
mbox
;

495 i‡((
mbox
 = 
	`gë_mbox
(
id
)Ë=
NULL
) {

496  -
E_INVAL
;

499 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

500 
mboxöfo
 
__loˇl_öfo
, *
loˇl_öfo
 = &__local_info;

502 
loˇl_öfo
->
¶Ÿs
 = 
mbox
->slots;

503 
loˇl_öfo
->
max_¶Ÿs
 = 
mbox
->max_slots;

504 
loˇl_öfo
->
öu£
 = (
mbox
->inuse != 0);

505 
loˇl_öfo
->
has_£ndî
 = !
	`waô_queue_em±y
(&(
mbox
->
£ndîs
));

506 
loˇl_öfo
->
has_ª˚ivî
 = !
	`waô_queue_em±y
(&(
mbox
->
ª˚ivîs
));

508 
ªt
;

510 
	`lock_mm
(
mm
);

512 
ªt
 = (
	`c›y_to_u£r
(
mm
, 
öfo
, 
loˇl_öfo
, (
mboxöfo
))Ë? 0 : -
E_INVAL
;

514 
	`u∆ock_mm
(
mm
);

515  
ªt
;

516 
	}
}

519 
	$mbox_˛ónup
() {

520 
boﬁ
 
öå_Êag
;

521 
	`loˇl_öå_ßve
(
öå_Êag
);

523 
i
, 
j
;

524 
i
 = 0; i < 
MAX_MBOX_PAGES
; i ++) {

525 
msg_mbox
 *
mbox
;

526 i‡((
mbox
 = 
mbox_m≠
[
i
]Ë!
NULL
) {

527 
j
 = 0; j < 
MBOX_P_PAGE
; j ++, 
mbox
 ++) {

528 i‡(
mbox
->
°©e
 !
CLOSED
) {

532 i‡(
j
 !
MBOX_P_PAGE
) {

535 
mbox
 = 
mbox_m≠
[
i
];

536 
j
 = 0; j < 
MBOX_P_PAGE
; j ++, 
mbox
 ++) {

537 
	`li°_dñ
(&(
mbox
->
msg_lök
));

539 
mbox
 = 
mbox_m≠
[
i
], mbox_m≠[i] = 
NULL
;

540 
	`‰ì_∑ge
(
	`kva2∑ge
(
mbox
));

544 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

545 
	}
}

	@kern-ucore/sync/mbox.h

1 #i‚de‡
__KERN_SYNC_MBOX_H__


2 
	#__KERN_SYNC_MBOX_H__


	)

4 
	~<ty≥s.h
>

6 
mbox_öô
();

8 
	gmboxbuf
;

9 
	gmboxöfo
;

11 
ùc_mbox_öô
(
max_¶Ÿs
);

12 
ùc_mbox_£nd
(
id
, 
mboxbuf
 *
buf
, 
timeout
);

13 
ùc_mbox_ªcv
(
id
, 
mboxbuf
 *
buf
, 
timeout
);

14 
ùc_mbox_‰ì
(
id
);

15 
ùc_mbox_öfo
(
id
, 
mboxöfo
 *
öfo
);

17 
mbox_˛ónup
();

	@kern-ucore/sync/sem.c

1 
	~<ty≥s.h
>

2 
	~<waô.h
>

3 
	~<©omic.h
>

4 
	~<¶ab.h
>

5 
	~<£m.h
>

6 
	~<vmm.h
>

7 
	~<ùc.h
>

8 
	~<¥oc.h
>

9 
	~<sync.h
>

10 
	~<as£π.h
>

11 
	~<îr‹.h
>

12 
	~<˛ock.h
>

42 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

44 
	#VALID_SEMID
(
£m_id
) \

45 ((
uöçå_t
)(
£m_id
Ë< (uöçå_t)(£m_idË+ 
PBASE
)

	)

47 
	#£mid2£m
(
£m_id
) \

48 ((
£m≠h‹e_t
 *)((
uöçå_t
)(
£m_id
Ë+ 
PBASE
))

	)

50 
	#£m2£mid
(
£m
) \

51 ((
£m_t
)((
uöçå_t
)(
£m
Ë- 
PBASE
))

	)

54 
	$£m_öô
(
£m≠h‹e_t
 *
£m
, 
vÆue
) {

55 
£m
->
vÆue
 = value;

56 
£m
->
vÆid
 = 1;

57 
	`£t_£m_cou¡
(
£m
, 0);

58 
	`waô_queue_öô
(&(
£m
->
waô_queue
));

59 
	}
}

61 
__©åibuã__
 ((
noölöe
)Ë
	$__up
(
£m≠h‹e_t
 *
£m
, 
uöt32_t
 
waô_°©e
) {

62 
	`as£π
(
£m
->
vÆid
);

63 
boﬁ
 
öå_Êag
;

64 
	`loˇl_öå_ßve
(
öå_Êag
);

66 
waô_t
 *
waô
;

67 i‡((
waô
 = 
	`waô_queue_fú°
(&(
£m
->
waô_queue
))Ë=
NULL
) {

68 
£m
->
vÆue
 ++;

71 
	`as£π
(
waô
->
¥oc
->
waô_°©e
 == wait_state);

72 
	`wakeup_waô
(&(
£m
->
waô_queue
), 
waô
, 
waô_°©e
, 1);

75 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

76 
	}
}

78 
uöt32_t
 
__©åibuã__
 ((
noölöe
)Ë
	$__down
(
£m≠h‹e_t
 *
£m
, 
uöt32_t
 
waô_°©e
, 
timî_t
 *
timî
) {

79 
	`as£π
(
£m
->
vÆid
);

80 
boﬁ
 
öå_Êag
;

81 
	`loˇl_öå_ßve
(
öå_Êag
);

82 i‡(
£m
->
vÆue
 > 0) {

83 
£m
->
vÆue
 --;

84 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

87 
waô_t
 
__waô
, *
waô
 = &__wait;

88 
	`waô_cuºít_£t
(&(
£m
->
waô_queue
), 
waô
, 
waô_°©e
);

89 
	`ùc_add_timî
(
timî
);

90 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

92 
	`scheduÀ
();

94 
	`loˇl_öå_ßve
(
öå_Êag
);

95 
	`ùc_dñ_timî
(
timî
);

96 
	`waô_cuºít_dñ
(&(
£m
->
waô_queue
), 
waô
);

97 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

99 i‡(
waô
->
wakeup_Êags
 !
waô_°©e
) {

100  
waô
->
wakeup_Êags
;

103 
	}
}

106 
	$up
(
£m≠h‹e_t
 *
£m
) {

107 
	`__up
(
£m
, 
WT_KSEM
);

108 
	}
}

111 
	$down
(
£m≠h‹e_t
 *
£m
) {

112 
uöt32_t
 
Êags
 = 
	`__down
(
£m
, 
WT_KSEM
, 
NULL
);

113 
	`as£π
(
Êags
 == 0);

114 
	}
}

116 
boﬁ


117 
	$åy_down
(
£m≠h‹e_t
 *
£m
) {

118 
boﬁ
 
öå_Êag
, 
ªt
 = 0;

119 
	`loˇl_öå_ßve
(
öå_Êag
);

120 i‡(
£m
->
vÆue
 > 0) {

121 
£m
->
vÆue
 --, 
ªt
 = 1;

123 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

124  
ªt
;

125 
	}
}

128 
	$u£m_up
(
£m≠h‹e_t
 *
£m
) {

129 
	`__up
(
£m
, 
WT_USEM
);

131 
	}
}

134 
	$u£m_down
(
£m≠h‹e_t
 *
£m
, 
timeout
) {

135 
ßved_ticks
;

136 
timî_t
 
__timî
, *
timî
 = 
	`ùc_timî_öô
(
timeout
, &
ßved_ticks
, &__timer);

138 
uöt32_t
 
Êags
;

139 i‡((
Êags
 = 
	`__down
(
£m
, 
WT_USEM
, 
timî
)) == 0) {

142 
	`as£π
(
Êags
 =
WT_INTERRUPTED
);

143  
	`ùc_check_timeout
(
timeout
, 
ßved_ticks
);

144 
	}
}

146 
£m_queue_t
 *

147 
	$£m_queue_¸óã
() {

148 
£m_queue_t
 *
£m_queue
;

149 i‡((
£m_queue
 = 
	`kmÆloc
((
£m_queue_t
))Ë!
NULL
) {

150 
	`£m_öô
(&(
£m_queue
->
£m
), 1);

151 
	`£t_£m_queue_cou¡
(
£m_queue
, 0);

152 
	`li°_öô
(&(
£m_queue
->
£mu_li°
));

154  
£m_queue
;

155 
	}
}

158 
	$£m_queue_de°roy
(
£m_queue_t
 *
£m_queue
) {

159 
	`k‰ì
(
£m_queue
);

160 
	}
}

162 
£m_undo_t
 *

163 
	$£mu_¸óã
(
£m≠h‹e_t
 *
£m
, 
vÆue
) {

164 
£m_undo_t
 *
£mu
;

165 i‡((
£mu
 = 
	`kmÆloc
((
£m_undo_t
))Ë!
NULL
) {

166 i‡(
£m
 =
NULL
 && (£m = 
	`kmÆloc
((
£m≠h‹e_t
))) != NULL) {

167 
	`£m_öô
(
£m
, 
vÆue
);

169 i‡(
£m
 !
NULL
) {

170 
	`£m_cou¡_öc
(
£m
);

171 
£mu
->
£m
 = sem;

172  
£mu
;

174 
	`k‰ì
(
£mu
);

176  
NULL
;

177 
	}
}

180 
	$£mu_de°roy
(
£m_undo_t
 *
£mu
) {

181 i‡(
	`£m_cou¡_dec
(
£mu
->
£m
) == 0) {

182 
	`k‰ì
(
£mu
->
£m
);

184 
	`k‰ì
(
£mu
);

185 
	}
}

188 
	$dup_£m_queue
(
£m_queue_t
 *
to
, sem_queue_à*
‰om
) {

189 
	`as£π
(
to
 !
NULL
 && 
‰om
 != NULL);

190 
li°_íåy_t
 *
li°
 = &(
‰om
->
£mu_li°
), *
À
 =Üist;

191 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

192 
£m_undo_t
 *
£mu
 = 
	`À2£mu
(
À
, 
£mu_lök
);

193 i‡(
£mu
->
£m
->
vÆid
) {

194 i‡((
£mu
 = 
	`£mu_¸óã
(£mu->
£m
, 0)Ë=
NULL
) {

195  -
E_NO_MEM
;

197 
	`li°_add
(&(
to
->
£mu_li°
), &(
£mu
->
£mu_lök
));

201 
	}
}

204 
	$exô_£m_queue
(
£m_queue_t
 *
£m_queue
) {

205 
	`as£π
(
£m_queue
 !
NULL
 && 
	`£m_queue_cou¡
(sem_queue) == 0);

206 
li°_íåy_t
 *
li°
 = &(
£m_queue
->
£mu_li°
), *
À
 =Üist;

207 (
À
 = 
	`li°_√xt
(
li°
)) !=Üist) {

208 
	`li°_dñ
(
À
);

209 
	`£mu_de°roy
(
	`À2£mu
(
À
, 
£mu_lök
));

211 
	}
}

213 
£m_undo_t
 *

214 
	$£mu_li°_£¨ch
(
li°_íåy_t
 *
li°
, 
£m_t
 
£m_id
) {

215 i‡(
	`VALID_SEMID
(
£m_id
)) {

216 
£m≠h‹e_t
 *
£m
 = 
	`£mid2£m
(
£m_id
);

217 
li°_íåy_t
 *
À
 = 
li°
;

218 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

219 
£m_undo_t
 *
£mu
 = 
	`À2£mu
(
À
, 
£mu_lök
);

220 i‡(
£mu
->
£m
 == sem) {

221 
	`li°_dñ
(
À
);

222 i‡(
£m
->
vÆid
) {

223 
	`li°_add_a·î
(
li°
, 
À
);

224  
£mu
;

227 
	`£mu_de°roy
(
£mu
);

228  
NULL
;

233  
NULL
;

234 
	}
}

237 
	$ùc_£m_öô
(
vÆue
) {

238 
	`as£π
(
cuºít
->
£m_queue
 !
NULL
);

240 
£m_undo_t
 *
£mu
;

241 i‡((
£mu
 = 
	`£mu_¸óã
(
NULL
, 
vÆue
)) == NULL) {

242  -
E_NO_MEM
;

245 
£m_queue_t
 *
£m_queue
 = 
cuºít
->sem_queue;

246 
	`down
(&(
£m_queue
->
£m
));

247 
	`li°_add_a·î
(&(
£m_queue
->
£mu_li°
), &(
£mu
->
£mu_lök
));

248 
	`up
(&(
£m_queue
->
£m
));

249  
	`£m2£mid
(
£mu
->
£m
);

250 
	}
}

253 
	$ùc_£m_po°
(
£m_t
 
£m_id
) {

254 
	`as£π
(
cuºít
->
£m_queue
 !
NULL
);

256 
£m_undo_t
 *
£mu
;

257 
£m_queue_t
 *
£m_queue
 = 
cuºít
->sem_queue;

258 
	`down
(&(
£m_queue
->
£m
));

259 
£mu
 = 
	`£mu_li°_£¨ch
(&(
£m_queue
->
£mu_li°
), 
£m_id
);

260 
	`up
(&(
£m_queue
->
£m
));

261 i‡(
£mu
 !
NULL
) {

262  
	`u£m_up
(
£mu
->
£m
);

264  -
E_INVAL
;

265 
	}
}

268 
	$ùc_£m_waô
(
£m_t
 
£m_id
, 
timeout
) {

269 
	`as£π
(
cuºít
->
£m_queue
 !
NULL
);

271 
£m_undo_t
 *
£mu
;

272 
£m_queue_t
 *
£m_queue
 = 
cuºít
->sem_queue;

273 
	`down
(&(
£m_queue
->
£m
));

274 
£mu
 = 
	`£mu_li°_£¨ch
(&(
£m_queue
->
£mu_li°
), 
£m_id
);

275 
	`up
(&(
£m_queue
->
£m
));

276 i‡(
£mu
 !
NULL
) {

277  
	`u£m_down
(
£mu
->
£m
, 
timeout
);

279  -
E_INVAL
;

280 
	}
}

283 
	$ùc_£m_‰ì
(
£m_t
 
£m_id
) {

284 
	`as£π
(
cuºít
->
£m_queue
 !
NULL
);

286 
£m_undo_t
 *
£mu
;

287 
£m_queue_t
 *
£m_queue
 = 
cuºít
->sem_queue;

288 
	`down
(&(
£m_queue
->
£m
));

289 
£mu
 = 
	`£mu_li°_£¨ch
(&(
£m_queue
->
£mu_li°
), 
£m_id
);

290 
	`up
(&(
£m_queue
->
£m
));

292 
ªt
 = -
E_INVAL
;

293 i‡(
£mu
 !
NULL
) {

294 
boﬁ
 
öå_Êag
;

295 
	`loˇl_öå_ßve
(
öå_Êag
);

297 
£m≠h‹e_t
 *
£m
 = 
£mu
->sem;

298 
£m
->
vÆid
 = 0, 
ªt
 = 0;

299 
	`wakeup_queue
(&(
£m
->
waô_queue
), 
WT_INTERRUPTED
, 1);

301 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

303  
ªt
;

304 
	}
}

307 
	$ùc_£m_gë_vÆue
(
£m_t
 
£m_id
, *
vÆue_°‹e
) {

308 
	`as£π
(
cuºít
->
£m_queue
 !
NULL
);

309 i‡(
vÆue_°‹e
 =
NULL
) {

310  -
E_INVAL
;

313 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

314 i‡(!
	`u£r_mem_check
(
mm
, (
uöçå_t
)
vÆue_°‹e
, (), 1)) {

315  -
E_INVAL
;

318 
£m_undo_t
 *
£mu
;

319 
£m_queue_t
 *
£m_queue
 = 
cuºít
->sem_queue;

320 
	`down
(&(
£m_queue
->
£m
));

321 
£mu
 = 
	`£mu_li°_£¨ch
(&(
£m_queue
->
£mu_li°
), 
£m_id
);

322 
	`up
(&(
£m_queue
->
£m
));

324 
ªt
 = -
E_INVAL
;

325 i‡(
£mu
 !
NULL
) {

326 
vÆue
 = 
£mu
->
£m
->value;

327 
	`lock_mm
(
mm
);

329 i‡(
	`c›y_to_u£r
(
mm
, 
vÆue_°‹e
, &
vÆue
, ())) {

330 
ªt
 = 0;

333 
	`u∆ock_mm
(
mm
);

335  
ªt
;

336 
	}
}

	@kern-ucore/sync/sem.h

1 #i‚de‡
__KERN_SYNC_SEM_H__


2 
	#__KERN_SYNC_SEM_H__


	)

4 
	~<ty≥s.h
>

5 
	~<©omic.h
>

6 
	~<waô.h
>

9 
	mvÆue
;

10 
boﬁ
 
	mvÆid
;

11 
©omic_t
 
	mcou¡
;

12 
waô_queue_t
 
	mwaô_queue
;

13 } 
	t£m≠h‹e_t
;

21 
	s£m_undo
 {

22 
£m≠h‹e_t
 *
	m£m
;

23 
li°_íåy_t
 
	m£mu_lök
;

24 } 
	t£m_undo_t
;

26 
	#À2£mu
(
À
, 
membî
) \

27 
	`to_°ru˘
((
À
), 
£m_undo_t
, 
membî
)

	)

29 
	s£m_queue
 {

30 
£m≠h‹e_t
 
	m£m
;

31 
©omic_t
 
	mcou¡
;

32 
li°_íåy_t
 
	m£mu_li°
;

33 } 
	t£m_queue_t
;

35 
£m_öô
(
£m≠h‹e_t
 *
£m
, 
vÆue
);

36 
up
(
£m≠h‹e_t
 *
£m
);

37 
down
(
£m≠h‹e_t
 *
£m
);

38 
boﬁ
 
åy_down
(
£m≠h‹e_t
 *
£m
);

40 
£m_undo_t
 *
£mu_¸óã
(
£m≠h‹e_t
 *
£m
, 
vÆue
);

41 
£mu_de°roy
(
£m_undo_t
 *
£mu
);

43 
£m_queue_t
 *
£m_queue_¸óã
();

44 
£m_queue_de°roy
(
£m_queue_t
 *
£m_queue
);

45 
dup_£m_queue
(
£m_queue_t
 *
to
, sem_queue_à*
‰om
);

46 
exô_£m_queue
(
£m_queue_t
 *
£m_queue
);

48 
ùc_£m_öô
(
vÆue
);

49 
ùc_£m_po°
(
£m_t
 
£m_id
);

50 
ùc_£m_waô
(
£m_t
 
£m_id
, 
timeout
);

51 
ùc_£m_‰ì
(
£m_t
 
£m_id
);

52 
ùc_£m_gë_vÆue
(
£m_t
 
£m_id
, *
vÆue_°‹e
);

54 
ölöe
 

55 
	$£m_cou¡
(
£m≠h‹e_t
 *
£m
) {

56  
	`©omic_ªad
(&(
£m
->
cou¡
));

57 
	}
}

59 
ölöe
 

60 
	$£t_£m_cou¡
(
£m≠h‹e_t
 *
£m
, 
vÆ
) {

61 
	`©omic_£t
(&(
£m
->
cou¡
), 
vÆ
);

62 
	}
}

64 
ölöe
 

65 
	$£m_cou¡_öc
(
£m≠h‹e_t
 *
£m
) {

66  
	`©omic_add_ªtu∫
(&(
£m
->
cou¡
), 1);

67 
	}
}

69 
ölöe
 

70 
	$£m_cou¡_dec
(
£m≠h‹e_t
 *
£m
) {

71  
	`©omic_sub_ªtu∫
(&(
£m
->
cou¡
), 1);

72 
	}
}

74 
ölöe
 

75 
	$£m_queue_cou¡
(
£m_queue_t
 *
sq
) {

76  
	`©omic_ªad
(&(
sq
->
cou¡
));

77 
	}
}

79 
ölöe
 

80 
	$£t_£m_queue_cou¡
(
£m_queue_t
 *
sq
, 
vÆ
) {

81 
	`©omic_£t
(&(
sq
->
cou¡
), 
vÆ
);

82 
	}
}

84 
ölöe
 

85 
	$£m_queue_cou¡_öc
(
£m_queue_t
 *
sq
) {

86  
	`©omic_add_ªtu∫
(&(
sq
->
cou¡
), 1);

87 
	}
}

89 
ölöe
 

90 
	$£m_queue_cou¡_dec
(
£m_queue_t
 *
sq
) {

91  
	`©omic_sub_ªtu∫
(&(
sq
->
cou¡
), 1);

92 
	}
}

	@kern-ucore/sync/sync.c

1 
	~<sync.h
>

2 
	~<mbox.h
>

5 
	$sync_öô
() {

6 
	`mbox_öô
();

7 
	}
}

	@kern-ucore/sync/wait.c

1 
	~<ty≥s.h
>

2 
	~<li°.h
>

3 
	~<sync.h
>

4 
	~<waô.h
>

5 
	~<¥oc.h
>

6 
	~<sched.h
>

8 
	#cuºít
 (
	`∂s_ªad
(
cuºít
))

	)

11 
	$waô_öô
(
waô_t
 *
waô
, 
¥oc_°ru˘
 *
¥oc
) {

12 
waô
->
¥oc
 =Öroc;

13 
waô
->
wakeup_Êags
 = 
WT_INTERRUPTED
;

14 
	`li°_öô
(&(
waô
->
waô_lök
));

15 
	}
}

18 
	$waô_queue_öô
(
waô_queue_t
 *
queue
) {

19 
	`li°_öô
(&(
queue
->
waô_hód
));

20 
	}
}

23 
	$waô_queue_add
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
) {

24 
	`as£π
(
	`li°_em±y
(&(
waô
->
waô_lök
)Ë&& waô->
¥oc
 !
NULL
);

25 
waô
->
waô_queue
 = 
queue
;

26 
	`li°_add_bef‹e
(&(
queue
->
waô_hód
), &(
waô
->
waô_lök
));

27 
	}
}

30 
	$waô_queue_dñ
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
) {

31 
	`as£π
(!
	`li°_em±y
(&(
waô
->
waô_lök
)Ë&& waô->
waô_queue
 =
queue
);

32 
	`li°_dñ_öô
(&(
waô
->
waô_lök
));

33 
	}
}

35 
waô_t
 *

36 
	$waô_queue_√xt
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
) {

37 
	`as£π
(!
	`li°_em±y
(&(
waô
->
waô_lök
)Ë&& waô->
waô_queue
 =
queue
);

38 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&(
waô
->
waô_lök
));

39 i‡(
À
 !&(
queue
->
waô_hód
)) {

40  
	`À2waô
(
À
, 
waô_lök
);

42  
NULL
;

43 
	}
}

45 
waô_t
 *

46 
	$waô_queue_¥ev
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
) {

47 
	`as£π
(!
	`li°_em±y
(&(
waô
->
waô_lök
)Ë&& waô->
waô_queue
 =
queue
);

48 
li°_íåy_t
 *
À
 = 
	`li°_¥ev
(&(
waô
->
waô_lök
));

49 i‡(
À
 !&(
queue
->
waô_hód
)) {

50  
	`À2waô
(
À
, 
waô_lök
);

52  
NULL
;

53 
	}
}

55 
waô_t
 *

56 
	$waô_queue_fú°
(
waô_queue_t
 *
queue
) {

57 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&(
queue
->
waô_hód
));

58 i‡(
À
 !&(
queue
->
waô_hód
)) {

59  
	`À2waô
(
À
, 
waô_lök
);

61  
NULL
;

62 
	}
}

64 
waô_t
 *

65 
	$waô_queue_œ°
(
waô_queue_t
 *
queue
) {

66 
li°_íåy_t
 *
À
 = 
	`li°_¥ev
(&(
queue
->
waô_hód
));

67 i‡(
À
 !&(
queue
->
waô_hód
)) {

68  
	`À2waô
(
À
, 
waô_lök
);

70  
NULL
;

71 
	}
}

73 
boﬁ


74 
	$waô_queue_em±y
(
waô_queue_t
 *
queue
) {

75  
	`li°_em±y
(&(
queue
->
waô_hód
));

76 
	}
}

78 
boﬁ


79 
	$waô_ö_queue
(
waô_t
 *
waô
) {

80  !
	`li°_em±y
(&(
waô
->
waô_lök
));

81 
	}
}

84 
	$wakeup_waô
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
, 
uöt32_t
 
wakeup_Êags
, 
boﬁ
 
dñ
) {

85 i‡(
dñ
) {

86 
	`waô_queue_dñ
(
queue
, 
waô
);

88 
waô
->
wakeup_Êags
 = wakeup_flags;

89 
	`wakeup_¥oc
(
waô
->
¥oc
);

90 
	}
}

93 
	$wakeup_fú°
(
waô_queue_t
 *
queue
, 
uöt32_t
 
wakeup_Êags
, 
boﬁ
 
dñ
) {

94 
waô_t
 *
waô
;

95 i‡((
waô
 = 
	`waô_queue_fú°
(
queue
)Ë!
NULL
) {

96 
	`wakeup_waô
(
queue
, 
waô
, 
wakeup_Êags
, 
dñ
);

98 
	}
}

101 
	$wakeup_queue
(
waô_queue_t
 *
queue
, 
uöt32_t
 
wakeup_Êags
, 
boﬁ
 
dñ
) {

102 
waô_t
 *
waô
;

103 i‡((
waô
 = 
	`waô_queue_fú°
(
queue
)Ë!
NULL
) {

104 i‡(
dñ
) {

106 
	`wakeup_waô
(
queue
, 
waô
, 
wakeup_Êags
, 1);

107 } (
waô
 = 
	`waô_queue_fú°
(
queue
)Ë!
NULL
);

111 
	`wakeup_waô
(
queue
, 
waô
, 
wakeup_Êags
, 0);

112 } (
waô
 = 
	`waô_queue_√xt
(
queue
, waô)Ë!
NULL
);

115 
	}
}

118 
	$waô_cuºít_£t
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
, 
uöt32_t
 
waô_°©e
) {

119 
	`as£π
(
cuºít
 !
NULL
);

120 
	`waô_öô
(
waô
, 
cuºít
);

121 
cuºít
->
°©e
 = 
PROC_SLEEPING
;

122 
cuºít
->
waô_°©e
 = wait_state;

123 
	`waô_queue_add
(
queue
, 
waô
);

124 
	}
}

	@kern-ucore/sync/wait.h

1 #i‚de‡
__KERN_SYNC_WAIT_H__


2 
	#__KERN_SYNC_WAIT_H__


	)

4 
	~<li°.h
>

7 
li°_íåy_t
 
	mwaô_hód
;

8 } 
	twaô_queue_t
;

10 
	g¥oc_°ru˘
;

13 
¥oc_°ru˘
 *
	m¥oc
;

14 
uöt32_t
 
	mwakeup_Êags
;

15 
waô_queue_t
 *
	mwaô_queue
;

16 
li°_íåy_t
 
	mwaô_lök
;

17 } 
	twaô_t
;

19 
	#À2waô
(
À
, 
membî
) \

20 
	`to_°ru˘
((
À
), 
waô_t
, 
membî
)

	)

22 
waô_öô
(
waô_t
 *
waô
, 
¥oc_°ru˘
 *
¥oc
);

23 
waô_queue_öô
(
waô_queue_t
 *
queue
);

24 
waô_queue_add
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
);

25 
waô_queue_dñ
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
);

27 
waô_t
 *
waô_queue_√xt
(
waô_queue_t
 *
queue
, waô_à*
waô
);

28 
waô_t
 *
waô_queue_¥ev
(
waô_queue_t
 *
queue
, waô_à*
waô
);

29 
waô_t
 *
waô_queue_fú°
(
waô_queue_t
 *
queue
);

30 
waô_t
 *
waô_queue_œ°
(
waô_queue_t
 *
queue
);

32 
boﬁ
 
waô_queue_em±y
(
waô_queue_t
 *
queue
);

33 
boﬁ
 
waô_ö_queue
(
waô_t
 *
waô
);

34 
wakeup_waô
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
, 
uöt32_t
 
wakeup_Êags
, 
boﬁ
 
dñ
);

35 
wakeup_fú°
(
waô_queue_t
 *
queue
, 
uöt32_t
 
wakeup_Êags
, 
boﬁ
 
dñ
);

36 
wakeup_queue
(
waô_queue_t
 *
queue
, 
uöt32_t
 
wakeup_Êags
, 
boﬁ
 
dñ
);

38 
waô_cuºít_£t
(
waô_queue_t
 *
queue
, 
waô_t
 *
waô
, 
uöt32_t
 
waô_°©e
);

40 
	#waô_cuºít_dñ
(
queue
, 
waô
) \

42 i‡(
	`waô_ö_queue
(
waô
)) { \

43 
	`waô_queue_dñ
(
queue
, 
waô
); \

45 } 0)

	)

	@libs-user-ucore/arch/i386/arch.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<ty≥s.h
>

6 
	#do_div
(
n
, 
ba£
) ({ \

7 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

8 
__ba£
 = (
ba£
); \

9 
	`asm
("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

10 
__uµî
 = 
__high
; \

11 i‡(
__high
 != 0) { \

12 
__uµî
 = 
__high
 % 
__ba£
; \

13 
__high
 = __high / 
__ba£
; \

15 
	`asm
("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

16 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

17 
	`asm
("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

18 
__mod
; \

19 })

	)

21 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
uöt32_t
 
	$ªad_dr
(
ªgnum
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
	$wrôe_dr
(
ªgnum
, 
uöt32_t
 
vÆue
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
	sp£udodesc
 {

33 
uöt16_t
 
pd_lim
;

34 
uöçå_t
 
pd_ba£
;

35 } 
	`__©åibuã__
 ((
∑cked
));

37 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

41 
ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

42 
ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

43 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

44 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

45 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

46 
ölöe
 
uöçå_t
 
	$r¸1
(Ë
	`__©åibuã__
((
Æways_ölöe
));

47 
ölöe
 
uöçå_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

48 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

49 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

51 
ölöe
 
uöt8_t


52 
	$öb
(
uöt16_t
 
p‹t
) {

53 
uöt8_t
 
d©a
;

54 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
));

55  
d©a
;

56 
	}
}

58 
ölöe
 

59 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

60 
asm
 volatile (

63 : "=D" (
addr
), "=c" (
˙t
)

64 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

66 
	}
}

68 
ölöe
 

69 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

70 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
));

71 
	}
}

73 
ölöe
 

74 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

75 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
));

76 
	}
}

78 
ölöe
 

79 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
) {

80 
asm
 volatile (

83 : "=S" (
addr
), "=c" (
˙t
)

84 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

86 
	}
}

88 
ölöe
 
uöt32_t


89 
	$ªad_ebp
() {

90 
uöt32_t
 
ebp
;

91 
asm
 vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
ebp
));

92  
ebp
;

93 
	}
}

95 
ölöe
 

96 
	$bªakpoöt
() {

97 
asm
 volatile ("int $3");

98 
	}
}

100 
ölöe
 
uöt32_t


101 
	$ªad_dr
(
ªgnum
) {

102 
uöt32_t
 
vÆue
 = 0;

103 
ªgnum
) {

104 0: 
asm
 vﬁ©ûê("mov»%%db0, %0" : "Ù" (
vÆue
)); ;

105 1: 
asm
 vﬁ©ûê("mov»%%db1, %0" : "Ù" (
vÆue
)); ;

106 2: 
asm
 vﬁ©ûê("mov»%%db2, %0" : "Ù" (
vÆue
)); ;

107 3: 
asm
 vﬁ©ûê("mov»%%db3, %0" : "Ù" (
vÆue
)); ;

108 6: 
asm
 vﬁ©ûê("mov»%%db6, %0" : "Ù" (
vÆue
)); ;

109 7: 
asm
 vﬁ©ûê("mov»%%db7, %0" : "Ù" (
vÆue
)); ;

111  
vÆue
;

112 
	}
}

115 
	$wrôe_dr
(
ªgnum
, 
uöt32_t
 
vÆue
) {

116 
ªgnum
) {

117 0: 
asm
 vﬁ©ûê("mov»%0, %%db0" :: "r" (
vÆue
)); ;

118 1: 
asm
 vﬁ©ûê("mov»%0, %%db1" :: "r" (
vÆue
)); ;

119 2: 
asm
 vﬁ©ûê("mov»%0, %%db2" :: "r" (
vÆue
)); ;

120 3: 
asm
 vﬁ©ûê("mov»%0, %%db3" :: "r" (
vÆue
)); ;

121 6: 
asm
 vﬁ©ûê("mov»%0, %%db6" :: "r" (
vÆue
)); ;

122 7: 
asm
 vﬁ©ûê("mov»%0, %%db7" :: "r" (
vÆue
)); ;

124 
	}
}

126 
ölöe
 

127 
	$lidt
(
p£udodesc
 *
pd
) {

128 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
));

129 
	}
}

131 
ölöe
 

132 
	$°i
() {

133 
asm
 volatile ("sti");

134 
	}
}

136 
ölöe
 

137 
	$˛i
() {

138 
asm
 volatile ("cli");

139 
	}
}

141 
ölöe
 

142 
	$…r
(
uöt16_t
 
£l
) {

143 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
));

144 
	}
}

146 
ölöe
 
uöt32_t


147 
	$ªad_eÊags
() {

148 
uöt32_t
 
eÊags
;

149 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

150  
eÊags
;

151 
	}
}

153 
ölöe
 

154 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
) {

155 
asm
 vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
eÊags
));

156 
	}
}

158 
ölöe
 

159 
	$l¸0
(
uöçå_t
 
¸0
) {

160 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
));

161 
	}
}

163 
ölöe
 

164 
	$l¸3
(
uöçå_t
 
¸3
) {

165 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
));

166 
	}
}

168 
ölöe
 
uöçå_t


169 
	$r¸0
() {

170 
uöçå_t
 
¸0
;

171 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
));

172  
¸0
;

173 
	}
}

175 
ölöe
 
uöçå_t


176 
	$r¸1
() {

177 
uöçå_t
 
¸1
;

178 
asm
 vﬁ©ûê("mov %%¸1, %0" : "Ù" (
¸1
));

179  
¸1
;

180 
	}
}

182 
ölöe
 
uöçå_t


183 
	$r¸2
() {

184 
uöçå_t
 
¸2
;

185 
asm
 vﬁ©ûê("mov %%¸2, %0" : "Ù" (
¸2
));

186  
¸2
;

187 
	}
}

189 
ölöe
 
uöçå_t


190 
	$r¸3
() {

191 
uöçå_t
 
¸3
;

192 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
));

193  
¸3
;

194 
	}
}

196 
ölöe
 

197 
	$övÕg
(*
addr
) {

198 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

199 
	}
}

201 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

202 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

203 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

204 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

205 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

207 #i‚de‡
__HAVE_ARCH_STRCMP


208 
	#__HAVE_ARCH_STRCMP


	)

209 
ölöe
 

210 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

211 
d0
, 
d1
, 
ªt
;

212 
asm
 volatile (

223 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

224 : "1" (
s1
), "2" (
s2
)

226  
ªt
;

227 
	}
}

231 #i‚de‡
__HAVE_ARCH_STRCPY


232 
	#__HAVE_ARCH_STRCPY


	)

233 
ölöe
 *

234 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

235 
d0
, 
d1
, 
d2
;

236 
asm
 volatile (

241 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

242 : "0" (
§c
), "1" (
d°
) : "memory");

243  
d°
;

244 
	}
}

247 #i‚de‡
__HAVE_ARCH_MEMSET


248 
	#__HAVE_ARCH_MEMSET


	)

249 
ölöe
 *

250 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

251 
d0
, 
d1
;

252 
asm
 volatile (

254 : "=&c" (
d0
), "=&D" (
d1
)

255 : "0" (
n
), "a" (
c
), "1" (
s
)

257  
s
;

258 
	}
}

261 #i‚de‡
__HAVE_ARCH_MEMMOVE


262 
	#__HAVE_ARCH_MEMMOVE


	)

263 
ölöe
 *

264 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

265 i‡(
d°
 < 
§c
) {

266  
	`__mem˝y
(
d°
, 
§c
, 
n
);

268 
d0
, 
d1
, 
d2
;

269 
asm
 volatile (

273 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

274 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

276  
d°
;

277 
	}
}

280 #i‚de‡
__HAVE_ARCH_MEMCPY


281 
	#__HAVE_ARCH_MEMCPY


	)

282 
ölöe
 *

283 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

284 
d0
, 
d1
, 
d2
;

285 
asm
 volatile (

292 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

293 : "0" (
n
 / 4), "g" (n), "1" (
d°
), "2" (
§c
)

295  
d°
;

296 
	}
}

	@libs-user-ucore/arch/i386/atomic.h

1 #i‚de‡
__ARCH_UM_INCLUDE_ATOMIC_H


2 
	#__ARCH_UM_INCLUDE_ATOMIC_H


	)

4 
	~<ty≥s.h
>

9 vﬁ©ûê
	mcou¡î
;

10 } 
	t©omic_t
;

12 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 

31 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

32  
v
->
cou¡î
;

33 
	}
}

42 
ölöe
 

43 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

44 
v
->
cou¡î
 = 
i
;

45 
	}
}

54 
ölöe
 

55 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

56 
asm
 vﬁ©ûê("add»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

57 
	}
}

66 
ölöe
 

67 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

68 
asm
 vﬁ©ûe("sub»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

69 
	}
}

79 
ölöe
 
boﬁ


80 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

81 
c
;

82 
asm
 vﬁ©ûe("sub»%2, %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
Ë: "ú" (
i
) : "memory");

83  
c
 != 0;

84 
	}
}

92 
ölöe
 

93 
	$©omic_öc
(
©omic_t
 *
v
) {

94 
asm
 vﬁ©ûe("ö˛ %0" : "+m" (
v
->
cou¡î
));

95 
	}
}

103 
ölöe
 

104 
	$©omic_dec
(
©omic_t
 *
v
) {

105 
asm
 vﬁ©ûe("de˛ %0" : "+m" (
v
->
cou¡î
));

106 
	}
}

115 
ölöe
 
boﬁ


116 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

117 
c
;

118 
asm
 vﬁ©ûe("ö˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

119  
c
 != 0;

120 
	}
}

129 
ölöe
 
boﬁ


130 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

131 
c
;

132 
asm
 vﬁ©ûe("de˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

133  
c
 != 0;

134 
	}
}

144 
ölöe
 

145 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

146 
__i
 = 
i
;

147 
asm
 vﬁ©ûe("xadd»%0, %1" : "+r" (
i
), "+m" (
v
->
cou¡î
) :: "memory");

148  
i
 + 
__i
;

149 
	}
}

158 
ölöe
 

159 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

160  
	`©omic_add_ªtu∫
(
v
, -
i
);

161 
	}
}

163 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

168 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

169 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

179 
ölöe
 

180 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

181 
asm
 vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

182 
	}
}

189 
ölöe
 

190 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

191 
asm
 vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

192 
	}
}

199 
ölöe
 

200 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

201 
asm
 vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

202 
	}
}

209 
ölöe
 
boﬁ


210 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

211 
ﬁdbô
;

212 
asm
 vﬁ©ûê("bt¶ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

213  
ﬁdbô
 != 0;

214 
	}
}

221 
ölöe
 
boﬁ


222 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

223 
ﬁdbô
;

224 
asm
 vﬁ©ûê("bå»%2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

225  
ﬁdbô
 != 0;

226 
	}
}

233 
ölöe
 
boﬁ


234 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

235 
ﬁdbô
;

236 
asm
 vﬁ©ûê("bt˛ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

237  
ﬁdbô
 != 0;

238 
	}
}

245 
ölöe
 
boﬁ


246 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

247 
ﬁdbô
;

248 
asm
 vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
ﬁdbô
Ë: "m" (*(vﬁ©ûê*)
addr
), "Ir" (
ƒ
));

249  
ﬁdbô
 != 0;

250 
	}
}

	@libs-user-ucore/arch/i386/syscall.c

1 
	~<uni°d.h
>

2 
	~<ty≥s.h
>

3 
	~<°d¨g.h
>

4 
	~<sysˇŒ.h
>

5 
	~<mboxbuf.h
>

6 
	~<°©.h
>

7 
	~<dúít.h
>

9 
	#MAX_ARGS
 5

	)

11 
uöt32_t


12 
	$sysˇŒ
(
num
, ...) {

13 
va_li°
 
≠
;

14 
	`va_°¨t
(
≠
, 
num
);

15 
uöt32_t
 
a
[
MAX_ARGS
];

16 
i
;

17 
i
 = 0; i < 
MAX_ARGS
; i ++) {

18 
a
[
i
] = 
	`va_¨g
(
≠
, 
uöt32_t
);

20 
	`va_íd
(
≠
);

22 
uöt32_t
 
ªt
;

23 
asm
 volatile (

25 : "˜" (
ªt
)

26 : "i" (
T_SYSCALL
),

27 "a" (
num
),

28 "d" (
a
[0]),

29 "c" (
a
[1]),

30 "b" (
a
[2]),

31 "D" (
a
[3]),

32 "S" (
a
[4])

34  
ªt
;

35 
	}
}

	@libs-user-ucore/arch/or32/arch.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_H__


	)

4 
	~<ty≥s.h
>

5 
	~<‹32/•r_defs.h
>

7 
	#NR_GPRS
 32

	)

9 
	#REG8
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

10 
	#REG16
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

11 
	#REG32
(
add
Ë*((vﬁ©ûê*Ë◊dd))

	)

17 
uöt32_t
 
__div64_32
(
uöt64_t
 *
dividíd
, uöt32_à
divis‹
);

22 
	#do_div
(
n
,
ba£
) ({ \

23 
uöt32_t
 
__ba£
 = (
ba£
); \

24 
uöt32_t
 
__ªm
; \

25 ()(((
	`ty≥of
((
n
)Ë*)0Ë=((
uöt64_t
 *)0)); \

26 i‡((((
n
) >> 32) == 0)) { \

27 
__ªm
 = (
uöt32_t
)(
n
Ë% 
__ba£
; \

28 (
n
Ë(
uöt32_t
)“Ë/ 
__ba£
; \

30 
__ªm
 = 
	`__div64_32
(&(
n
), 
__ba£
); \

31 
__ªm
; \

32 })

	)

38 
ölöe
 
uöt32_t
 
	$mf•r
 (
uöt16_t
 
addr
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

39 
ölöe
 
	$mt•r
 (
uöt16_t
 
addr
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
 ((
Æways_ölöe
));

41 
ölöe
 
uöt32_t


42 
	$mf•r
 (
uöt16_t
 
addr
)

44 
uöt32_t
 
ªt
;

45 
asm
 vﬁ©ûê("l.mf•∏%0, %1, 0" : "Ù" (
ªt
Ë: "r" (
addr
));

46  
ªt
;

47 
	}
}

49 
ölöe
 

50 
	$mt•r
 (
uöt16_t
 
addr
, 
uöt32_t
 
d©a
)

52 
asm
 vﬁ©ûê("l.mt•∏%0, %1, 0" :: "r" (
addr
), "r" (
d©a
));

53 
	}
}

55 
ölöe
 
	$íabÀ_öãºu±
 (Ë
	`__©åibuã__
 ((
Æways_ölöe
));

57 
ölöe
 

58 
	$íabÀ_öãºu±
 ()

64 
	`mt•r
 (
SPR_SR
, 
	`mf•r
 (SPR_SRË| 
SPR_SR_IEE
);

65 
	}
}

	@libs-user-ucore/arch/or32/atomic.h

1 #i‚de‡
__ARCH_TEMPLATE_INCLUDE_ATOMIC_H


2 
	#__ARCH_TEMPLATE_INCLUDE_ATOMIC_H


	)

4 
	~<ty≥s.h
>

5 
	~<sync.h
>

10 vﬁ©ûê
	mcou¡î
;

11 } 
	t©omic_t
;

13 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 

32 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

33  
v
->
cou¡î
;

34 
	}
}

43 
ölöe
 

44 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

45 
v
->
cou¡î
 = 
i
;

46 
	}
}

55 
ölöe
 

56 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

57 
asm
 vﬁ©ûê("l.add %0, %0, %1" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

58 
	}
}

67 
ölöe
 

68 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

69 
asm
 vﬁ©ûê("l.sub %0, %0, %1" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

70 
	}
}

80 
ölöe
 
boﬁ


81 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

82 
c
 = 0;

83 
boﬁ
 
öå_Êag
;

84 
	`loˇl_öå_ßve
 (
öå_Êag
);

85 
v
->
cou¡î
 -
i
;

86 i‡(
v
->
cou¡î
 == 0)

87 
c
 = 1;

88 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

89  
c
 != 0;

90 
	}
}

98 
ölöe
 

99 
	$©omic_öc
(
©omic_t
 *
v
) {

100 
asm
 vﬁ©ûê("l.addò%0, %0, 1" : "+m" (
v
->
cou¡î
));

101 
	}
}

109 
ölöe
 

110 
	$©omic_dec
(
©omic_t
 *
v
) {

111 
asm
 vﬁ©ûê("l.addò%0, %0, -1" : "+m" (
v
->
cou¡î
));

112 
	}
}

121 
ölöe
 
boﬁ


122 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

123 
c
 = 0;

124 
boﬁ
 
öå_Êag
;

125 
	`loˇl_öå_ßve
 (
öå_Êag
);

126 
asm
 vﬁ©ûê("l.addò%0, %0, 1" : "+m" (
v
->
cou¡î
));

127 i‡(
v
->
cou¡î
 == 0)

128 
c
 = 1;

129 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

130  
c
 != 0;

131 
	}
}

140 
ölöe
 
boﬁ


141 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

142 
c
 = 0;

143 
boﬁ
 
öå_Êag
;

144 
	`loˇl_öå_ßve
 (
öå_Êag
);

145 
asm
 vﬁ©ûê("l.addò%0, %0, -1" : "+m" (
v
->
cou¡î
));

146 i‡(
v
->
cou¡î
 == 0)

147 
c
 = 1;

148 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

149  
c
 != 0;

150 
	}
}

160 
ölöe
 

161 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

162 
boﬁ
 
öå_Êag
;

163 
	`loˇl_öå_ßve
 (
öå_Êag
);

164 
v
->
cou¡î
 +
i
;

165 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

166  
v
->
cou¡î
;

167 
	}
}

176 
ölöe
 

177 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

178 
boﬁ
 
öå_Êag
;

179 
	`loˇl_öå_ßve
 (
öå_Êag
);

180 
v
->
cou¡î
 -
i
;

181 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

182  
v
->
cou¡î
;

183 
	}
}

185 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

186 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

187 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

188 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

189 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

190 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

191 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

201 
ölöe
 

202 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

203 
uöt32_t
 *
_addr
 = (uöt32_t*)
addr
;

204 
boﬁ
 
öå_Êag
;

205 
	`loˇl_öå_ßve
 (
öå_Êag
);

206 *
_addr
 |(1 << 
ƒ
);

207 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

208 
	}
}

215 
ölöe
 

216 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

217 
uöt32_t
 *
_addr
 = (uöt32_t*)
addr
;

218 
boﬁ
 
öå_Êag
;

219 
	`loˇl_öå_ßve
 (
öå_Êag
);

220 *
_addr
 &~(1 << 
ƒ
);

221 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

222 
	}
}

229 
ölöe
 

230 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

231 
boﬁ
 
öå_Êag
;

232 
	`loˇl_öå_ßve
 (
öå_Êag
);

233 
asm
 vﬁ©ûê("l.x‹ %0, %0, %1" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (1 << 
ƒ
));

234 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

235 
	}
}

242 
ölöe
 
boﬁ


243 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

244 
uöt32_t
 *
_addr
 = (uöt32_t*)
addr
;

245 
c
 = 0;

246 
boﬁ
 
öå_Êag
;

247 
	`loˇl_öå_ßve
 (
öå_Êag
);

248 i‡(*
_addr
 & (1 << 
ƒ
))

249 
c
 = 1;

250 *
_addr
 |(1 << 
ƒ
);

251 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

252  
c
 != 0;

253 
	}
}

260 
ölöe
 
boﬁ


261 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

262 
uöt32_t
 *
_addr
 = (uöt32_t*)
addr
;

263 
c
 = 0;

264 
boﬁ
 
öå_Êag
;

265 
	`loˇl_öå_ßve
 (
öå_Êag
);

266 i‡(*
_addr
 & (1 << 
ƒ
))

267 
c
 = 1;

268 *
_addr
 &~(1 << 
ƒ
);

269 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

271 
	}
}

278 
ölöe
 
boﬁ


279 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

280 
uöt32_t
 *
_addr
 = (uöt32_t*)
addr
;

281 
c
 = 0;

282 
boﬁ
 
öå_Êag
;

283 
	`loˇl_öå_ßve
 (
öå_Êag
);

284 i‡(*
_addr
 & (1 << 
ƒ
))

285 
c
 = 1;

286 
asm
 vﬁ©ûê("l.x‹ %0, %0, %1" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (1 << 
ƒ
));

287 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

289 
	}
}

296 
ölöe
 
boﬁ


297 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

298 
uöt32_t
 *
_addr
 = (uöt32_t*)
addr
;

299 
c
 = 0;

300 
boﬁ
 
öå_Êag
;

301 
	`loˇl_öå_ßve
 (
öå_Êag
);

302 i‡(*
_addr
 & (1 << 
ƒ
))

303 
c
 = 1;

304 
	`loˇl_öå_ª°‹e
 (
öå_Êag
);

305  
c
 != 0;

306 
	}
}

	@libs-user-ucore/arch/or32/div64.c

1 
	~<¨ch.h
>

2 
	~<ty≥s.h
>

5 
uöt32_t
 
__©åibuã__
((
wók
)Ë
	$__div64_32
(
uöt64_t
 *
n
, 
uöt32_t
 
ba£
)

7 
uöt64_t
 
ªm
 = *
n
;

8 
uöt64_t
 
b
 = 
ba£
;

9 
uöt64_t
 
ªs
, 
d
 = 1;

10 
uöt32_t
 
high
 = 
ªm
 >> 32;

13 
ªs
 = 0;

14 i‡(
high
 >
ba£
) {

15 
high
 /
ba£
;

16 
ªs
 = (
uöt64_t
Ë
high
 << 32;

17 
ªm
 -(
uöt64_t
Ë(
high
*
ba£
) << 32;

20 (
öt64_t
)
b
 > 0 && b < 
ªm
) {

21 
b
 = b+b;

22 
d
 = d+d;

26 i‡(
ªm
 >
b
) {

27 
ªm
 -
b
;

28 
ªs
 +
d
;

30 
b
 >>= 1;

31 
d
 >>= 1;

32 } 
d
);

34 *
n
 = 
ªs
;

35  
ªm
;

36 
	}
}

	@libs-user-ucore/arch/or32/intr.c

1 
	~<öå.h
>

2 
	~<¨ch.h
>

6 
	$öå_íabÀ
() {

8 
	}
}

12 
	$öå_dißbÀ
() {

14 
	}
}

	@libs-user-ucore/arch/or32/intr.h

1 #i‚de‡
__KERN_DRIVER_INTR_H__


2 
	#__KERN_DRIVER_INTR_H__


	)

4 
öå_íabÀ
();

5 
öå_dißbÀ
();

	@libs-user-ucore/arch/or32/or32/or32_func.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_OR32_FUNC_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_OR32_FUNC_H__


	)

4 
	~<‹32/•r_defs.h
>

5 
	~<memœyout.h
>

7 #ifde‡
__ASSEMBLER__


9 .
ma¸o
 
lﬂd32i
 
ªg
 const

10 
	gl
.
	gmovhi
 \
	gªg
,
hi
(\const)

11 
	gl
.
	g‹i
 \
	gªg
,\ªg,
lo
(\const)

12 .
	gídm


14 
	#SR_ENABLE_BITS
(
mask
, 
t1
, 
t2
) \

15 
l
.
mf•r
 
t2
, 
r0
, 
SPR_SR
 ;\

16 
lﬂd32i
 
t1
, (
mask
) ;\

17 
l
.
‹
 
t2
,Å2, 
t1
 ;\

18 
l
.
mt•r
 
r0
, 
t2
, 
SPR_SR


	)

20 
	#SR_DISABLE_BITS
(
mask
, 
t1
, 
t2
) \

21 
l
.
mf•r
 
t2
, 
r0
, 
SPR_SR
 ;\

22 
lﬂd32i
 
t1
, (~
mask
) ;\

23 
l
.
™d
 
t2
,Å2, 
t1
 ;\

24 
l
.
mt•r
 
r0
, 
t2
, 
SPR_SR


	)

26 
	#ENABLE_INTERRUPTS
(
t1
, 
t2
) \

27 
	`SR_ENABLE_BITS
((
SPR_SR_IEE
 | 
SPR_SR_TEE
), 
t1
, 
t2
)

	)

29 
	#DISABLE_INTERRUPTS
(
t1
, 
t2
) \

30 
	`SR_DISABLE_BITS
((
SPR_SR_IEE
 | 
SPR_SR_TEE
), 
t1
, 
t2
)

	)

32 
	#ENABLE_MMU
(
t1
, 
t2
) \

33 
	`SR_ENABLE_BITS
((
SPR_SR_IME
 | 
SPR_SR_DME
), 
t1
, 
t2
)

	)

38 
	#t›hys
(
t1
, 
t2
) \

39 
lﬂd32i
 
t1
, -
KERNBASE
 ;\

40 
l
.
add
 
t1
,Å1, 
t2


	)

45 
	#tovút
(
t1
, 
t2
) \

46 
lﬂd32i
 
t1
, 
KERNBASE
 ;\

47 
l
.
add
 
t1
,Å1, 
t2


	)

	@libs-user-ucore/arch/or32/or32/spr_defs.h

1 #i‚de‡
__ARCH_OR32_INCLUDE_OR32_SPR_DEFS_H__


2 
	#__ARCH_OR32_INCLUDE_OR32_SPR_DEFS_H__


	)

4 
	#MAX_GRPS
 (32)

	)

5 
	#MAX_SPRS_PER_GRP_BITS
 (11)

	)

6 
	#MAX_SPRS_PER_GRP
 (1 << 
MAX_SPRS_PER_GRP_BITS
)

	)

7 
	#MAX_SPRS
 (0x10000)

	)

10 
	#SPRGROUP_SYS
 (0<< 
MAX_SPRS_PER_GRP_BITS
)

	)

11 
	#SPRGROUP_DMMU
 (1<< 
MAX_SPRS_PER_GRP_BITS
)

	)

12 
	#SPRGROUP_IMMU
 (2<< 
MAX_SPRS_PER_GRP_BITS
)

	)

13 
	#SPRGROUP_DC
 (3<< 
MAX_SPRS_PER_GRP_BITS
)

	)

14 
	#SPRGROUP_IC
 (4<< 
MAX_SPRS_PER_GRP_BITS
)

	)

15 
	#SPRGROUP_MAC
 (5<< 
MAX_SPRS_PER_GRP_BITS
)

	)

16 
	#SPRGROUP_D
 (6<< 
MAX_SPRS_PER_GRP_BITS
)

	)

17 
	#SPRGROUP_PC
 (7<< 
MAX_SPRS_PER_GRP_BITS
)

	)

18 
	#SPRGROUP_PM
 (8<< 
MAX_SPRS_PER_GRP_BITS
)

	)

19 
	#SPRGROUP_PIC
 (9<< 
MAX_SPRS_PER_GRP_BITS
)

	)

20 
	#SPRGROUP_TT
 (10<< 
MAX_SPRS_PER_GRP_BITS
)

	)

23 
	#SPR_VR
 (
SPRGROUP_SYS
 + 0)

	)

24 
	#SPR_UPR
 (
SPRGROUP_SYS
 + 1)

	)

25 
	#SPR_CPUCFGR
 (
SPRGROUP_SYS
 + 2)

	)

26 
	#SPR_DMMUCFGR
 (
SPRGROUP_SYS
 + 3)

	)

27 
	#SPR_IMMUCFGR
 (
SPRGROUP_SYS
 + 4)

	)

28 
	#SPR_DCCFGR
 (
SPRGROUP_SYS
 + 5)

	)

29 
	#SPR_ICCFGR
 (
SPRGROUP_SYS
 + 6)

	)

30 
	#SPR_DCFGR
 (
SPRGROUP_SYS
 + 7)

	)

31 
	#SPR_PCCFGR
 (
SPRGROUP_SYS
 + 8)

	)

32 
	#SPR_NPC
 (
SPRGROUP_SYS
 + 16Ë

	)

33 
	#SPR_SR
 (
SPRGROUP_SYS
 + 17Ë

	)

34 
	#SPR_PPC
 (
SPRGROUP_SYS
 + 18Ë

	)

35 
	#SPR_EPCR_BASE
 (
SPRGROUP_SYS
 + 32Ë

	)

36 
	#SPR_EPCR_LAST
 (
SPRGROUP_SYS
 + 47Ë

	)

37 
	#SPR_EEAR_BASE
 (
SPRGROUP_SYS
 + 48)

	)

38 
	#SPR_EEAR_LAST
 (
SPRGROUP_SYS
 + 63)

	)

39 
	#SPR_ESR_BASE
 (
SPRGROUP_SYS
 + 64)

	)

40 
	#SPR_ESR_LAST
 (
SPRGROUP_SYS
 + 79)

	)

44 
	#SPR_DMMUCR
 (
SPRGROUP_DMMU
 + 0)

	)

45 
	#SPR_DTLBMR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x400 + (WAYË* 0x200)

	)

46 
	#SPR_DTLBMR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x47‡+ (WAYË* 0x200)

	)

47 
	#SPR_DTLBTR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x600 + (WAYË* 0x200)

	)

48 
	#SPR_DTLBTR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x67‡+ (WAYË* 0x200)

	)

51 
	#SPR_IMMUCR
 (
SPRGROUP_IMMU
 + 0)

	)

52 
	#SPR_ITLBMR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x400 + (WAYË* 0x200)

	)

53 
	#SPR_ITLBMR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x47‡+ (WAYË* 0x200)

	)

54 
	#SPR_ITLBTR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x600 + (WAYË* 0x200)

	)

55 
	#SPR_ITLBTR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x67‡+ (WAYË* 0x200)

	)

59 
	#SPR_DMMUCR
 (
SPRGROUP_DMMU
 + 0)

	)

60 
	#SPR_DTLBMR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x200 + (WAYË* 0x100)

	)

61 
	#SPR_DTLBMR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x23‡+ (WAYË* 0x100)

	)

62 
	#SPR_DTLBTR_BASE
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x280 + (WAYË* 0x100)

	)

63 
	#SPR_DTLBTR_LAST
(
WAY
Ë(
SPRGROUP_DMMU
 + 0x2b‡+ (WAYË* 0x100)

	)

66 
	#SPR_IMMUCR
 (
SPRGROUP_IMMU
 + 0)

	)

67 
	#SPR_ITLBMR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x200 + (WAYË* 0x100)

	)

68 
	#SPR_ITLBMR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x23‡+ (WAYË* 0x100)

	)

69 
	#SPR_ITLBTR_BASE
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x280 + (WAYË* 0x100)

	)

70 
	#SPR_ITLBTR_LAST
(
WAY
Ë(
SPRGROUP_IMMU
 + 0x2b‡+ (WAYË* 0x100)

	)

74 
	#SPR_DCCR
 (
SPRGROUP_DC
 + 0)

	)

75 
	#SPR_DCBPR
 (
SPRGROUP_DC
 + 1)

	)

76 
	#SPR_DCBFR
 (
SPRGROUP_DC
 + 2)

	)

77 
	#SPR_DCBIR
 (
SPRGROUP_DC
 + 3)

	)

78 
	#SPR_DCBWR
 (
SPRGROUP_DC
 + 4)

	)

79 
	#SPR_DCBLR
 (
SPRGROUP_DC
 + 5)

	)

80 
	#SPR_DCR_BASE
(
WAY
Ë(
SPRGROUP_DC
 + 0x200 + (WAYË* 0x200)

	)

81 
	#SPR_DCR_LAST
(
WAY
Ë(
SPRGROUP_DC
 + 0x3f‡+ (WAYË* 0x200)

	)

84 
	#SPR_ICCR
 (
SPRGROUP_IC
 + 0)

	)

85 
	#SPR_ICBPR
 (
SPRGROUP_IC
 + 1)

	)

86 
	#SPR_ICBIR
 (
SPRGROUP_IC
 + 2)

	)

87 
	#SPR_ICBLR
 (
SPRGROUP_IC
 + 3)

	)

88 
	#SPR_ICR_BASE
(
WAY
Ë(
SPRGROUP_IC
 + 0x200 + (WAYË* 0x200)

	)

89 
	#SPR_ICR_LAST
(
WAY
Ë(
SPRGROUP_IC
 + 0x3f‡+ (WAYË* 0x200)

	)

92 
	#SPR_MACLO
 (
SPRGROUP_MAC
 + 1)

	)

93 
	#SPR_MACHI
 (
SPRGROUP_MAC
 + 2)

	)

96 
	#SPR_DVR
(
N
Ë(
SPRGROUP_D
 + (N))

	)

97 
	#SPR_DCR
(
N
Ë(
SPRGROUP_D
 + 8 + (N))

	)

98 
	#SPR_DMR1
 (
SPRGROUP_D
 + 16)

	)

99 
	#SPR_DMR2
 (
SPRGROUP_D
 + 17)

	)

100 
	#SPR_DWCR0
 (
SPRGROUP_D
 + 18)

	)

101 
	#SPR_DWCR1
 (
SPRGROUP_D
 + 19)

	)

102 
	#SPR_DSR
 (
SPRGROUP_D
 + 20)

	)

103 
	#SPR_DRR
 (
SPRGROUP_D
 + 21)

	)

106 
	#SPR_PCCR
(
N
Ë(
SPRGROUP_PC
 + (N))

	)

107 
	#SPR_PCMR
(
N
Ë(
SPRGROUP_PC
 + 8 + (N))

	)

110 
	#SPR_PMR
 (
SPRGROUP_PM
 + 0)

	)

113 
	#SPR_PICMR
 (
SPRGROUP_PIC
 + 0)

	)

114 
	#SPR_PICPR
 (
SPRGROUP_PIC
 + 1)

	)

115 
	#SPR_PICSR
 (
SPRGROUP_PIC
 + 2)

	)

118 
	#SPR_TTMR
 (
SPRGROUP_TT
 + 0)

	)

119 
	#SPR_TTCR
 (
SPRGROUP_TT
 + 1)

	)

125 
	#SPR_VR_VER
 0xffff0000

	)

126 
	#SPR_VR_REV
 0x0000003‡

	)

132 
	#SPR_UPR_UP
 0x00000001

	)

133 
	#SPR_UPR_DCP
 0x00000002

	)

134 
	#SPR_UPR_ICP
 0x00000004

	)

135 
	#SPR_UPR_DMP
 0x00000008

	)

136 
	#SPR_UPR_IMP
 0x00000010

	)

137 
	#SPR_UPR_OB32P
 0x00000020

	)

138 
	#SPR_UPR_OB64P
 0x00000040

	)

139 
	#SPR_UPR_OF32P
 0x00000080

	)

140 
	#SPR_UPR_OF64P
 0x00000100

	)

141 
	#SPR_UPR_OV32P
 0x00000200

	)

142 
	#SPR_UPR_OV64P
 0x00000400

	)

143 
	#SPR_UPR_DUP
 0x00000800

	)

144 
	#SPR_UPR_PCUP
 0x00001000

	)

145 
	#SPR_UPR_PMP
 0x00002000

	)

146 
	#SPR_UPR_PICP
 0x00004000

	)

147 
	#SPR_UPR_TTP
 0x00008000

	)

148 
	#SPR_UPR_SRP
 0x00010000

	)

149 
	#SPR_UPR_RES
 0x00„0000

	)

150 
	#SPR_UPR_CUST
 0xff000000

	)

156 
	#SPR_SR_CID
 0xf0000000

	)

157 
	#SPR_SR_FO
 0x00008000

	)

158 
	#SPR_SR_EPH
 0x00004000

	)

159 
	#SPR_SR_DSX
 0x00002000

	)

160 
	#SPR_SR_OVE
 0x00001000

	)

161 
	#SPR_SR_OV
 0x00000800

	)

162 
	#SPR_SR_CY
 0x00000400

	)

163 
	#SPR_SR_F
 0x00000200

	)

164 
	#SPR_SR_CE
 0x00000100

	)

165 
	#SPR_SR_LEE
 0x00000080

	)

166 
	#SPR_SR_IME
 0x00000040

	)

167 
	#SPR_SR_DME
 0x00000020

	)

168 
	#SPR_SR_ICE
 0x00000010

	)

169 
	#SPR_SR_DCE
 0x00000008

	)

170 
	#SPR_SR_IEE
 0x00000004

	)

171 
	#SPR_SR_TEE
 0x00000002

	)

172 
	#SPR_SR_SM
 0x00000001

	)

178 
	#SPR_DMMUCR_P2S
 0x0000003ê

	)

179 
	#SPR_DMMUCR_P1S
 0x000007c0

	)

180 
	#SPR_DMMUCR_VADDR_WIDTH
 0x0000f800

	)

181 
	#SPR_DMMUCR_PADDR_WIDTH
 0x000f0000

	)

187 
	#SPR_IMMUCR_P2S
 0x0000003ê

	)

188 
	#SPR_IMMUCR_P1S
 0x000007c0

	)

189 
	#SPR_IMMUCR_VADDR_WIDTH
 0x0000f800

	)

190 
	#SPR_IMMUCR_PADDR_WIDTH
 0x000f0000

	)

196 
	#SPR_DTLBMR_V
 0x00000001

	)

197 
	#SPR_DTLBMR_PL1
 0x00000002

	)

198 
	#SPR_DTLBMR_CID
 0x0000003¯

	)

199 
	#SPR_DTLBMR_LRU
 0x000000c0

	)

200 
	#SPR_DTLBMR_VPN
 0xfffff000

	)

206 
	#SPR_DTLBTR_CC
 0x00000001

	)

207 
	#SPR_DTLBTR_CI
 0x00000002

	)

208 
	#SPR_DTLBTR_WBC
 0x00000004

	)

209 
	#SPR_DTLBTR_WOM
 0x00000008

	)

210 
	#SPR_DTLBTR_A
 0x00000010

	)

211 
	#SPR_DTLBTR_D
 0x00000020

	)

212 
	#SPR_DTLBTR_URE
 0x00000040

	)

213 
	#SPR_DTLBTR_UWE
 0x00000080

	)

214 
	#SPR_DTLBTR_SRE
 0x00000100

	)

215 
	#SPR_DTLBTR_SWE
 0x00000200

	)

216 
	#SPR_DTLBTR_PPN
 0xfffff000

	)

222 
	#SPR_ITLBMR_V
 0x00000001

	)

223 
	#SPR_ITLBMR_PL1
 0x00000002

	)

224 
	#SPR_ITLBMR_CID
 0x0000003¯

	)

225 
	#SPR_ITLBMR_LRU
 0x000000c0

	)

226 
	#SPR_ITLBMR_VPN
 0xfffff000

	)

232 
	#SPR_ITLBTR_CC
 0x00000001

	)

233 
	#SPR_ITLBTR_CI
 0x00000002

	)

234 
	#SPR_ITLBTR_WBC
 0x00000004

	)

235 
	#SPR_ITLBTR_WOM
 0x00000008

	)

236 
	#SPR_ITLBTR_A
 0x00000010

	)

237 
	#SPR_ITLBTR_D
 0x00000020

	)

238 
	#SPR_ITLBTR_SXE
 0x00000040

	)

239 
	#SPR_ITLBTR_UXE
 0x00000080

	)

240 
	#SPR_ITLBTR_PPN
 0xfffff000

	)

246 
	#SPR_DCCR_EW
 0x000000f‡

	)

252 
	#SPR_ICCR_EW
 0x000000f‡

	)

258 
	#SPR_DCR_DP
 0x00000001

	)

259 
	#SPR_DCR_CC
 0x0000000ê

	)

260 
	#SPR_DCR_SC
 0x00000010

	)

261 
	#SPR_DCR_CT
 0x000000e0

	)

264 
	#SPR_DCR_CC_MASKED
 0x00000000

	)

265 
	#SPR_DCR_CC_EQUAL
 0x00000001

	)

266 
	#SPR_DCR_CC_LESS
 0x00000002

	)

267 
	#SPR_DCR_CC_LESSE
 0x00000003

	)

268 
	#SPR_DCR_CC_GREAT
 0x00000004

	)

269 
	#SPR_DCR_CC_GREATE
 0x00000005

	)

270 
	#SPR_DCR_CC_NEQUAL
 0x00000006

	)

273 
	#SPR_DCR_CT_DISABLED
 0x00000000

	)

274 
	#SPR_DCR_CT_IFEA
 0x00000020

	)

275 
	#SPR_DCR_CT_LEA
 0x00000040

	)

276 
	#SPR_DCR_CT_SEA
 0x00000060

	)

277 
	#SPR_DCR_CT_LD
 0x00000080

	)

278 
	#SPR_DCR_CT_SD
 0x000000a0

	)

279 
	#SPR_DCR_CT_LSEA
 0x000000c0

	)

285 
	#SPR_DMR1_CW0
 0x00000003

	)

286 
	#SPR_DMR1_CW1
 0x0000000¯

	)

287 
	#SPR_DMR1_CW2
 0x00000030

	)

288 
	#SPR_DMR1_CW3
 0x000000c0

	)

289 
	#SPR_DMR1_CW4
 0x00000300

	)

290 
	#SPR_DMR1_CW5
 0x00000c00

	)

291 
	#SPR_DMR1_CW6
 0x00003000

	)

292 
	#SPR_DMR1_CW7
 0x0000c000

	)

293 
	#SPR_DMR1_CW8
 0x00030000

	)

294 
	#SPR_DMR1_CW9
 0x000c0000

	)

295 
	#SPR_DMR1_CW10
 0x00300000

	)

296 
	#SPR_DMR1_ST
 0x00400000

	)

297 
	#SPR_DMR1_BT
 0x00800000

	)

298 
	#SPR_DMR1_DXFW
 0x01000000

	)

304 
	#SPR_DMR2_WCE0
 0x00000001

	)

305 
	#SPR_DMR2_WCE1
 0x00000002

	)

306 
	#SPR_DMR2_AWTC
 0x00001ff¯

	)

307 
	#SPR_DMR2_WGB
 0x00f„000

	)

313 
	#SPR_DWCR_COUNT
 0x0000fff‡

	)

314 
	#SPR_DWCR_MATCH
 0xffff0000

	)

320 
	#SPR_DSR_RSTE
 0x00000001

	)

321 
	#SPR_DSR_BUSEE
 0x00000002

	)

322 
	#SPR_DSR_DPFE
 0x00000004

	)

323 
	#SPR_DSR_IPFE
 0x00000008

	)

324 
	#SPR_DSR_TTE
 0x00000010

	)

325 
	#SPR_DSR_AE
 0x00000020

	)

326 
	#SPR_DSR_IIE
 0x00000040

	)

327 
	#SPR_DSR_IE
 0x00000080

	)

328 
	#SPR_DSR_DME
 0x00000100

	)

329 
	#SPR_DSR_IME
 0x00000200

	)

330 
	#SPR_DSR_RE
 0x00000400

	)

331 
	#SPR_DSR_SCE
 0x00000800

	)

332 
	#SPR_DSR_SSE
 0x00001000

	)

333 
	#SPR_DSR_TE
 0x00002000

	)

339 
	#SPR_DRR_RSTE
 0x00000001

	)

340 
	#SPR_DRR_BUSEE
 0x00000002

	)

341 
	#SPR_DRR_DPFE
 0x00000004

	)

342 
	#SPR_DRR_IPFE
 0x00000008

	)

343 
	#SPR_DRR_TTE
 0x00000010

	)

344 
	#SPR_DRR_AE
 0x00000020

	)

345 
	#SPR_DRR_IIE
 0x00000040

	)

346 
	#SPR_DRR_IE
 0x00000080

	)

347 
	#SPR_DRR_DME
 0x00000100

	)

348 
	#SPR_DRR_IME
 0x00000200

	)

349 
	#SPR_DRR_RE
 0x00000400

	)

350 
	#SPR_DRR_SCE
 0x00000800

	)

351 
	#SPR_DRR_TE
 0x00001000

	)

357 
	#SPR_PCMR_CP
 0x00000001

	)

358 
	#SPR_PCMR_UMRA
 0x00000002

	)

359 
	#SPR_PCMR_CISM
 0x00000004

	)

360 
	#SPR_PCMR_CIUM
 0x00000008

	)

361 
	#SPR_PCMR_LA
 0x00000010

	)

362 
	#SPR_PCMR_SA
 0x00000020

	)

363 
	#SPR_PCMR_IF
 0x00000040

	)

364 
	#SPR_PCMR_DCM
 0x00000080

	)

365 
	#SPR_PCMR_ICM
 0x00000100

	)

366 
	#SPR_PCMR_IFS
 0x00000200

	)

367 
	#SPR_PCMR_LSUS
 0x00000400

	)

368 
	#SPR_PCMR_BS
 0x00000800

	)

369 
	#SPR_PCMR_DTLBM
 0x00001000

	)

370 
	#SPR_PCMR_ITLBM
 0x00002000

	)

371 
	#SPR_PCMR_DDS
 0x00004000

	)

372 
	#SPR_PCMR_WPE
 0x03ff8000

	)

378 
	#SPR_PMR_SDF
 0x0000000‡

	)

379 
	#SPR_PMR_DME
 0x00000010

	)

380 
	#SPR_PMR_SME
 0x00000020

	)

381 
	#SPR_PMR_DCGE
 0x00000040

	)

382 
	#SPR_PMR_SUME
 0x00000080

	)

388 
	#SPR_PICMR_IUM
 0xfffffff¯

	)

394 
	#SPR_PICPR_IPRIO
 0xfffffff¯

	)

400 
	#SPR_PICSR_IS
 0xfffffff‡

	)

406 
	#SPR_TTCR_PERIOD
 0x0ffffff‡

	)

407 
	#SPR_TTMR_PERIOD
 
SPR_TTCR_PERIOD


	)

408 
	#SPR_TTMR_IP
 0x10000000

	)

409 
	#SPR_TTMR_IE
 0x20000000

	)

410 
	#SPR_TTMR_RT
 0x40000000

	)

411 
	#SPR_TTMR_SR
 0x80000000

	)

412 
	#SPR_TTMR_CR
 0xc0000000

	)

413 
	#SPR_TTMR_M
 0xc0000000

	)

419 
	#NOP_NOP
 0x0000

	)

420 
	#NOP_EXIT
 0x0001

	)

421 
	#NOP_REPORT
 0x0002

	)

422 
	#NOP_PRINTF
 0x0003

	)

423 
	#NOP_REPORT_FIRST
 0x0400

	)

424 
	#NOP_REPORT_LAST
 0x03f‡

	)

	@libs-user-ucore/arch/or32/sync.h

1 #i‚de‡
__ARCH_TEMPLATE_INCLUDE_SYNC_H__


2 
	#__ARCH_TEMPLATE_INCLUDE_SYNC_H__


	)

4 
	~<öå.h
>

5 
	~<ty≥s.h
>

6 
	~<¨ch.h
>

11 
ölöe
 
boﬁ


12 
	$__öå_ßve
() {

13 
uöt32_t
 
§
;

14 
§
 = 
	`mf•r
 (
SPR_SR
);

15 
c
 = 0;

16 i‡(
§
 & 
SPR_SR_IEE
)

17 
c
 = 1;

18 
	`mt•r
 (
SPR_SR
, 
§
 & ~(
SPR_SR_IEE
 | 
SPR_SR_TEE
));

19  
c
;

20 
	}
}

24 
ölöe
 

25 
	$__öå_ª°‹e
(
boﬁ
 
Êag
) {

26 i‡(
Êag
) {

27 
	`öå_íabÀ
();

29 
	}
}

31 
	#loˇl_öå_ßve
(
x
Ëdÿ{ x = 
	`__öå_ßve
(); } 0)

	)

32 
	#loˇl_öå_ª°‹e
(
x
Ë
	`__öå_ª°‹e
(x);

	)

34 
sync_öô
();

	@libs-user-ucore/arch/or32/syscall.c

1 
	~<sysˇŒ.h
>

2 
	~<uni°d.h
>

3 
	~<ty≥s.h
>

4 
	~<°d¨g.h
>

6 
	#MAX_ARGS
 5

	)

8 
uöt32_t


9 
	$sysˇŒ
(
num
, ...) {

10 
va_li°
 
≠
;

11 
	`va_°¨t
(
≠
, 
num
);

12 
uöt32_t
 
a
[
MAX_ARGS
];

13 
i
;

14 
i
 = 0; i < 
MAX_ARGS
; i ++) {

15 
a
[
i
] = 
	`va_¨g
(
≠
, 
uöt32_t
);

17 
	`va_íd
(
≠
);

19 
uöt32_t
 
ªt
;

20 
uöt32_t
 
_r3
 
	`asm
("r3"Ë
num
;

21 
uöt32_t
 
_r4
 
	`asm
("r4"Ë
a
[0];

22 
uöt32_t
 
_r5
 
	`asm
("r5"Ë
a
[1];

23 
uöt32_t
 
_r6
 
	`asm
("r6"Ë
a
[2];

24 
uöt32_t
 
_r7
 
	`asm
("r7"Ë
a
[3];

25 
uöt32_t
 
_r8
 
	`asm
("r8"Ë
a
[4];

26 
asm
 volatile (

28 : "Ù" (
ªt
)

29 : "r" (
_r3
),

30 "r" (
_r4
),

31 "r" (
_r5
),

32 "r" (
_r6
),

33 "r" (
_r7
),

34 "r" (
_r8
));

35  
ªt
;

36 
	}
}

	@libs-user-ucore/arch/um/arch.h

1 #i‚de‡
__LIBS_USER_UCORE_ARCH_UM_ARCH_H__


2 
	#__LIBS_USER_UCORE_ARCH_UM_ARCH_H__


	)

5 
	#do_div
(
n
, 
ba£
) ({ \

6 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

7 
__ba£
 = (
ba£
); \

8 
	`asm
("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

9 
__uµî
 = 
__high
; \

10 i‡(
__high
 != 0) { \

11 
__uµî
 = 
__high
 % 
__ba£
; \

12 
__high
 = __high / 
__ba£
; \

14 
	`asm
("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

15 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

16 
	`asm
("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

17 
__mod
; \

18 })

	)

	@libs-user-ucore/arch/um/atomic.h

1 #i‚de‡
__ARCH_UM_INCLUDE_ATOMIC_H


2 
	#__ARCH_UM_INCLUDE_ATOMIC_H


	)

4 
	~<ty≥s.h
>

9 vﬁ©ûê
	mcou¡î
;

10 } 
	t©omic_t
;

12 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 

31 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

32  
v
->
cou¡î
;

33 
	}
}

42 
ölöe
 

43 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

44 
v
->
cou¡î
 = 
i
;

45 
	}
}

54 
ölöe
 

55 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

56 
asm
 vﬁ©ûê("add»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

57 
	}
}

66 
ölöe
 

67 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

68 
asm
 vﬁ©ûe("sub»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

69 
	}
}

79 
ölöe
 
boﬁ


80 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

81 
c
;

82 
asm
 vﬁ©ûe("sub»%2, %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
Ë: "ú" (
i
) : "memory");

83  
c
 != 0;

84 
	}
}

92 
ölöe
 

93 
	$©omic_öc
(
©omic_t
 *
v
) {

94 
asm
 vﬁ©ûe("ö˛ %0" : "+m" (
v
->
cou¡î
));

95 
	}
}

103 
ölöe
 

104 
	$©omic_dec
(
©omic_t
 *
v
) {

105 
asm
 vﬁ©ûe("de˛ %0" : "+m" (
v
->
cou¡î
));

106 
	}
}

115 
ölöe
 
boﬁ


116 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

117 
c
;

118 
asm
 vﬁ©ûe("ö˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

119  
c
 != 0;

120 
	}
}

129 
ölöe
 
boﬁ


130 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

131 
c
;

132 
asm
 vﬁ©ûe("de˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

133  
c
 != 0;

134 
	}
}

144 
ölöe
 

145 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

146 
__i
 = 
i
;

147 
asm
 vﬁ©ûe("xadd»%0, %1" : "+r" (
i
), "+m" (
v
->
cou¡î
) :: "memory");

148  
i
 + 
__i
;

149 
	}
}

158 
ölöe
 

159 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

160  
	`©omic_add_ªtu∫
(
v
, -
i
);

161 
	}
}

163 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

168 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

169 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

179 
ölöe
 

180 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

181 
asm
 vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

182 
	}
}

189 
ölöe
 

190 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

191 
asm
 vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

192 
	}
}

199 
ölöe
 

200 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

201 
asm
 vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

202 
	}
}

209 
ölöe
 
boﬁ


210 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

211 
ﬁdbô
;

212 
asm
 vﬁ©ûê("bt¶ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

213  
ﬁdbô
 != 0;

214 
	}
}

221 
ölöe
 
boﬁ


222 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

223 
ﬁdbô
;

224 
asm
 vﬁ©ûê("bå»%2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

225  
ﬁdbô
 != 0;

226 
	}
}

233 
ölöe
 
boﬁ


234 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

235 
ﬁdbô
;

236 
asm
 vﬁ©ûê("bt˛ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

237  
ﬁdbô
 != 0;

238 
	}
}

245 
ölöe
 
boﬁ


246 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

247 
ﬁdbô
;

248 
asm
 vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
ﬁdbô
Ë: "m" (*(vﬁ©ûê*)
addr
), "Ir" (
ƒ
));

249  
ﬁdbô
 != 0;

250 
	}
}

	@libs-user-ucore/arch/um/syscall.c

1 
	~<sysˇŒ.h
>

2 
	~<ty≥s.h
>

3 
	~<°d¨g.h
>

4 
	~<uni°d.h
>

6 
	#MAX_ARGS
 5

	)

8 
uöt32_t


9 
	$sysˇŒ
(
num
, ...) {

10 
va_li°
 
≠
;

11 
	`va_°¨t
(
≠
, 
num
);

12 
uöt32_t
 
a
[
MAX_ARGS
];

13 
i
;

14 
i
 = 0; i < 
MAX_ARGS
; i ++) {

15 
a
[
i
] = 
	`va_¨g
(
≠
, 
uöt32_t
);

17 
	`va_íd
(
≠
);

19 
uöt32_t
 
ªt
;

20 
asm
 volatile (

22 : "˜" (
ªt
)

23 : "i" (
T_SYSCALL
),

24 "a" (
num
),

25 "d" (
a
[0]),

26 "c" (
a
[1]),

27 "b" (
a
[2]),

28 "D" (
a
[3]),

29 "S" (
a
[4])

31  
ªt
;

32 
	}
}

	@libs-user-ucore/arch/x86_64/arch.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<ty≥s.h
>

6 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" ::: "mem‹y")

	)

8 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
ölöe
 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
	sp£udodesc
 {

16 
uöt16_t
 
pd_lim
;

17 
uöçå_t
 
pd_ba£
;

18 } 
	`__©åibuã__
 ((
∑cked
));

20 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
uöçå_t
 
	$r¸1
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
uöçå_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
ölöe
 
uöt8_t


33 
	$öb
(
uöt16_t
 
p‹t
) {

34 
uöt8_t
 
d©a
;

35 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
) : "memory");

36  
d©a
;

37 
	}
}

39 
ölöe
 

40 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

41 
asm
 volatile (

44 : "=D" (
addr
), "=c" (
˙t
)

45 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

47 
	}
}

49 
ölöe
 

50 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

51 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

52 
	}
}

54 
ölöe
 

55 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

56 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

57 
	}
}

59 
ölöe
 

60 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
) {

61 
asm
 volatile (

64 : "=S" (
addr
), "=c" (
˙t
)

65 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

67 
	}
}

69 
ölöe
 

70 
	$lidt
(
p£udodesc
 *
pd
) {

71 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
) : "memory");

72 
	}
}

74 
ölöe
 

75 
	$°i
() {

76 
asm
 volatile ("sti");

77 
	}
}

79 
ölöe
 

80 
	$˛i
() {

81 
asm
 volatile ("cli" ::: "memory");

82 
	}
}

84 
ölöe
 

85 
	$…r
(
uöt16_t
 
£l
) {

86 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
) : "memory");

87 
	}
}

89 
ölöe
 

90 
	$l¸0
(
uöçå_t
 
¸0
) {

91 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
) : "memory");

92 
	}
}

94 
ölöe
 

95 
	$l¸3
(
uöçå_t
 
¸3
) {

96 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
) : "memory");

97 
	}
}

99 
ölöe
 
uöçå_t


100 
	$r¸0
() {

101 
uöçå_t
 
¸0
;

102 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
) :: "memory");

103  
¸0
;

104 
	}
}

106 
ölöe
 
uöçå_t


107 
	$r¸1
() {

108 
uöçå_t
 
¸1
;

109 
asm
 vﬁ©ûê("mov %%¸1, %0" : "Ù" (
¸1
) :: "memory");

110  
¸1
;

111 
	}
}

113 
ölöe
 
uöçå_t


114 
	$r¸2
() {

115 
uöçå_t
 
¸2
;

116 
asm
 vﬁ©ûê("mov %%¸2, %0" : "Ù" (
¸2
) :: "memory");

117  
¸2
;

118 
	}
}

120 
ölöe
 
uöçå_t


121 
	$r¸3
() {

122 
uöçå_t
 
¸3
;

123 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
) :: "memory");

124  
¸3
;

125 
	}
}

127 
ölöe
 

128 
	$övÕg
(*
addr
) {

129 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

130 
	}
}

132 #ifde‡
__UCORE_64__


134 
	#do_div
(
n
, 
ba£
) ({ \

135 
uöt64_t
 
__mod
, 
__ba£
 = (uöt64_t)
ba£
; \

136 
__mod
 = ((
uöt64_t
)(
n
)Ë% 
__ba£
; \

137 (
n
Ë((
uöt64_t
)“)Ë/ 
__ba£
; \

138 
__mod
; \

139 })

	)

141 
ölöe
 
uöt64_t
 
	$ªad_rbp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

142 
ölöe
 
uöt64_t
 
	$ªad_rÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

143 
ölöe
 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

145 
ölöe
 
uöt64_t


146 
	$ªad_rbp
() {

147 
uöt64_t
 
rbp
;

148 
asm
 vﬁ©ûê("movq %%rbp, %0" : "Ù" (
rbp
));

149  
rbp
;

150 
	}
}

152 
ölöe
 
uöt64_t


153 
	$ªad_rÊags
() {

154 
uöt64_t
 
rÊags
;

155 
asm
 vﬁ©ûê("pushfq;Ö›q %0" : "Ù" (
rÊags
));

156  
rÊags
;

157 
	}
}

159 
ölöe
 

160 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
) {

161 
asm
 vﬁ©ûê("pushq %0;Ö›fq" :: "r" (
rÊags
));

162 
	}
}

166 
	#do_div
(
n
, 
ba£
) ({ \

167 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

168 
__ba£
 = (
ba£
); \

169 
	`asm
 ("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

170 
__uµî
 = 
__high
; \

171 i‡(
__high
 != 0) { \

172 
__uµî
 = 
__high
 % 
__ba£
; \

173 
__high
 = __high / 
__ba£
; \

175 
	`asm
 ("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

176 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

177 
	`asm
 ("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

178 
__mod
; \

179 })

	)

181 
ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

182 
ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

183 
ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

185 
ölöe
 
uöt32_t


186 
	$ªad_ebp
() {

187 
uöt32_t
 
ebp
;

188 
asm
 vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
ebp
));

189  
ebp
;

190 
	}
}

192 
ölöe
 
uöt32_t


193 
	$ªad_eÊags
() {

194 
uöt32_t
 
eÊags
;

195 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

196  
eÊags
;

197 
	}
}

199 
ölöe
 

200 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
) {

201 
asm
 vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
eÊags
));

202 
	}
}

206 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

207 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

208 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

209 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

210 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

212 #i‚de‡
__HAVE_ARCH_STRCMP


213 
	#__HAVE_ARCH_STRCMP


	)

214 
ölöe
 

215 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

216 
d0
, 
d1
, 
ªt
;

217 
asm
 volatile (

228 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

229 : "1" (
s1
), "2" (
s2
)

231  
ªt
;

232 
	}
}

236 #i‚de‡
__HAVE_ARCH_STRCPY


237 
	#__HAVE_ARCH_STRCPY


	)

238 
ölöe
 *

239 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

240 
d0
, 
d1
, 
d2
;

241 
asm
 volatile (

246 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

247 : "0" (
§c
), "1" (
d°
) : "memory");

248  
d°
;

249 
	}
}

252 #i‚de‡
__HAVE_ARCH_MEMSET


253 
	#__HAVE_ARCH_MEMSET


	)

254 
ölöe
 *

255 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

256 
d0
, 
d1
;

257 
asm
 volatile (

259 : "=&c" (
d0
), "=&D" (
d1
)

260 : "0" (
n
), "a" (
c
), "1" (
s
)

262  
s
;

263 
	}
}

266 #i‚de‡
__HAVE_ARCH_MEMMOVE


267 
	#__HAVE_ARCH_MEMMOVE


	)

268 
ölöe
 *

269 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

270 i‡(
d°
 < 
§c
) {

271  
	`__mem˝y
(
d°
, 
§c
, 
n
);

273 
d0
, 
d1
, 
d2
;

274 
asm
 volatile (

278 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

279 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

281  
d°
;

282 
	}
}

285 #i‚de‡
__HAVE_ARCH_MEMCPY


286 
	#__HAVE_ARCH_MEMCPY


	)

287 
ölöe
 *

288 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

289 
d0
, 
d1
, 
d2
;

290 
asm
 volatile (

297 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

298 : "0" (
n
 / 4), "m" (n), "1" (
d°
), "2" (
§c
)

300  
d°
;

301 
	}
}

	@libs-user-ucore/arch/x86_64/atomic.h

1 #i‚de‡
__LIBS_ATOMIC_H__


2 
	#__LIBS_ATOMIC_H__


	)

7 vﬁ©ûê
	mcou¡î
;

8 } 
	t©omic_t
;

10 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 

29 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

30  
v
->
cou¡î
;

31 
	}
}

40 
ölöe
 

41 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

42 
v
->
cou¡î
 = 
i
;

43 
	}
}

52 
ölöe
 

53 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

54 
asm
 vﬁ©ûê("add»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

55 
	}
}

64 
ölöe
 

65 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

66 
asm
 vﬁ©ûe("sub»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

67 
	}
}

77 
ölöe
 
boﬁ


78 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

79 
c
;

80 
asm
 vﬁ©ûe("sub»%2, %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
Ë: "ú" (
i
) : "memory");

81  
c
 != 0;

82 
	}
}

90 
ölöe
 

91 
	$©omic_öc
(
©omic_t
 *
v
) {

92 
asm
 vﬁ©ûe("ö˛ %0" : "+m" (
v
->
cou¡î
));

93 
	}
}

101 
ölöe
 

102 
	$©omic_dec
(
©omic_t
 *
v
) {

103 
asm
 vﬁ©ûe("de˛ %0" : "+m" (
v
->
cou¡î
));

104 
	}
}

113 
ölöe
 
boﬁ


114 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

115 
c
;

116 
asm
 vﬁ©ûe("ö˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

117  
c
 != 0;

118 
	}
}

127 
ölöe
 
boﬁ


128 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

129 
c
;

130 
asm
 vﬁ©ûe("de˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

131  
c
 != 0;

132 
	}
}

142 
ölöe
 

143 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

144 
__i
 = 
i
;

145 
asm
 vﬁ©ûe("xadd»%0, %1" : "+r" (
i
), "+m" (
v
->
cou¡î
) :: "memory");

146  
i
 + 
__i
;

147 
	}
}

156 
ölöe
 

157 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

158  
	`©omic_add_ªtu∫
(
v
, -
i
);

159 
	}
}

161 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

162 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

163 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

177 
ölöe
 

178 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

179 
asm
 vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

180 
	}
}

187 
ölöe
 

188 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

189 
asm
 vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

190 
	}
}

197 
ölöe
 

198 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

199 
asm
 vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

200 
	}
}

207 
ölöe
 
boﬁ


208 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

209 
ﬁdbô
;

210 
asm
 vﬁ©ûê("bt¶ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

211  
ﬁdbô
 != 0;

212 
	}
}

219 
ölöe
 
boﬁ


220 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

221 
ﬁdbô
;

222 
asm
 vﬁ©ûê("bå»%2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

223  
ﬁdbô
 != 0;

224 
	}
}

231 
ölöe
 
boﬁ


232 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

233 
ﬁdbô
;

234 
asm
 vﬁ©ûê("bt˛ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

235  
ﬁdbô
 != 0;

236 
	}
}

243 
ölöe
 
boﬁ


244 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

245 
ﬁdbô
;

246 
asm
 vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
ﬁdbô
Ë: "m" (*(vﬁ©ûê*)
addr
), "Ir" (
ƒ
));

247  
ﬁdbô
 != 0;

248 
	}
}

	@libs-user-ucore/arch/x86_64/syscall.c

1 
	~<ty≥s.h
>

2 
	~<°d¨g.h
>

3 
	~<uni°d.h
>

5 
	#MAX_ARGS
 6

	)

7 
uöt64_t


8 
	$sysˇŒ
(
num
, ...) {

9 
va_li°
 
≠
;

10 
	`va_°¨t
(
≠
, 
num
);

11 
uöt64_t
 
a
[
MAX_ARGS
];

12 
i
;

13 
i
 = 0; i < 
MAX_ARGS
; i ++) {

14 
a
[
i
] = 
	`va_¨g
(
≠
, 
uöt64_t
);

16 
	`va_íd
(
≠
);

18 
uöt64_t
 
ªt
;

19 
asm
 volatile (

27 : "˜" (
ªt
)

28 : "i" (
T_SYSCALL
),

29 "a" (
num
),

30 "b" (
a
)

32  
ªt
;

33 
	}
}

	@libs-user-ucore/common/dirent.h

1 #i‚de‡
__LIBS_DIRENT_H__


2 
	#__LIBS_DIRENT_H__


	)

4 
	~<ty≥s.h
>

5 
	~<uni°d.h
>

7 
	sdúít
 {

8 
off_t
 
	moff£t
;

9 
	m«me
[
FS_MAX_FNAME_LEN
 + 1];

	@libs-user-ucore/common/elf.h

1 #i‚de‡
__LIBS_ELF_H__


2 
	#__LIBS_ELF_H__


	)

4 
	~<ty≥s.h
>

6 
	#ELF_MAGIC
 0x464C457FU

7 

	)

8 #ifde‡
__UCORE_64__


11 
	sñfhdr
 {

12 
uöt32_t
 
	me_magic
;

13 
uöt8_t
 
	me_ñf
[12];

14 
uöt16_t
 
	me_ty≥
;

15 
uöt16_t
 
	me_machöe
;

16 
uöt32_t
 
	me_vîsi⁄
;

17 
uöt64_t
 
	me_íåy
;

18 
uöt64_t
 
	me_phoff
;

19 
uöt64_t
 
	me_shoff
;

20 
uöt32_t
 
	me_Êags
;

21 
uöt16_t
 
	me_ehsize
;

22 
uöt16_t
 
	me_phítsize
;

23 
uöt16_t
 
	me_phnum
;

24 
uöt16_t
 
	me_shítsize
;

25 
uöt16_t
 
	me_shnum
;

26 
uöt16_t
 
	me_sh°∫dx
;

30 
	s¥oghdr
 {

31 
uöt32_t
 
	mp_ty≥
;

32 
uöt32_t
 
	mp_Êags
;

33 
uöt64_t
 
	mp_off£t
;

34 
uöt64_t
 
	mp_va
;

35 
uöt64_t
 
	mp_∑
;

36 
uöt64_t
 
	mp_fûesz
;

37 
uöt64_t
 
	mp_memsz
;

38 
uöt64_t
 
	mp_Æign
;

43 
	sñfhdr
 {

44 
uöt32_t
 
	me_magic
;

45 
uöt8_t
 
	me_ñf
[12];

46 
uöt16_t
 
	me_ty≥
;

47 
uöt16_t
 
	me_machöe
;

48 
uöt32_t
 
	me_vîsi⁄
;

49 
uöt32_t
 
	me_íåy
;

50 
uöt32_t
 
	me_phoff
;

51 
uöt32_t
 
	me_shoff
;

52 
uöt32_t
 
	me_Êags
;

53 
uöt16_t
 
	me_ehsize
;

54 
uöt16_t
 
	me_phítsize
;

55 
uöt16_t
 
	me_phnum
;

56 
uöt16_t
 
	me_shítsize
;

57 
uöt16_t
 
	me_shnum
;

58 
uöt16_t
 
	me_sh°∫dx
;

62 
	s¥oghdr
 {

63 
uöt32_t
 
	mp_ty≥
;

64 
uöt32_t
 
	mp_off£t
;

65 
uöt32_t
 
	mp_va
;

66 
uöt32_t
 
	mp_∑
;

67 
uöt32_t
 
	mp_fûesz
;

68 
uöt32_t
 
	mp_memsz
;

69 
uöt32_t
 
	mp_Êags
;

70 
uöt32_t
 
	mp_Æign
;

76 
	#ELF_PT_LOAD
 1

	)

79 
	#ELF_PF_X
 1

	)

80 
	#ELF_PF_W
 2

	)

81 
	#ELF_PF_R
 4

	)

	@libs-user-ucore/common/error.h

1 #i‚de‡
__LIBS_ERROR_H__


2 
	#__LIBS_ERROR_H__


	)

5 
	#E_UNSPECIFIED
 1

6 
	#E_BAD_PROC
 2

7 
	#E_INVAL
 3

8 
	#E_NO_MEM
 4

9 
	#E_NO_FREE_PROC
 5

10 
	#E_FAULT
 6

11 
	#E_SWAP_FAULT
 7

12 
	#E_INVAL_ELF
 8

13 
	#E_KILLED
 9

14 
	#E_PANIC
 10

15 
	#E_TIMEOUT
 11

16 
	#E_TOO_BIG
 12

17 
	#E_NO_DEV
 13

18 
	#E_NA_DEV
 14

19 
	#E_BUSY
 15

20 
	#E_NOENT
 16

21 
	#E_ISDIR
 17

22 
	#E_NOTDIR
 18

23 
	#E_XDEV
 19

24 
	#E_UNIMP
 20

25 
	#E_SEEK
 21

26 
	#E_MAX_OPEN
 22

27 
	#E_EXISTS
 23

28 
	#E_NOTEMPTY
 24

29 

	)

30 
	#MAXERROR
 24

	)

	@libs-user-ucore/common/hash.c

1 
	~<°dlib.h
>

4 
	#GOLDEN_RATIO_PRIME_32
 0x9e370001UL

	)

13 
uöt32_t


14 
	$hash32
(
uöt32_t
 
vÆ
, 
bôs
) {

15 
uöt32_t
 
hash
 = 
vÆ
 * 
GOLDEN_RATIO_PRIME_32
;

16  (
hash
 >> (32 - 
bôs
));

17 
	}
}

	@libs-user-ucore/common/list.h

1 #i‚de‡
__LIBS_LIST_H__


2 
	#__LIBS_LIST_H__


	)

4 #i‚de‡
__ASSEMBLER__


6 
	~<ty≥s.h
>

17 
	sli°_íåy
 {

18 
li°_íåy
 *
	m¥ev
, *
	m√xt
;

21 
li°_íåy
 
	tli°_íåy_t
;

23 
ölöe
 
	$li°_öô
(
li°_íåy_t
 *
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$li°_add
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$li°_add_bef‹e
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
	$li°_add_a·î
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$li°_dñ
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
	$li°_dñ_öô
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁ
 
	$li°_em±y
(
li°_íåy_t
 *
li°
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
li°_íåy_t
 *
	$li°_√xt
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
li°_íåy_t
 *
	$li°_¥ev
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
	$__li°_add
(
li°_íåy_t
 *
ñm
,Üi°_íåy_à*
¥ev
,Üi°_íåy_à*
√xt
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
	$__li°_dñ
(
li°_íåy_t
 *
¥ev
,Üi°_íåy_à*
√xt
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 

41 
	$li°_öô
(
li°_íåy_t
 *
ñm
) {

42 
ñm
->
¥ev
 =Élm->
√xt
 =Élm;

43 
	}
}

53 
ölöe
 

54 
	$li°_add
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

55 
	`li°_add_a·î
(
li°ñm
, 
ñm
);

56 
	}
}

66 
ölöe
 

67 
	$li°_add_bef‹e
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

68 
	`__li°_add
(
ñm
, 
li°ñm
->
¥ev
,Üistelm);

69 
	}
}

79 
ölöe
 

80 
	$li°_add_a·î
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

81 
	`__li°_add
(
ñm
, 
li°ñm
,Üi°ñm->
√xt
);

82 
	}
}

91 
ölöe
 

92 
	$li°_dñ
(
li°_íåy_t
 *
li°ñm
) {

93 
	`__li°_dñ
(
li°ñm
->
¥ev
,Üi°ñm->
√xt
);

94 
	}
}

102 
ölöe
 

103 
	$li°_dñ_öô
(
li°_íåy_t
 *
li°ñm
) {

104 
	`li°_dñ
(
li°ñm
);

105 
	`li°_öô
(
li°ñm
);

106 
	}
}

112 
ölöe
 
boﬁ


113 
	$li°_em±y
(
li°_íåy_t
 *
li°
) {

114  
li°
->
√xt
 ==Üist;

115 
	}
}

121 
li°_íåy_t
 *

122 
	$li°_√xt
(
li°_íåy_t
 *
li°ñm
) {

123  
li°ñm
->
√xt
;

124 
	}
}

130 
li°_íåy_t
 *

131 
	$li°_¥ev
(
li°_íåy_t
 *
li°ñm
) {

132  
li°ñm
->
¥ev
;

133 
	}
}

141 
ölöe
 

142 
	$__li°_add
(
li°_íåy_t
 *
ñm
,Üi°_íåy_à*
¥ev
,Üi°_íåy_à*
√xt
) {

143 
¥ev
->
√xt
 =Çext->¥ev = 
ñm
;

144 
ñm
->
√xt
 =Çext;

145 
ñm
->
¥ev
 =Örev;

146 
	}
}

154 
ölöe
 

155 
	$__li°_dñ
(
li°_íåy_t
 *
¥ev
,Üi°_íåy_à*
√xt
) {

156 
¥ev
->
√xt
 =Çext;

157 
√xt
->
¥ev
 =Örev;

158 
	}
}

	@libs-user-ucore/common/mboxbuf.h

1 #i‚de‡
__LIBS_MBOXBUF_H__


2 
	#__LIBS_MBOXBUF_H__


	)

4 
	~<ty≥s.h
>

6 
	#MAX_MSG_SLOTS
 0x1000

	)

7 
	#MAX_MSG_BYTES
 0x10000

	)

9 
	smboxbuf
 {

10 
	m‰om
;

11 
size_t
 
	mÀn
;

12 
size_t
 
	msize
;

13 *
	md©a
;

16 
	smboxöfo
 {

17 
size_t
 
	m¶Ÿs
;

18 
size_t
 
	mmax_¶Ÿs
;

19 
boﬁ
 
	möu£
;

20 
boﬁ
 
	mhas_£ndî
;

21 
boﬁ
 
	mhas_ª˚ivî
;

	@libs-user-ucore/common/printfmt.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<îr‹.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

18 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
 + 1] = {

19 [0] 
NULL
,

20 [
E_UNSPECIFIED
] "unspecifiedÉrror",

21 [
E_BAD_PROC
] "badÖrocess",

22 [
E_INVAL
] "invalidÖarameter",

23 [
E_NO_MEM
] "out of memory",

24 [
E_NO_FREE_PROC
] "out ofÖrocesses",

25 [
E_FAULT
] "segmentation fault",

26 [
E_SWAP_FAULT
] "swap diskÑead/write fault",

27 [
E_INVAL_ELF
] "invalidÉlf file",

28 [
E_KILLED
] "process is killed",

29 [
E_PANIC
] "panic failure",

30 [
E_TIMEOUT
] "timeout",

31 [
E_TOO_BIG
] "argument isÅoo big",

32 [
E_NO_DEV
] "no such device",

33 [
E_NA_DEV
] "deviceÇotávailable",

34 [
E_BUSY
] "device/file is busy",

35 [
E_NOENT
] "no such file or directory",

36 [
E_ISDIR
] "isá directory",

37 [
E_NOTDIR
] "notá directory",

38 [
E_XDEV
] "cross deviceÜink",

39 [
E_UNIMP
] "unimplemented feature",

40 [
E_SEEK
] "illegal seek",

41 [
E_MAX_OPEN
] "too many filesáre open",

42 [
E_EXISTS
] "file or directoryálreadyÉxists",

43 [
E_NOTEMPTY
] "directory isÇotÉmpty",

57 
¥öäum
((*
putch
)(, *, ), 
fd
, *
putd©
,

58 
num
, 
ba£
, 
width
, 
∑dc
) {

59 
ªsu…
 = 
num
;

60 
mod
 = 
	`do_div
(
ªsu…
, 
ba£
);

63 i‡(
num
 >
ba£
) {

64 
	`¥öäum
(
putch
, 
fd
, 
putd©
, 
ªsu…
, 
ba£
, 
width
 - 1, 
∑dc
);

67 -- 
width
 > 0)

68 
	`putch
(
∑dc
, 
putd©
, 
fd
);

71 
	`putch
("0123456789abcdef"[
mod
], 
putd©
, 
fd
);

72 
	}
}

74 
	#GETINT_MACRO


	)

81 #ifde‡
GETINT_MACRO


82 
	#gëuöt
(
≠
, 
lÊag
) \

83 ((
lÊag
 >2Ë? ()
	`va_¨g
(
≠
, ) : \

84 (
lÊag
Ë? ()
	`va_¨g
(
≠
, ) : \

85 ()
	`va_¨g
(
≠
, ) \

86 )

	)

89 
	$gëuöt
(
va_li°
 
≠
, 
lÊag
) {

90 i‡(
lÊag
 >= 2) {

91  
	`va_¨g
(
≠
, );

93 i‡(
lÊag
) {

94  
	`va_¨g
(
≠
, );

97  
	`va_¨g
(
≠
, );

99 
	}
}

107 #ifde‡
GETINT_MACRO


108 
	#gëöt
(
≠
, 
lÊag
) \

109 ((
lÊag
 >2Ë? ()
	`va_¨g
(
≠
, ) : \

110 (
lÊag
Ë? ()
	`va_¨g
(
≠
, ) : \

111 ()
	`va_¨g
(
≠
, ) \

112 )

	)

115 
	$gëöt
(
va_li°
 
≠
, 
lÊag
) {

116 i‡(
lÊag
 >= 2) {

117  
	`va_¨g
(
≠
, );

119 i‡(
lÊag
) {

120  
	`va_¨g
(
≠
, );

123  
	`va_¨g
(
≠
, );

125 
	}
}

136 
¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, ...) {

137 
va_li°
 
≠
;

139 
	`va_°¨t
(
≠
, 
fmt
);

140 
	`v¥ötfmt
(
putch
, 
fd
, 
putd©
, 
fmt
, 
≠
);

141 
	`va_íd
(
≠
);

142 
	}
}

157 
v¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
) {

158 c⁄° *
p
;

159 
ch
, 
îr
;

160 
num
;

161 
ba£
, 
width
, 
¥ecisi⁄
, 
lÊag
, 
ÆtÊag
;

164 (
ch
 = *(*)
fmt
 ++) != '%') {

165 i‡(
ch
 == '\0') {

168 
	`putch
(
ch
, 
putd©
, 
fd
);

172 
∑dc
 = ' ';

173 
width
 = 
¥ecisi⁄
 = -1;

174 
lÊag
 = 
ÆtÊag
 = 0;

176 
ªswôch
:

177 
ch
 = *(*)
fmt
 ++) {

181 
∑dc
 = '-';

182 
ªswôch
;

186 
∑dc
 = '0';

187 
ªswôch
;

191 
¥ecisi⁄
 = 0; ; ++ 
fmt
) {

192 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

193 
ch
 = *
fmt
;

194 i‡(
ch
 < '0' || ch > '9') {

198 
¥o˚ss_¥ecisi⁄
;

201 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

202 
¥o˚ss_¥ecisi⁄
;

205 i‡(
width
 < 0)

206 
width
 = 0;

207 
ªswôch
;

210 
ÆtÊag
 = 1;

211 
ªswôch
;

213 
¥o˚ss_¥ecisi⁄
:

214 i‡(
width
 < 0)

215 
width
 = 
¥ecisi⁄
,Örecision = -1;

216 
ªswôch
;

220 
lÊag
 ++;

221 
ªswôch
;

225 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
, 
fd
);

230 
îr
 = 
	`va_¨g
(
≠
, );

231 i‡(
îr
 < 0) {

232 
îr
 = -err;

234 i‡(
îr
 > 
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
) {

235 
	`¥ötfmt
(
putch
, 
fd
, 
putd©
, "îr‹ %d", 
îr
);

238 
	`¥ötfmt
(
putch
, 
fd
, 
putd©
, "%s", 
p
);

244 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
) {

245 
p
 = "(null)";

247 i‡(
width
 > 0 && 
∑dc
 != '-') {

248 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width --) {

249 
	`putch
(
∑dc
, 
putd©
, 
fd
);

252 ; (
ch
 = *
p
 ++Ë!'\0' && (
¥ecisi⁄
 < 0 || --Öªcisi⁄ >0); 
width
 --) {

253 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~')) {

254 
	`putch
('?', 
putd©
, 
fd
);

257 
	`putch
(
ch
, 
putd©
, 
fd
);

260 ; 
width
 > 0; width --) {

261 
	`putch
(' ', 
putd©
, 
fd
);

267 
num
 = 
	`gëöt
(
≠
, 
lÊag
);

268 i‡(()
num
 < 0) {

269 
	`putch
('-', 
putd©
, 
fd
);

270 
num
 = -()num;

272 
ba£
 = 10;

273 
numbî
;

277 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

278 
ba£
 = 10;

279 
numbî
;

283 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

284 
ba£
 = 8;

285 
numbî
;

289 
	`putch
('0', 
putd©
, 
fd
);

290 
	`putch
('x', 
putd©
, 
fd
);

291 
num
 = ()(
uöçå_t
)
	`va_¨g
(
≠
, *);

292 
ba£
 = 16;

293 
numbî
;

297 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

298 
ba£
 = 16;

299 
numbî
:

300 
	`¥öäum
(
putch
, 
fd
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

305 
	`putch
(
ch
, 
putd©
, 
fd
);

310 
	`putch
('%', 
putd©
, 
fd
);

311 
fmt
 --; fmt[-1] != '%'; fmt --)

316 
	}
}

319 
	s•rötbuf
 {

320 *
	mbuf
;

321 *
	mebuf
;

322 
	m˙t
;

331 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
) {

332 
b
->
˙t
 ++;

333 i‡(
b
->
buf
 < b->
ebuf
) {

334 *
b
->
buf
 ++ = 
ch
;

336 
	}
}

345 
	$¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...) {

346 
va_li°
 
≠
;

347 
˙t
;

348 
	`va_°¨t
(
≠
, 
fmt
);

349 
˙t
 = 
	`v¢¥ötf
(
°r
, 
size
, 
fmt
, 
≠
);

350 
	`va_íd
(
≠
);

351  
˙t
;

352 
	}
}

369 
	$v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

370 
•rötbuf
 
b
 = {
°r
, så + 
size
 - 1, 0};

371 i‡(
°r
 =
NULL
 || 
b
.
buf
 > b.
ebuf
) {

372  -
E_INVAL
;

375 
	`v¥ötfmt
((*)
•röçutch
, 
NO_FD
, &
b
, 
fmt
, 
≠
);

377 *
b
.
buf
 = '\0';

378  
b
.
˙t
;

379 
	}
}

	@libs-user-ucore/common/rand.c

1 
	~<¨ch.h
>

2 
	~<°dlib.h
>

4 
	g√xt
 = 1;

12 
	$ønd
() {

13 
√xt
 = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);

14 
ªsu…
 = (
√xt
 >> 12);

15  ()
	`do_div
(
ªsu…
, 
RAND_MAX
 + 1);

16 
	}
}

23 
	$§™d
(
£ed
) {

24 
√xt
 = 
£ed
;

25 
	}
}

	@libs-user-ucore/common/stat.h

1 #i‚de‡
__LIBS_STAT_H__


2 
	#__LIBS_STAT_H__


	)

4 
	~<ty≥s.h
>

6 
	s°©
 {

7 
uöt32_t
 
	m°_mode
;

8 
size_t
 
	m°_∆öks
;

9 
size_t
 
	m°_blocks
;

10 
size_t
 
	m°_size
;

13 
	#S_IFMT
 070000

14 
	#S_IFREG
 010000

15 
	#S_IFDIR
 020000

16 
	#S_IFLNK
 030000

17 
	#S_IFCHR
 040000

18 
	#S_IFBLK
 050000

19 

	)

20 
	#S_ISREG
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFREG
)

21 
	#S_ISDIR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFDIR
)

22 
	#S_ISLNK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFLNK
)

23 
	#S_ISCHR
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFCHR
)

24 
	#S_ISBLK
(
mode
Ë(((modeË& 
S_IFMT
Ë=
S_IFBLK
)

25 

	)

	@libs-user-ucore/common/stdarg.h

1 #i‚de‡
__LIBS_STDARG_H__


2 
	#__LIBS_STDARG_H__


	)

5 
__buûtö_va_li°
 
	tva_li°
;

7 
	#va_°¨t
(
≠
, 
œ°
Ë(
	`__buûtö_va_°¨t
◊p,Üa°))

	)

8 
	#va_¨g
(
≠
, 
ty≥
Ë(
	`__buûtö_va_¨g
◊p,Åy≥))

	)

9 
	#va_íd
(
≠
Ë

	)

	@libs-user-ucore/common/stdio.h

1 #i‚de‡
__LIBS_STDIO_H__


2 
	#__LIBS_STDIO_H__


	)

4 
	~<ty≥s.h
>

5 
	~<°d¨g.h
>

8 
˝rötf
(c⁄° *
fmt
, ...);

9 
v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
);

10 
˝utch¨
(
c
);

11 
˝uts
(c⁄° *
°r
);

12 
gëch¨
();

15 *
ªadlöe
(c⁄° *
¥om±
);

18 
¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, ...);

19 
	`v¥ötfmt
((*
putch
)(, *, ), 
fd
, *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
);

20 
	`¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...);

21 
	`v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
);

	@libs-user-ucore/common/stdlib.h

1 #i‚de‡
__LIBS_STDLIB_H__


2 
	#__LIBS_STDLIB_H__


	)

4 
	~<ty≥s.h
>

7 
	#RAND_MAX
 2147483647UL

	)

10 
ønd
();

11 
§™d
(
£ed
);

14 
uöt32_t
 
hash32
(uöt32_à
vÆ
, 
bôs
);

	@libs-user-ucore/common/string.c

1 
	~<°rög.h
>

2 
	~<¨ch.h
>

11 
size_t


12 
	$°æí
(c⁄° *
s
) {

13 
size_t
 
˙t
 = 0;

14 *
s
 ++ != '\0') {

15 
˙t
 ++;

17  
˙t
;

18 
	}
}

33 
size_t


34 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
Àn
) {

35 
size_t
 
˙t
 = 0;

36 
˙t
 < 
Àn
 && *
s
 ++ != '\0') {

37 
˙t
 ++;

39  
˙t
;

40 
	}
}

55 
	$°r˝y
(*
d°
, c⁄° *
§c
) {

56 #ifde‡
__HAVE_ARCH_STRCPY


57  
	`__°r˝y
(
d°
, 
§c
);

59 *
p
 = 
d°
;

60 (*
p
 ++ = *
§c
 ++) != '\0')

62  
d°
;

64 
	}
}

77 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

78 *
p
 = 
d°
;

79 
Àn
 > 0) {

80 i‡((*
p
 = *
§c
) != '\0') {

81 
§c
 ++;

83 
p
 ++, 
Àn
 --;

85  
d°
;

86 
	}
}

97 
	$°rˇt
(*
d°
, c⁄° *
§c
) {

98  
	`°r˝y
(
d°
 + 
	`°æí
(d°), 
§c
);

99 
	}
}

117 
	$°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

118 #ifde‡
__HAVE_ARCH_STRCMP


119  
	`__°rcmp
(
s1
, 
s2
);

121 *
s1
 !'\0' && *s1 =*
s2
) {

122 
s1
 ++, 
s2
 ++;

124  ()(()*
s1
 - ()*
s2
);

126 
	}
}

140 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
) {

141 
n
 > 0 && *
s1
 !'\0' && *s1 =*
s2
) {

142 
n
 --, 
s1
 ++, 
s2
 ++;

144  (
n
 =0Ë? 0 : ()(()*
s1
 - ()*
s2
);

145 
	}
}

156 
	$°rchr
(c⁄° *
s
, 
c
) {

157 *
s
 != '\0') {

158 i‡(*
s
 =
c
) {

159  (*)
s
;

161 
s
 ++;

163  
NULL
;

164 
	}
}

176 
	$°rföd
(c⁄° *
s
, 
c
) {

177 *
s
 != '\0') {

178 i‡(*
s
 =
c
) {

181 
s
 ++;

183  (*)
s
;

184 
	}
}

217 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
) {

218 
√g
 = 0;

219 
vÆ
 = 0;

222 *
s
 == ' ' || *s == '\t') {

223 
s
 ++;

227 i‡(*
s
 == '+') {

228 
s
 ++;

230 i‡(*
s
 == '-') {

231 
s
 ++, 
√g
 = 1;

235 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x')) {

236 
s
 +2, 
ba£
 = 16;

238 i‡(
ba£
 =0 && 
s
[0] == '0') {

239 
s
 ++, 
ba£
 = 8;

241 i‡(
ba£
 == 0) {

242 
ba£
 = 10;

247 
dig
;

249 i‡(*
s
 >= '0' && *s <= '9') {

250 
dig
 = *
s
 - '0';

252 i‡(*
s
 >= 'a' && *s <= 'z') {

253 
dig
 = *
s
 - 'a' + 10;

255 i‡(*
s
 >= 'A' && *s <= 'Z') {

256 
dig
 = *
s
 - 'A' + 10;

261 i‡(
dig
 >
ba£
) {

264 
s
 ++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

268 i‡(
íd±r
) {

269 *
íd±r
 = (*Ë
s
;

271  (
√g
 ? -
vÆ
 : val);

272 
	}
}

284 
	$mem£t
(*
s
, 
c
, 
size_t
 
n
) {

285 #ifde‡
__HAVE_ARCH_MEMSET


286  
	`__mem£t
(
s
, 
c
, 
n
);

288 *
p
 = 
s
;

289 
n
 -- > 0) {

290 *
p
 ++ = 
c
;

292  
s
;

294 
	}
}

306 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

307 #ifde‡
__HAVE_ARCH_MEMMOVE


308  
	`__memmove
(
d°
, 
§c
, 
n
);

310 c⁄° *
s
 = 
§c
;

311 *
d
 = 
d°
;

312 i‡(
s
 < 
d
 && s + 
n
 > d) {

313 
s
 +
n
, 
d
 +=Ç;

314 
n
 -- > 0) {

315 *-- 
d
 = *-- 
s
;

318 
n
 -- > 0) {

319 *
d
 ++ = *
s
 ++;

322  
d°
;

324 
	}
}

341 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

342 #ifde‡
__HAVE_ARCH_MEMCPY


343  
	`__mem˝y
(
d°
, 
§c
, 
n
);

345 c⁄° *
s
 = 
§c
;

346 *
d
 = 
d°
;

347 
n
 -- > 0) {

348 *
d
 ++ = *
s
 ++;

350  
d°
;

352 
	}
}

369 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
) {

370 c⁄° *
s1
 = (c⁄° *)
v1
;

371 c⁄° *
s2
 = (c⁄° *)
v2
;

372 
n
 -- > 0) {

373 i‡(*
s1
 !*
s2
) {

374  ()(()*
s1
 - ()*
s2
);

376 
s1
 ++, 
s2
 ++;

379 
	}
}

	@libs-user-ucore/common/string.h

1 #i‚de‡
__LIBS_STRING_H__


2 
	#__LIBS_STRING_H__


	)

4 
	~<ty≥s.h
>

6 
size_t
 
°æí
(c⁄° *
s
);

7 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
Àn
);

9 *
°r˝y
(*
d°
, c⁄° *
§c
);

10 *
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

11 *
°rˇt
(*
d°
, c⁄° *
§c
);

12 *
°rdup
(c⁄° *
§c
);

13 *
°ødd
(c⁄° *
§c1
, c⁄° *
§c2
);

15 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

16 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

18 *
°rchr
(c⁄° *
s
, 
c
);

19 *
°rföd
(c⁄° *
s
, 
c
);

20 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

22 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

23 *
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

24 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

25 
memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
);

	@libs-user-ucore/common/types.h

1 #i‚de‡
__LIBS_TYPES_H__


2 
	#__LIBS_TYPES_H__


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*)0)

	)

8 
	#CHAR_BIT
 8

	)

11 
	tboﬁ
;

14 
	töt8_t
;

15 
	tuöt8_t
;

16 
	töt16_t
;

17 
	tuöt16_t
;

18 
	töt32_t
;

19 
	tuöt32_t
;

20 
	töt64_t
;

21 
	tuöt64_t
;

23 #i‡
deföed
(
__LP64__
Ë|| deföed(
__64BIT__
Ë|| deföed(
_LP64
)

24 #i‚de‡
__UCORE_64__


25 
	#__UCORE_64__


	)

35 #ifde‡
__UCORE_64__


38 
öt64_t
 
	töçå_t
;

39 
uöt64_t
 
	tuöçå_t
;

44 
öt32_t
 
	töçå_t
;

45 
uöt32_t
 
	tuöçå_t
;

50 
uöçå_t
 
	tsize_t
;

53 
öçå_t
 
	toff_t
;

56 
size_t
 
	tµn_t
;

59 
uöçå_t
 
	t£m_t
;

65 
	#ROUNDDOWN
(
a
, 
n
) ({ \

66 
size_t
 
__a
 = (size_t)(
a
); \

67 (
	`ty≥of
(
a
))(
__a
 - __®% (
n
)); \

68 })

	)

71 
	#ROUNDUP
(
a
, 
n
) ({ \

72 
size_t
 
__n
 = (size_t)(
n
); \

73 (
	`ty≥of
(
a
))(
	`ROUNDDOWN
((
size_t
)◊Ë+ 
__n
 - 1, __n)); \

74 })

	)

77 
	#ROUNDUP_DIV
(
a
, 
n
) ({ \

78 
uöt32_t
 
__n
 = (uöt32_t)(
n
); \

79 (
	`ty≥of
(
a
))((◊Ë+ 
__n
 - 1) / __n); \

80 })

	)

83 
	#off£tof
(
ty≥
, 
membî
) \

84 ((
size_t
)(&((
ty≥
 *)0)->
membî
))

	)

92 
	#to_°ru˘
(
±r
, 
ty≥
, 
membî
) \

93 ((
ty≥
 *)((*)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

	@libs-user-ucore/common/unistd.h

1 #i‚de‡
__LIBS_UNISTD_H__


2 
	#__LIBS_UNISTD_H__


	)

4 
	#T_SYSCALL
 0x80

	)

7 
	#SYS_exô
 1

	)

8 
	#SYS_f‹k
 2

	)

9 
	#SYS_waô
 3

	)

10 
	#SYS_exec
 4

	)

11 
	#SYS_˛⁄e
 5

	)

12 
	#SYS_exô_thªad
 9

	)

13 
	#SYS_yõld
 10

	)

14 
	#SYS_¶ìp
 11

	)

15 
	#SYS_kûl
 12

	)

16 
	#SYS_gëtime
 17

	)

17 
	#SYS_gëpid
 18

	)

18 
	#SYS_brk
 19

	)

19 
	#SYS_mm≠
 20

	)

20 
	#SYS_munm≠
 21

	)

21 
	#SYS_shmem
 22

	)

22 
	#SYS_putc
 30

	)

23 
	#SYS_pgdú
 31

	)

24 
	#SYS_£m_öô
 40

	)

25 
	#SYS_£m_po°
 41

	)

26 
	#SYS_£m_waô
 42

	)

27 
	#SYS_£m_‰ì
 43

	)

28 
	#SYS_£m_gë_vÆue
 44

	)

29 
	#SYS_evít_£nd
 48

	)

30 
	#SYS_evít_ªcv
 49

	)

31 
	#SYS_mbox_öô
 50

	)

32 
	#SYS_mbox_£nd
 51

	)

33 
	#SYS_mbox_ªcv
 52

	)

34 
	#SYS_mbox_‰ì
 53

	)

35 
	#SYS_mbox_öfo
 54

	)

36 
	#SYS_›í
 100

	)

37 
	#SYS_˛o£
 101

	)

38 
	#SYS_ªad
 102

	)

39 
	#SYS_wrôe
 103

	)

40 
	#SYS_£ek
 104

	)

41 
	#SYS_f°©
 110

	)

42 
	#SYS_fsync
 111

	)

43 
	#SYS_chdú
 120

	)

44 
	#SYS_gëcwd
 121

	)

45 
	#SYS_mkdú
 122

	)

46 
	#SYS_lök
 123

	)

47 
	#SYS_ª«me
 124

	)

48 
	#SYS_ªadlök
 125

	)

49 
	#SYS_symlök
 126

	)

50 
	#SYS_u∆ök
 127

	)

51 
	#SYS_gëdúíåy
 128

	)

52 
	#SYS_dup
 130

	)

53 
	#SYS_pùe
 140

	)

54 
	#SYS_mkfifo
 141

	)

55 
	#SYS_öô_moduÀ
 200

	)

56 
	#SYS_˛ónup_moduÀ
 201

	)

57 
	#SYS_li°_moduÀ
 202

	)

58 
	#SYS_mod_add
 210

	)

59 
	#SYS_mod_mul
 211

	)

62 
	#CLONE_VM
 0x00000100

63 
	#CLONE_THREAD
 0x00000200

64 
	#CLONE_SEM
 0x00000400

65 
	#CLONE_FS
 0x00000800

66 

	)

68 
	#MMAP_WRITE
 0x00000100

	)

69 
	#MMAP_STACK
 0x00000200

	)

73 
	#O_RDONLY
 0

74 
	#O_WRONLY
 1

75 
	#O_RDWR
 2

77 
	#O_CREAT
 0x00000004

78 
	#O_EXCL
 0x00000008

79 
	#O_TRUNC
 0x00000010

80 
	#O_APPEND
 0x00000020

82 
	#O_ACCMODE
 3

83 

	)

84 
	#NO_FD
 -0x9527

85 

	)

87 
	#LSEEK_SET
 0

88 
	#LSEEK_CUR
 1

89 
	#LSEEK_END
 2

90 

	)

91 
	#FS_MAX_DNAME_LEN
 31

	)

92 
	#FS_MAX_FNAME_LEN
 255

	)

93 
	#FS_MAX_FPATH_LEN
 4095

	)

95 
	#EXEC_MAX_ARG_NUM
 32

	)

96 
	#EXEC_MAX_ARG_LEN
 4095

	)

	@libs-user-ucore/dir.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<sysˇŒ.h
>

4 
	~<mÆloc.h
>

5 
	~<°©.h
>

6 
	~<dúít.h
>

7 
	~<fûe.h
>

8 
	~<dú.h
>

9 
	~<îr‹.h
>

10 
	~<uni°d.h
>

12 
DIR
 *

13 
	$›ídú
(c⁄° *
∑th
) {

14 
DIR
 *
dúp
;

15 i‡((
dúp
 = 
	`mÆloc
((
DIR
))Ë=
NULL
) {

16  
NULL
;

18 i‡((
dúp
->
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) < 0) {

19 
Áûed
;

21 
°©
 
__°©
, *stat = &__stat;

22 i‡(
	`f°©
(
dúp
->
fd
, 
°©
Ë!0 || !
	`S_ISDIR
(°©->
°_mode
)) {

23 
Áûed
;

25 
dúp
->
dúít
.
off£t
 = 0;

26  
dúp
;

28 
Áûed
:

29 
	`‰ì
(
dúp
);

30  
NULL
;

31 
	}
}

33 
dúít
 *

34 
	$ªaddú
(
DIR
 *
dúp
) {

35 i‡(
	`sys_gëdúíåy
(
dúp
->
fd
, &(dúp->
dúít
)) == 0) {

36  &(
dúp
->
dúít
);

38  
NULL
;

39 
	}
}

42 
	$˛o£dú
(
DIR
 *
dúp
) {

43 
	`˛o£
(
dúp
->
fd
);

44 
	`‰ì
(
dúp
);

45 
	}
}

48 
	$chdú
(c⁄° *
∑th
) {

49  
	`sys_chdú
(
∑th
);

50 
	}
}

53 
	$gëcwd
(*
buf„r
, 
size_t
 
Àn
) {

54  
	`sys_gëcwd
(
buf„r
, 
Àn
);

55 
	}
}

58 
	$mkdú
(c⁄° *
∑th
) {

59  
	`sys_mkdú
(
∑th
);

60 
	}
}

63 
	$lök
(c⁄° *
ﬁd_∑th
, c⁄° *
√w_∑th
) {

64  
	`sys_lök
(
ﬁd_∑th
, 
√w_∑th
);

65 
	}
}

68 
	$ª«me
(c⁄° *
ﬁd_∑th
, c⁄° *
√w_∑th
) {

69  
	`sys_ª«me
(
ﬁd_∑th
, 
√w_∑th
);

70 
	}
}

73 
	$u∆ök
(c⁄° *
∑th
) {

74  
	`sys_u∆ök
(
∑th
);

75 
	}
}

	@libs-user-ucore/dir.h

1 #i‚de‡
__USER_LIBS_DIR_H__


2 
	#__USER_LIBS_DIR_H__


	)

4 
	~<ty≥s.h
>

5 
	~<dúít.h
>

8 
	mfd
;

9 
dúít
 
	mdúít
;

10 } 
	tDIR
;

12 
DIR
 *
›ídú
(c⁄° *
∑th
);

13 
dúít
 *
ªaddú
(
DIR
 *
dúp
);

14 
˛o£dú
(
DIR
 *
dúp
);

15 
chdú
(c⁄° *
∑th
);

16 
gëcwd
(*
buf„r
, 
size_t
 
Àn
);

17 
mkdú
(c⁄° *
∑th
);

18 
lök
(c⁄° *
ﬁd_∑th
, c⁄° *
√w_∑th
);

19 
ª«me
(c⁄° *
ﬁd_∑th
, c⁄° *
√w_∑th
);

20 
u∆ök
(c⁄° *
∑th
);

	@libs-user-ucore/file.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<sysˇŒ.h
>

4 
	~<°dio.h
>

5 
	~<°©.h
>

6 
	~<mÆloc.h
>

7 
	~<îr‹.h
>

8 
	~<uni°d.h
>

11 
	$›í
(c⁄° *
∑th
, 
uöt32_t
 
›í_Êags
) {

12  
	`sys_›í
(
∑th
, 
›í_Êags
);

13 
	}
}

16 
	$˛o£
(
fd
) {

17  
	`sys_˛o£
(
fd
);

18 
	}
}

21 
	$ªad
(
fd
, *
ba£
, 
size_t
 
Àn
) {

22  
	`sys_ªad
(
fd
, 
ba£
, 
Àn
);

23 
	}
}

26 
	$wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
) {

27  
	`sys_wrôe
(
fd
, 
ba£
, 
Àn
);

28 
	}
}

31 
	$£ek
(
fd
, 
off_t
 
pos
, 
whí˚
) {

32  
	`sys_£ek
(
fd
, 
pos
, 
whí˚
);

33 
	}
}

36 
	$f°©
(
fd
, 
°©
 *stat) {

37  
	`sys_f°©
(
fd
, 
°©
);

38 
	}
}

41 
	$fsync
(
fd
) {

42  
	`sys_fsync
(
fd
);

43 
	}
}

46 
	$dup
(
fd
) {

47  
	`sys_dup
(
fd
, 
NO_FD
);

48 
	}
}

51 
	$dup2
(
fd1
, 
fd2
) {

52  
	`sys_dup
(
fd1
, 
fd2
);

53 
	}
}

56 
	$pùe
(*
fd_°‹e
) {

57  
	`sys_pùe
(
fd_°‹e
);

58 
	}
}

61 
	$mkfifo
(c⁄° *
«me
, 
uöt32_t
 
›í_Êags
) {

62  
	`sys_mkfifo
(
«me
, 
›í_Êags
);

63 
	}
}

66 
	$å™smode
(
°©
 *stat) {

67 
uöt32_t
 
mode
 = 
°©
->
°_mode
;

68 i‡(
	`S_ISREG
(
mode
))  'r';

69 i‡(
	`S_ISDIR
(
mode
))  'd';

70 i‡(
	`S_ISLNK
(
mode
))  'l';

71 i‡(
	`S_ISCHR
(
mode
))  'c';

72 i‡(
	`S_ISBLK
(
mode
))  'b';

74 
	}
}

77 
	$¥öt_°©
(c⁄° *
«me
, 
fd
, 
°©
 *stat) {

78 
	`˝rötf
("[%03d] %s\n", 
fd
, 
«me
);

79 
	`˝rötf
(" modê : %c\n", 
	`å™smode
(
°©
));

80 
	`˝rötf
("Üök† : %lu\n", 
°©
->
°_∆öks
);

81 
	`˝rötf
(" block† : %lu\n", 
°©
->
°_blocks
);

82 
	`˝rötf
(" sizê : %lu\n", 
°©
->
°_size
);

83 
	}
}

	@libs-user-ucore/file.h

1 #i‚de‡
__USER_LIBS_FILE_H__


2 
	#__USER_LIBS_FILE_H__


	)

4 
	~<ty≥s.h
>

6 
	g°©
;

8 
›í
(c⁄° *
∑th
, 
uöt32_t
 
›í_Êags
);

9 
˛o£
(
fd
);

10 
ªad
(
fd
, *
ba£
, 
size_t
 
Àn
);

11 
wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
);

12 
£ek
(
fd
, 
off_t
 
pos
, 
whí˚
);

13 
f°©
(
fd
, 
°©
 *stat);

14 
fsync
(
fd
);

15 
dup
(
fd
);

16 
dup2
(
fd1
, 
fd2
);

17 
pùe
(*
fd_°‹e
);

18 
mkfifo
(c⁄° *
«me
, 
uöt32_t
 
›í_Êags
);

20 
¥öt_°©
(c⁄° *
«me
, 
fd
, 
°©
 *stat);

	@libs-user-ucore/lock.h

1 #i‚de‡
__USER_LIBS_LOCK_H__


2 
	#__USER_LIBS_LOCK_H__


	)

4 
	~<ty≥s.h
>

5 
	~<©omic.h
>

6 
	~<ulib.h
>

8 
	#INIT_LOCK
 {0}

	)

10 vﬁ©ûê
	tboﬁ
 
	tlock_t
;

12 
ölöe
 

13 
	$lock_öô
(
lock_t
 *
l
) {

14 *
l
 = 0;

15 
	}
}

17 
ölöe
 
boﬁ


18 
	$åy_lock
(
lock_t
 *
l
) {

19 #ifde‡
NO_LOCK


22  
	`ã°_™d_£t_bô
(0, 
l
);

24 
	}
}

26 
ölöe
 

27 
	$lock
(
lock_t
 *
l
) {

28 i‡(
	`åy_lock
(
l
)) {

29 
°ï
 = 0;

31 
	`yõld
();

32 i‡(++ 
°ï
 == 100) {

33 
°ï
 = 0;

34 
	`¶ìp
(10);

36 } 
	`åy_lock
(
l
));

38 
	}
}

40 
ölöe
 

41 
	$u∆ock
(
lock_t
 *
l
) {

42 #i‚de‡
NO_LOCK


43 
	`ã°_™d_˛ór_bô
(0, 
l
);

45 
	}
}

	@libs-user-ucore/malloc.c

1 
	~<ty≥s.h
>

2 
	~<ulib.h
>

3 
	~<sysˇŒ.h
>

4 
	~<mÆloc.h
>

5 
	~<lock.h
>

6 
	~<uni°d.h
>

12 
lock_f‹k
();

13 
u∆ock_f‹k
();

15 
	uhódî
 {

17 
hódî
 *
	m±r
;

18 
size_t
 
	msize
;

19 
boﬁ
 
	mty≥
;

20 } 
	ms
;

21 
uöt32_t
 
	mÆign
[16];

24 
hódî
 
	thódî_t
;

26 
hódî_t
 
	gba£
;

27 
hódî_t
 *
	g‰ìp
 = 
NULL
;

29 
lock_t
 
	gmem_lock
 = 
INIT_LOCK
;

31 
‰ì_locked
(*
≠
);

33 
ölöe
 

34 
	$lock_mÆloc
() {

35 
	`lock_f‹k
();

36 
	`lock
(&
mem_lock
);

37 
	}
}

39 
ölöe
 

40 
	$u∆ock_mÆloc
() {

41 
	`u∆ock
(&
mem_lock
);

42 
	`u∆ock_f‹k
();

43 
	}
}

45 
boﬁ


46 
	$m‹ec‹e_brk_locked
(
size_t
 
nu
) {

47 
uöçå_t
 
brk
 = 0;

48 i‡(
brk
 == 0) {

49 i‡(
	`sys_brk
(&
brk
) != 0 || brk == 0) {

53 
uöçå_t
 
√wbrk
 = 
brk
 + 
nu
 * (
hódî_t
);

54 i‡(
	`sys_brk
(&
√wbrk
Ë!0 ||Çewbrk <
brk
) {

57 
hódî_t
 *
p
 = (*)
brk
;

58 
p
->
s
.
size
 = (
√wbrk
 - 
brk
Ë/ (
hódî_t
);

59 
p
->
s
.
ty≥
 = 0;

60 
	`‰ì_locked
((*)(
p
 + 1));

61 
brk
 = 
√wbrk
;

63 
	}
}

65 
boﬁ


66 
	$m‹ec‹e_shmem_locked
(
size_t
 
nu
) {

67 
size_t
 
size
 = ((
nu
 * (
hódî_t
) + 0xfff) & (~0xfff));

68 
uöçå_t
 
mem
 = 0;

69 i‡(
	`sys_shmem
(&
mem
, 
size
, 
MMAP_WRITE
) != 0 || mem == 0) {

72 
hódî_t
 *
p
 = (*)
mem
;

73 
p
->
s
.
size
 = sizê/ (
hódî_t
);

74 
p
->
s
.
ty≥
 = 1;

75 
	`‰ì_locked
((*)(
p
 + 1));

77 
	}
}

80 
	$mÆloc_locked
(
size_t
 
size
, 
boﬁ
 
ty≥
) {

81 
	`°©ic_as£π
((
hódî_t
) == 0x40);

82 
hódî_t
 *
p
, *
¥evp
;

83 
size_t
 
nunôs
;

86 i‡(
ty≥
) {

87 
ty≥
 = 1;

90 
nunôs
 = (
size
 + (
hódî_t
) - 1) / (header_t) + 1;

91 i‡((
¥evp
 = 
‰ìp
Ë=
NULL
) {

92 
ba£
.
s
.
±r
 = 
‰ìp
 = 
¥evp
 = &base;

93 
ba£
.
s
.
size
 = 0;

96 
p
 = 
¥evp
->
s
.
±r
; ;Örevp =Ö,Ö =Ö->s.ptr) {

97 i‡(
p
->
s
.
ty≥
 =ty≥ &&Ö->s.
size
 >
nunôs
) {

98 i‡(
p
->
s
.
size
 =
nunôs
) {

99 
¥evp
->
s
.
±r
 = 
p
->s.ptr;

102 
hódî_t
 *
≈
 = 
¥evp
->
s
.
±r
 = (
p
 + 
nunôs
);

103 
≈
->
s
.
±r
 = 
p
->s.ptr;

104 
≈
->
s
.
size
 = 
p
->s.sizê- 
nunôs
;

105 
≈
->
s
.
ty≥
 =Åype;

106 
p
->
s
.
size
 = 
nunôs
;

108 
‰ìp
 = 
¥evp
;

109  (*)(
p
 + 1);

111 i‡(
p
 =
‰ìp
) {

112 
	`boﬁ
 (*
m‹ec‹e_locked
)(
size_t
 
nu
);

113 
m‹ec‹e_locked
 = (!
ty≥
Ë? 
m‹ec‹e_brk_locked
 : 
m‹ec‹e_shmem_locked
;

114 i‡(!
	`m‹ec‹e_locked
(
nunôs
)) {

115  
NULL
;

119 
	}
}

122 
	$‰ì_locked
(*
≠
) {

123 
hódî_t
 *
bp
 = ((hódî_à*)
≠
Ë- 1, *
p
;

125 
p
 = 
‰ìp
; !(
bp
 >Ö && b∞<Ö->
s
.
±r
);Ö =Ö->s.ptr) {

126 i‡(
p
 >p->
s
.
±r
 && (
bp
 >Ö || bp <Ö->s.ptr)) {

131 i‡(
bp
->
s
.
ty≥
 =
p
->s.
±r
->s.ty≥ && b∞+ bp->s.
size
 ==Ö->s.ptr) {

132 
bp
->
s
.
size
 +
p
->s.
±r
->s.size;

133 
bp
->
s
.
±r
 = 
p
->s.ptr->s.ptr;

136 
bp
->
s
.
±r
 = 
p
->s.ptr;

139 i‡(
p
->
s
.
ty≥
 =
bp
->s.ty≥ &&Ö +Ö->s.
size
 == bp) {

140 
p
->
s
.
size
 +
bp
->s.size;

141 
p
->
s
.
±r
 = 
bp
->s.ptr;

144 
p
->
s
.
±r
 = 
bp
;

147 
‰ìp
 = 
p
;

148 
	}
}

151 
	$mÆloc
(
size_t
 
size
) {

152 *
ªt
;

153 
	`lock_mÆloc
();

154 
ªt
 = 
	`mÆloc_locked
(
size
, 0);

155 
	`u∆ock_mÆloc
();

156  
ªt
;

157 
	}
}

160 
	$shmem_mÆloc
(
size_t
 
size
) {

161 *
ªt
;

162 
	`lock_mÆloc
();

163 
ªt
 = 
	`mÆloc_locked
(
size
, 1);

164 
	`u∆ock_mÆloc
();

165  
ªt
;

166 
	}
}

169 
	$‰ì
(*
≠
) {

170 
	`lock_mÆloc
();

171 
	`‰ì_locked
(
≠
);

172 
	`u∆ock_mÆloc
();

173 
	}
}

	@libs-user-ucore/malloc.h

1 #i‚de‡
__USER_LIBS_MALLOC_H__


2 
	#__USER_LIBS_MALLOC_H__


	)

4 
	~<ty≥s.h
>

6 *
mÆloc
(
size_t
 
size
);

7 *
shmem_mÆloc
(
size_t
 
size
);

8 
‰ì
(*
≠
);

	@libs-user-ucore/mod.c

2 
	~"mod.h
"

3 
	~<sysˇŒ.h
>

5 
	$öô_moduÀ
(c⁄° *
«me
) {

6 
	`sys_öô_moduÀ
(
«me
);

7 
	}
}

9 
	$˛ónup_moduÀ
(c⁄° *
«me
) {

10 
	`sys_˛ónup_moduÀ
(
«me
);

11 
	}
}

	@libs-user-ucore/mod.h

1 #i‚de‡
__USER_LIBS_MOD_H__


2 
	#__USER_LIBS_MOD_H__


	)

4 
öô_moduÀ
(c⁄° *
«me
);

5 
˛ónup_moduÀ
(c⁄° *
«me
);

	@libs-user-ucore/panic.c

1 
	~<ty≥s.h
>

2 
	~<°d¨g.h
>

3 
	~<°dio.h
>

4 
	~<ulib.h
>

5 
	~<îr‹.h
>

8 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

10 
va_li°
 
≠
;

11 
	`va_°¨t
(
≠
, 
fmt
);

12 
	`˝rötf
("u£∏∑ni¯© %s:%d:\¿ ", 
fûe
, 
löe
);

13 
	`v˝rötf
(
fmt
, 
≠
);

14 
	`˝rötf
("\n");

15 
	`va_íd
(
≠
);

16 
	`exô
(-
E_PANIC
);

17 
	}
}

20 
	$__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

21 
va_li°
 
≠
;

22 
	`va_°¨t
(
≠
, 
fmt
);

23 
	`˝rötf
("u£∏w¨nögáà%s:%d:\¿ ", 
fûe
, 
löe
);

24 
	`v˝rötf
(
fmt
, 
≠
);

25 
	`˝rötf
("\n");

26 
	`va_íd
(
≠
);

27 
	}
}

	@libs-user-ucore/spipe.c

1 
	~<ty≥s.h
>

2 
	~<uni°d.h
>

3 
	~<ulib.h
>

4 
	~<•ùe.h
>

6 
	#SPIPE_SIZE
 4096

	)

7 
	#SPIPE_BUFSIZE
 (
SPIPE_SIZE
 - (
__•ùe_°©e_t
))

	)

9 
boﬁ
 
__•ùeis˛o£d_nﬁock
(
•ùe_t
 *
p
, boﬁ 
ªad
);

12 
	$•ùe
(
•ùe_t
 *
p
) {

13 
	`°©ic_as£π
(
SPIPE_SIZE
 > 
SPIPE_BUFSIZE
);

14 
ªt
;

15 
£m_t
 
•ùe_£m
;

16 
uöçå_t
 
addr
 = 0;

17 i‡((
ªt
 = 
	`shmem
(&
addr
, 
SPIPE_SIZE
, 
MMAP_WRITE
)) != 0) {

18 
Áûed
;

20 i‡((
•ùe_£m
 = 
	`£m_öô
(1)) < 0) {

21 
Áûed_˛ónup_mem
;

23 
p
->
is˛o£d
 = 0;

24 
p
->
•ùe_£m
 = spipe_sem;

25 
p
->
addr
 =áddr;

26 
p
->
°©e
 = (
__•ùe_°©e_t
 *)
addr
;

27 
p
->
buf
 = (
uöt8_t
 *)’->
°©e
 + 1);

28 
p
->
°©e
->
p_Ωos
 =Ö->°©e->
p_wpos
 = 0;

29 
p
->
°©e
->
is˛o£d
 = 0;

30 
out
:

31  
ªt
;

33 
Áûed_˛ónup_mem
:

34 
	`munm≠
(
addr
, 
SPIPE_BUFSIZE
);

35 
Áûed
:

36 
out
;

37 
	}
}

39 
size_t


40 
	$•ùîód
(
•ùe_t
 *
p
, *
buf
, 
size_t
 
n
) {

41 
size_t
 
ªt
 = 0;

42 
__•ùe_°©e_t
 *
°©e
 = 
p
->state;

43 
åy_agaö
:

44 i‡(
p
->
is˛o£d
 || 
	`£m_waô
’->
•ùe_£m
) != 0) {

45 
out
;

47 i‡(
	`__•ùeis˛o£d_nﬁock
(
p
, 1)) {

48 
out_u∆ock
;

50 i‡(
°©e
->
p_Ωos
 =°©e->
p_wpos
) {

51 
	`£m_po°
(
p
->
•ùe_£m
);

52 
	`yõld
();

53 
åy_agaö
;

55 ; 
ªt
 < 
n
;Ñë ++, 
°©e
->
p_Ωos
 ++) {

56 i‡(
°©e
->
p_Ωos
 =°©e->
p_wpos
) {

59 *(
uöt8_t
 *)(
buf
 + 
ªt
Ë
p
->buf[
°©e
->
p_Ωos
 % 
SPIPE_BUFSIZE
];

61 
out_u∆ock
:

62 
	`£m_po°
(
p
->
•ùe_£m
);

63 
out
:

64  
ªt
;

65 
	}
}

67 
size_t


68 
	$•ùewrôe
(
•ùe_t
 *
p
, *
buf
, 
size_t
 
n
) {

69 
size_t
 
ªt
 = 0;

70 
__•ùe_°©e_t
 *
°©e
 = 
p
->state;

71 
åy_agaö
:

72 i‡(
p
->
is˛o£d
 || 
	`£m_waô
’->
•ùe_£m
) != 0) {

73 
out
;

75 i‡(
	`__•ùeis˛o£d_nﬁock
(
p
, 0)) {

76 
out_u∆ock
;

78 ; 
ªt
 < 
n
;Ñë ++, 
°©e
->
p_wpos
 ++) {

79 i‡(
°©e
->
p_wpos
 - sèã->
p_Ωos
 >
SPIPE_BUFSIZE
) {

80 
	`£m_po°
(
p
->
•ùe_£m
);

81 
	`yõld
();

82 
åy_agaö
;

84 
p
->
buf
[
°©e
->
p_wpos
 % 
SPIPE_BUFSIZE
] = *(
uöt8_t
 *)(bu‡+ 
ªt
);

86 
out_u∆ock
:

87 
	`£m_po°
(
p
->
•ùe_£m
);

88 
out
:

89  
ªt
;

90 
	}
}

93 
	$__•ùe˛o£_nﬁock
(
•ùe_t
 *
p
) {

94 i‡(!
p
->
is˛o£d
) {

95 
p
->
is˛o£d
 =Ö->
°©e
->isclosed = 1;

96 
	`munm≠
(
p
->
addr
, 
SPIPE_BUFSIZE
);

100 
	}
}

103 
	$•ùe˛o£
(
•ùe_t
 *
p
) {

104 i‡(!
p
->
is˛o£d
) {

105 
ªt
;

106 
	`£m_waô
(
p
->
•ùe_£m
);

107 
ªt
 = 
	`__•ùe˛o£_nﬁock
(
p
);

108 
	`£m_po°
(
p
->
•ùe_£m
);

109  
ªt
;

112 
	}
}

114 
boﬁ


115 
	$__•ùeis˛o£d_nﬁock
(
•ùe_t
 *
p
, 
boﬁ
 
ªad
) {

116 i‡(!
p
->
is˛o£d
) {

117 i‡(!
p
->
°©e
->
is˛o£d
) {

120 i‡(
p
->
°©e
->
p_Ωos
 <Ö->°©e->
p_wpos
) {

121  !
ªad
;

123 
	`__•ùe˛o£_nﬁock
(
p
);

126 
	}
}

128 
boﬁ


129 
	$•ùeis˛o£d
(
•ùe_t
 *
p
) {

130 i‡(!
p
->
is˛o£d
) {

131 
boﬁ
 
is˛o£d
;

132 
	`£m_waô
(
p
->
•ùe_£m
);

133 
is˛o£d
 = 
	`__•ùeis˛o£d_nﬁock
(
p
, 0);

134 
	`£m_po°
(
p
->
•ùe_£m
);

135  
is˛o£d
;

138 
	}
}

	@libs-user-ucore/spipe.h

1 #i‚de‡
__USER_LIBS_SPIPE_H__


2 
	#__USER_LIBS_SPIPE_H__


	)

4 
	~<ty≥s.h
>

7 
off_t
 
	mp_Ωos
;

8 
off_t
 
	mp_wpos
;

9 
boﬁ
 
	mis˛o£d
;

10 } 
	t__•ùe_°©e_t
;

13 vﬁ©ûê
boﬁ
 
	mis˛o£d
;

14 
£m_t
 
	m•ùe_£m
;

15 
uöçå_t
 
	maddr
;

16 
__•ùe_°©e_t
 *
	m°©e
;

17 
uöt8_t
 *
	mbuf
;

18 } 
	t•ùe_t
;

20 
•ùe
(
•ùe_t
 *
p
);

21 
size_t
 
•ùîód
(
•ùe_t
 *
p
, *
buf
, size_à
n
);

22 
size_t
 
•ùewrôe
(
•ùe_t
 *
p
, *
buf
, size_à
n
);

23 
•ùe˛o£
(
•ùe_t
 *
p
);

24 
boﬁ
 
•ùeis˛o£d
(
•ùe_t
 *
p
);

	@libs-user-ucore/stdio.c

1 
	~<ty≥s.h
>

2 
	~<ulib.h
>

3 
	~<°dio.h
>

4 
	~<fûe.h
>

5 
	~<sysˇŒ.h
>

6 
	~<uni°d.h
>

13 
	$˝utch
(
c
, *
˙t
) {

14 
	`sys_putc
(
c
);

15 (*
˙t
) ++;

16 
	}
}

28 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
) {

29 
˙t
 = 0;

30 
	`v¥ötfmt
((*)
˝utch
, 
NO_FD
, &
˙t
, 
fmt
, 
≠
);

31  
˙t
;

32 
	}
}

41 
	$˝rötf
(c⁄° *
fmt
, ...) {

42 
va_li°
 
≠
;

44 
	`va_°¨t
(
≠
, 
fmt
);

45 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

46 
	`va_íd
(
≠
);

48  
˙t
;

49 
	}
}

56 
	$˝uts
(c⁄° *
°r
) {

57 
˙t
 = 0;

58 
c
;

59 (
c
 = *
°r
 ++) != '\0') {

60 
	`˝utch
(
c
, &
˙t
);

62 
	`˝utch
('\n', &
˙t
);

63  
˙t
;

64 
	}
}

67 
	$Âutch
(
c
, *
˙t
, 
fd
) {

68 
	`wrôe
(
fd
, &
c
, ());

69 (*
˙t
) ++;

70 
	}
}

73 
	$vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
 
≠
) {

74 
˙t
 = 0;

75 
	`v¥ötfmt
((*)
Âutch
, 
fd
, &
˙t
, 
fmt
, 
≠
);

76  
˙t
;

77 
	}
}

80 
	$Ârötf
(
fd
, c⁄° *
fmt
, ...) {

81 
va_li°
 
≠
;

83 
	`va_°¨t
(
≠
, 
fmt
);

84 
˙t
 = 
	`vÂrötf
(
fd
, 
fmt
, 
≠
);

85 
	`va_íd
(
≠
);

87  
˙t
;

88 
	}
}

	@libs-user-ucore/string.c

1 
	~<°rög.h
>

2 
	~<mÆloc.h
>

5 
	$°rdup
(c⁄° *
§c
) {

6 *
d°
;

7 
size_t
 
Àn
 = 
	`°æí
(
§c
) + 1;

8 i‡((
d°
 = 
	`mÆloc
(
Àn
)Ë!
NULL
) {

9 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

11  
d°
;

12 
	}
}

	@libs-user-ucore/syscall.c

1 
	~<ty≥s.h
>

2 
	~<uni°d.h
>

3 
	~<°d¨g.h
>

4 
	~<sysˇŒ.h
>

5 
	~<mboxbuf.h
>

6 
	~<°©.h
>

7 
	~<dúít.h
>

9 
uöçå_t
 
sysˇŒ
 (
num
, ...);

12 
	$sys_exô
(
îr‹_code
) {

13  
	`sysˇŒ
(
SYS_exô
, 
îr‹_code
);

14 
	}
}

17 
	$sys_f‹k
() {

18  
	`sysˇŒ
(
SYS_f‹k
);

19 
	}
}

22 
	$sys_waô
(
pid
, *
°‹e
) {

23  
	`sysˇŒ
(
SYS_waô
, 
pid
, 
°‹e
);

24 
	}
}

27 
	$sys_exec
(c⁄° *
«me
, 
¨gc
, c⁄° **
¨gv
) {

28  
	`sysˇŒ
(
SYS_exec
, 
«me
, 
¨gc
, 
¨gv
);

29 
	}
}

32 
	$sys_yõld
() {

33  
	`sysˇŒ
(
SYS_yõld
);

34 
	}
}

37 
	$sys_¶ìp
(
time
) {

38  
	`sysˇŒ
(
SYS_¶ìp
, 
time
);

39 
	}
}

42 
	$sys_kûl
(
pid
) {

43  
	`sysˇŒ
(
SYS_kûl
, 
pid
);

44 
	}
}

46 
size_t


47 
	$sys_gëtime
() {

48  (
size_t
)
	`sysˇŒ
(
SYS_gëtime
);

49 
	}
}

52 
	$sys_gëpid
() {

53  
	`sysˇŒ
(
SYS_gëpid
);

54 
	}
}

57 
	$sys_brk
(
uöçå_t
 *
brk_°‹e
) {

58  
	`sysˇŒ
(
SYS_brk
, 
brk_°‹e
);

59 
	}
}

62 
	$sys_mm≠
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
) {

63  
	`sysˇŒ
(
SYS_mm≠
, 
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

64 
	}
}

67 
	$sys_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àn
) {

68  
	`sysˇŒ
(
SYS_munm≠
, 
addr
, 
Àn
);

69 
	}
}

72 
	$sys_shmem
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
) {

73  
	`sysˇŒ
(
SYS_shmem
, 
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

74 
	}
}

77 
	$sys_putc
(
c
) {

78  
	`sysˇŒ
(
SYS_putc
, 
c
);

79 
	}
}

82 
	$sys_pgdú
() {

83  
	`sysˇŒ
(
SYS_pgdú
);

84 
	}
}

86 
£m_t


87 
	$sys_£m_öô
(
vÆue
) {

88  
	`sysˇŒ
(
SYS_£m_öô
, 
vÆue
);

89 
	}
}

92 
	$sys_£m_po°
(
£m_t
 
£m_id
) {

93  
	`sysˇŒ
(
SYS_£m_po°
, 
£m_id
);

94 
	}
}

97 
	$sys_£m_waô
(
£m_t
 
£m_id
, 
timeout
) {

98  
	`sysˇŒ
(
SYS_£m_waô
, 
£m_id
, 
timeout
);

99 
	}
}

102 
	$sys_£m_‰ì
(
£m_t
 
£m_id
) {

103  
	`sysˇŒ
(
SYS_£m_‰ì
, 
£m_id
);

104 
	}
}

107 
	$sys_£m_gë_vÆue
(
£m_t
 
£m_id
, *
vÆue_°‹e
) {

108  
	`sysˇŒ
(
SYS_£m_gë_vÆue
, 
£m_id
, 
vÆue_°‹e
);

109 
	}
}

112 
	$sys_£nd_evít
(
pid
, 
evít
, 
timeout
) {

113  
	`sysˇŒ
(
SYS_evít_£nd
, 
pid
, 
evít
, 
timeout
);

114 
	}
}

117 
	$sys_ªcv_evít
(*
pid_°‹e
, *
evít_°‹e
, 
timeout
) {

118  
	`sysˇŒ
(
SYS_evít_ªcv
, 
pid_°‹e
, 
evít_°‹e
, 
timeout
);

119 
	}
}

122 
	$sys_mbox_öô
(
max_¶Ÿs
) {

123  
	`sysˇŒ
(
SYS_mbox_öô
, 
max_¶Ÿs
);

124 
	}
}

127 
	$sys_mbox_£nd
(
id
, 
mboxbuf
 *
buf
, 
timeout
) {

128  
	`sysˇŒ
(
SYS_mbox_£nd
, 
id
, 
buf
, 
timeout
);

129 
	}
}

132 
	$sys_mbox_ªcv
(
id
, 
mboxbuf
 *
buf
, 
timeout
) {

133  
	`sysˇŒ
(
SYS_mbox_ªcv
, 
id
, 
buf
, 
timeout
);

134 
	}
}

137 
	$sys_mbox_‰ì
(
id
) {

138  
	`sysˇŒ
(
SYS_mbox_‰ì
, 
id
);

139 
	}
}

142 
	$sys_mbox_öfo
(
id
, 
mboxöfo
 *
öfo
) {

143  
	`sysˇŒ
(
SYS_mbox_öfo
, 
id
, 
öfo
);

144 
	}
}

147 
	$sys_›í
(c⁄° *
∑th
, 
uöt32_t
 
›í_Êags
) {

148  
	`sysˇŒ
(
SYS_›í
, 
∑th
, 
›í_Êags
);

149 
	}
}

152 
	$sys_˛o£
(
fd
) {

153  
	`sysˇŒ
(
SYS_˛o£
, 
fd
);

154 
	}
}

157 
	$sys_ªad
(
fd
, *
ba£
, 
size_t
 
Àn
) {

158  
	`sysˇŒ
(
SYS_ªad
, 
fd
, 
ba£
, 
Àn
);

159 
	}
}

162 
	$sys_wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
) {

163  
	`sysˇŒ
(
SYS_wrôe
, 
fd
, 
ba£
, 
Àn
);

164 
	}
}

167 
	$sys_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
) {

168  
	`sysˇŒ
(
SYS_£ek
, 
fd
, 
pos
, 
whí˚
);

169 
	}
}

172 
	$sys_f°©
(
fd
, 
°©
 *stat) {

173  
	`sysˇŒ
(
SYS_f°©
, 
fd
, 
°©
);

174 
	}
}

177 
	$sys_fsync
(
fd
) {

178  
	`sysˇŒ
(
SYS_fsync
, 
fd
);

179 
	}
}

182 
	$sys_chdú
(c⁄° *
∑th
) {

183  
	`sysˇŒ
(
SYS_chdú
, 
∑th
);

184 
	}
}

187 
	$sys_gëcwd
(*
buf„r
, 
size_t
 
Àn
) {

188  
	`sysˇŒ
(
SYS_gëcwd
, 
buf„r
, 
Àn
);

189 
	}
}

192 
	$sys_mkdú
(c⁄° *
∑th
) {

193  
	`sysˇŒ
(
SYS_mkdú
, 
∑th
);

194 
	}
}

197 
	$sys_lök
(c⁄° *
∑th1
, c⁄° *
∑th2
) {

198  
	`sysˇŒ
(
SYS_lök
, 
∑th1
, 
∑th2
);

199 
	}
}

202 
	$sys_ª«me
(c⁄° *
∑th1
, c⁄° *
∑th2
) {

203  
	`sysˇŒ
(
SYS_ª«me
, 
∑th1
, 
∑th2
);

204 
	}
}

207 
	$sys_u∆ök
(c⁄° *
∑th
) {

208  
	`sysˇŒ
(
SYS_u∆ök
, 
∑th
);

209 
	}
}

212 
	$sys_gëdúíåy
(
fd
, 
dúít
 *dirent) {

213  
	`sysˇŒ
(
SYS_gëdúíåy
, 
fd
, 
dúít
);

214 
	}
}

217 
	$sys_dup
(
fd1
, 
fd2
) {

218  
	`sysˇŒ
(
SYS_dup
, 
fd1
, 
fd2
);

219 
	}
}

222 
	$sys_pùe
(*
fd_°‹e
) {

223  
	`sysˇŒ
(
SYS_pùe
, 
fd_°‹e
);

224 
	}
}

227 
	$sys_mkfifo
(c⁄° *
«me
, 
uöt32_t
 
›í_Êags
) {

228  
	`sysˇŒ
(
SYS_mkfifo
, 
«me
, 
›í_Êags
);

229 
	}
}

231 
	$sys_öô_moduÀ
(c⁄° *
«me
) {

232  
	`sysˇŒ
(
SYS_öô_moduÀ
, 
«me
);

233 
	}
}

235 
	$sys_˛ónup_moduÀ
(c⁄° *
«me
) {

236  
	`sysˇŒ
(
SYS_˛ónup_moduÀ
, 
«me
);

237 
	}
}

239 
	$sys_li°_moduÀ
() {

240  
	`sysˇŒ
(
SYS_li°_moduÀ
);

241 
	}
}

243 
	$sys_mod_add
(
a
, 
b
) {

244  
	`sysˇŒ
(
SYS_mod_add
, 
a
, 
b
);

245 
	}
}

247 
	$sys_mod_mul
(
a
, 
b
) {

248  
	`sysˇŒ
(
SYS_mod_mul
, 
a
, 
b
);

249 
	}
}

	@libs-user-ucore/syscall.h

1 #i‚de‡
__USER_LIBS_SYSCALL_H__


2 
	#__USER_LIBS_SYSCALL_H__


	)

4 
	~<ty≥s.h
>

6 
sys_exô
(
îr‹_code
);

7 
sys_f‹k
();

8 
sys_waô
(
pid
, *
°‹e
);

9 
sys_exec
(c⁄° *
«me
, 
¨gc
, c⁄° **
¨gv
);

10 
sys_yõld
();

11 
sys_¶ìp
(
time
);

12 
sys_kûl
(
pid
);

13 
size_t
 
sys_gëtime
();

14 
sys_gëpid
();

15 
sys_brk
(
uöçå_t
 *
brk_°‹e
);

16 
sys_mm≠
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
);

17 
sys_munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àn
);

18 
sys_shmem
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
);

19 
sys_putc
(
c
);

20 
sys_pgdú
();

21 
£m_t
 
sys_£m_öô
(
vÆue
);

22 
sys_£m_po°
(
£m_t
 
£m_id
);

23 
sys_£m_waô
(
£m_t
 
£m_id
, 
timeout
);

24 
sys_£m_‰ì
(
£m_t
 
£m_id
);

25 
sys_£m_gë_vÆue
(
£m_t
 
£m_id
, *
vÆue_°‹e
);

26 
sys_£nd_evít
(
pid
, 
evít
, 
timeout
);

27 
sys_ªcv_evít
(*
pid_°‹e
, *
evít_°‹e
, 
timeout
);

29 
	gmboxbuf
;

30 
	gmboxöfo
;

32 
sys_mbox_öô
(
max_¶Ÿs
);

33 
sys_mbox_£nd
(
id
, 
mboxbuf
 *
buf
, 
timeout
);

34 
sys_mbox_ªcv
(
id
, 
mboxbuf
 *
buf
, 
timeout
);

35 
sys_mbox_‰ì
(
id
);

36 
sys_mbox_öfo
(
id
, 
mboxöfo
 *
öfo
);

38 
	g°©
;

39 
	gdúít
;

41 
sys_›í
(c⁄° *
∑th
, 
uöt32_t
 
›í_Êags
);

42 
sys_˛o£
(
fd
);

43 
sys_ªad
(
fd
, *
ba£
, 
size_t
 
Àn
);

44 
sys_wrôe
(
fd
, *
ba£
, 
size_t
 
Àn
);

45 
sys_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
);

46 
sys_f°©
(
fd
, 
°©
 *stat);

47 
sys_fsync
(
fd
);

48 
sys_chdú
(c⁄° *
∑th
);

49 
sys_gëcwd
(*
buf„r
, 
size_t
 
Àn
);

50 
sys_mkdú
(c⁄° *
∑th
);

51 
sys_lök
(c⁄° *
∑th1
, c⁄° *
∑th2
);

52 
sys_ª«me
(c⁄° *
∑th1
, c⁄° *
∑th2
);

53 
sys_u∆ök
(c⁄° *
∑th
);

54 
sys_gëdúíåy
(
fd
, 
dúít
 *dirent);

55 
sys_dup
(
fd1
, 
fd2
);

56 
sys_pùe
(*
fd_°‹e
);

57 
sys_mkfifo
(c⁄° *
«me
, 
uöt32_t
 
›í_Êags
);

58 
sys_öô_moduÀ
(c⁄° *
«me
);

59 
sys_˛ónup_moduÀ
(c⁄° *
«me
);

60 
sys_li°_moduÀ
();

61 
sys_mod_add
(, );

62 
sys_mod_mul
(, );

	@libs-user-ucore/thread.c

1 
	~<ty≥s.h
>

2 
	~<ulib.h
>

3 
	~<thªad.h
>

4 
	~<uni°d.h
>

5 
	~<îr‹.h
>

8 
thªad
((*
‚
)(*), *
¨g
, 
thªad_t
 *
tidp
) {

9 i‡(
‚
 =
NULL
 || 
tidp
 == NULL) {

10  -
E_INVAL
;

12 
ªt
;

13 
uöçå_t
 
°ack
 = 0;

14 i‡((
ªt
 = 
	`mm≠
(&
°ack
, 
THREAD_STACKSIZE
, 
MMAP_WRITE
 | 
MMAP_STACK
)) != 0) {

15  
ªt
;

17 
	`as£π
(
°ack
 != 0);

19 i‡((
ªt
 = 
	`˛⁄e
(
CLONE_VM
 | 
CLONE_THREAD
 | 
CLONE_SEM
 | 
CLONE_FS
, 
°ack
 + 
THREAD_STACKSIZE
, 
‚
, 
¨g
)) < 0) {

20 
	`munm≠
(
°ack
, 
THREAD_STACKSIZE
);

21  
ªt
;

24 
tidp
->
pid
 = 
ªt
;

25 
tidp
->
°ack
 = (*)stack;

27 
	}
}

30 
	$thªad_waô
(
thªad_t
 *
tidp
, *
exô_code
) {

31 
ªt
 = -
E_INVAL
;

32 i‡(
tidp
 !
NULL
) {

33 i‡((
ªt
 = 
	`waôpid
(
tidp
->
pid
, 
exô_code
)) == 0) {

34 
	`munm≠
((
uöçå_t
)(
tidp
->
°ack
), 
THREAD_STACKSIZE
);

37  
ªt
;

38 
	}
}

41 
	$thªad_kûl
(
thªad_t
 *
tidp
) {

42 i‡(
tidp
 !
NULL
) {

43  
	`kûl
(
tidp
->
pid
);

45  -
E_INVAL
;

46 
	}
}

	@libs-user-ucore/thread.h

1 #i‚de‡
__USER_LIBS_THREAD_H__


2 
	#__USER_LIBS_THREAD_H__


	)

5 
	mpid
;

6 *
	m°ack
;

7 } 
	tthªad_t
;

9 
	#THREAD_STACKSIZE
 (4096 * 10)

	)

11 
thªad
((*
‚
)(*), *
¨g
, 
thªad_t
 *
tidp
);

12 
	`thªad_waô
(
thªad_t
 *
tidp
, *
exô_code
);

13 
	`thªad_kûl
(
thªad_t
 *
tidp
);

	@libs-user-ucore/ulib.c

1 
	~<ty≥s.h
>

2 
	~<°rög.h
>

3 
	~<sysˇŒ.h
>

4 
	~<°dio.h
>

5 
	~<ulib.h
>

6 
	~<°©.h
>

7 
	~<lock.h
>

9 
lock_t
 
	gf‹k_lock
 = 
INIT_LOCK
;

12 
	$lock_f‹k
() {

13 
	`lock
(&
f‹k_lock
);

14 
	}
}

17 
	$u∆ock_f‹k
() {

18 
	`u∆ock
(&
f‹k_lock
);

19 
	}
}

22 
	$exô
(
îr‹_code
) {

23 
	`sys_exô
(
îr‹_code
);

24 
	`˝rötf
("BUG:Éxit failed.\n");

26 
	}
}

29 
	$f‹k
() {

30 
ªt
;

31 
	`lock_f‹k
();

32 
ªt
 = 
	`sys_f‹k
();

33 
	`u∆ock_f‹k
();

34  
ªt
;

35 
	}
}

38 
	$waô
() {

39  
	`sys_waô
(0, 
NULL
);

40 
	}
}

43 
	$waôpid
(
pid
, *
°‹e
) {

44  
	`sys_waô
(
pid
, 
°‹e
);

45 
	}
}

48 
	$yõld
() {

49 
	`sys_yõld
();

50 
	}
}

53 
	$¶ìp
(
time
) {

54  
	`sys_¶ìp
(
time
);

55 
	}
}

58 
	$kûl
(
pid
) {

59  
	`sys_kûl
(
pid
);

60 
	}
}

63 
	$gëtime_m£c
() {

64  ()
	`sys_gëtime
();

65 
	}
}

68 
	$gëpid
() {

69  
	`sys_gëpid
();

70 
	}
}

74 
	$¥öt_pgdú
() {

75 
	`sys_pgdú
();

76 
	}
}

79 
	$mm≠
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
) {

80  
	`sys_mm≠
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

81 
	}
}

84 
	$munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àn
) {

85  
	`sys_munm≠
(
addr
, 
Àn
);

86 
	}
}

89 
	$shmem
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
) {

90  
	`sys_shmem
(
addr_°‹e
, 
Àn
, 
mm≠_Êags
);

91 
	}
}

93 
£m_t


94 
	$£m_öô
(
vÆue
) {

95  
	`sys_£m_öô
(
vÆue
);

96 
	}
}

99 
	$£m_po°
(
£m_t
 
£m_id
) {

100  
	`sys_£m_po°
(
£m_id
);

101 
	}
}

104 
	$£m_waô
(
£m_t
 
£m_id
) {

105  
	`sys_£m_waô
(
£m_id
, 0);

106 
	}
}

109 
	$£m_waô_timeout
(
£m_t
 
£m_id
, 
timeout
) {

110  
	`sys_£m_waô
(
£m_id
, 
timeout
);

111 
	}
}

114 
	$£m_‰ì
(
£m_t
 
£m_id
) {

115  
	`sys_£m_‰ì
(
£m_id
);

116 
	}
}

119 
	$£m_gë_vÆue
(
£m_t
 
£m_id
, *
vÆue_°‹e
) {

120  
	`sys_£m_gë_vÆue
(
£m_id
, 
vÆue_°‹e
);

121 
	}
}

124 
	$£nd_evít
(
pid
, 
evít
) {

125  
	`sys_£nd_evít
(
pid
, 
evít
, 0);

126 
	}
}

129 
	$£nd_evít_timeout
(
pid
, 
evít
, 
timeout
) {

130  
	`sys_£nd_evít
(
pid
, 
evít
, 
timeout
);

131 
	}
}

134 
	$ªcv_evít
(*
pid_°‹e
, *
evít_°‹e
) {

135  
	`sys_ªcv_evít
(
pid_°‹e
, 
evít_°‹e
, 0);

136 
	}
}

139 
	$ªcv_evít_timeout
(*
pid_°‹e
, *
evít_°‹e
, 
timeout
) {

140  
	`sys_ªcv_evít
(
pid_°‹e
, 
evít_°‹e
, 
timeout
);

141 
	}
}

144 
	$mbox_öô
(
max_¶Ÿs
) {

145  
	`sys_mbox_öô
(
max_¶Ÿs
);

146 
	}
}

149 
	$mbox_£nd
(
id
, 
mboxbuf
 *
buf
) {

150  
	`sys_mbox_£nd
(
id
, 
buf
, 0);

151 
	}
}

154 
	$mbox_£nd_timeout
(
id
, 
mboxbuf
 *
buf
, 
timeout
) {

155  
	`sys_mbox_£nd
(
id
, 
buf
, 
timeout
);

156 
	}
}

159 
	$mbox_ªcv
(
id
, 
mboxbuf
 *
buf
) {

160  
	`sys_mbox_ªcv
(
id
, 
buf
, 0);

161 
	}
}

164 
	$mbox_ªcv_timeout
(
id
, 
mboxbuf
 *
buf
, 
timeout
) {

165  
	`sys_mbox_ªcv
(
id
, 
buf
, 
timeout
);

166 
	}
}

169 
	$mbox_‰ì
(
id
) {

170  
	`sys_mbox_‰ì
(
id
);

171 
	}
}

174 
	$mbox_öfo
(
id
, 
mboxöfo
 *
öfo
) {

175  
	`sys_mbox_öfo
(
id
, 
öfo
);

176 
	}
}

179 
	$__exec
(c⁄° *
«me
, c⁄° **
¨gv
) {

180 
¨gc
 = 0;

181 
¨gv
[
¨gc
] !
NULL
) {

182 
¨gc
 ++;

184  
	`sys_exec
(
«me
, 
¨gc
, 
¨gv
);

185 
	}
}

187 
__˛⁄e
(
uöt32_t
 
˛⁄e_Êags
, 
uöçå_t
 
°ack
, (*
‚
)(*), *
¨g
);

190 
	`˛⁄e
(
uöt32_t
 
˛⁄e_Êags
, 
uöçå_t
 
°ack
, (*
‚
)(*), *
¨g
) {

191 
ªt
;

192 
	`lock_f‹k
();

193 
ªt
 = 
	`__˛⁄e
(
˛⁄e_Êags
, 
°ack
, 
‚
, 
¨g
);

194 
	`u∆ock_f‹k
();

195  
ªt
;

196 
	}
}

	@libs-user-ucore/ulib.h

1 #i‚de‡
__USER_LIBS_ULIB_H__


2 
	#__USER_LIBS_ULIB_H__


	)

4 
	~<ty≥s.h
>

6 
__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...);

7 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

9 
	#w¨n
(...) \

10 
	`__w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...) \

13 
	`__∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

15 
	#as£π
(
x
) \

17 i‡(!(
x
)) { \

18 
	`∑nic
("assertion failed: %s", #x); \

20 
	}
} 0)

	)

23 
	#°©ic_as£π
(
x
) \

24 
x
Ë{ 0: (x): ; }

	)

26 
Ârötf
(
fd
, c⁄° *
fmt
, ...);

28 
	$exô
(
îr‹_code
Ë
	`__©åibuã__
((
n‹ëu∫
));

29 
	`f‹k
();

30 
	`f‹ks
();

31 
	`waô
();

32 
	`waôpid
(
pid
, *
°‹e
);

33 
	`yõld
();

34 
	`¶ìp
(
time
);

35 
	`kûl
(
pid
);

36 
	`gëtime_m£c
();

37 
	`gëpid
();

38 
	`¥öt_pgdú
();

39 
	`mm≠
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
);

40 
	`munm≠
(
uöçå_t
 
addr
, 
size_t
 
Àn
);

41 
	`shmem
(
uöçå_t
 *
addr_°‹e
, 
size_t
 
Àn
, 
uöt32_t
 
mm≠_Êags
);

42 
	`˛⁄e
(
uöt32_t
 
˛⁄e_Êags
, 
uöçå_t
 
°ack
, (*
‚
)(*), *
¨g
);

43 
£m_t
 
	`£m_öô
(
vÆue
);

44 
	`£m_po°
(
£m_t
 
£m_id
);

45 
	`£m_waô
(
£m_t
 
£m_id
);

46 
	`£m_waô_timeout
(
£m_t
 
£m_id
, 
timeout
);

47 
	`£m_‰ì
(
£m_t
 
£m_id
);

48 
	`£m_gë_vÆue
(
£m_t
 
£m_id
, *
vÆue_°‹e
);

49 
	`£nd_evít
(
pid
, 
evít
);

50 
	`£nd_evít_timeout
(
pid
, 
evít
, 
timeout
);

51 
	`ªcv_evít
(*
pid_°‹e
, *
evít_°‹e
);

52 
	`ªcv_evít_timeout
(*
pid_°‹e
, *
evít_°‹e
, 
timeout
);

54 
mboxbuf
;

55 
mboxöfo
;

57 
	`mbox_öô
(
max_¶Ÿs
);

58 
	`mbox_£nd
(
id
, 
mboxbuf
 *
buf
);

59 
	`mbox_£nd_timeout
(
id
, 
mboxbuf
 *
buf
, 
timeout
);

60 
	`mbox_ªcv
(
id
, 
mboxbuf
 *
buf
);

61 
	`mbox_ªcv_timeout
(
id
, 
mboxbuf
 *
buf
, 
timeout
);

62 
	`mbox_‰ì
(
id
);

63 
	`mbox_öfo
(
id
, 
mboxöfo
 *
öfo
);

65 
	`__exec
(c⁄° *
«me
, c⁄° **
¨gv
);

67 
	#__exec0
(
«me
, 
∑th
, ...) \

68 ({ c⁄° *
¨gv
[] = {
∑th
, ##
__VA_ARGS__
, 
NULL
}; 
	`__exec
(
«me
,árgv); 
	}
})

	)

70 
	#exec
(
∑th
, ...Ë
	`__exec0
(
NULL
,Ö©h, ##
__VA_ARGS__
)

	)

71 
	#√xec
(
«me
, 
∑th
, ...Ë
	`__exec0
“ame,Ö©h, ##
__VA_ARGS__
)

	)

	@libs-user-ucore/umain.c

1 
	~<ulib.h
>

2 
	~<uni°d.h
>

3 
	~<fûe.h
>

4 
	~<°©.h
>

6 
maö
(
¨gc
, **
¨gv
);

9 
	$öôfd
(
fd2
, c⁄° *
∑th
, 
uöt32_t
 
›í_Êags
) {

10 
°©
 
__°©
, *stat = &__stat;

11 
ªt
, 
fd1
;

12 i‡((
ªt
 = 
	`f°©
(
fd2
, 
°©
)) != 0) {

13 i‡((
fd1
 = 
	`›í
(
∑th
, 
›í_Êags
)Ë< 0 || fd1 =
fd2
) {

14  
fd1
;

16 
	`˛o£
(
fd2
);

17 
ªt
 = 
	`dup2
(
fd1
, 
fd2
);

18 
	`˛o£
(
fd1
);

20  
ªt
;

21 
	}
}

24 
	$umaö
(
¨gc
, **
¨gv
) {

25 
fd
;

26 i‡((
fd
 = 
	`öôfd
(0, "°dö:", 
O_RDONLY
)) < 0) {

27 
	`w¨n
("›í <°dö> faûed: %e.\n", 
fd
);

29 i‡((
fd
 = 
	`öôfd
(1, "°dout:", 
O_WRONLY
)) < 0) {

30 
	`w¨n
("›í <°dout> faûed: %e.\n", 
fd
);

32 
ªt
 = 
	`maö
(
¨gc
, 
¨gv
);

33 
	`exô
(
ªt
);

34 
	}
}

	@linux-dos-module/dosm-init.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/kî√l.h
>

3 
	~<löux/kthªad.h
>

4 
	~<löux/i›‹t.h
>

5 
	~<löux/sig«l.h
>

6 
	~<löux/£m≠h‹e.h
>

7 
	~<löux/timî.h
>

8 
	~<asm/úq.h
>

9 
	~<asm/io.h
>

11 
	#__DOSM__


	)

12 
	~"dosm-∑ckë.h
"

15 
	g__ß
[(
dosm_∑ckë_s
Ë=
DOSM_PACKET_SIZE
 ? 0 : -1] 
__©åibuã__
((
unu£d
));

17 
uöçå_t
 
	gbuf_∑ddr
;

18 
ul⁄g
 
	gbuf_size
;

19 
ush‹t
 
	gùi_ve˘‹
;

20 
EXPORT_SYMBOL
(
ùi_ve˘‹
);

23 
moduÀ_∑øm
(
buf_∑ddr
, 
ul⁄g
, 0);

24 
moduÀ_∑øm
(
buf_size
, 
ul⁄g
, 0);

25 
moduÀ_∑øm
(
ùi_ve˘‹
, 
ush‹t
, 0);

27 
èsk_°ru˘
 *
	gdosm_èsk
;

28 (*
‹igöÆ_ùi_ˇŒback
) ();

29 
ªsour˚
 *
buf_ªs
;

30 vﬁ©ûê*
buf
;

32 vﬁ©ûê
dosm_∑ckë_t
 
∑ckë_buf
;

33 
∑ckë_buf_ˇp
;

35 
£m≠h‹e
 
sˇn_£m
;

36 
timî_li°
 
sˇn_timî
;

39 
	$dosm_kthªad
(*
¨g
)

41 
i
;

43 
	`Ælow_sig«l
(
SIGKILL
);

44 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

46 !
	`kthªad_should_°›
())

48 i‡(
	`down_öãºu±ibÀ
(&
sˇn_£m
) != 0) ;

50 
i
 = 0; i < 
∑ckë_buf_ˇp
; ++ i)

52 i‡((
∑ckë_buf
[
i
].
sour˚_Êags
 & 
DOSM_SF_VALID
) &&

53 !(
∑ckë_buf
[
i
].
ªmŸe_Êags
 & 
DOSM_RF_CHECKED
))

55 
∑ckë_buf
[
i
].
ªmŸe_Êags
 |
DOSM_RF_CHECKED
;

56 
	`¥ötk
(
KERN_ALERT
 "¥o˚ssögÖackë %d from %d\n", 
i
, 
∑ckë_buf
[i].
sour˚_œpic
);

57 
	`dosm_∑ckë_¥o˚ss
(
∑ckë_buf
 + 
i
);

63 
	}
}

66 
	$dosm_sˇn_timî
(
ul⁄g
 
¨g
)

69 
ªs
;

70 
ªs
 = 
	`down_åylock
(&
sˇn_£m
);

71 
	`up
(&
sˇn_£m
);

73 
sˇn_timî
.
expúes
 = 
jiffõs
 + 
HZ
;

74 
	`add_timî
(&
sˇn_timî
);

75 
	}
}

78 
	$dosm_ùi_ˇŒback
()

81 
ªs
;

82 
ªs
 = 
	`down_åylock
(&
sˇn_£m
);

83 
	`up
(&
sˇn_£m
);

85 i‡(
‹igöÆ_ùi_ˇŒback
)

86 
	`‹igöÆ_ùi_ˇŒback
();

87 
	}
}

89 
__öô


90 
	$dosm_öô
()

92 
	`¥ötk
(
KERN_INFO
 "UCORE-MP64 DOS Module, buf=%p size=%lu ipi=%d.\n",

93 (*)
buf_∑ddr
, 
buf_size
, 
ùi_ve˘‹
);

95 
∑ckë_buf_ˇp
 = 
buf_size
 / 
DOSM_PACKET_SIZE
;

98 
	`£ma_öô
(&
sˇn_£m
, 0);

101 
	`kthªad_run
(
dosm_kthªad
, 
NULL
, "DOSM Thread");

104 
buf_ªs
 = 
	`ªque°_mem_ªgi⁄
(
buf_∑ddr
, 
buf_size
, "DOSM IO BUF");

105 
buf
 = 
	`i‹em≠
(
buf_∑ddr
, 
buf_size
);

107 
∑ckë_buf
 = (
dosm_∑ckë_t
)
buf
;

110 
‹igöÆ_ùi_ˇŒback
 = 
x86_∂©f‹m_ùi_ˇŒback
;

111 
x86_∂©f‹m_ùi_ˇŒback
 = 
dosm_ùi_ˇŒback
;

114 
	`öô_timî
(&
sˇn_timî
);

115 
sˇn_timî
.
expúes
 = 
jiffõs
 + 
HZ
;

116 
sˇn_timî
.
fun˘i⁄
 = 
dosm_sˇn_timî
;

117 
	`add_timî
(&
sˇn_timî
);

119 
	}
}

121 
__exô


122 
	$dosm_exô
()

124 
	`kthªad_°›
(
dosm_èsk
);

125 
	`iounm≠
(
buf
);

126 
	`ªÀa£_mem_ªgi⁄
(
buf_∑ddr
, 
buf_size
);

127 
	`¥ötk
(
KERN_INFO
 "UCORE-MP64 Driver OS ModuleÉxits.\n");

128 
	}
}

130 
moduÀ_öô
(
dosm_öô
);

131 
moduÀ_exô
(
dosm_exô
);

133 
MODULE_LICENSE
("GPL");

134 
MODULE_AUTHOR
("xinhaoyuan@gmail.com ");

135 
MODULE_DESCRIPTION
("Linuxásá driver os for ucore-mp64");

	@linux-dos-module/dosm-init.h

1 #i‚de‡
__DOSM_INIT_H__


2 
	#__DOSM_INIT_H__


	)

4 
ush‹t
 
ùi_ve˘‹
;

	@linux-dos-module/dosm-packet.c

1 
	~<asm/ùi.h
>

3 
	#__DOSM__


	)

4 
	~"dosm-∑ckë.h
"

5 
	~"dosm-öô.h
"

8 
	$dosm_∑ckë_¥o˚ss
(
dosm_∑ckë_t
 
∑ckë
)

11 
∑ckë
->
ªmŸe_Êags
 |
DOSM_RF_FINISHED
;

12 
	`__deÁu…_£nd_IPI_de°_fõld
(
∑ckë
->
sour˚_œpic
, 
ùi_ve˘‹
, 
APIC_DEST_PHYSICAL
);

13 
	}
}

	@linux-dos-module/dosm-packet.h

1 #i‚de‡
__DOSM_PACKET_H__


2 
	#__DOSM_PACKET_H__


	)

4 #ifde‡
__DOSM__


5 
	~<löux/ty≥s.h
>

8 #ifde‡
LIBSPREFIX


9 
	~<libs/ty≥s.h
>

11 
	~<ty≥s.h
>

16 
dosm_∑ckë_s
 *
	tdosm_∑ckë_t
;

17 
	sdosm_∑ckë_s


23 
öt16_t
 
	msour˚_œpic
;

24 
uöt16_t
 
	msour˚_Êags
;

25 
uöt16_t
 
	moff£t_lök
;

27 
uöt16_t
 
	mªmŸe_Êags
;

28 } 
__©åibuã__
((
∑cked
));

30 
uöt64_t
 
	m°©us
;

32 
uöt64_t
 
	m¥iv
;

33 
uöt64_t
 
	m¨gs
[6];

34 } 
	t__©åibuã__
((
	t∑cked
)Ë
	tdosm_∑ckë_s
;

36 
	#DOSM_SF_USED
 0x1

	)

37 
	#DOSM_SF_VALID
 0x2

	)

38 
	#DOSM_RF_CHECKED
 0x1

	)

39 
	#DOSM_RF_FINISHED
 0x2

	)

41 
	#DOSM_PACKET_SIZE
 64

	)

43 #ifde‡
__DOSM__


44 
dosm_∑ckë_¥o˚ss
(
dosm_∑ckë_t
 
∑ckë
);

	@supervisor/arch/x86_64/context/context.c

1 
	~<c⁄ãxt.h
>

2 
	~<œpic.h
>

3 
	~<°dio.h
>

5 
__c⁄ãxt_swôch
(
uöçå_t
 *
‰om_e•
, uöçå_à*
‰om_pc
, uöçå_à
to_e•
, uöçå_à
to_pc
);

6 
__c⁄ãxt_öô
();

7 
__c⁄ãxt_dódíd
();

10 
c⁄ãxt_s
 
	gˇ
, 
	gcb
;

13 
	$ó
(*
¨g
)

15 
	`˝rötf
("EA %p\n", 
¨g
);

16 
	`c⁄ãxt_swôch
(&
ˇ
, &
cb
);

17 
	}
}

20 
	$eb
(*
¨g
)

22 
	`˝rötf
("EB %p\n", 
¨g
);

23 
	`c⁄ãxt_swôch
(&
cb
, &
ˇ
);

24 
	}
}

27 
	$c⁄ãxt_öô
()

31 
	`˝rötf
("CONTEXT %∞%p\n", &
ˇ
, &
cb
);

33 
	`c⁄ãxt_fûl
(&
ˇ
, 
ó
, (*)0xdód, 0, (
uöçå_t
)
	`∑ge2kva
(
	`Æloc_∑ge
()));

34 
	`c⁄ãxt_fûl
(&
cb
, 
eb
, (*)0x1234, 0, (
uöçå_t
)
	`∑ge2kva
(
	`Æloc_∑ge
()));

36 
	`c⁄ãxt_swôch
(
NULL
, &
ˇ
);

40 
	}
}

43 
	$c⁄ãxt_dódíd
(
c⁄ãxt_t
 
˘x
)

45 
	`˝rötf
("CONTEXT %∞FALL INTO DEAD END\n", 
˘x
);

47 
	}
}

50 
c⁄ãxt_fûl
(
c⁄ãxt_t
 
˘x
, (*
íåy
)(*
¨g
), *¨g, 
uöçå_t
 
°k_t›
)

52 i‡(
˘x
->
l˝u
 =-1Ë˘x->l˝u = 
	`œpic_id
();

54 
˘x
->
°k_t›
 = stk_top;

55 
˘x
->
°k_±r
 = ctx->
°k_t›
;

57 
˘x
->
°k_±r
 -= (*);

58 *(**)
˘x
->
°k_±r
 = ctx;

60 
˘x
->
°k_±r
 -= (*);

61 *(**)
˘x
->
°k_±r
 = 
¨g
;

63 
˘x
->
°k_±r
 -= (*);

64 *(**)
˘x
->
°k_±r
 = &
__c⁄ãxt_dódíd
;

66 
˘x
->
°k_±r
 -= (*);

67 *(**)
˘x
->
°k_±r
 = 
íåy
;

69 
˘x
->
pc
 = (
uöçå_t
)
__c⁄ãxt_öô
;

70 
	}
}

73 
	$c⁄ãxt_swôch
(
c⁄ãxt_t
 
ﬁd
, c⁄ãxt_à
to
)

78 i‡(
ﬁd
 !
NULL
)

80 
	`__c⁄ãxt_swôch
(&
ﬁd
->
°k_±r
, &ﬁd->
pc
, 
to
->stk_ptr,Åo->pc);

84 
uöçå_t
 
__unu£d
;

85 
	`__c⁄ãxt_swôch
(&
__unu£d
, &__unu£d, 
to
->
°k_±r
,Åo->
pc
);

87 
	}
}

	@supervisor/arch/x86_64/context/context.h

1 #i‚de‡
__CONTEXT_H__


2 
	#__CONTEXT_H__


	)

4 
	~<ty≥s.h
>

5 
	~<å≠.h
>

7 
	sc⁄ãxt_s


9 
uöçå_t
 
	m°k_±r
;

10 
uöçå_t
 
	m°k_t›
;

12 
uöçå_t
 
	mpc
;

13 
	ml˝u
;

14 } 
	tc⁄ãxt_s
;

16 
c⁄ãxt_s
 *
	tc⁄ãxt_t
;

18 
c⁄ãxt_swôch
(
c⁄ãxt_t
 
‰om
, c⁄ãxt_à
to
);

19 
c⁄ãxt_fûl
(
c⁄ãxt_t
 
˘x
,

20 (*
íåy
)(*
¨g
), *arg,

21 
uöçå_t
 
°k_t›
);

23 
	`c⁄ãxt_öô
();

	@supervisor/arch/x86_64/debug/kdebug.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<kdebug.h
>

7 
	#STACKFRAME_DEPTH
 20

	)

15 
	$¥öt_kînöfo
() {

16 
__ëext
[], 
__ed©a
[], 
__íd
[], 
kîn_öô
[];

17 
	`˝rötf
("Special kernel symbols:\n");

18 
	`˝rötf
("É¡ry 0x%08x (phys)\n", 
kîn_öô
);

19 
	`˝rötf
("Éãxà 0x%08x (phys)\n", 
__ëext
);

20 
	`˝rötf
("Éd©® 0x%08x (phys)\n", 
__ed©a
);

21 
	`˝rötf
("Énd 0x%08x (phys)\n", 
__íd
);

22 
	`˝rötf
("Kî√»execuèbÀ mem‹y foŸ¥öt: %dKB\n", (
__íd
 - 
kîn_öô
 + 1023)/1024);

23 
	}
}

25 
uöt64_t
 
	$ªad_rù
(Ë
	`__©åibuã__
((
noölöe
));

27 
uöt64_t


28 
	$ªad_rù
() {

29 
uöt64_t
 
rù
;

30 
asm
 vﬁ©ûe("movq 8(%%rbp), %0" : "Ù" (
rù
));

31  
rù
;

32 
	}
}

39 
	$¥öt_°ack‰ame
() {

40 
uöt64_t
 
rbp
 = 
	`ªad_rbp
(), 
rù
 = 
	`ªad_rù
();

42 
i
;

43 
i
 = 0; 
rbp
 !0 && i < 
STACKFRAME_DEPTH
; i ++) {

44 
	`˝rötf
("rbp:0x%016ŒxÑù:0x%016Œx\n", 
rbp
, 
rù
);

45 
rù
 = ((
uöt64_t
 *)
rbp
)[1];

46 
rbp
 = ((
uöt64_t
 *)rbp)[0];

48 
	}
}

	@supervisor/arch/x86_64/debug/kdebug.h

1 #i‚de‡
__KERN_DEBUG_KDEBUG_H__


2 
	#__KERN_DEBUG_KDEBUG_H__


	)

4 
	~<ty≥s.h
>

6 
¥öt_kînöfo
();

7 
¥öt_°ack‰ame
();

	@supervisor/arch/x86_64/debug/monitor.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<å≠.h
>

4 
	~<m⁄ô‹.h
>

5 
	~<kdebug.h
>

12 
	scomm™d
 {

13 c⁄° *
	m«me
;

14 c⁄° *
	mdesc
;

16 (*
	mfunc
)(
	m¨gc
, **
	m¨gv
, 
å≠‰ame
 *
	mtf
);

19 
comm™d
 
	gcomm™ds
[] = {

20 {"hñp", "Di•œyÅhi†li° o‡comm™ds.", 
m⁄_hñp
},

21 {"kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l.", 
m⁄_kînöfo
},

22 {"backåa˚", "Pröàbackåa˚ o‡°ack føme.", 
m⁄_backåa˚
},

25 
	#NCOMMANDS
 ((
comm™ds
)/(
comm™d
))

	)

29 
	#MAXARGS
 16

	)

30 
	#WHITESPACE
 " \t\n\r"

	)

34 
	$∑r£
(*
buf
, **
¨gv
) {

35 
¨gc
 = 0;

38 *
buf
 !'\0' && 
	`°rchr
(
WHITESPACE
, *bufË!
NULL
) {

39 *
buf
 ++ = '\0';

41 i‡(*
buf
 == '\0') {

46 i‡(
¨gc
 =
MAXARGS
 - 1) {

47 
	`˝rötf
("Toÿm™yárgumít†(max %d).\n", 
MAXARGS
);

49 
¨gv
[
¨gc
 ++] = 
buf
;

50 *
buf
 !'\0' && 
	`°rchr
(
WHITESPACE
, *bufË=
NULL
) {

51 
buf
 ++;

54  
¨gc
;

55 
	}
}

62 
	$runcmd
(*
buf
, 
å≠‰ame
 *
tf
) {

63 *
¨gv
[
MAXARGS
];

64 
¨gc
 = 
	`∑r£
(
buf
, 
¨gv
);

65 i‡(
¨gc
 == 0) {

68 
i
;

69 
i
 = 0; i < 
NCOMMANDS
; i ++) {

70 i‡(
	`°rcmp
(
comm™ds
[
i
].
«me
, 
¨gv
[0]) == 0) {

71  
comm™ds
[
i
].
	`func
(
¨gc
 - 1, 
¨gv
 + 1, 
tf
);

74 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

76 
	}
}

81 
	$m⁄ô‹
(
å≠‰ame
 *
tf
) {

82 
	`˝rötf
("WelcomeÅoÅhe supervisor debug monitor!!\n");

83 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

85 i‡(
tf
 !
NULL
) {

86 
	`¥öt_å≠‰ame
(
tf
);

89 *
buf
;

91 i‡((
buf
 = 
	`ªadlöe
("K> ")Ë!
NULL
) {

92 i‡(
	`runcmd
(
buf
, 
tf
) < 0) {

97 
	}
}

101 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

102 
i
;

103 
i
 = 0; i < 
NCOMMANDS
; i ++) {

104 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

107 
	}
}

114 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

115 
	`¥öt_kînöfo
();

117 
	}
}

124 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
) {

125 
	`¥öt_°ack‰ame
();

127 
	}
}

	@supervisor/arch/x86_64/debug/monitor.h

1 #i‚de‡
__KERN_DEBUG_MONITOR_H__


2 
	#__KERN_DEBUG_MONITOR_H__


	)

4 
	~<å≠.h
>

6 
m⁄ô‹
(
å≠‰ame
 *
tf
);

8 
m⁄_hñp
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

9 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

10 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
å≠‰ame
 *
tf
);

	@supervisor/arch/x86_64/debug/panic.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<öå.h
>

4 
	~<m⁄ô‹.h
>

6 
boﬁ
 
	gis_∑nic
 = 0;

13 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

14 i‡(
is_∑nic
) {

15 
∑nic_dód
;

17 
is_∑nic
 = 1;

20 
va_li°
 
≠
;

21 
	`va_°¨t
(
≠
, 
fmt
);

22 
	`˝rötf
("kî√»∑ni¯© %s:%d:\¿ ", 
fûe
, 
löe
);

23 
	`v˝rötf
(
fmt
, 
≠
);

24 
	`˝rötf
("\n");

25 
	`va_íd
(
≠
);

27 
∑nic_dód
:

28 
	`öå_dißbÀ
();

30 
	`m⁄ô‹
(
NULL
);

32 
	}
}

36 
	$__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...) {

37 
va_li°
 
≠
;

38 
	`va_°¨t
(
≠
, 
fmt
);

39 
	`˝rötf
("kî√»w¨nögáà%s:%d:\¿ ", 
fûe
, 
löe
);

40 
	`v˝rötf
(
fmt
, 
≠
);

41 
	`˝rötf
("\n");

42 
	`va_íd
(
≠
);

43 
	}
}

45 
boﬁ


46 
	$is_kî√l_∑nic
() {

47  
is_∑nic
;

48 
	}
}

	@supervisor/arch/x86_64/driver/acpi_conf.c

1 
	~<a˝i_c⁄f.h
>

2 
	~<pmm.h
>

3 
	~<îr‹.h
>

4 
	~<¨ch.h
>

5 
	~<sysc⁄f.h
>

6 
	~<œpic.h
>

7 
	~<iﬂpic.h
>

8 
	~<l˝u.h
>

9 
	~<°rög.h
>

10 
	~<°dio.h
>

12 
	sa˝i_rsdp_s


14 
uöt8_t
 
	msig«tuª
[8];

15 
uöt8_t
 
	mchecksum
;

16 
uöt8_t
 
	m€m_id
[6];

17 
uöt8_t
 
	mªvisi⁄
;

18 
uöt32_t
 
	mrsdt_phys
;

19 
uöt32_t
 
	mrsdt_Àn
;

20 
uöt64_t
 
	mxsdt_phys
;

21 
uöt8_t
 
	mxchecksum
;

22 
uöt8_t
 
	m__ª£rved
[3];

23 } 
__©åibuã__
((
∑cked
));

26 
	sa˝i_sdth_s


28 
uöt8_t
 
	msig«tuª
[4];

29 
uöt32_t
 
	mÀngth
;

30 
uöt8_t
 
	mªvisi⁄
;

31 
uöt8_t
 
	mchecksum
;

32 
uöt8_t
 
	m€m_id
[6];

33 
uöt64_t
 
	m€m_èbÀ_id
;

34 
uöt32_t
 
	m€m_ªvisi⁄
;

35 
uöt32_t
 
	m¸ót‹_id
;

36 
uöt32_t
 
	m¸ót‹_ªvisi⁄
;

37 } 
__©åibuã__
((
∑cked
));

39 
	sa˝i_gas_s


41 
uöt8_t
 
	maddr_•a˚_id
;

42 
uöt8_t
 
	mªg_width
;

43 
uöt8_t
 
	mªg_off£t
;

44 
uöt8_t
 
	m__ª£rved
;

47 
uöt32_t
 
	maddr_32
;

48 
uöt64_t
 
	maddr_64
;

50 } 
__©åibuã__
((
∑cked
));

52 
	sa˝i_h≥t_desc_s


54 
uöt32_t
 
	mblock_id
;

55 
a˝i_gas_s
 
	mba£_low_addr
;

56 
uöt8_t
 
	mh≥t_num
;

57 
uöt16_t
 
	mmc_¥iod_mö_tick
;

58 
uöt8_t
 
	mµ_€m
;

59 } 
__©åibuã__
((
∑cked
));

61 
	sa˝i_madt_s


63 
uöt32_t
 
	mœpic_phys
;

64 
uöt32_t
 
	mÊags
;

67 
	sa˝i_madt_≠ic_desc_s


69 
uöt8_t
 
	mty≥
;

70 
uöt8_t
 
	mÀngth
;

75 
uöt8_t
 
	m¥oc_id
;

76 
uöt8_t
 
	m≠ic_id
;

77 
uöt8_t
 
	mÊags
;

78 } 
__©åibuã__
((
∑cked
)Ë
	mœpic
;

82 
uöt8_t
 
	m≠ic_id
;

83 
uöt8_t
 
	mª£rved
;

84 
uöt32_t
 
	mphys
;

85 
uöt32_t
 
	möå_ba£
;

86 } 
__©åibuã__
((
∑cked
)Ë
	miﬂpic
;

88 } 
__©åibuã__
((
∑cked
));

90 
uöt8_t


91 
	$sum
(
uöt8_t
 *
addr
, 
Àn
)

93 
i
, 
sum
;

94 
sum
 = 0;

95 
i
 = 0; i < 
Àn
; i++)

96 
sum
 +
addr
[
i
];

97  
sum
;

98 
	}
}

100 
a˝i_rsdp_s
*

101 
	$a˝i_rsdp_£¨ch_£gmít
(
uöt8_t
 *
addr
, 
Àn
, 
uöt64_t
 
Æign
, 
ex
)

103 
uöçå_t
 
e
, 
p
;

104 
a˝i_rsdp_s
 *
ªsu…
 = 
NULL
;

106 
e
 = (
uöçå_t
)(
addr
 + 
Àn
Ë& ~
Æign
;

107 
p
 = (
uöçå_t
)
addr
;

108 i‡(
p
 & 
Æign
)Ö = (p |álign) + 1;

109 ; 
p
 < 
e
;Ö =Ö + 
Æign
 + 1)

111 if(
	`memcmp
((*)
p
, "RSD PTR ", 8) == 0)

113 i‡(
	`sum
((*)
p
, 
ex
 ? 36 : 20) == 0)

115 
ªsu…
 = (
a˝i_rsdp_s
*)
p
;

116  
ªsu…
;

120  
ªsu…
;

121 
	}
}

123 
	#BDA
 0x400

	)

129 
a˝i_rsdp_s
*

130 
	$a˝i_rsdp_£¨ch
()

132 
uöt8_t
 *
bda
;

133 
uöçå_t
 
p
;

134 
a˝i_rsdp_s
 *
rsdp
;

135 
uöt64_t
 
x
;

137 
bda
 = (
uöt8_t
 *)
	`VADDR_DIRECT
(
BDA
);

138 
x
 = ((
bda
[0x0F] << 8) | bda[0x0E]) << 4;

139 
p
 = (
uöçå_t
)
	`VADDR_DIRECT
(
x
);

140 i‡(
p
)

142 i‡((
rsdp
 = 
	`a˝i_rsdp_£¨ch_£gmít
((
uöt8_t
 *)
p
, 1024, 0xf, 1)))

143  
rsdp
;

145  
	`a˝i_rsdp_£¨ch_£gmít
((
uöt8_t
 *)
	`VADDR_DIRECT
(0xE0000), 0x20000, 0xf, 1);

146 
	}
}

149 
	$a˝i_c⁄f_öô
()

151 
a˝i_rsdp_s
 *
rsdp
 = 
	`a˝i_rsdp_£¨ch
();

152 i‡(!
rsdp
)

154 
	`˝rötf
("NO RSDP IN MEMORY\n");

155  -
E_UNSPECIFIED
;

158 
sysc⁄f
.
l˝u_cou¡
 = 0;

159 
sysc⁄f
.
iﬂpic_cou¡
 = 0;

160 
sysc⁄f
.
has_h≥t
 = 0;

162 
xsdp
 = (
rsdp
->
ªvisi⁄
 != 0) ? 1 : 0;

163 
a˝i_sdth_s
 *
sdt
 = (a˝i_sdth_†*)
	`VADDR_DIRECT
(
xsdp
 ? 
rsdp
->
xsdt_phys
 :Ñsdp->
rsdt_phys
);

164 
n
 = (
sdt
->
Àngth
 - (
a˝i_sdth_s
)Ë/ (
xsdp
 ? 8 : 4);

166 
sign
[5];

167 
sign
[4] = 0;

168 
i
;

169 
i
 = 0; i !
n
; ++ i)

171 
uöçå_t
 
phys
;

172 i‡(
xsdp
)

173 
phys
 = *(
uöt64_t
 *)((
uöçå_t
)(
sdt
 + 1Ë+ (
i
 << (
xsdp
 ? 3 : 2)));

174 
phys
 = *(
uöt32_t
 *)((
uöçå_t
)(
sdt
 + 1Ë+ (
i
 << (
xsdp
 ? 3 : 2)));

175 
a˝i_sdth_s
 *
cur
 = (a˝i_sdth_†*)
	`VADDR_DIRECT
(
phys
);

176 
	`memmove
(
sign
, (*)&
cur
->
sig«tuª
, 4);

177 
	`˝rötf
("Pro˚ssög %s\n", 
sign
);

178 i‡(
	`memcmp
(
cur
->
sig«tuª
, "APIC", 4) == 0)

180 
a˝i_madt_s
 *
madt
 = (a˝i_madt_†*)(
cur
 + 1);

182 
sysc⁄f
.
œpic_phys
 = 
madt
->lapic_phys;

184 
uöçå_t
 
phys_ba£
 = 
sysc⁄f
.
œpic_phys
 & ~(uöçå_t)(
PGSIZE
 - 1);

185 *
	`gë_±e
(
boŸ_pgdú
, (
uöçå_t
)
	`VADDR_DIRECT
(
phys_ba£
), 1) =

186 
phys_ba£
 | 
PTE_P
 | 
PTE_W
;

188 *
≠ic_cur
 = (*)(
madt
 + 1);

189 *
≠ic_íd
 = (*)
cur
 + cur->
Àngth
;

191 
≠ic_cur
 < 
≠ic_íd
)

193 
a˝i_madt_≠ic_desc_s
 *
desc
 =

194 (
a˝i_madt_≠ic_desc_s
 *)
≠ic_cur
;

196 i‡(
desc
->
ty≥
 =0 && (desc->
œpic
.
Êags
 & 1))

202 
l˝u_id_£t
[
sysc⁄f
.
l˝u_cou¡
] = 
desc
->
œpic
.
≠ic_id
;

203 ++ 
sysc⁄f
.
l˝u_cou¡
;

207 i‡(
desc
->
ty≥
 == 1)

210 
iﬂpic
[
sysc⁄f
.
iﬂpic_cou¡
].
≠ic_id
 = 
desc
->ioapic.apic_id;

211 
iﬂpic
[
sysc⁄f
.
iﬂpic_cou¡
].
phys
 = 
desc
->ioapic.phys;

212 
iﬂpic
[
sysc⁄f
.
iﬂpic_cou¡
].
öå_ba£
 = 
desc
->ioapic.intr_base;

214 
phys_ba£
 = 
desc
->
iﬂpic
.
phys
 & ~(
uöçå_t
)(
PGSIZE
 - 1);

215 *
	`gë_±e
(
boŸ_pgdú
, (
uöçå_t
)
	`VADDR_DIRECT
(
phys_ba£
), 1) =

216 
phys_ba£
 | 
PTE_P
 | 
PTE_W
;

218 ++ 
sysc⁄f
.
iﬂpic_cou¡
;

221 
≠ic_cur
 +
desc
->
Àngth
;

224 i‡(
	`memcmp
(
cur
->
sig«tuª
, "HPET", 4) == 0)

226 
a˝i_h≥t_desc_s
 *
h≥t
 = (a˝i_h≥t_desc_†*)(
cur
 + 1);

227 
sysc⁄f
.
has_h≥t
 = 1;

228 
sysc⁄f
.
h≥t_phys
 = 
h≥t
->
ba£_low_addr
.
addr_64
;

232 
	`l¸3
(
boŸ_¸3
);

235 
	}
}

	@supervisor/arch/x86_64/driver/acpi_conf.h

1 #i‚de‡
__ACPI_CONF_H__


2 
	#__ACPI_CONF_H__


	)

7 
a˝i_c⁄f_öô
();

	@supervisor/arch/x86_64/driver/clock.c

1 
	~<¨ch.h
>

2 
	~<å≠.h
>

3 
	~<°dio.h
>

4 
	~<picúq.h
>

5 
	~<œpic.h
>

12 
	#IO_TIMER1
 0x040

13 

	)

19 
	#TIMER_FREQ
 1193182

	)

20 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
 + (xË/ 2Ë/ (x))

	)

22 
	#TIMER_MODE
 (
IO_TIMER1
 + 3)

23 
	#TIMER_SEL0
 0x00

24 
	#TIMER_RATEGEN
 0x04

25 
	#TIMER_16BIT
 0x30

26 

	)

27 vﬁ©ûê
size_t
 
	gticks
;

34 
	$˛ock_öô
() {

37 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

38 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

39 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

40 
	`pic_íabÀ
(
IRQ_TIMER
);

42 
	`œpic_timî_£t
(100);

46 
ticks
 = 0;

48 
	`˝rötf
("++ setupÅimer interrupts\n");

49 
	}
}

	@supervisor/arch/x86_64/driver/clock.h

1 #i‚de‡
__KERN_DRIVER_CLOCK_H__


2 
	#__KERN_DRIVER_CLOCK_H__


	)

4 
	~<ty≥s.h
>

6 vﬁ©ûê
size_t
 
ticks
;

8 
˛ock_öô
();

	@supervisor/arch/x86_64/driver/console.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<kbdªg.h
>

6 
	~<picúq.h
>

7 
	~<å≠.h
>

8 
	~<memœyout.h
>

9 
	~<sync.h
>

13 
	$dñay
() {

14 
	`öb
(0x84);

15 
	`öb
(0x84);

16 
	`öb
(0x84);

17 
	`öb
(0x84);

18 
	}
}

21 
	#COM1
 0x3F8

	)

23 
	#COM_RX
 0

24 
	#COM_TX
 0

25 
	#COM_DLL
 0

26 
	#COM_DLM
 1

27 
	#COM_IER
 1

28 
	#COM_IER_RDI
 0x01

29 
	#COM_IIR
 2

30 
	#COM_FCR
 2

31 
	#COM_LCR
 3

32 
	#COM_LCR_DLAB
 0x80

33 
	#COM_LCR_WLEN8
 0x03

34 
	#COM_MCR
 4

35 
	#COM_MCR_RTS
 0x02

36 
	#COM_MCR_DTR
 0x01

37 
	#COM_MCR_OUT2
 0x08

38 
	#COM_LSR
 5

39 
	#COM_LSR_DATA
 0x01

40 
	#COM_LSR_TXRDY
 0x20

41 
	#COM_LSR_TSRE
 0x40

42 

	)

43 
	#MONO_BASE
 0x3B4

	)

44 
	#MONO_BUF
 0xB0000

	)

45 
	#CGA_BASE
 0x3D4

	)

46 
	#CGA_BUF
 0xB8000

	)

47 
	#CRT_ROWS
 25

	)

48 
	#CRT_COLS
 80

	)

49 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

51 
	#LPTPORT
 0x378

	)

53 
uöt16_t
 *
	g¸t_buf
;

54 
uöt16_t
 
	g¸t_pos
;

55 
uöt16_t
 
	gaddr_6845
;

60 
	$cga_öô
() {

61 vﬁ©ûê
uöt16_t
 *
˝
 = (uöt16_à*)(
CGA_BUF
 + 
PHYSBASE
);

62 
uöt16_t
 
was
 = *
˝
;

63 *
˝
 = (
uöt16_t
) 0xA55A;

64 i‡(*
˝
 != 0xA55A) {

65 
˝
 = (
uöt16_t
*)(
MONO_BUF
 + 
PHYSBASE
);

66 
addr_6845
 = 
MONO_BASE
;

68 *
˝
 = 
was
;

69 
addr_6845
 = 
CGA_BASE
;

73 
uöt32_t
 
pos
;

74 
	`outb
(
addr_6845
, 14);

75 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

76 
	`outb
(
addr_6845
, 15);

77 
pos
 |
	`öb
(
addr_6845
 + 1);

79 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

80 
¸t_pos
 = 
pos
;

81 
	}
}

83 
boﬁ
 
	g£rül_exi°s
 = 0;

86 
	$£rül_öô
() {

88 
	`outb
(
COM1
 + 
COM_FCR
, 0);

91 
	`outb
(
COM1
 + 
COM_LCR
, 
COM_LCR_DLAB
);

92 
	`outb
(
COM1
 + 
COM_DLL
, (
uöt8_t
) (115200 / 9600));

93 
	`outb
(
COM1
 + 
COM_DLM
, 0);

96 
	`outb
(
COM1
 + 
COM_LCR
, 
COM_LCR_WLEN8
 & ~
COM_LCR_DLAB
);

99 
	`outb
(
COM1
 + 
COM_MCR
, 0);

101 
	`outb
(
COM1
 + 
COM_IER
, 
COM_IER_RDI
);

105 
£rül_exi°s
 = (
	`öb
(
COM1
 + 
COM_LSR
) != 0xFF);

106 (Ë
	`öb
(
COM1
+
COM_IIR
);

107 (Ë
	`öb
(
COM1
+
COM_RX
);

109 i‡(
£rül_exi°s
) {

110 
	`pic_íabÀ
(
IRQ_COM1
);

112 
	}
}

115 
	$Õt_putc_sub
(
c
) {

116 
i
;

117 
i
 = 0; !(
	`öb
(
LPTPORT
 + 1) & 0x80) && i < 12800; i ++) {

118 
	`dñay
();

120 
	`outb
(
LPTPORT
 + 0, 
c
);

121 
	`outb
(
LPTPORT
 + 2, 0x08 | 0x04 | 0x01);

122 
	`outb
(
LPTPORT
 + 2, 0x08);

123 
	}
}

127 
	$Õt_putc
(
c
) {

128 i‡(
c
 != '\b') {

129 
	`Õt_putc_sub
(
c
);

132 
	`Õt_putc_sub
('\b');

133 
	`Õt_putc_sub
(' ');

134 
	`Õt_putc_sub
('\b');

136 
	}
}

140 
	$cga_putc
(
c
) {

142 i‡(!(
c
 & ~0xFF)) {

143 
c
 |= 0x0700;

146 
c
 & 0xff) {

148 i‡(
¸t_pos
 > 0) {

149 
¸t_pos
 --;

150 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

154 
¸t_pos
 +
CRT_COLS
;

156 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

159 
¸t_buf
[
¸t_pos
 ++] = 
c
;

164 i‡(
¸t_pos
 >
CRT_SIZE
) {

165 
i
;

166 
	`memmove
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

167 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i ++) {

168 
¸t_buf
[
i
] = 0x0700 | ' ';

170 
¸t_pos
 -
CRT_COLS
;

174 
	`outb
(
addr_6845
, 14);

175 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

176 
	`outb
(
addr_6845
, 15);

177 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

178 
	}
}

181 
	$£rül_putc_sub
(
c
) {

182 
i
;

183 
i
 = 0; !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
) && i < 12800; i ++) {

184 
	`dñay
();

186 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

187 
	}
}

191 
	$£rül_putc
(
c
) {

192 i‡(
c
 != '\b') {

193 
	`£rül_putc_sub
(
c
);

196 
	`£rül_putc_sub
('\b');

197 
	`£rül_putc_sub
(' ');

198 
	`£rül_putc_sub
('\b');

200 
	}
}

208 
	#CONSBUFSIZE
 512

	)

211 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

212 
uöt32_t
 
	mΩos
;

213 
uöt32_t
 
	mwpos
;

214 } 
	gc⁄s
;

221 
c⁄s_öå
((*
¥oc
)()) {

222 
c
;

223 (
c
 = (*
¥oc
)()) != -1) {

224 i‡(
c
 != 0) {

225 
c⁄s
.
buf
[c⁄s.
wpos
 ++] = 
c
;

226 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
) {

227 
c⁄s
.
wpos
 = 0;

231 
	}
}

235 
	$£rül_¥oc_d©a
() {

236 i‡(!(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_DATA
)) {

239 
c
 = 
	`öb
(
COM1
 + 
COM_RX
);

240 i‡(
c
 == 127) {

241 
c
 = '\b';

243  
c
;

244 
	}
}

248 
	$£rül_öå
() {

249 i‡(
£rül_exi°s
) {

250 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

252 
	}
}

256 
	#NO
 0

	)

258 
	#SHIFT
 (1<<0)

	)

259 
	#CTL
 (1<<1)

	)

260 
	#ALT
 (1<<2)

	)

262 
	#CAPSLOCK
 (1<<3)

	)

263 
	#NUMLOCK
 (1<<4)

	)

264 
	#SCROLLLOCK
 (1<<5)

	)

266 
	#E0ESC
 (1<<6)

	)

268 
uöt8_t
 
	gshi·code
[256] = {

269 [0x1D] 
CTL
,

270 [0x2A] 
SHIFT
,

271 [0x36] 
SHIFT
,

272 [0x38] 
ALT
,

273 [0x9D] 
CTL
,

274 [0xB8] 
ALT


277 
uöt8_t
 
	gtoggÀcode
[256] = {

278 [0x3A] 
CAPSLOCK
,

279 [0x45] 
NUMLOCK
,

280 [0x46] 
SCROLLLOCK


283 
uöt8_t
 
	gn‹mÆm≠
[256] = {

284 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

287 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

289 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

290 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

291 
NO
, ' ', NO, NO, NO, NO, NO, NO,

292 
NO
, NO, NO, NO, NO, NO, NO, '7',

294 '2', '3', '0', '.', 
NO
, NO, NO, NO,

295 [0xC7] 
KEY_HOME
, [0x9C] '\n' ,

296 [0xB5] '/' , [0xC8] 
KEY_UP
,

297 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

298 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

299 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

300 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


303 
uöt8_t
 
	gshi·m≠
[256] = {

304 
NO
, 033, '!', '@', '#', '$', '%', '^',

307 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

309 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

310 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

311 
NO
, ' ', NO, NO, NO, NO, NO, NO,

312 
NO
, NO, NO, NO, NO, NO, NO, '7',

314 '2', '3', '0', '.', 
NO
, NO, NO, NO,

315 [0xC7] 
KEY_HOME
, [0x9C] '\n' ,

316 [0xB5] '/' , [0xC8] 
KEY_UP
,

317 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

318 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

319 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

320 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


323 
	#C
(
x
Ë(x - '@')

	)

325 
uöt8_t
 
	g˘lm≠
[256] = {

326 
NO
, NO, NO, NO, NO, NO, NO, NO,

327 
NO
, NO, NO, NO, NO, NO, NO, NO,

328 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

329 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

330 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

331 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

332 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

333 [0x97] 
KEY_HOME
,

334 [0xB5] 
C
('/'), [0xC8] 
KEY_UP
,

335 [0xC9] 
KEY_PGUP
, [0xCB] 
KEY_LF
,

336 [0xCD] 
KEY_RT
, [0xCF] 
KEY_END
,

337 [0xD0] 
KEY_DN
, [0xD1] 
KEY_PGDN
,

338 [0xD2] 
KEY_INS
, [0xD3] 
KEY_DEL


341 
uöt8_t
 *
	gch¨code
[4] = {

342 
n‹mÆm≠
,

343 
shi·m≠
,

344 
˘lm≠
,

345 
˘lm≠


355 
	$kbd_¥oc_d©a
() {

356 
c
;

357 
uöt8_t
 
d©a
;

358 
uöt32_t
 
shi·
;

360 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0) {

364 
d©a
 = 
	`öb
(
KBDATAP
);

366 i‡(
d©a
 == 0xE0) {

368 
shi·
 |
E0ESC
;

370 } i‡(
d©a
 & 0x80) {

372 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

373 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

375 } i‡(
shi·
 & 
E0ESC
) {

377 
d©a
 |= 0x80;

378 
shi·
 &~
E0ESC
;

381 
shi·
 |
shi·code
[
d©a
];

382 
shi·
 ^
toggÀcode
[
d©a
];

384 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

385 i‡(
shi·
 & 
CAPSLOCK
) {

386 i‡('a' <
c
 && c <= 'z')

387 
c
 += 'A' - 'a';

388 i‡('A' <
c
 && c <= 'Z')

389 
c
 += 'a' - 'A';

394 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

395 
	`˝rötf
("Rebooting!\n");

396 
	`outb
(0x92, 0x3);

398  
c
;

399 
	}
}

403 
	$kbd_öå
() {

404 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

405 
	}
}

408 
	$kbd_öô
() {

410 
	`kbd_öå
();

411 
	`pic_íabÀ
(
IRQ_KBD
);

412 
	}
}

416 
	$c⁄s_öô
() {

417 
	`cga_öô
();

418 
	`£rül_öô
();

419 
	`kbd_öô
();

420 i‡(!
£rül_exi°s
) {

421 
	`˝rötf
("serialÖort doesÇotÉxist!!\n");

423 
	}
}

427 
	$c⁄s_putc
(
c
) {

428 
boﬁ
 
öå_Êag
;

429 
	`loˇl_öå_ßve
(
öå_Êag
);

431 
	`Õt_putc
(
c
);

432 
	`cga_putc
(
c
);

433 
	`£rül_putc
(
c
);

435 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

436 
	}
}

443 
	$c⁄s_gëc
() {

444 
c
 = 0;

445 
boﬁ
 
öå_Êag
;

446 
	`loˇl_öå_ßve
(
öå_Êag
);

451 
	`£rül_öå
();

452 
	`kbd_öå
();

455 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

456 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
 ++];

457 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
) {

458 
c⁄s
.
Ωos
 = 0;

462 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

463  
c
;

464 
	}
}

	@supervisor/arch/x86_64/driver/console.h

1 #i‚de‡
__KERN_DRIVER_CONSOLE_H__


2 
	#__KERN_DRIVER_CONSOLE_H__


	)

4 
c⁄s_öô
();

5 
c⁄s_putc
(
c
);

6 
c⁄s_gëc
();

7 
£rül_öå
();

8 
kbd_öå
();

	@supervisor/arch/x86_64/driver/driver_os.c

1 
	~<drivî_os.h
>

2 
	~<œpic.h
>

3 
	~<sysc⁄f.h
>

4 
	~<°rög.h
>

5 
	~<å≠.h
>

6 
	~<°dio.h
>

7 
	~<l˝u.h
>

8 
	~<memœyout.h
>

10 vﬁ©ûê*
	gdrivî_os_buf„r
;

11 
size_t
 
	gdrivî_os_buf„r_size
;

14 
	$drivî_os_öô
()

16 #i‡
HAS_DRIVER_OS


17 
drivî_os_buf„r_size
 = 
DRIVER_OS_BUFFER_PSIZE
 << 
PGSHIFT
;

18 
drivî_os_buf„r
 = 
	`∑ge2va
(
	`Æloc_∑ges
(
DRIVER_OS_BUFFER_PSIZE
));

20 vﬁ©ûê
l˝u_öô_cou¡
;

23 
l˝u_öô_cou¡
 < 
sysc⁄f
.
l˝u_cou¡
 - 2) ;

24 
_bö¨y_bzImage_°¨t
[];

25 
_bö¨y_bzImage_íd
[];

30 
uöt8_t
 
£tup_£˘s
;

31 
uöt16_t
 
roŸ_Êags
;

32 
uöt32_t
 
syssize
;

33 
uöt16_t
 
øm_size
;

34 
	#RAMDISK_IMAGE_START_MASK
 0x07FF

	)

35 
	#RAMDISK_PROMPT_FLAG
 0x8000

	)

36 
	#RAMDISK_LOAD_FLAG
 0x4000

	)

37 
uöt16_t
 
vid_mode
;

38 
uöt16_t
 
roŸ_dev
;

39 
uöt16_t
 
boŸ_Êag
;

40 
uöt16_t
 
jump
;

41 
uöt32_t
 
hódî
;

42 
uöt16_t
 
vîsi⁄
;

43 
uöt32_t
 
ªÆmode_swtch
;

44 
uöt16_t
 
°¨t_sys
;

45 
uöt16_t
 
kî√l_vîsi⁄
;

46 
uöt8_t
 
ty≥_of_lﬂdî
;

47 
uöt8_t
 
lﬂdÊags
;

48 
	#LOADED_HIGH
 (1<<0)

	)

49 
	#QUIET_FLAG
 (1<<5)

	)

50 
	#KEEP_SEGMENTS
 (1<<6)

	)

51 
	#CAN_USE_HEAP
 (1<<7)

	)

52 
uöt16_t
 
£tup_move_size
;

53 
uöt32_t
 
code32_°¨t
;

54 
uöt32_t
 
ømdisk_image
;

55 
uöt32_t
 
ømdisk_size
;

56 
uöt32_t
 
boŸ£˘_kludge
;

57 
uöt16_t
 
hóp_íd_±r
;

58 
uöt8_t
 
ext_lﬂdî_vî
;

59 
uöt8_t
 
ext_lﬂdî_ty≥
;

60 
uöt32_t
 
cmd_löe_±r
;

61 
uöt32_t
 
öôrd_addr_max
;

62 
uöt32_t
 
kî√l_Æignmít
;

63 
uöt8_t
 
ªloˇèbÀ_kî√l
;

64 
uöt8_t
 
_∑d2
[3];

65 
uöt32_t
 
cmdlöe_size
;

66 
uöt32_t
 
h¨dw¨e_sub¨ch
;

67 
uöt64_t
 
h¨dw¨e_sub¨ch_d©a
;

68 
uöt32_t
 
∑ylﬂd_off£t
;

69 
uöt32_t
 
∑ylﬂd_Àngth
;

70 
uöt64_t
 
£tup_d©a
;

71 } 
	`__©åibuã__
((
∑cked
)Ë*
hdr
;

73 
__boŸ_dos_íåy
[];

74 
uöçå_t
 
boŸ_dos_íåy
 = (uöçå_t)
__boŸ_dos_íåy
 + 0x1F8000 + 
SVBASE
;

76 
	`memmove
(
	`VADDR_DIRECT
(0x8000), (*)
boŸ_dos_íåy
, 0x8000);

77 
	`memmove
(
	`VADDR_DIRECT
(0x10000), 
_bö¨y_bzImage_°¨t
, 0x8000);

79 
	#CMDLINE_SIZE
 400

	)

80 
cmdlöe
[
CMDLINE_SIZE
];

81 
	`¢¥ötf
(
cmdlöe
, 
CMDLINE_SIZE
,

84 
RESERVED_DRIVER_OS_SIZE
 >> 20,

85 
	`PADDR_DIRECT
(
drivî_os_buf„r
), 
drivî_os_buf„r_size
, 
T_IPI_DOS
);

86 
cmdlöe
[
CMDLINE_SIZE
 - 1] = 0;

87 
	`°r˝y
(
	`VADDR_DIRECT
(0x1e000), 
cmdlöe
);

89 
hdr
 = (*)0x101F1;

90 
hdr
->
ty≥_of_lﬂdî
 = 0xFF;

91 
hdr
->
lﬂdÊags
 = 
LOADED_HIGH
 | 
CAN_USE_HEAP
;

93 
hdr
->
ømdisk_size
 = 0;

94 
hdr
->
cmd_löe_±r
 = 0x1e000;

95 
hdr
->
hóp_íd_±r
 = 0xe000 - 0x200;

97 
uöçå_t
 
°¨t
 = ((
hdr
->
£tup_£˘s
 ? hdr->setup_sects : 4) + 1) * 512;

98 
	`memmove
(
	`VADDR_DIRECT
(0x100000), 
_bö¨y_bzImage_°¨t
 + 
°¨t
,

99 
_bö¨y_bzImage_íd
 - 
_bö¨y_bzImage_°¨t
 - 
°¨t
);

101 
	`œpic_≠_°¨t
(
l˝u_id_£t
[
sysc⁄f
.
l˝u_cou¡
 - 1], 0x8000);

103 
	}
}

106 
	#X86_PLATFORM_IPI_VECTOR
 0xf7

	)

109 
	$drivî_os_nŸify
()

111 #i‡
HAS_DRIVER_OS


112 
	`œpic_ùi_issue_•ec
(
l˝u_id_£t
[
sysc⁄f
.
l˝u_cou¡
 - 1], 
X86_PLATFORM_IPI_VECTOR
);

114 
	}
}

	@supervisor/arch/x86_64/driver/driver_os.h

1 #i‚de‡
__DRIVER_OS_H__


2 
	#__DRIVER_OS_H__


	)

4 
	~<ty≥s.h
>

6 vﬁ©ûê*
drivî_os_buf„r
;

7 
size_t
 
drivî_os_buf„r_size
;

9 
drivî_os_öô
();

10 
drivî_os_nŸify
();

	@supervisor/arch/x86_64/driver/ide.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<å≠.h
>

4 
	~<picúq.h
>

5 
	~<ide.h
>

6 
	~<¨ch.h
>

7 
	~<as£π.h
>

9 
	#ISA_DATA
 0x00

	)

10 
	#ISA_ERROR
 0x01

	)

11 
	#ISA_PRECOMP
 0x01

	)

12 
	#ISA_CTRL
 0x02

	)

13 
	#ISA_SECCNT
 0x02

	)

14 
	#ISA_SECTOR
 0x03

	)

15 
	#ISA_CYL_LO
 0x04

	)

16 
	#ISA_CYL_HI
 0x05

	)

17 
	#ISA_SDH
 0x06

	)

18 
	#ISA_COMMAND
 0x07

	)

19 
	#ISA_STATUS
 0x07

	)

21 
	#IDE_BSY
 0x80

	)

22 
	#IDE_DRDY
 0x40

	)

23 
	#IDE_DF
 0x20

	)

24 
	#IDE_DRQ
 0x08

	)

25 
	#IDE_ERR
 0x01

	)

27 
	#IDE_CMD_READ
 0x20

	)

28 
	#IDE_CMD_WRITE
 0x30

	)

29 
	#IDE_CMD_IDENTIFY
 0xEC

	)

31 
	#IDE_IDENT_SECTORS
 20

	)

32 
	#IDE_IDENT_MODEL
 54

	)

33 
	#IDE_IDENT_CAPABILITIES
 98

	)

34 
	#IDE_IDENT_CMDSETS
 164

	)

35 
	#IDE_IDENT_MAX_LBA
 120

	)

36 
	#IDE_IDENT_MAX_LBA_EXT
 200

	)

38 
	#IO_BASE0
 0x1F0

	)

39 
	#IO_BASE1
 0x170

	)

40 
	#IO_CTRL0
 0x3F4

	)

41 
	#IO_CTRL1
 0x374

	)

43 
	#MAX_IDE
 4

	)

44 
	#MAX_NSECS
 128

	)

45 
	#MAX_DISK_NSECS
 0x10000000U

	)

46 
	#VALID_IDE
(
idío
Ë(((idíoË>0Ë&& ((idíoË< 
MAX_IDE
Ë&& (
ide_devi˚s
[idío].
vÆid
))

	)

49 
	mba£
;

50 
	m˘æ
;

51 } 
	gch™√ls
[2] = {

52 {
IO_BASE0
, 
IO_CTRL0
},

53 {
IO_BASE1
, 
IO_CTRL1
},

56 
	#IO_BASE
(
idío
Ë(
ch™√ls
[(idíoË>> 1].
ba£
)

	)

57 
	#IO_CTRL
(
idío
Ë(
ch™√ls
[(idíoË>> 1].
˘æ
)

	)

59 
	side_devi˚
 {

60 
	mvÆid
;

61 
	m£ts
;

62 
	msize
;

63 
	mmodñ
[41];

64 } 
	gide_devi˚s
[
MAX_IDE
];

67 
	$ide_waô_ªady
(
ioba£
, 
boﬁ
 
check_îr‹
) {

68 
r
;

69 (
r
 = 
	`öb
(
ioba£
 + 
ISA_STATUS
)Ë& 
IDE_BSY
)

71 i‡(
check_îr‹
 && (
r
 & (
IDE_DF
 | 
IDE_ERR
)) != 0) {

75 
	}
}

78 
	$ide_öô
() {

79 
	`°©ic_as£π
((
SECTSIZE
 % 4) == 0);

80 
idío
, 
ioba£
;

81 
idío
 = 0; idíÿ< 
MAX_IDE
; ideno ++) {

83 
ide_devi˚s
[
idío
].
vÆid
 = 0;

85 
ioba£
 = 
	`IO_BASE
(
idío
);

88 
	`ide_waô_ªady
(
ioba£
, 0);

91 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1) << 4));

92 
	`ide_waô_ªady
(
ioba£
, 0);

95 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_IDENTIFY
);

96 
	`ide_waô_ªady
(
ioba£
, 0);

99 i‡(
	`öb
(
ioba£
 + 
ISA_STATUS
Ë=0 || 
	`ide_waô_ªady
(iobase, 1) != 0) {

104 
ide_devi˚s
[
idío
].
vÆid
 = 1;

107 
buf„r
[128];

108 
	`ö¶
(
ioba£
 + 
ISA_DATA
, 
buf„r
, (buffer) / ());

110 *
idít
 = (*)
buf„r
;

111 
£˘‹s
;

112 
cmd£ts
 = *(*)(
idít
 + 
IDE_IDENT_CMDSETS
);

114 i‡(
cmd£ts
 & (1 << 26)) {

115 
£˘‹s
 = *(*)(
idít
 + 
IDE_IDENT_MAX_LBA_EXT
);

118 
£˘‹s
 = *(*)(
idít
 + 
IDE_IDENT_MAX_LBA
);

120 
ide_devi˚s
[
idío
].
£ts
 = 
cmd£ts
;

121 
ide_devi˚s
[
idío
].
size
 = 
£˘‹s
;

124 
	`as£π
((*(*)(
idít
 + 
IDE_IDENT_CAPABILITIES
) & 0x200) != 0);

126 *
modñ
 = 
ide_devi˚s
[
idío
].modñ, *
d©a
 = 
idít
 + 
IDE_IDENT_MODEL
;

127 
i
, 
Àngth
 = 40;

128 
i
 = 0; i < 
Àngth
; i += 2) {

129 
modñ
[
i
] = 
d©a
[i + 1], model[i + 1] = data[i];

132 
modñ
[
i
] = '\0';

133 } 
i
 -- > 0 && 
modñ
[i] == ' ');

135 
	`˝rötf
("idê%d: %10u(£˘‹s), '%s'.\n", 
idío
, 
ide_devi˚s
[idío].
size
, ide_devi˚s[idío].
modñ
);

141 
	}
}

143 
boﬁ


144 
	$ide_devi˚_vÆid
(
idío
) {

145  
	`VALID_IDE
(
idío
);

146 
	}
}

148 
size_t


149 
	$ide_devi˚_size
(
idío
) {

150 i‡(
	`ide_devi˚_vÆid
(
idío
)) {

151  
ide_devi˚s
[
idío
].
size
;

154 
	}
}

157 
	$ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
) {

158 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

159 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

160 
ioba£
 = 
	`IO_BASE
(
idío
), 
io˘æ
 = 
	`IO_CTRL
(ideno);

162 
	`ide_waô_ªady
(
ioba£
, 0);

165 
	`outb
(
io˘æ
 + 
ISA_CTRL
, 0);

166 
	`outb
(
ioba£
 + 
ISA_SECCNT
, 
n£cs
);

167 
	`outb
(
ioba£
 + 
ISA_SECTOR
, 
£˙o
 & 0xFF);

168 
	`outb
(
ioba£
 + 
ISA_CYL_LO
, (
£˙o
 >> 8) & 0xFF);

169 
	`outb
(
ioba£
 + 
ISA_CYL_HI
, (
£˙o
 >> 16) & 0xFF);

170 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1Ë<< 4Ë| ((
£˙o
 >> 24) & 0xF));

171 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_READ
);

173 
ªt
 = 0;

174 ; 
n£cs
 > 0;Ç£c†--, 
d°
 +
SECTSIZE
) {

175 i‡((
ªt
 = 
	`ide_waô_ªady
(
ioba£
, 1)) != 0) {

176 
out
;

178 
	`ö¶
(
ioba£
, 
d°
, 
SECTSIZE
 / (
uöt32_t
));

181 
out
:

182  
ªt
;

183 
	}
}

186 
	$ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
) {

187 
	`as£π
(
n£cs
 <
MAX_NSECS
 && 
	`VALID_IDE
(
idío
));

188 
	`as£π
(
£˙o
 < 
MAX_DISK_NSECS
 && se˙ÿ+ 
n£cs
 <= MAX_DISK_NSECS);

189 
ioba£
 = 
	`IO_BASE
(
idío
), 
io˘æ
 = 
	`IO_CTRL
(ideno);

191 
	`ide_waô_ªady
(
ioba£
, 0);

194 
	`outb
(
io˘æ
 + 
ISA_CTRL
, 0);

195 
	`outb
(
ioba£
 + 
ISA_SECCNT
, 
n£cs
);

196 
	`outb
(
ioba£
 + 
ISA_SECTOR
, 
£˙o
 & 0xFF);

197 
	`outb
(
ioba£
 + 
ISA_CYL_LO
, (
£˙o
 >> 8) & 0xFF);

198 
	`outb
(
ioba£
 + 
ISA_CYL_HI
, (
£˙o
 >> 16) & 0xFF);

199 
	`outb
(
ioba£
 + 
ISA_SDH
, 0xE0 | ((
idío
 & 1Ë<< 4Ë| ((
£˙o
 >> 24) & 0xF));

200 
	`outb
(
ioba£
 + 
ISA_COMMAND
, 
IDE_CMD_WRITE
);

202 
ªt
 = 0;

203 ; 
n£cs
 > 0;Ç£c†--, 
§c
 +
SECTSIZE
) {

204 i‡((
ªt
 = 
	`ide_waô_ªady
(
ioba£
, 1)) != 0) {

205 
out
;

207 
	`out¶
(
ioba£
, 
§c
, 
SECTSIZE
 / (
uöt32_t
));

210 
out
:

211  
ªt
;

212 
	}
}

	@supervisor/arch/x86_64/driver/ide.h

1 #i‚de‡
__KERN_DRIVER_IDE_H__


2 
	#__KERN_DRIVER_IDE_H__


	)

4 
	~<ty≥s.h
>

6 
	~<mmu.h
>

8 
	#SECTSIZE
 512

	)

9 
	#PAGE_NSECT
 (
PGSIZE
 / 
SECTSIZE
)

	)

11 
ide_öô
();

12 
boﬁ
 
ide_devi˚_vÆid
(
idío
);

13 
size_t
 
ide_devi˚_size
(
idío
);

15 
ide_ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

16 
ide_wrôe_£cs
(
idío
, 
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

	@supervisor/arch/x86_64/driver/intr.c

1 
	~<¨ch.h
>

2 
	~<öå.h
>

6 
	$öå_íabÀ
() {

7 
	`°i
();

8 
	}
}

12 
	$öå_dißbÀ
() {

13 
	`˛i
();

14 
	}
}

	@supervisor/arch/x86_64/driver/intr.h

1 #i‚de‡
__KERN_DRIVER_INTR_H__


2 
	#__KERN_DRIVER_INTR_H__


	)

4 
öå_íabÀ
();

5 
öå_dißbÀ
();

	@supervisor/arch/x86_64/driver/ioapic.c

1 
	~<iﬂpic.h
>

2 
	~<sysc⁄f.h
>

3 
	~<pmm.h
>

4 
	~<å≠.h
>

5 
	~<¨ch.h
>

6 
	~<°dio.h
>

10 
	#REG_ID
 0x00

11 
	#REG_VER
 0x01

12 
	#REG_TABLE
 0x10

13 

	)

19 
	#INT_DISABLED
 0x00010000

20 
	#INT_LEVEL
 0x00008000

21 
	#INT_ACTIVELOW
 0x00002000

22 
	#INT_LOGICAL
 0x00000800

23 

	)

25 
	siﬂpic_mmio_s


27 
uöt32_t
 
	mªg
;

28 
uöt32_t
 
	m__∑d0
[3];

29 
uöt32_t
 
	md©a
;

30 
uöt32_t
 
	m__∑d1
[3];

31 
uöt32_t
 
	múq_pö_ass
;

32 
uöt32_t
 
	m__∑d2
[7];

33 
uöt32_t
 
	meoi
;

36 vﬁ©ûê
	tiﬂpic_mmio_s
 ioapic_mmio_s;

38 
uöt32_t


39 
	$iﬂpic_ªad
(
iﬂpic_mmio_s
 *
iﬂpic
, 
uöt32_t
 
ªg
)

41 
iﬂpic
->
ªg
 =Ñeg;

42  
iﬂpic
->
d©a
;

43 
	}
}

46 
	$iﬂpic_wrôe
(
iﬂpic_mmio_s
 *
iﬂpic
, 
uöt32_t
 
ªg
, uöt32_à
d©a
)

48 
iﬂpic
->
ªg
 =Ñeg;

49 
iﬂpic
->
d©a
 = data;

50 
	}
}

52 
	giﬂpic_id_£t
[
LAPIC_COUNT
];

53 
iﬂpic_s
 
	giﬂpic
[
LAPIC_COUNT
];

56 
	$iﬂpic_öô
()

58 
i
, 
j
, 
id
, 
maxöå
;

59 
iﬂpic_id
;

60 
iﬂpic_mmio_s
 *
iﬂpic_mmio
;

62 
i
 = 0; i !
sysc⁄f
.
iﬂpic_cou¡
; ++ i)

64 
iﬂpic_id
 = 
iﬂpic_id_£t
[
i
];

67 
iﬂpic_mmio
 = (
iﬂpic_mmio_s
 *)
	`VADDR_DIRECT
(
iﬂpic
[
iﬂpic_id
].
phys
);

69 
v
 = 
	`iﬂpic_ªad
(
iﬂpic_mmio
, 
REG_VER
);

70 
maxöå
 = (
v
 >> 16) & 0xFF;

73 i‡((
v
 & 0xFF) >= 0x20)

74 
sysc⁄f
.
u£_iﬂpic_eoi
 = 1;

75 
sysc⁄f
.
u£_iﬂpic_eoi
 = 0;

76 
id
 = (
	`iﬂpic_ªad
(
iﬂpic_mmio
, 
REG_ID
) >> 24) & 0xF;

77 i‡(
id
 !
iﬂpic
[
iﬂpic_id
].
≠ic_id
)

79 
	`˝rötf
("ioapic_init: id %08x isn'tÉqualÅo ioapic_id %08x ; Fixing\n",

80 
id
, 
iﬂpic
[
iﬂpic_id
].
≠ic_id
);

87 
j
 = 0; j <
maxöå
; j++)

89 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
j
, 
INT_DISABLED
 | (
IRQ_OFFSET
 + j));

90 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
j
 + 1, 0);

94 
j
 = 0; j <
maxöå
; j++)

98 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
j
, (
IRQ_OFFSET
 + j));

99 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
j
 + 1, 0);

107 
	`outb
(0x22, 0x70);

108 
	`outb
(0x23, 
	`öb
(0x23) | 1);

111 
	}
}

115 
	$iﬂpic_£nd_eoi
(
≠ic_id
, 
úq
)

117 
iﬂpic_mmio_s
 *
iﬂpic_mmio
 = (iﬂpic_mmio_†*)
	`VADDR_DIRECT
(
iﬂpic
[
≠ic_id
].
phys
);

118 
iﬂpic_mmio
->
eoi
 = 
úq
 & 0xFF;

119 
	}
}

122 
	$iﬂpic_íabÀ
(
≠ic_id
, 
úq
, 
˝unum
)

124 
iﬂpic_mmio_s
 *
iﬂpic_mmio
 = (iﬂpic_mmio_†*)
	`VADDR_DIRECT
(
iﬂpic
[
≠ic_id
].
phys
);

128 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
úq
, 
IRQ_OFFSET
 + irq);

129 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
úq
 + 1, 
˝unum
 << 24);

130 
	}
}

133 
	$iﬂpic_dißbÀ
(
≠ic_id
, 
úq
)

135 
iﬂpic_mmio_s
 *
iﬂpic_mmio
 = (iﬂpic_mmio_†*)
	`VADDR_DIRECT
(
iﬂpic
[
≠ic_id
].
phys
);

139 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
úq
, 
INT_DISABLED
 | (
IRQ_OFFSET
 + irq));

140 
	`iﬂpic_wrôe
(
iﬂpic_mmio
, 
REG_TABLE
 + 2 * 
úq
 + 1, 0);

141 
	}
}

	@supervisor/arch/x86_64/driver/ioapic.h

1 #i‚de‡
__IOAPIC_H__


2 
	#__IOAPIC_H__


	)

4 
	~<œpic.h
>

6 
	siﬂpic_s


8 
	m≠ic_id
;

9 
uöçå_t
 
	mphys
;

10 
uöt32_t
 
	möå_ba£
;

11 } 
	tiﬂpic_s
;

13 
iﬂpic_id_£t
[
LAPIC_COUNT
];

14 
iﬂpic_s
 
iﬂpic
[
LAPIC_COUNT
];

16 
iﬂpic_öô
();

17 
iﬂpic_£nd_eoi
(
≠icid
, 
úq
);

18 
iﬂpic_íabÀ
(
≠icid
, 
úq
, 
˝unum
);

19 
iﬂpic_dißbÀ
(
≠icid
, 
úq
);

	@supervisor/arch/x86_64/driver/kbdreg.h

1 #i‚de‡
__KERN_DRIVER_KBDREG_H__


2 
	#__KERN_DRIVER_KBDREG_H__


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

20 
	#KBS_DIB
 0x01

21 
	#KBS_IBF
 0x02

22 
	#KBS_WARM
 0x04

23 
	#BS_OCMD
 0x08

24 
	#KBS_NOSEC
 0x10

25 
	#KBS_TERR
 0x20

26 
	#KBS_RERR
 0x40

27 
	#KBS_PERR
 0x80

28 

	)

29 
	#KBCMDP
 0x64

30 
	#KBC_RAMREAD
 0x20

31 
	#KBC_RAMWRITE
 0x60

32 
	#KBC_AUXDISABLE
 0xa7

33 
	#KBC_AUXENABLE
 0xa8

34 
	#KBC_AUXTEST
 0xa9

35 
	#KBC_KBDECHO
 0xd2

36 
	#KBC_AUXECHO
 0xd3

37 
	#KBC_AUXWRITE
 0xd4

38 
	#KBC_SELFTEST
 0xaa

39 
	#KBC_KBDTEST
 0xab

40 
	#KBC_KBDDISABLE
 0xad

41 
	#KBC_KBDENABLE
 0xae

42 
	#KBC_PULSE0
 0xfe

43 
	#KBC_PULSE1
 0xfd

44 
	#KBC_PULSE2
 0xfb

45 
	#KBC_PULSE3
 0xf7

46 

	)

47 
	#KBDATAP
 0x60

48 
	#KBOUTP
 0x60

49 

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

54 
	#KC8_MDISABLE
 0x20

55 
	#KC8_KDISABLE
 0x10

56 
	#KC8_IGNSEC
 0x08

57 
	#KC8_CPU
 0x04

58 
	#KC8_MENABLE
 0x02

59 
	#KC8_KENABLE
 0x01

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

64 
	#KBC_RESEND
 0xFE

65 
	#KBC_SETDEFAULT
 0xF6

66 
	#KBC_DISABLE
 0xF5

67 
	#KBC_ENABLE
 0xF4

68 
	#KBC_TYPEMATIC
 0xF3

69 
	#KBC_SETTABLE
 0xF0

70 
	#KBC_MODEIND
 0xED

71 
	#KBC_ECHO
 0xEE

72 

	)

74 
	#KBR_EXTENDED
 0xE0

75 
	#KBR_RESEND
 0xFE

76 
	#KBR_ACK
 0xFA

77 
	#KBR_OVERRUN
 0x00

78 
	#KBR_FAILURE
 0xFD

79 
	#KBR_BREAK
 0xF0

80 
	#KBR_RSTDONE
 0xAA

81 
	#KBR_ECHO
 0xEE

82 

	)

	@supervisor/arch/x86_64/driver/lapic.c

1 
	~<œpic.h
>

2 
	~<pmm.h
>

3 
	~<sysc⁄f.h
>

4 
	~<å≠.h
>

5 
	~<¨ch.h
>

9 
	#ID
 (0x0020/4)

10 
	#VER
 (0x0030/4)

11 
	#TPR
 (0x0080/4)

12 
	#EOI
 (0x00B0/4)

13 
	#SVR
 (0x00F0/4)

14 
	#ENABLE
 0x00000100

15 
	#ESR
 (0x0280/4)

16 
	#CMCI
 (0x02F0/4)

17 
	#ICRLO
 (0x0300/4)

18 
	#INIT
 0x00000500

19 
	#STARTUP
 0x00000600

20 
	#DELIVS
 0x00001000

21 
	#ASSERT
 0x00004000

22 
	#LEVEL
 0x00008000

23 
	#BCAST
 0x00080000

24 
	#ICRHI
 (0x0310/4)

25 
	#TIMER
 (0x0320/4)

26 
	#X1
 0x0000000B

27 
	#PERIODIC
 0x00020000

28 
	#TMINT
 (0x0330/4)

29 
	#PCINT
 (0x0340/4)

30 
	#LINT0
 (0x0350/4)

31 
	#LINT1
 (0x0360/4)

32 
	#ERROR
 (0x0370/4)

33 
	#MASKED
 0x00010000

34 
	#TICR
 (0x0380/4)

35 
	#TCCR
 (0x0390/4)

36 
	#TDCR
 (0x03E0/4)

37 

	)

38 
	#LAPIC_PERIODIC
 10000000

	)

40 
uöt32_t


41 
	$œpi¸
(
ödex
)

43  ((vﬁ©ûê
uöt32_t
 *)
	`VADDR_DIRECT
(
sysc⁄f
.
œpic_phys
))[
ödex
];

44 
	}
}

46 
uöt32_t


47 
	$œpicw
(
ödex
, 
uöt32_t
 
vÆue
)

49 ((vﬁ©ûê
uöt32_t
 *)
	`VADDR_DIRECT
(
sysc⁄f
.
œpic_phys
))[
ödex
] = 
vÆue
;

50  ((vﬁ©ûê
uöt32_t
 *)
	`VADDR_DIRECT
(
sysc⁄f
.
œpic_phys
))[
ID
];

51 
	}
}

54 
	$œpic_öô_≠
()

57 
	`œpicw
(
SVR
, 
ENABLE
 | (
IRQ_OFFSET
 + 
IRQ_SPURIOUS
));

60 
	`œpicw
(
TIMER
, 
MASKED
);

63 
	`œpicw
(
LINT0
, 
MASKED
);

64 
	`œpicw
(
LINT1
, 
MASKED
);

67 if(((
	`œpi¸
(
VER
) >> 16) & 0xFF) >= 5)

68 
	`œpicw
(
TMINT
, 
MASKED
);

72 if(((
	`œpi¸
(
VER
) >> 16) & 0xFF) >= 4)

73 
	`œpicw
(
PCINT
, 
MASKED
);

76 
	`œpicw
(
ERROR
, 
IRQ_OFFSET
 + 
IRQ_ERROR
);

79 
	`œpicw
(
ESR
, 0);

80 
	`œpicw
(
ESR
, 0);

83 
	`œpicw
(
EOI
, 0);

86 
	`œpicw
(
ICRHI
, 0);

87 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

88 
	`œpi¸
(
ICRLO
Ë& 
DELIVS
)

92 
	`œpicw
(
TPR
, 0);

100 
	}
}

103 
	$œpic_id
()

105  (
	`œpi¸
(
ID
) >> 24) & 0xFF;

106 
	}
}

109 
	$œpic_öô
()

112 
	`œpicw
(
SVR
, 
ENABLE
 | (
IRQ_OFFSET
 + 
IRQ_SPURIOUS
));

115 
	`œpicw
(
TIMER
, 
MASKED
);

118 
	`œpicw
(
LINT0
, 
MASKED
);

119 
	`œpicw
(
LINT1
, 
MASKED
);

122 if(((
	`œpi¸
(
VER
) >> 16) & 0xFF) >= 5)

123 
	`œpicw
(
TMINT
, 
MASKED
);

127 if(((
	`œpi¸
(
VER
) >> 16) & 0xFF) >= 4)

128 
	`œpicw
(
PCINT
, 
MASKED
);

131 
	`œpicw
(
ERROR
, 
IRQ_OFFSET
 + 
IRQ_ERROR
);

134 
	`œpicw
(
ESR
, 0);

135 
	`œpicw
(
ESR
, 0);

138 
	`œpicw
(
EOI
, 0);

141 
	`œpicw
(
ICRHI
, 0);

142 
	`œpicw
(
ICRLO
, 
BCAST
 | 
INIT
 | 
LEVEL
);

143 
	`œpi¸
(
ICRLO
Ë& 
DELIVS
)

147 
	`œpicw
(
TPR
, 0);

155 
	}
}

159 
	$œpic_eoi_£nd
()

161 
	`œpicw
(
EOI
, 0);

162 
	}
}

167 
	$mi¸odñay
(
us
)

169 vﬁ©ûê
j
 = 0;

171 
us
-- > 0)

172 
j
=0; j<10000; j++);

173 
	}
}

176 
	#IO_RTC
 0x70

	)

181 
	$œpic_≠_°¨t
(
≠icid
, 
uöt32_t
 
addr
)

183 
i
;

184 
uöt16_t
 *
wrv
;

189 
	`outb
(
IO_RTC
, 0xF);

190 
	`outb
(
IO_RTC
+1, 0x0A);

191 
wrv
 = 
	`VADDR_DIRECT
(0x40 << 4 | 0x67);

192 
wrv
[0] = 
addr
 & 0xffff;

193 
wrv
[1] = (
addr
 ^ wrv[0]) >> 4;

197 
	`œpicw
(
ICRHI
, 
≠icid
 << 24);

198 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
 | 
ASSERT
);

199 
	`mi¸odñay
(200);

200 
	`œpicw
(
ICRLO
, 
INIT
 | 
LEVEL
);

201 
	`mi¸odñay
(100);

208 
i
 = 0; i < 2; i++){

209 
	`œpicw
(
ICRHI
, 
≠icid
 << 24);

210 
	`œpicw
(
ICRLO
, 
STARTUP
 | (
addr
 >> 12));

211 
	`mi¸odñay
(200);

213 
	}
}

217 
	$œpic_timî_£t
(
uöt32_t
 
‰eq
)

219 i‡(
‰eq
 == 0)

222 
	`œpicw
(
TIMER
, 
MASKED
);

231 
	`œpicw
(
TDCR
, 
X1
);

232 
	`œpicw
(
TIMER
, 
PERIODIC
 | (
IRQ_OFFSET
 + 
IRQ_TIMER
));

233 
	`œpicw
(
TICR
, 
LAPIC_PERIODIC
);

235 
	}
}

239 
	$œpic_ùi_issue
(
œpic_id
)

241  
	`œpic_ùi_issue_•ec
(
œpic_id
, 
T_IPI
);

242 
	}
}

245 
	$œpic_ùi_issue_•ec
(
œpic_id
, 
uöt8_t
 
ve˘‹
)

247 i‡(
	`œpi¸
(
ICRLO
Ë& 
DELIVS
)

250 
	`œpicw
(
ICRHI
, 
œpic_id
 << 24);

251 
	`œpicw
(
ICRLO
, 
ASSERT
 | 
ve˘‹
);

253 
	`œpi¸
(
ICRLO
Ë& 
DELIVS
) ;

255 
	}
}

	@supervisor/arch/x86_64/driver/lapic.h

1 #i‚de‡
__LAPIC_H__


2 
	#__LAPIC_H__


	)

4 
	~<ty≥s.h
>

5 
	~<mmu.h
>

6 
	~<pmm.h
>

8 
	#LAPIC_COUNT
 256

	)

10 
œpic_öô
();

11 
œpic_öô_≠
();

12 
œpic_id
();

13 
œpic_eoi_£nd
();

14 
œpic_≠_°¨t
(
≠icid
, 
uöt32_t
 
addr
);

15 
œpic_timî_£t
(
uöt32_t
 
‰eq
);

16 
œpic_ùi_issue
(
œpic_id
);

17 
œpic_ùi_issue_•ec
(
œpic_id
, 
uöt8_t
 
ve˘‹
);

	@supervisor/arch/x86_64/driver/picirq.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<picúq.h
>

6 
	#IO_PIC1
 0x20

7 
	#IO_PIC2
 0xA0

8 

	)

9 
	#IRQ_SLAVE
 2

10 

	)

13 
uöt16_t
 
	gúq_mask
 = 0xFFFF & ~(1 << 
IRQ_SLAVE
);

14 
boﬁ
 
	gdid_öô
 = 0;

17 
	$pic_£tmask
(
uöt16_t
 
mask
) {

18 
úq_mask
 = 
mask
;

19 i‡(
did_öô
) {

20 
	`outb
(
IO_PIC1
 + 1, 
mask
);

21 
	`outb
(
IO_PIC2
 + 1, 
mask
 >> 8);

23 
	}
}

26 
	$pic_íabÀ
(
úq
) {

27 
	`pic_£tmask
(
úq_mask
 & ~(1 << 
úq
));

28 
	}
}

32 
	$pic_öô
() {

33 
did_öô
 = 1;

36 
	`outb
(
IO_PIC1
 + 1, 0xFF);

37 
	`outb
(
IO_PIC2
 + 1, 0xFF);

45 
	`outb
(
IO_PIC1
, 0x11);

48 
	`outb
(
IO_PIC1
 + 1, 
IRQ_OFFSET
);

52 
	`outb
(
IO_PIC1
 + 1, 1 << 
IRQ_SLAVE
);

62 
	`outb
(
IO_PIC1
 + 1, 0x3);

65 
	`outb
(
IO_PIC2
, 0x11);

66 
	`outb
(
IO_PIC2
 + 1, 
IRQ_OFFSET
 + 8);

67 
	`outb
(
IO_PIC2
 + 1, 
IRQ_SLAVE
);

70 
	`outb
(
IO_PIC2
 + 1, 0x3);

76 
	`outb
(
IO_PIC1
, 0x68);

77 
	`outb
(
IO_PIC1
, 0x0a);

79 
	`outb
(
IO_PIC2
, 0x68);

80 
	`outb
(
IO_PIC2
, 0x0a);

82 i‡(
úq_mask
 != 0xFFFF) {

83 
	`pic_£tmask
(
úq_mask
);

85 
	}
}

	@supervisor/arch/x86_64/driver/picirq.h

1 #i‚de‡
__KERN_DRIVER_PICIRQ_H__


2 
	#__KERN_DRIVER_PICIRQ_H__


	)

4 
pic_öô
();

5 
pic_íabÀ
(
úq
);

7 
	#IRQ_OFFSET
 32

	)

	@supervisor/arch/x86_64/driver/sysconf.c

1 
	~<sysc⁄f.h
>

3 
sysc⁄f_s
 
	gsysc⁄f
;

	@supervisor/arch/x86_64/driver/sysconf.h

1 #i‚de‡
__SYSCONF_H__


2 
	#__SYSCONF_H__


	)

4 
	~<ty≥s.h
>

6 
	ssysc⁄f_s


8 
	ml˝u_boŸ
;

9 
	ml˝u_cou¡
;

11 
uöçå_t
 
	mœpic_phys
;

13 
	miﬂpic_cou¡
;

14 
	mu£_iﬂpic_eoi
;

16 
	mhas_h≥t
;

17 
uöçå_t
 
	mh≥t_phys
;

18 } 
	tsysc⁄f_s
;

20 
sysc⁄f_s
 
sysc⁄f
;

	@supervisor/arch/x86_64/init/init.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<c⁄sﬁe.h
>

5 
	~<kdebug.h
>

6 
	~<picúq.h
>

7 
	~<å≠.h
>

8 
	~<˛ock.h
>

9 
	~<öå.h
>

10 
	~<pmm.h
>

11 
	~<iﬂpic.h
>

12 
	~<œpic.h
>

13 
	~<a˝i_c⁄f.h
>

14 
	~<sysc⁄f.h
>

15 
	~<¨ch.h
>

16 
	~<l˝u.h
>

17 
	~<˝uid.h
>

18 
	~<c⁄ãxt.h
>

19 
	~<ide.h
>

20 
	~<kîn.h
>

21 
	~<mp.h
>

23 
	$kîn_öô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

26 
	$kîn_öô
() {

27 
__ed©a
[], 
__íd
[];

28 
	`mem£t
(
__ed©a
, 0, 
__íd
 - __edata);

30 
	`c⁄s_öô
();

32 c⁄° *
mesßge
 = "(THU.CST) os isÜoading ...";

33 
	`˝rötf
("%s\n\n", 
mesßge
);

35 
	`¥öt_kînöfo
();

38 
uöt32_t
 
b
;

39 
	`˝uid
(1, 
NULL
, &
b
, NULL, NULL);

40 
cur_≠ic_id
 = (
b
 >> 24) & 0xff;

41 
sysc⁄f
.
l˝u_boŸ
 = 
cur_≠ic_id
;

43 
	`pmm_öô
();

45 
	`pic_öô
();

46 
	`idt_öô
();

48 
	`c⁄ãxt_öô
();

50 
	`a˝i_c⁄f_öô
();

51 
	`œpic_öô
();

52 
	`iﬂpic_öô
();

54 
	`ide_öô
();

55 
	`lﬂd_kîn
();

57 
	`mp_öô
();

59 
	`l˝u_öô
();

60 
	}
}

	@supervisor/arch/x86_64/init/kern.c

1 
	~<kîn.h
>

2 
	~<ide.h
>

3 
	~<pmm.h
>

4 
	~<mmu.h
>

5 
	~<œpic.h
>

6 
	~<iﬂpic.h
>

7 
	~<l˝u.h
>

8 
	~<¨ch.h
>

9 
	~<•ölock.h
>

10 
	~<°dio.h
>

11 
	~<sysc⁄f.h
>

12 
	~<°rög.h
>

13 
	~<c⁄sﬁe.h
>

14 
	~<drivî_os.h
>

16 
kîn_boŸöfo_s
 
	gkîn_boŸöfo
;

17 *
	gkîn_d©a
;

18 
uöçå_t
 
	gkîn_sh¨e
;

21 
	$ªad_£cs
(
idío
, 
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
)

23 
n£cs
 > 0)

25 
size_t
 
cu∫
 = 
n£cs
 > 64 ? 64 :Çsecs;

26 
	`ide_ªad_£cs
(
idío
, 
£˙o
, 
d°
, 
cu∫
);

28 
n£cs
 -
cu∫
;

29 
£˙o
 +
cu∫
;

30 
d°
 = (*)d° + 
cu∫
 * 
SECTSIZE
;

32 
	}
}

35 
	$lﬂd_kîn
()

37 
	`ide_ªad_£cs
(0, 1, &
kîn_boŸöfo
, 
PGSIZE
 / 
SECTSIZE
);

38 
uöçå_t
 
kîn_d©a_size
 = 
kîn_boŸöfo
.
kîn_bss
 - kîn_boŸöfo.
kîn_ãxt
;

39 
kîn_d©a
 = 
	`∑ge2va
(
	`Æloc_∑ges
(
kîn_d©a_size
 / 
PGSIZE
));

40 
	`ªad_£cs
(

42 1 + (
kîn_boŸöfo
.
kîn_ãxt
 - kîn_boŸöfo.
kîn_°¨t
Ë/ 
SECTSIZE
,

43 
kîn_d©a
,

44 
kîn_d©a_size
 / 
SECTSIZE
);

46 
kîn_sh¨e
 = 
	`∑ge2∑
(
	`Æloc_∑ges
((
kîn_boŸöfo
.
kîn_íd
 - kîn_boŸöfo.
kîn_d©a
Ë/ 
PGSIZE
));

48 
	`memmove
((*)
	`VADDR_DIRECT
(
kîn_sh¨e
),

49 
kîn_d©a
 + 
kîn_boŸöfo
.kîn_d©®- kîn_boŸöfo.
kîn_ãxt
,

50 
kîn_boŸöfo
.
kîn_bss
 - kîn_boŸöfo.
kîn_d©a
);

51 
	`mem£t
((*)
	`VADDR_DIRECT
(
kîn_sh¨e
Ë+ 
kîn_boŸöfo
.
kîn_bss
 - kîn_boŸöfo.
kîn_d©a
,

52 0, 
kîn_boŸöfo
.
kîn_íd
 - kîn_boŸöfo.
kîn_bss
);

53 
	}
}

56 
	$jump_kîn
()

58 
pgd_t
 *
pgdú
;

59 
pgdú
 = 
l˝u_°©ic
[
	`œpic_id
()].
öô_pgdú
 = (
pgd_t
 *)
	`∑ge2va
(
	`Æloc_∑ge
());

60 
	`mem˝y
(
pgdú
, 
boŸ_pgdú
, 
PGSIZE
);

62 
pgdú
[0] = 0;

63 
pgdú
[
	`PGX
(
VPT
)] = 
	`PADDR_DIRECT
’gdúË| 
PTE_P
 | 
PTE_W
;

65 
uöçå_t
 
i
;

66 
i
 = 
kîn_boŸöfo
.
kîn_ãxt
; i < kîn_boŸöfo.
kîn_íd
; i +
PGSIZE
)

68 
±e_t
 *
±e
 = 
	`gë_±e
(
pgdú
, 
i
, 1);

69 i‡(
i
 < 
kîn_boŸöfo
.
kîn_∂s
)

72 *
±e
 = 
	`PADDR_DIRECT
(
kîn_d©a
 + 
i
 - 
kîn_boŸöfo
.
kîn_ãxt
Ë| 
PTE_P
;

74 i‡(
i
 < 
kîn_boŸöfo
.
kîn_d©a
)

77 
uöçå_t
 
∂s_size
 = 
kîn_boŸöfo
.
kîn_d©a
 - kîn_boŸöfo.
kîn_∂s
;

78 
Page
 *
∂s
 = 
	`Æloc_∑ges
(
∂s_size
 >> 
PGSHIFT
);

79 
l˝u_°©ic
[
	`œpic_id
()].
∂s_ba£
 = (
uöçå_t
)
	`∑ge2va
(
∂s
);

80 *
±e
 = 
	`∑ge2∑
(
∂s
Ë| 
PTE_W
 | 
PTE_P
;

85 *
±e
 = (
kîn_sh¨e
 + 
i
 - 
kîn_boŸöfo
.
kîn_d©a
Ë| 
PTE_W
 | 
PTE_P
;

89 
	`l¸3
(
	`PADDR_DIRECT
(
pgdú
));

91 
uöt64_t
 
¸0
 = 
	`r¸0
();

92 
¸0
 |
CR0_PE
 | 
CR0_PG
 | 
CR0_AM
 | 
CR0_WP
 | 
CR0_NE
 | 
CR0_TS
 | 
CR0_EM
 | 
CR0_MP
;

93 
¸0
 &~(
CR0_TS
 | 
CR0_EM
);

94 
	`l¸0
(
¸0
);

96 
	`memmove
((*)
kîn_boŸöfo
.
kîn_∂s
,

97 
kîn_d©a
 + 
kîn_boŸöfo
.
kîn_∂s
 - kîn_boŸöfo.
kîn_ãxt
,

98 
kîn_boŸöfo
.
kîn_d©a
 - kîn_boŸöfo.
kîn_∂s
);

100 (((*)())
kîn_boŸöfo
.
kîn_íåy
)();

103 
	}
}

106 
	$kc⁄s_putc
(
c
)

108 
	`c⁄s_putc
(
c
);

109 
	}
}

112 
	$kc⁄s_gëc
()

114  
	`c⁄s_gëc
();

115 
	}
}

118 
	$öå_h™dÀr_£t
(
öå_no
, 
öå_h™dÀr_f
 
h
)

120 i‡(
öå_no
 >
IRQ_OFFSET
 && i¡r_nÿ< IRQ_OFFSET + 
IRQ_COUNT
 &&

121 
öå_no
 !
IRQ_OFFSET
 + 
IRQ_TIMER
)

123 
	`iﬂpic_dißbÀ
(
iﬂpic_id_£t
[0], 
öå_no
 - 
IRQ_OFFSET
);

124 
úq_c⁄åﬁ
[
öå_no
 - 
IRQ_OFFSET
].
l˝u_≠ic_id
 = 
	`œpic_id
();

126 
l˝u_°©ic
[
	`œpic_id
()].
öå_h™dÀr
[
öå_no
] = 
h
;

127 
	}
}

130 
	$úq_íabÀ
(
úq_no
)

132 
	`iﬂpic_íabÀ
(
iﬂpic_id_£t
[0], 
úq_no
, 
úq_c⁄åﬁ
[úq_no].
l˝u_≠ic_id
);

133 
	}
}

136 
	$úq_dißbÀ
(
úq_no
)

138 
	`iﬂpic_dißbÀ
(
iﬂpic_id_£t
[0], 
úq_no
);

139 
	}
}

142 
	$úq_ack
(
úq_no
)

144 
	`œpic_eoi_£nd
();

146 
	}
}

148 
pgd_t
 *

149 
	$öô_pgdú_gë
()

151  
l˝u_°©ic
[
	`œpic_id
()].
öô_pgdú
;

152 
	}
}

154 
uöçå_t


155 
	$∂s_ba£_gë
()

157  
l˝u_°©ic
[
	`œpic_id
()].
∂s_ba£
;

158 
	}
}

161 
	$k∑ge_¥iv©e_£t
(
uöçå_t
 
∑
, *
d©a
)

163 
	`∑2∑ge
(
∑
)->
¥iv©e
 = 
d©a
;

164 
	}
}

167 
	$k∑ge_¥iv©e_gë
(
uöçå_t
 
∑
)

169  
	`∑2∑ge
(
∑
)->
¥iv©e
;

170 
	}
}

172 
uöçå_t


173 
	$kÆloc_∑ges
(
size_t
 
≈ages
)

175  
	`∑ge2∑
(
	`Æloc_∑ges
(
≈ages
));

176 
	}
}

179 
	$k‰ì_∑ges
(
uöçå_t
 
∑
, 
size_t
 
≈ages
)

181 
	`‰ì_∑ges
(
	`∑2∑ge
(
∑
), 
≈ages
);

182 
	}
}

185 
	$tick_öô
(
‰eq
)

187 
	`œpic_timî_£t
(
‰eq
);

188 
	}
}

191 
	$œpic_id_gë
()

193  
	`œpic_id
();

194 
	}
}

197 
	$l˝u_idx_gë
()

199  
l˝u_id_öv
[
	`œpic_id
()];

200 
	}
}

203 
	$l˝u_cou¡_gë
()

205 #i‡
HAS_DRIVER_OS


206  
sysc⁄f
.
l˝u_cou¡
 - 1;

208  
sysc⁄f
.
l˝u_cou¡
;

210 
	}
}

212 
uöçå_t


213 
	$h≥t_phys_gë
()

215 i‡(
sysc⁄f
.
has_h≥t
)

216  
sysc⁄f
.
h≥t_phys
;

218 
	}
}

220 #i‡
HAS_DRIVER_OS


221 
EXPORT_SYMBOL
(
drivî_os_nŸify
);

224 
	$drivî_os_buf„r_gë
()

226  
drivî_os_buf„r
;

227 
	}
}

229 
uöt64_t


230 
	$drivî_os_buf„r_size_gë
()

232  
drivî_os_buf„r_size
;

233 
	}
}

235 
EXPORT_SYMBOL
(
drivî_os_buf„r_gë
);

236 
EXPORT_SYMBOL
(
drivî_os_buf„r_size_gë
);

240 
	$drivî_os_is_íabÀd
()

242 #i‡
HAS_DRIVER_OS


247 
	}
}

248 
EXPORT_SYMBOL
(
drivî_os_is_íabÀd
);

250 
EXPORT_SYMBOL
(
c⁄ãxt_fûl
);

251 
EXPORT_SYMBOL
(
c⁄ãxt_swôch
);

252 
EXPORT_SYMBOL
(
kc⁄s_putc
);

253 
EXPORT_SYMBOL
(
kc⁄s_gëc
);

254 
EXPORT_SYMBOL
(
öå_h™dÀr_£t
);

255 
EXPORT_SYMBOL
(
úq_íabÀ
);

256 
EXPORT_SYMBOL
(
úq_dißbÀ
);

257 
EXPORT_SYMBOL
(
úq_ack
);

258 
EXPORT_SYMBOL
(
öô_pgdú_gë
);

259 
EXPORT_SYMBOL
(
∂s_ba£_gë
);

260 
EXPORT_SYMBOL
(
k∑ge_¥iv©e_£t
);

261 
EXPORT_SYMBOL
(
k∑ge_¥iv©e_gë
);

262 
EXPORT_SYMBOL
(
kÆloc_∑ges
);

263 
EXPORT_SYMBOL
(
k‰ì_∑ges
);

264 
EXPORT_SYMBOL
(
lﬂd_r•0
);

265 
EXPORT_SYMBOL
(
tick_öô
);

266 
EXPORT_SYMBOL
(
œpic_id_gë
);

267 
EXPORT_SYMBOL
(
l˝u_idx_gë
);

268 
EXPORT_SYMBOL
(
l˝u_cou¡_gë
);

269 
EXPORT_SYMBOL
(
œpic_ùi_issue
);

270 
EXPORT_SYMBOL
(
h≥t_phys_gë
);

	@supervisor/arch/x86_64/init/kern.h

1 #i‚de‡
__KERN_H__


2 
	#__KERN_H__


	)

4 
	~<mmu.h
>

6 
	skîn_boŸöfo_s


12 
uöçå_t
 
	mkîn_°¨t
;

13 
uöçå_t
 
	mkîn_íåy
;

14 
uöçå_t
 
	mkîn_ãxt
;

15 
uöçå_t
 
	mkîn_rod©a
;

16 
uöçå_t
 
	mkîn_∂s
;

17 
uöçå_t
 
	mkîn_d©a
;

18 
uöçå_t
 
	mkîn_bss
;

19 
uöçå_t
 
	mkîn_íd
;

22 
	m__•a˚
[
PGSIZE
];

24 } 
	tkîn_boŸöfo_s
;

26 
kîn_boŸöfo_s
 
kîn_boŸöfo
;

28 
lﬂd_kîn
();

29 
	$jump_kîn
(Ë
	`__©åibuã__
((
n‹ëu∫
));

31 
	#EXPORT_SYMBOL
(
sym
Ë
__TO_EXPORT_
##sym[0] 
	`__©åibuã
((
unu£d
));

	)

	@supervisor/arch/x86_64/libs/arch.h

1 #i‚de‡
__LIBS_X86_H__


2 
	#__LIBS_X86_H__


	)

4 
	~<ty≥s.h
>

6 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" ::: "mem‹y")

	)

8 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
ölöe
 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
ölöe
 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
	sp£udodesc
 {

16 
uöt16_t
 
pd_lim
;

17 
uöçå_t
 
pd_ba£
;

18 } 
	`__©åibuã__
 ((
∑cked
));

20 
ölöe
 
	$lidt
(
p£udodesc
 *
pd
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
ölöe
 
	$°i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
ölöe
 
	$˛i
(Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$l¸0
(
uöçå_t
 
¸0
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$l¸3
(
uöçå_t
 
¸3
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
uöçå_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
uöçå_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
uöt8_t


31 
	$öb
(
uöt16_t
 
p‹t
) {

32 
uöt8_t
 
d©a
;

33 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
d©a
Ë: "d" (
p‹t
) : "memory");

34  
d©a
;

35 
	}
}

37 
ölöe
 

38 
	$ö¶
(
uöt32_t
 
p‹t
, *
addr
, 
˙t
) {

39 
asm
 volatile (

42 : "=D" (
addr
), "=c" (
˙t
)

43 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

45 
	}
}

47 
ölöe
 

48 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
d©a
) {

49 
asm
 vﬁ©ûê("outb %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

50 
	}
}

52 
ölöe
 

53 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
d©a
) {

54 
asm
 vﬁ©ûê("outw %0, %1" :: "a" (
d©a
), "d" (
p‹t
) : "memory");

55 
	}
}

57 
ölöe
 

58 
	$out¶
(
uöt32_t
 
p‹t
, c⁄° *
addr
, 
˙t
) {

59 
asm
 volatile (

62 : "=S" (
addr
), "=c" (
˙t
)

63 : "d" (
p‹t
), "0" (
addr
), "1" (
˙t
)

65 
	}
}

67 
ölöe
 

68 
	$lidt
(
p£udodesc
 *
pd
) {

69 
asm
 vﬁ©ûê("lidà(%0)" :: "r" (
pd
) : "memory");

70 
	}
}

72 
ölöe
 

73 
	$°i
() {

74 
asm
 volatile ("sti");

75 
	}
}

77 
ölöe
 

78 
	$˛i
() {

79 
asm
 volatile ("cli" ::: "memory");

80 
	}
}

82 
ölöe
 

83 
	$…r
(
uöt16_t
 
£l
) {

84 
asm
 vﬁ©ûê("…∏%0" :: "r" (
£l
) : "memory");

85 
	}
}

87 
ölöe
 

88 
	$l¸0
(
uöçå_t
 
¸0
) {

89 
asm
 vﬁ©ûê("mov %0, %%¸0" :: "r" (
¸0
) : "memory");

90 
	}
}

92 
ölöe
 

93 
	$l¸3
(
uöçå_t
 
¸3
) {

94 
asm
 vﬁ©ûê("mov %0, %%¸3" :: "r" (
¸3
) : "memory");

95 
	}
}

97 
ölöe
 
uöçå_t


98 
	$r¸0
() {

99 
uöçå_t
 
¸0
;

100 
asm
 vﬁ©ûê("mov %%¸0, %0" : "Ù" (
¸0
) :: "memory");

101  
¸0
;

102 
	}
}

104 
ölöe
 
uöçå_t


105 
	$r¸3
() {

106 
uöçå_t
 
¸3
;

107 
asm
 vﬁ©ûê("mov %%¸3, %0" : "Ù" (
¸3
) :: "memory");

108  
¸3
;

109 
	}
}

111 
ölöe
 

112 
	$övÕg
(*
addr
) {

113 
asm
 vﬁ©ûê("övÕg (%0)" :: "r" (
addr
) : "memory");

114 
	}
}

116 #ifde‡
__UCORE_64__


118 
	#do_div
(
n
, 
ba£
) ({ \

119 
uöt64_t
 
__mod
, 
__ba£
 = (uöt64_t)
ba£
; \

120 
__mod
 = ((
uöt64_t
)(
n
)Ë% 
__ba£
; \

121 (
n
Ë((
uöt64_t
)“)Ë/ 
__ba£
; \

122 
__mod
; \

123 })

	)

125 
ölöe
 
uöt64_t
 
	$ªad_rbp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

126 
ölöe
 
uöt64_t
 
	$ªad_rÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

127 
ölöe
 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

129 
ölöe
 
uöt64_t


130 
	$ªad_rbp
() {

131 
uöt64_t
 
rbp
;

132 
asm
 vﬁ©ûê("movq %%rbp, %0" : "Ù" (
rbp
));

133  
rbp
;

134 
	}
}

136 
ölöe
 
uöt64_t


137 
	$ªad_rÊags
() {

138 
uöt64_t
 
rÊags
;

139 
asm
 vﬁ©ûê("pushfq;Ö›q %0" : "Ù" (
rÊags
));

140  
rÊags
;

141 
	}
}

143 
ölöe
 

144 
	$wrôe_rÊags
(
uöt64_t
 
rÊags
) {

145 
asm
 vﬁ©ûê("pushq %0;Ö›fq" :: "r" (
rÊags
));

146 
	}
}

150 
	#do_div
(
n
, 
ba£
) ({ \

151 
__uµî
, 
__low
, 
__high
, 
__mod
, 
__ba£
; \

152 
__ba£
 = (
ba£
); \

153 
	`asm
 ("" : "˜" (
__low
), "=d" (
__high
Ë: "A" (
n
)); \

154 
__uµî
 = 
__high
; \

155 i‡(
__high
 != 0) { \

156 
__uµî
 = 
__high
 % 
__ba£
; \

157 
__high
 = __high / 
__ba£
; \

159 
	`asm
 ("div»%2" : "˜" (
__low
), "=d" (
__mod
) \

160 : "rm" (
__ba£
), "0" (
__low
), "1" (
__uµî
)); \

161 
	`asm
 ("" : "=A" (
n
Ë: "a" (
__low
), "d" (
__high
)); \

162 
__mod
; \

163 })

	)

165 
ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

169 
ölöe
 
uöt32_t


170 
	$ªad_ebp
() {

171 
uöt32_t
 
ebp
;

172 
asm
 vﬁ©ûê("mov»%%ebp, %0" : "Ù" (
ebp
));

173  
ebp
;

174 
	}
}

176 
ölöe
 
uöt32_t


177 
	$ªad_eÊags
() {

178 
uöt32_t
 
eÊags
;

179 
asm
 vﬁ©ûê("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

180  
eÊags
;

181 
	}
}

183 
ölöe
 

184 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
) {

185 
asm
 vﬁ©ûê("push»%0;Ö›Ê" :: "r" (
eÊags
));

186 
	}
}

190 
ölöe
 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
Ë
	`__©åibuã__
((
Æways_ölöe
));

191 
ölöe
 *
	$__°r˝y
(*
d°
, c⁄° *
§c
Ë
	`__©åibuã__
((
Æways_ölöe
));

192 
ölöe
 *
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

193 
ölöe
 *
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

194 
ölöe
 *
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
Ë
	`__©åibuã__
((
Æways_ölöe
));

196 #i‚de‡
__HAVE_ARCH_STRCMP


197 
	#__HAVE_ARCH_STRCMP


	)

198 
ölöe
 

199 
	$__°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

200 
d0
, 
d1
, 
ªt
;

201 
asm
 volatile (

212 : "˜" (
ªt
), "=&S" (
d0
), "=&D" (
d1
)

213 : "1" (
s1
), "2" (
s2
)

215  
ªt
;

216 
	}
}

220 #i‚de‡
__HAVE_ARCH_STRCPY


221 
	#__HAVE_ARCH_STRCPY


	)

222 
ölöe
 *

223 
	$__°r˝y
(*
d°
, c⁄° *
§c
) {

224 
d0
, 
d1
, 
d2
;

225 
asm
 volatile (

230 : "=&S" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

231 : "0" (
§c
), "1" (
d°
) : "memory");

232  
d°
;

233 
	}
}

236 #i‚de‡
__HAVE_ARCH_MEMSET


237 
	#__HAVE_ARCH_MEMSET


	)

238 
ölöe
 *

239 
	$__mem£t
(*
s
, 
c
, 
size_t
 
n
) {

240 
d0
, 
d1
;

241 
asm
 volatile (

243 : "=&c" (
d0
), "=&D" (
d1
)

244 : "0" (
n
), "a" (
c
), "1" (
s
)

246  
s
;

247 
	}
}

250 #i‚de‡
__HAVE_ARCH_MEMMOVE


251 
	#__HAVE_ARCH_MEMMOVE


	)

252 
ölöe
 *

253 
	$__memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

254 i‡(
d°
 < 
§c
) {

255  
	`__mem˝y
(
d°
, 
§c
, 
n
);

257 
d0
, 
d1
, 
d2
;

258 
asm
 volatile (

262 : "=&c" (
d0
), "=&S" (
d1
), "=&D" (
d2
)

263 : "0" (
n
), "1" (¿- 1 + 
§c
), "2" (¿- 1 + 
d°
)

265  
d°
;

266 
	}
}

269 #i‚de‡
__HAVE_ARCH_MEMCPY


270 
	#__HAVE_ARCH_MEMCPY


	)

271 
ölöe
 *

272 
	$__mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

273 
d0
, 
d1
, 
d2
;

274 
asm
 volatile (

281 : "=&c" (
d0
), "=&D" (
d1
), "=&S" (
d2
)

282 : "0" (
n
 / 4), "m" (n), "1" (
d°
), "2" (
§c
)

284  
d°
;

285 
	}
}

	@supervisor/arch/x86_64/libs/atom.h

1 #i‚de‡
__ATOM_H__


2 
	#__ATOM_H__


	)

4 
	~<ty≥s.h
>

6 
__ölöe
 
uöt64_t


7 
	$xchg64
(vﬁ©ûê*
addr
, 
uöt64_t
 
√wvÆ
)

9 
uöt32_t
 
ªsu…
;

12 
asm
 volatile("lock; xchgl %0, %1" :

13 "+m" (*(vﬁ©ûê
uöt64_t
 *)
addr
), "˜" (
ªsu…
) :

14 "1" (
√wvÆ
) :

16  
ªsu…
;

17 
	}
}

19 
__ölöe
 
uöt32_t


20 
	$xchg32
(vﬁ©ûê*
addr
, 
uöt32_t
 
√wvÆ
)

22 
uöt32_t
 
ªsu…
;

25 
asm
 volatile("lock; xchgl %0, %1" :

26 "+m" (*(vﬁ©ûê
uöt32_t
 *)
addr
), "˜" (
ªsu…
) :

27 "1" (
√wvÆ
) :

29  
ªsu…
;

30 
	}
}

32 
__ölöe
 
uöt16_t


33 
	$xchg16
(vﬁ©ûê*
addr
, 
uöt16_t
 
√wvÆ
)

35 
uöt16_t
 
ªsu…
;

38 
asm
 volatile("lock; xchgw %0, %1" :

39 "+m" (*(vﬁ©ûê
uöt16_t
 *)
addr
), "˜" (
ªsu…
) :

40 "1" (
√wvÆ
) :

42  
ªsu…
;

43 
	}
}

45 
__ölöe
 
uöt8_t


46 
	$xchg8
(vﬁ©ûê*
addr
, 
uöt8_t
 
√wvÆ
)

48 
uöt8_t
 
ªsu…
;

51 
asm
 volatile("lock xchgb %0, %1" :

52 "+m" (*(vﬁ©ûê
uöt8_t
 *)
addr
), "˜" (
ªsu…
) :

53 "1" (
√wvÆ
) :

55  
ªsu…
;

56 
	}
}

58 
__ölöe
 
uöt64_t


59 
	$cmpxchg64
(vﬁ©ûê*
addr
, 
uöt64_t
 
ﬁdvÆ
, uöt64_à
√wvÆ
)

61 
uöt64_t
 
ªsu…
;

63 
asm
 volatile("cmpxchgl %3, %1" :

64 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt64_t
 *)
addr
) :

65 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

67  
ªsu…
;

68 
	}
}

70 
__ölöe
 
uöt32_t


71 
	$cmpxchg32
(vﬁ©ûê*
addr
, 
uöt32_t
 
ﬁdvÆ
, uöt32_à
√wvÆ
)

73 
uöt32_t
 
ªsu…
;

75 
asm
 volatile("cmpxchgl %3, %1" :

76 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt32_t
 *)
addr
) :

77 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

79  
ªsu…
;

80 
	}
}

82 
__ölöe
 
uöt16_t


83 
	$cmpxchg16
(vﬁ©ûê*
addr
, 
uöt16_t
 
ﬁdvÆ
, uöt16_à
√wvÆ
)

85 
uöt16_t
 
ªsu…
;

87 
asm
 volatile("cmpxchgw %3, %1" :

88 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt16_t
 *)
addr
) :

89 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

91  
ªsu…
;

92 
	}
}

94 
__ölöe
 
uöt8_t


95 
	$cmpxchg8
(vﬁ©ûê*
addr
, 
uöt8_t
 
ﬁdvÆ
, uöt8_à
√wvÆ
)

97 
uöt8_t
 
ªsu…
;

99 
asm
 volatile("cmpxchgb %3, %1" :

100 "˜"(
ªsu…
), "+m" (*(vﬁ©ûê
uöt8_t
 *)
addr
) :

101 "a" (
ﬁdvÆ
), "r" (
√wvÆ
) :

103  
ªsu…
;

104 
	}
}

	@supervisor/arch/x86_64/libs/atomic.h

1 #i‚de‡
__LIBS_ATOMIC_H__


2 
	#__LIBS_ATOMIC_H__


	)

7 vﬁ©ûê
	mcou¡î
;

8 } 
	t©omic_t
;

10 
ölöe
 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
ölöe
 
	$©omic_add
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
ölöe
 
	$©omic_sub
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
ölöe
 
boﬁ
 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
ölöe
 
	$©omic_öc
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
ölöe
 
	$©omic_dec
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
ölöe
 
boﬁ
 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
ölöe
 
boﬁ
 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
ölöe
 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
ölöe
 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 

29 
	$©omic_ªad
(c⁄° 
©omic_t
 *
v
) {

30  
v
->
cou¡î
;

31 
	}
}

40 
ölöe
 

41 
	$©omic_£t
(
©omic_t
 *
v
, 
i
) {

42 
v
->
cou¡î
 = 
i
;

43 
	}
}

52 
ölöe
 

53 
	$©omic_add
(
©omic_t
 *
v
, 
i
) {

54 
asm
 vﬁ©ûê("add»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

55 
	}
}

64 
ölöe
 

65 
	$©omic_sub
(
©omic_t
 *
v
, 
i
) {

66 
asm
 vﬁ©ûe("sub»%1, %0" : "+m" (
v
->
cou¡î
Ë: "ú" (
i
));

67 
	}
}

77 
ölöe
 
boﬁ


78 
	$©omic_sub_ã°_zîo
(
©omic_t
 *
v
, 
i
) {

79 
c
;

80 
asm
 vﬁ©ûe("sub»%2, %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
Ë: "ú" (
i
) : "memory");

81  
c
 != 0;

82 
	}
}

90 
ölöe
 

91 
	$©omic_öc
(
©omic_t
 *
v
) {

92 
asm
 vﬁ©ûe("ö˛ %0" : "+m" (
v
->
cou¡î
));

93 
	}
}

101 
ölöe
 

102 
	$©omic_dec
(
©omic_t
 *
v
) {

103 
asm
 vﬁ©ûe("de˛ %0" : "+m" (
v
->
cou¡î
));

104 
	}
}

113 
ölöe
 
boﬁ


114 
	$©omic_öc_ã°_zîo
(
©omic_t
 *
v
) {

115 
c
;

116 
asm
 vﬁ©ûe("ö˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

117  
c
 != 0;

118 
	}
}

127 
ölöe
 
boﬁ


128 
	$©omic_dec_ã°_zîo
(
©omic_t
 *
v
) {

129 
c
;

130 
asm
 vﬁ©ûe("de˛ %0; sëê%1" : "+m" (
v
->
cou¡î
), "=qm" (
c
) :: "memory");

131  
c
 != 0;

132 
	}
}

142 
ölöe
 

143 
	$©omic_add_ªtu∫
(
©omic_t
 *
v
, 
i
) {

144 
__i
 = 
i
;

145 
asm
 vﬁ©ûe("xadd»%0, %1" : "+r" (
i
), "+m" (
v
->
cou¡î
) :: "memory");

146  
i
 + 
__i
;

147 
	}
}

156 
ölöe
 

157 
	$©omic_sub_ªtu∫
(
©omic_t
 *
v
, 
i
) {

158  
	`©omic_add_ªtu∫
(
v
, -
i
);

159 
	}
}

161 
ölöe
 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

162 
ölöe
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

163 
ölöe
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

164 
ölöe
 
boﬁ
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

165 
ölöe
 
boﬁ
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

166 
ölöe
 
boﬁ
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

167 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

177 
ölöe
 

178 
	$£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

179 
asm
 vﬁ©ûê("bt¶ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

180 
	}
}

187 
ölöe
 

188 
	$˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

189 
asm
 vﬁ©ûê("bå»%1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

190 
	}
}

197 
ölöe
 

198 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

199 
asm
 vﬁ©ûê("bt˛ %1, %0" :"=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
));

200 
	}
}

207 
ölöe
 
boﬁ


208 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê*
addr
) {

209 
ﬁdbô
;

210 
asm
 vﬁ©ûê("bt¶ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

211  
ﬁdbô
 != 0;

212 
	}
}

219 
ölöe
 
boﬁ


220 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
) {

221 
ﬁdbô
;

222 
asm
 vﬁ©ûê("bå»%2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

223  
ﬁdbô
 != 0;

224 
	}
}

231 
ölöe
 
boﬁ


232 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê*
addr
) {

233 
ﬁdbô
;

234 
asm
 vﬁ©ûê("bt˛ %2, %1; sbb»%0, %0" : "Ù" (
ﬁdbô
), "=m" (*(vﬁ©ûê*)
addr
Ë: "Ir" (
ƒ
) : "memory");

235  
ﬁdbô
 != 0;

236 
	}
}

243 
ölöe
 
boﬁ


244 
	$ã°_bô
(
ƒ
, vﬁ©ûê*
addr
) {

245 
ﬁdbô
;

246 
asm
 vﬁ©ûê("bé %2, %1; sbb»%0,%0" : "Ù" (
ﬁdbô
Ë: "m" (*(vﬁ©ûê*)
addr
), "Ir" (
ƒ
));

247  
ﬁdbô
 != 0;

248 
	}
}

	@supervisor/arch/x86_64/libs/cpuid.h

1 #i‚de‡
__CPUID__


2 
	#__CPUID__


	)

4 
ölöe
 

5 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

7 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

8 
asm
 volatile("cpuid"

9 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

10 : "a" (
öfo
));

11 i‡(
óxp
)

12 *
óxp
 = 
óx
;

13 i‡(
ebxp
)

14 *
ebxp
 = 
ebx
;

15 i‡(
ecxp
)

16 *
ecxp
 = 
ecx
;

17 i‡(
edxp
)

18 *
edxp
 = 
edx
;

19 
	}
}

	@supervisor/arch/x86_64/libs/spinlock.h

1 #i‚de‡
__SPINLOCK_H__


2 
	#__SPINLOCK_H__


	)

4 
	~<©om.h
>

6 
	s•ölock_s
 {

7 vﬁ©ûê
	mlock
;

8 } 
	t•ölock_s
;

10 
•ölock_s
 *
	t•ölock_t
;

12 
	#•ölock_öô
(
x
Ëdÿ{ (x)->
lock
 = 0; } 0)

	)

14 
ölöe
 

15 
	$•ölock_acquúe
(
•ölock_t
 
lock
)

17 
	`xchg32
(&
lock
->lock, 1) == 1) ;

18 
	}
}

20 
ölöe
 

21 
	$•ölock_acquúe_åy
(
•ölock_t
 
lock
)

23  !
	`xchg32
(&
lock
->lock, 1);

24 
	}
}

26 
ölöe
 

27 
	$•ölock_ªÀa£
(
•ölock_t
 
lock
)

29 
lock
->lock = 0;

30 
	}
}

	@supervisor/arch/x86_64/mm/boot_alloc.c

1 
	~<boŸ_Æloc.h
>

2 
	~<memm≠.h
>

3 
	~<°dio.h
>

4 
	~<pmm.h
>

11 
uöçå_t
 
	gboŸ_‰ì
;

12 
	gbf_memm≠
;

14 
__íd
[];

17 
	$boŸ_Æloc_öô
()

19 
bf_memm≠
 = 0;

20 
boŸ_‰ì
 = (
uöçå_t
)
	`VADDR_DIRECT
(
__íd
);

22 
uöçå_t
 
°¨t
, 
íd
;

23 
	`memm≠_íumî©e
(
bf_memm≠
, &
°¨t
, &
íd
) == 0)

25 i‡(
boŸ_‰ì
 < 
íd
) ;

26 ++ 
bf_memm≠
;

29 i‡(
	`memm≠_íumî©e
(
bf_memm≠
, &
°¨t
, &
íd
) != 0)

31 
	`˝rötf
("PANIC: cannot find memoryárea for bootálloc\n");

34 
	}
}

36 
uöçå_t


37 
	$boŸ_Æloc_gë_‰ì
()

39  
boŸ_‰ì
;

40 
	}
}

43 
	$boŸ_Æloc
(
uöçå_t
 
size
, uöçå_à
Æign
, 
vîbo£
)

45 i‡(
vîbo£
)

46 
	`˝rötf
("[boŸ_Æloc] boŸ_‰ì = %p, sizê%d,álig¿0x%x\n", 
boŸ_‰ì
, 
size
, 
Æign
);

48 
uöçå_t
 
°¨t
, 
íd
;

51 i‡(
	`memm≠_íumî©e
(
bf_memm≠
, &
°¨t
, &
íd
) != 0)

52  
NULL
;

53 i‡(
boŸ_‰ì
 < 
°¨t
) boot_free = start;

57 i‡((
boŸ_‰ì
 |
Æign
 - 1Ë+ 
size
 < 
íd
)

59 ++ 
bf_memm≠
;

62 ++ 
boŸ_‰ì
;

63 *
ªsu…
 = 
	`VADDR_DIRECT
(
boŸ_‰ì
);

65 i‡(
vîbo£
)

66 
	`˝rötf
("[öô_Æloc]Ñesu… = %p\n", 
ªsu…
);

68 
boŸ_‰ì
 +
size
;

69  
ªsu…
;

70 
	}
}

	@supervisor/arch/x86_64/mm/boot_alloc.h

1 #i‚de‡
__BOOT_ALLOC_H__


2 
	#__BOOT_ALLOC_H__


	)

4 
	~<ty≥s.h
>

6 
boŸ_Æloc_öô
();

7 *
boŸ_Æloc
(
uöçå_t
 
size
, uöçå_à
Æign
, 
vîbo£
);

8 
uöçå_t
 
boŸ_Æloc_gë_‰ì
();

	@supervisor/arch/x86_64/mm/memlayout.h

1 #i‚de‡
__KERN_MM_MEMLAYOUT_H__


2 
	#__KERN_MM_MEMLAYOUT_H__


	)

7 
	#SEG_KTEXT
 1

	)

8 
	#SEG_KDATA
 2

	)

9 
	#SEG_KPLS
 3

	)

10 
	#SEG_UTEXT
 4

	)

11 
	#SEG_UDATA
 5

	)

12 
	#SEG_TLS1
 6

	)

13 
	#SEG_TLS2
 7

	)

14 
	#SEG_TSS
(
≠ic_id
Ë8 + (≠ic_id)

	)

17 
	#GD_KTEXT
 ((
SEG_KTEXT
) << 4)

18 
	#GD_KDATA
 ((
SEG_KDATA
) << 4)

19 
	#GD_KPLS
 ((
SEG_KPLS
) << 4)

20 
	#GD_UTEXT
 ((
SEG_UTEXT
) << 4)

21 
	#GD_UDATA
 ((
SEG_UDATA
) << 4)

22 
	#GD_TLS1
 ((
SEG_TLS1
Ë<< 4)

	)

23 
	#GD_TLS2
 ((
SEG_TLS2
Ë<< 4)

	)

24 
	#GD_TSS
(
≠ic_id
Ë((
	`SEG_TSS
(apic_id)) << 4)

25 

	)

26 
	#DPL_KERNEL
 (0)

	)

27 
	#DPL_USER
 (3)

	)

29 
	#KERNEL_CS
 ((
GD_KTEXT
Ë| 
DPL_KERNEL
)

	)

30 
	#KERNEL_DS
 ((
GD_KDATA
Ë| 
DPL_KERNEL
)

	)

31 
	#KERNEL_PLS
 ((
GD_KPLS
Ë| 
DPL_KERNEL
)

	)

32 
	#USER_CS
 ((
GD_UTEXT
Ë| 
DPL_USER
)

	)

33 
	#USER_DS
 ((
GD_UDATA
Ë| 
DPL_USER
)

	)

64 
	#SVBASE
 0xFFFF800000000000

	)

65 
	#SVSIZE
 0x0000100000000000

66 
	#SVTOP
 (
SVBASE
 + 
SVSIZE
)

	)

69 
	#PHYSBASE
 0xFFFF900000000000

	)

70 
	#PHYSSIZE
 0x0000400000000000

71 

	)

73 
	#RESERVED_DRIVER_OS_SIZE
 0x10000000

	)

75 
	#DRIVER_OS_BUFFER_PSIZE
 16

	)

83 
	#VPT
 0xFFFFD00000000000

	)

85 
	#KSTACKPAGE
 4

86 
	#KSTACKSIZE
 (
KSTACKPAGE
 * 
PGSIZE
)

87 

	)

88 #i‚de‡
__ASSEMBLER__


90 
	~<ty≥s.h
>

91 
	~<©omic.h
>

92 
	~<li°.h
>

94 
uöçå_t
 
	tpgd_t
;

95 
uöçå_t
 
	tpud_t
;

96 
uöçå_t
 
	tpmd_t
;

97 
uöçå_t
 
	t±e_t
;

100 
	#E820MAX
 20

101 
	#E820_ARM
 1

102 
	#E820_ARR
 2

103 

	)

104 
	se820m≠
 {

105 
	mƒ_m≠
;

107 
uöt64_t
 
	maddr
;

108 
uöt64_t
 
	msize
;

109 
uöt32_t
 
	mty≥
;

110 } 
__©åibuã__
((
∑cked
)Ë
	mm≠
[
E820MAX
];

118 
	sPage
 {

119 
©omic_t
 
	mªf
;

120 
uöt32_t
 
	mÊags
;

121 
	m¥›îty
;

122 
	mz⁄e_num
;

123 
li°_íåy_t
 
	m∑ge_lök
;

124 *
	m¥iv©e
;

128 
	#PG_ª£rved
 0

129 
	#PG_¥›îty
 1

130 

	)

131 
	#SëPageRe£rved
(
∑ge
Ë
	`£t_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

132 
	#CÀ¨PageRe£rved
(
∑ge
Ë
	`˛ór_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

133 
	#PageRe£rved
(
∑ge
Ë
	`ã°_bô
(
PG_ª£rved
, &(’age)->
Êags
))

	)

134 
	#SëPagePr›îty
(
∑ge
Ë
	`£t_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

135 
	#CÀ¨PagePr›îty
(
∑ge
Ë
	`˛ór_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

136 
	#PagePr›îty
(
∑ge
Ë
	`ã°_bô
(
PG_¥›îty
, &(’age)->
Êags
))

	)

139 
	#À2∑ge
(
À
, 
membî
) \

140 
	`to_°ru˘
((
À
), 
Page
, 
membî
)

	)

144 
li°_íåy_t
 
	m‰ì_li°
;

145 
	mƒ_‰ì
;

146 } 
	t‰ì_¨ó_t
;

	@supervisor/arch/x86_64/mm/memmap.c

1 
	~<memm≠.h
>

2 
	~<°dio.h
>

5 
	gmemm≠_cou¡
;

6 
uöçå_t
 
	gmemm≠_addr
[
MEMMAP_SCALE
];

8 
	gmmnode_cou¡
;

9 
uöçå_t
 
	gmmnode_addr
[
MEMMAP_SCALE
];

10 
	gmmnode_Êag
[
MEMMAP_SCALE
];

13 
ölöe
 

14 
	$memm≠_bö_£¨ch
(
uöçå_t
 
addr
)

16 
l
 = 0, 
r
 = 
memm≠_cou¡
 - 1, 
m
;

17 
l
 < 
r
)

19 i‡(
memm≠_addr
[
m
 = ((
l
 + 
r
Ë>> 1)] > 
addr
)

20 
r
 = 
m
;

21 
l
 = 
m
 + 1;

24  
l
;

25 
	}
}

28 
	$memm≠_ã°
(
uöçå_t
 
°¨t
, uöçå_à
íd
)

31 
i
 = 
	`memm≠_bö_£¨ch
(
°¨t
),

32 
j
 = 
	`memm≠_bö_£¨ch
(
íd
 - 1);

33  (
i
 & 1Ë&& (ò=
j
);

34 
	}
}

37 
	$memm≠_íumî©e
(
num
, 
uöçå_t
 *
°¨t
, uöçå_à*
íd
)

39 i‡((
num
 + 1Ë<< 1 > 
memm≠_cou¡
)  -1;

41 *
°¨t
 = 
memm≠_addr
[
num
 << 1];

42 *
íd
 = 
memm≠_addr
[(
num
 << 1) + 1];

45 
	}
}

48 
	$memm≠_ª£t
()

50 
memm≠_cou¡
 = 0;

51 
mmnode_cou¡
 = 0;

52 
	}
}

55 
	$memm≠_≠≥nd
(
uöçå_t
 
°¨t
, uöçå_à
íd
, 
Êag
)

57 
mmnode_addr
[
mmnode_cou¡
] = 
°¨t
;

58 
mmnode_Êag
[
mmnode_cou¡
] = 
Êag
;

59 ++ 
mmnode_cou¡
;

61 
mmnode_addr
[
mmnode_cou¡
] = 
íd
;

62 
mmnode_Êag
[
mmnode_cou¡
] = -
Êag
;

63 ++ 
mmnode_cou¡
;

66 
	}
}

69 
	$memm≠_¥o˚ss
(
vîbo£
)

71 
i
, 
j
, 
k
;

73 
i
 = 0; i !
mmnode_cou¡
; ++i)

75 
j
 = 
i
;

76 
k
 = 
i
 + 1; k !
mmnode_cou¡
; ++k)

78 i‡(
mmnode_addr
[
k
] < mmnode_addr[
j
])

79 
j
 = 
k
;

81 
uöçå_t
 
t
;

82 
f
;

83 
t
 = 
mmnode_addr
[
i
]; mmnode_addr[i] = mmnode_addr[
j
]; mmnode_addr[j] =Å;

84 
f
 = 
mmnode_Êag
[
i
]; mmnode_Êag[i] = mmnode_Êag[
j
]; mmnode_flag[j] = f;

88 
vaûd_Àvñ
, 
ª˛aim_Àvñ
;

89 
œ°_vaûd
, 
v
;

91 
vaûd_Àvñ
 = 0; 
ª˛aim_Àvñ
 = 0;

92 
v
 = 0;

93 
memm≠_cou¡
 = 0;

95 
i
 = 0;

98 i‡(
i
 >
mmnode_cou¡
) ;

100 
œ°_vaûd
 = 
v
;

104 
mmnode_Êag
[
i
])

106 
MEMMAP_FLAG_FREE
:

107 ++
vaûd_Àvñ
;

109 -
MEMMAP_FLAG_FREE
:

110 --
vaûd_Àvñ
;

112 
MEMMAP_FLAG_RECLAIMABLE
:

113 ++
ª˛aim_Àvñ
;

115 -
MEMMAP_FLAG_RECLAIMABLE
:

116 --
ª˛aim_Àvñ
;

119 i‡(
mmnode_Êag
[
i
] > 0)

120 --
vaûd_Àvñ
;

121 ++
vaûd_Àvñ
;

125 ++ 
i
;

126 i‡(
i
 >
mmnode_cou¡
) ;

127 i‡(
mmnode_addr
[
i
 - 1] != mmnode_addr[i]) ;

130 i‡(
vaûd_Àvñ
 == 0)

131 
v
 = (
ª˛aim_Àvñ
 > 0);

132 
v
 = (
vaûd_Àvñ
 > 0);

134 i‡(
v
 !
œ°_vaûd
)

136 
memm≠_addr
[
memm≠_cou¡
] = 
mmnode_addr
[
i
 - 1];

137 ++ 
memm≠_cou¡
;

141 i‡(
vîbo£
)

143 
	`˝rötf
("Physical memoryÜayout boundary:\n");

144 
i
 = 0; i !
memm≠_cou¡
; ++i)

146 
	`˝rötf
(" [%d] = %p\n", 
i
, 
memm≠_addr
[i]);

149 
	}
}

	@supervisor/arch/x86_64/mm/memmap.h

1 #i‚de‡
__MEMMAP_H__


2 
	#__MEMMAP_H__


	)

4 
	~<ty≥s.h
>

8 
	#MEMMAP_SCALE
 400

	)

11 
	#MEMMAP_FLAG_FREE
 1

	)

12 
	#MEMMAP_FLAG_RESERVED
 2

	)

13 
	#MEMMAP_FLAG_RECLAIMABLE
 3

	)

14 
	#MEMMAP_FLAG_NVS
 4

	)

15 
	#MEMMAP_FLAG_BAD
 5

	)

17 
memm≠_ª£t
();

18 
memm≠_≠≥nd
(
uöçå_t
 
°¨t
, uöçå_à
íd
, 
Êag
);

19 
memm≠_¥o˚ss
(
vîbo£
);

21 
memm≠_ã°
(
uöçå_t
 
°¨t
, uöçå_à
íd
);

22 
memm≠_íumî©e
(
num
, 
uöçå_t
 *
°¨t
, uöçå_à*
íd
);

	@supervisor/arch/x86_64/mm/mmu.h

1 #i‚de‡
__KERN_MM_MMU_H__


2 
	#__KERN_MM_MMU_H__


	)

5 
	#FL_CF
 0x00000001

6 
	#FL_PF
 0x00000004

7 
	#FL_AF
 0x00000010

8 
	#FL_ZF
 0x00000040

9 
	#FL_SF
 0x00000080

10 
	#FL_TF
 0x00000100

11 
	#FL_IF
 0x00000200

12 
	#FL_DF
 0x00000400

13 
	#FL_OF
 0x00000800

14 
	#FL_IOPL_MASK
 0x00003000

15 
	#FL_IOPL_0
 0x00000000

16 
	#FL_IOPL_1
 0x00001000

17 
	#FL_IOPL_2
 0x00002000

18 
	#FL_IOPL_3
 0x00003000

19 
	#FL_NT
 0x00004000

20 
	#FL_RF
 0x00010000

21 
	#FL_VM
 0x00020000

22 
	#FL_AC
 0x00040000

23 
	#FL_VIF
 0x00080000

24 
	#FL_VIP
 0x00100000

25 
	#FL_ID
 0x00200000

26 

	)

28 
	#STA_X
 0x8

29 
	#STA_E
 0x4

30 
	#STA_C
 0x4

31 
	#STA_W
 0x2

32 
	#STA_R
 0x2

33 
	#STA_A
 0x1

34 

	)

36 
	#STS_T16A
 0x1

37 
	#STS_LDT
 0x2

38 
	#STS_T16B
 0x3

39 
	#STS_CG16
 0x4

40 
	#STS_TG
 0x5

41 
	#STS_IG16
 0x6

42 
	#STS_TG16
 0x7

43 
	#STS_T32A
 0x9

44 
	#STS_T32B
 0xB

45 
	#STS_CG32
 0xC

46 
	#STS_IG32
 0xE

47 
	#STS_TG32
 0xF

48 

	)

49 #ifde‡
__ASSEMBLER__


51 
	#SEG_NULL
() \

52 .
quad
 0x0, 0x0

	)

54 
	#SEG_CODE
(
ty≥
) \

55 .
w‹d
 0x0, 0x0; \

56 .
byã
 0x0, (0x90 | (
ty≥
)), 0x20, 0x0; \

57 .
w‹d
 0x0, 0x0, 0x0, 0x0

	)

59 
	#SEG_DATA
(
ty≥
) \

60 .
w‹d
 0x0, 0x0; \

61 .
byã
 0x0, (0x90 | (
ty≥
)), 0x0, 0x0; \

62 .
w‹d
 0x0, 0x0, 0x0, 0x0

	)

66 
	~<ty≥s.h
>

69 
	sg©edesc
 {

70 
	mgd_off_15_0
 : 16;

71 
	mgd_ss
 : 16;

72 
	mgd_i°
 : 3;

73 
	mgd_rsv1
 : 5;

74 
	mgd_ty≥
 : 4;

75 
	mgd_s
 : 1;

76 
	mgd_d∂
 : 2;

77 
	mgd_p
 : 1;

78 
	mgd_off_31_16
 : 16;

79 
	mgd_off_63_32
 : 32;

80 
	mgd_rsv2
 : 32;

93 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) { \

94 (
g©e
).
gd_off_15_0
 = (
uöt64_t
)(
off
) & 0xffff; \

95 (
g©e
).
gd_ss
 = (
£l
); \

96 (
g©e
).
gd_i°
 = 0; \

97 (
g©e
).
gd_rsv1
 = 0; \

98 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

99 (
g©e
).
gd_s
 = 0; \

100 (
g©e
).
gd_d∂
 = (
d∂
); \

101 (
g©e
).
gd_p
 = 1; \

102 (
g©e
).
gd_off_31_16
 = (
uöt64_t
)(
off
) >> 16; \

103 (
g©e
).
gd_off_63_32
 = (
uöt64_t
)(
off
) >> 32; \

104 (
g©e
).
gd_rsv2
 = 0; \

105 }

	)

108 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) { \

109 (
g©e
).
gd_off_15_0
 = (
uöt64_t
)(
off
) & 0xffff; \

110 (
g©e
).
gd_ss
 = (
ss
); \

111 (
g©e
).
gd_i°
 = 0; \

112 (
g©e
).
gd_rsv1
 = 0; \

113 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

114 (
g©e
).
gd_s
 = 0; \

115 (
g©e
).
gd_d∂
 = (
d∂
); \

116 (
g©e
).
gd_p
 = 1; \

117 (
g©e
).
gd_off_31_16
 = (
uöt64_t
)(
off
) >> 16; \

118 (
g©e
).
gd_off_63_32
 = (
uöt64_t
)(
off
) >> 32; \

119 (
g©e
).
gd_rsv2
 = 0; \

120 }

	)

123 
	s£gdesc
 {

124 
	msd_lim_15_0
 : 16;

125 
	msd_ba£_15_0
 : 16;

126 
	msd_ba£_23_16
 : 8;

127 
	msd_ty≥
 : 4;

128 
	msd_s
 : 1;

129 
	msd_d∂
 : 2;

130 
	msd_p
 : 1;

131 
	msd_lim_19_16
 : 4;

132 
	msd_avl
 : 1;

133 
	msd_l
 : 1;

134 
	msd_db
 : 1;

135 
	msd_g
 : 1;

136 
	msd_ba£_31_24
 : 8;

137 
	msd_ba£_63_32
 : 32;

138 
	msd_rsv
 : 32;

141 
	#SEG_NULL
 \

142 (
£gdesc
Ë{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

144 
	#SEG
(
ty≥
, 
d∂
) \

145 (
£gdesc
) { \

146 0, 0, 0, 
ty≥
, 1, 
d∂
, 1, \

148 }

	)

150 
	#SEGTSS
(
ty≥
, 
ba£
, 
lim
, 
d∂
) \

151 (
£gdesc
) { \

152 (
lim
Ë& 0xffff, (
ba£
) & 0xffff, \

153 ((
ba£
Ë>> 16Ë& 0xff, 
ty≥
, 0, 
d∂
, 1, \

154 ((
lim
) >> 16) & 0xf, 0, 0, 0, 0, \

155 ((
ba£
) >> 24) & 0xff, \

156 ((
ba£
) >> 32) & 0xffffffff, 0 \

157 }

	)

160 
	sèsk°©e
 {

161 
uöt32_t
 
	mts_rsv0
;

162 
uöt64_t
 
	mts_r•0
;

163 
uöt64_t
 
	mts_r•1
;

164 
uöt64_t
 
	mts_r•2
;

165 
uöt64_t
 
	mts_rsv1
;

166 
uöt64_t
 
	mts_i°1
;

167 
uöt64_t
 
	mts_i°2
;

168 
uöt64_t
 
	mts_i°3
;

169 
uöt64_t
 
	mts_i°4
;

170 
uöt64_t
 
	mts_i°5
;

171 
uöt64_t
 
	mts_i°6
;

172 
uöt64_t
 
	mts_i°7
;

173 
uöt64_t
 
	mts_rsv2
;

174 
uöt16_t
 
	mts_rsv3
;

175 
uöt16_t
 
	mts_iomb
;

176 } 
__©åibuã__
((
∑cked
));

197 
	#PGX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PGXSHIFT
Ë& 0x1FF)

	)

198 
	#PUX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PUXSHIFT
Ë& 0x1FF)

	)

199 
	#PMX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PMXSHIFT
Ë& 0x1FF)

	)

202 
	#PTX
(
œ
Ë((((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
Ë& 0x1FF)

	)

205 
	#PPN
(
œ
Ë(((
uöçå_t
)÷a)Ë>> 
PTXSHIFT
)

	)

208 
	#PGOFF
(
œ
Ë(((
uöçå_t
)÷a)Ë& 0xFFF)

	)

211 
	#PGADDR
(
g
, 
u
, 
m
, 
t
, 
o
) \

212 ((
uöçå_t
)(((
g
Ë& 0x100Ë? ((gË| ~0x1FFË: (g)Ë<< 
PGXSHIFT
 \

213 | (
uöçå_t
)(
u
Ë<< 
PUXSHIFT
 | (uöçå_t)(
m
Ë<< 
PMXSHIFT
 \

214 | (
uöçå_t
)(
t
Ë<< 
PTXSHIFT
 | (
o
))

	)

217 
	#PTE_ADDR
(
±e
Ë((
uöçå_t
)’ãË& ~0xFFF)

	)

218 
	#PMD_ADDR
(
pmd
Ë
	`PTE_ADDR
’md)

	)

219 
	#PUD_ADDR
(
pud
Ë
	`PTE_ADDR
’ud)

	)

220 
	#PGD_ADDR
(
pgd
Ë
	`PTE_ADDR
’gd)

	)

223 
	#NPGENTRY
 512

224 

	)

225 
	#PGSIZE
 4096

226 
	#PGSHIFT
 12

227 

	)

228 
	#PTSIZE
 (1LLU * 
NPGENTRY
 * 
PGSIZE
)

229 
	#PMSIZE
 (1LLU * 
NPGENTRY
 * 
PTSIZE
)

230 
	#PUSIZE
 (1LLU * 
NPGENTRY
 * 
PMSIZE
)

231 

	)

232 
	#PTXSHIFT
 12

233 
	#PMXSHIFT
 21

234 
	#PUXSHIFT
 30

235 
	#PGXSHIFT
 39

236 

	)

238 
	#PTE_P
 0x001

239 
	#PTE_W
 0x002

240 
	#PTE_U
 0x004

241 
	#PTE_PWT
 0x008

242 
	#PTE_PCD
 0x010

243 
	#PTE_A
 0x020

244 
	#PTE_D
 0x040

245 
	#PTE_PS
 0x080

246 
	#PTE_MBZ
 0x180

247 
	#PTE_AVAIL
 0xE00

250 

	)

251 
	#PTE_USER
 (
PTE_U
 | 
PTE_W
 | 
PTE_P
)

	)

254 
	#CR0_PE
 0x00000001

255 
	#CR0_MP
 0x00000002

256 
	#CR0_EM
 0x00000004

257 
	#CR0_TS
 0x00000008

258 
	#CR0_ET
 0x00000010

259 
	#CR0_NE
 0x00000020

260 
	#CR0_WP
 0x00010000

261 
	#CR0_AM
 0x00040000

262 
	#CR0_NW
 0x20000000

263 
	#CR0_CD
 0x40000000

264 
	#CR0_PG
 0x80000000

265 

	)

266 
	#CR4_PCE
 0x00000100

267 
	#CR4_PGE
 0x00000080

268 
	#CR4_MCE
 0x00000040

269 
	#CR4_PAE
 0x00000020

270 
	#CR4_PSE
 0x00000010

271 
	#CR4_DE
 0x00000008

272 
	#CR4_TSD
 0x00000004

273 
	#CR4_PVI
 0x00000002

274 
	#CR4_VME
 0x00000001

275 

	)

	@supervisor/arch/x86_64/mm/pmm.c

1 
	~<ty≥s.h
>

2 
	~<¨ch.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<mmu.h
>

6 
	~<memœyout.h
>

7 
	~<pmm.h
>

8 
	~<buddy_pmm.h
>

9 
	~<sync.h
>

10 
	~<îr‹.h
>

11 
	~<œpic.h
>

12 
	~<sysc⁄f.h
>

13 
	~<memm≠.h
>

14 
	~<•ölock.h
>

15 
	~<kîn.h
>

37 
èsk°©e
 
	gts
[
LAPIC_COUNT
] = {{0}};

39 
uöçå_t
 
	g‰ìmem
;

41 
±e_t
 * c⁄° 
	gv±
 = (±e_à*)
VPT
;

42 
pmd_t
 * c⁄° 
	gvmd
 = (pmd_à*)
PGADDR
(
PGX
(
VPT
), PGX(VPT), 0, 0, 0);

43 
pud_t
 * c⁄° 
	gvud
 = (pud_à*)
PGADDR
(
PGX
(
VPT
), PGX(VPT), PGX(VPT), 0, 0);

44 
pgd_t
 * c⁄° 
	gvgd
 = (pgd_à*)
PGADDR
(
PGX
(
VPT
), PGX(VPT), PGX(VPT), PGX(VPT), 0);

60 
£gdesc
 
	ggdt
[8 + 
LAPIC_COUNT
] = {

61 
SEG_NULL
,

62 [
SEG_KTEXT
] = 
SEG
(
STA_X
 | 
STA_R
, 
DPL_KERNEL
),

63 [
SEG_KDATA
] = 
SEG
(
STA_W
, 
DPL_KERNEL
),

64 [
SEG_UTEXT
] = 
SEG
(
STA_X
 | 
STA_R
, 
DPL_USER
),

65 [
SEG_UDATA
] = 
SEG
(
STA_W
, 
DPL_USER
),

66 [
SEG_TLS1
] = 
SEG
(
STA_W
, 
DPL_USER
),

67 [
SEG_TLS2
] = 
SEG
(
STA_W
, 
DPL_USER
),

70 
p£udodesc
 
	ggdt_pd
 = {

71 (
gdt
Ë- 1, (
uöçå_t
)gdt

74 
check_Æloc_∑ge
();

75 
check_boŸ_pgdú
();

81 
ölöe
 

82 
	$lgdt
(
p£udodesc
 *
pd
) {

83 
asm
 vﬁ©ûê("lgdà(%0)" :: "r" (
pd
));

84 
asm
 vﬁ©ûê("movw %%ax, %%es" :: "a" (
KERNEL_DS
));

85 
asm
 vﬁ©ûê("movw %%ax, %%ds" :: "a" (
KERNEL_DS
));

87 
asm
 volatile (

96 :: "i" (
KERNEL_CS
), "i" (
KERNEL_DS
));

97 
	}
}

105 
	$lﬂd_r•0
(
uöçå_t
 
r•0
) {

106 
ts
[
	`œpic_id
()].
ts_r•0
 = 
r•0
;

107 
	}
}

111 
	$gdt_öô
() {

113 
i
;

114 
i
 = 0; i !
LAPIC_COUNT
; ++ i)

116 
gdt
[
	`SEG_TSS
(
i
)] = 
	`SEGTSS
(
STS_T32A
, (
uöçå_t
)&
ts
[i], —s[i]), 
DPL_KERNEL
);

120 
	`lgdt
(&
gdt_pd
);

123 
	`…r
(
	`GD_TSS
(
sysc⁄f
.
l˝u_boŸ
));

124 
	}
}

128 
	$öô_pmm_m™agî
() {

129 
pmm_m™agî
 = &
buddy_pmm_m™agî
;

130 
	`˝rötf
("mem‹y m™agemít: %s\n", 
pmm_m™agî
->
«me
);

131 
pmm_m™agî
->
	`öô
();

132 
	`•ölock_öô
(&
pmm_lock
);

133 
	}
}

137 
	$öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

138 
pmm_m™agî
->
	`öô_memm≠
(
ba£
, 
n
);

139 
	}
}

143 
	$∑ge_öô
() {

144 
e820m≠
 *
memm≠
 = (e820m≠ *)(0x8000 + 
PHYSBASE
);

145 
uöt64_t
 
max∑
 = 0;

147 
	`memm≠_ª£t
();

149 
	`˝rötf
("e820map:\n");

150 
i
;

151 
i
 = 0; i < 
memm≠
->
ƒ_m≠
; i ++) {

152 
uöt64_t
 
begö
 = 
memm≠
->
m≠
[
i
].
addr
, 
íd
 = begö + memm≠->m≠[i].
size
;

154 i‡(
íd
 <
RESERVED_DRIVER_OS_SIZE
)

156 i‡(
begö
 < 
RESERVED_DRIVER_OS_SIZE
)

157 
begö
 = 
RESERVED_DRIVER_OS_SIZE
;

159 
	`˝rötf
(" memory: %016llx, [%016llx, %016llx],Åype = %d.\n",

160 
memm≠
->
m≠
[
i
].
size
, 
begö
, 
íd
 - 1, memm≠->m≠[i].
ty≥
);

162 
	`memm≠_≠≥nd
(
begö
, 
íd
, 
memm≠
->
m≠
[
i
].
ty≥
);

164 i‡(
memm≠
->
m≠
[
i
].
ty≥
 =
E820_ARM
) {

165 i‡(
max∑
 < 
íd
 && 
begö
 < 
SVSIZE
) {

166 
max∑
 = 
íd
;

170 i‡(
max∑
 > 
SVSIZE
) {

171 
max∑
 = 
SVSIZE
;

174 
	`memm≠_¥o˚ss
(1);

175 
__íd
[];

177 
≈age
 = (
max∑
 - 
RESERVED_DRIVER_OS_SIZE
Ë/ 
PGSIZE
;

178 
∑ges
 = (
Page
 *)
	`ROUNDUP
((
uöçå_t
)
__íd
 + 
SVBASE
, 
PGSIZE
);

180 
i
 = 0; i < 
≈age
; i ++) {

181 
	`SëPageRe£rved
(
∑ges
 + 
i
);

184 
‰ìmem
 = 
	`ROUNDUP
((
uöçå_t
)
∑ges
 + (
Page
Ë* 
≈age
 - 
SVBASE
, 
PGSIZE
);

186 
i
 = 0; i < 
memm≠
->
ƒ_m≠
; i ++) {

187 
uöt64_t
 
begö
 = 
memm≠
->
m≠
[
i
].
addr
, 
íd
 = begö + memm≠->m≠[i].
size
;

189 i‡(
íd
 <
RESERVED_DRIVER_OS_SIZE
)

191 i‡(
begö
 < 
RESERVED_DRIVER_OS_SIZE
)

192 
begö
 = 
RESERVED_DRIVER_OS_SIZE
;

194 i‡(
memm≠
->
m≠
[
i
].
ty≥
 =
E820_ARM
) {

195 i‡(
begö
 < 
‰ìmem
) {

196 
begö
 = 
‰ìmem
;

198 i‡(
íd
 > 
SVSIZE
) {

199 
íd
 = 
SVSIZE
;

201 i‡(
begö
 < 
íd
) {

202 
begö
 = 
	`ROUNDUP
(begö, 
PGSIZE
);

203 
íd
 = 
	`ROUNDDOWN
”nd, 
PGSIZE
);

204 i‡(
begö
 < 
íd
) {

205 
	`öô_memm≠
(
	`∑2∑ge
(
begö
), (
íd
 - begöË/ 
PGSIZE
);

210 
	}
}

216 
	$boŸ_Æloc_∑ge
() {

217 
Page
 *
p
 = 
	`Æloc_∑ge
();

218 i‡(
p
 =
NULL
) {

219 
	`∑nic
("boot_alloc_page failed.\n");

221  
	`∑ge2va
(
p
);

222 
	}
}

225 
	$boŸ_m≠_£gmít
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, uöçå_à
∑
, 
uöt32_t
 
≥rm
) {

226 
	`as£π
(
	`PGOFF
(
œ
Ë=PGOFF(
∑
));

227 
size_t
 
n
 = 
	`ROUNDUP
(
size
 + 
	`PGOFF
(
œ
), 
PGSIZE
) / PGSIZE;

228 
œ
 = 
	`ROUNDDOWN
÷a, 
PGSIZE
);

229 
∑
 = 
	`ROUNDDOWN
’a, 
PGSIZE
);

230 ; 
n
 > 0;Ç --, 
œ
 +
PGSIZE
, 
∑
 += PGSIZE) {

231 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 1);

232 
	`as£π
(
±ï
 !
NULL
);

233 *
±ï
 = 
∑
 | 
PTE_P
 | 
≥rm
;

235 
	}
}

240 
	$pmm_öô
() {

246 
	`öô_pmm_m™agî
();

250 
	`∑ge_öô
();

253 
	`check_Æloc_∑ge
();

256 
boŸ_pgdú
 = 
	`boŸ_Æloc_∑ge
();

257 
	`mem£t
(
boŸ_pgdú
, 0, 
PGSIZE
);

258 
boŸ_¸3
 = 
	`PADDR_DIRECT
(
boŸ_pgdú
);

260 
	`°©ic_as£π
(
SVBASE
 % 
PUSIZE
 =0 && 
SVTOP
 % PUSIZE == 0);

264 
boŸ_pgdú
[
	`PGX
(
VPT
)] = 
	`PADDR_DIRECT
(boŸ_pgdúË| 
PTE_P
 | 
PTE_W
;

267 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
, 
PHYSBASE
, 
RESERVED_DRIVER_OS_SIZE
 + 
≈age
 * 
PGSIZE
, 0, 
PTE_W
);

269 
__sv_°¨t
[];

270 
uöçå_t
 
sv_°¨t
 = (uöçå_t)
__sv_°¨t
;

271 
uöçå_t
 
sv_•a˚
 = 
	`∑ge2∑
(
	`Æloc_∑ges
((
‰ìmem
 - 
sv_°¨t
Ë/ 
PGSIZE
));

272 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
, 
SVBASE
 + 
sv_°¨t
, 
‰ìmem
 - sv_°¨t, 
sv_•a˚
, 
PTE_W
);

273 
	`memmove
(
	`VADDR_DIRECT
(
sv_•a˚
), (*)(
SVBASE
 + 
sv_°¨t
), 
‰ìmem
 - sv_start);

275 
	`l¸3
(
boŸ_¸3
);

279 
e820m≠
 *
memm≠
 = (e820m≠ *)(0x8000 + 
PHYSBASE
);

280 
i
;

281 
i
 = 0; i < 
memm≠
->
ƒ_m≠
; i ++) {

282 i‡(
memm≠
->
m≠
[
i
].
ty≥
 != 1)

284 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
, 
memm≠
->
m≠
[
i
].
addr
 + 
PHYSBASE
, memm≠->m≠[i].
size
, memm≠->m≠[i].addr, 
PTE_W
);

288 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
, 0, 0x100000, 0, 
PTE_W
);

290 
	`l¸3
(
boŸ_¸3
);

293 
uöt64_t
 
¸0
 = 
	`r¸0
();

294 
¸0
 |
CR0_PE
 | 
CR0_PG
 | 
CR0_AM
 | 
CR0_WP
 | 
CR0_NE
 | 
CR0_TS
 | 
CR0_EM
 | 
CR0_MP
;

295 
¸0
 &~(
CR0_TS
 | 
CR0_EM
);

296 
	`l¸0
(
¸0
);

298 
	`gdt_öô
();

302 
	`¥öt_pgdú
(
˝rötf
);

303 
	}
}

308 
	$éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
) {

309 i‡(
	`r¸3
(Ë=
	`PADDR_DIRECT
(
pgdú
)) {

310 
	`övÕg
((*)
œ
);

312 
	}
}

315 
	$check_Æloc_∑ge
() {

316 
pmm_m™agî
->
	`check
();

317 
	`˝rötf
("check_alloc_page() succeeded!\n");

318 
	}
}

321 
__©åibuã__
((
unu£d
)) 

322 
	$check_boŸ_pgdú
() {

323 
±e_t
 *
±ï
;

324 
i
;

325 
i
 = 0; i < 
≈age
; i +
PGSIZE
) {

326 
	`as£π
((
±ï
 = 
	`gë_±e
(
boŸ_pgdú
, (
uöçå_t
)
	`VADDR_DIRECT
(
i
), 0)Ë!
NULL
);

327 
	`as£π
(
	`PTE_ADDR
(*
±ï
Ë=
i
);

329 
size_t
 
ƒ_‰ì_∑ges_ßved
 = 
	`ƒ_‰ì_∑ges
();

331 
	`as£π
(
	`PUD_ADDR
(
boŸ_pgdú
[
	`PGX
(
VPT
)]Ë=
	`PADDR_DIRECT
(boot_pgdir));

333 
Page
 *
p
;

334 
p
 = 
	`Æloc_∑ge
();

335 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 0x100, 
PTE_W
) == 0);

336 
	`as£π
(
	`∑ge_ªf
(
p
) == 1);

337 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
p
, 0x100 + 
PGSIZE
, 
PTE_W
) == 0);

338 
	`as£π
(
	`∑ge_ªf
(
p
) == 2);

340 c⁄° *
°r
 = "ucore: Hello world!!";

341 
	`°r˝y
((*)0x100, 
°r
);

342 
	`as£π
(
	`°rcmp
((*)0x100, (*)(0x100 + 
PGSIZE
)) == 0);

344 *(*)(
	`∑ge2va
(
p
) + 0x100) = '\0';

345 
	`as£π
(
	`°æí
((const *)0x100) == 0);

347 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PTE_ADDR
(*
	`gë_±e
(
boŸ_pgdú
, 0x100, 0))));

348 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PMD_ADDR
(*
	`gë_pmd
(
boŸ_pgdú
, 0x100, 0))));

349 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PUD_ADDR
(*
	`gë_pud
(
boŸ_pgdú
, 0x100, 0))));

350 
	`‰ì_∑ge
(
	`∑2∑ge
(
	`PGD_ADDR
(*
	`gë_pgd
(
boŸ_pgdú
, 0x100, 0))));

351 
boŸ_pgdú
[0] = 0;

353 
	`as£π
(
	`ƒ_‰ì_∑ges
(Ë=
ƒ_‰ì_∑ges_ßved
);

355 
	`˝rötf
("check_boot_pgdir() succeeded!\n");

356 
	}
}

360 
	$≥rm2°r
(
≥rm
) {

361 
°r
[4];

362 
°r
[0] = (
≥rm
 & 
PTE_U
) ? 'u' : '-';

363 
°r
[1] = 'r';

364 
°r
[2] = (
≥rm
 & 
PTE_W
) ? 'w' : '-';

365 
°r
[3] = '\0';

366  
°r
;

367 
	}
}

381 
	$gë_pgèbÀ_ôems
(
size_t
 
À·
, size_à
right
, size_à
°¨t
, 
uöçå_t
 *
èbÀ
, size_à*
À·_°‹e
, size_à*
right_°‹e
) {

382 i‡(
°¨t
 >
right
) {

385 
°¨t
 < 
right
 && !(
èbÀ
[°¨t] & 
PTE_P
)) {

386 
°¨t
 ++;

388 i‡(
°¨t
 < 
right
) {

389 i‡(
À·_°‹e
 !
NULL
) {

390 *
À·_°‹e
 = 
°¨t
;

392 
≥rm
 = (
èbÀ
[
°¨t
 ++] & 
PTE_USER
);

393 
°¨t
 < 
right
 && (
èbÀ
[°¨t] & 
PTE_USER
Ë=
≥rm
) {

394 
°¨t
 ++;

396 i‡(
right_°‹e
 !
NULL
) {

397 *
right_°‹e
 = 
°¨t
;

399  
≥rm
;

402 
	}
}

405 
¥öt_pgdú_sub
(
dìp
, 
size_t
 
À·
, size_à
right
,

406 *
s1
[], 
size_t
 
s2
[], 
uöçå_t
 *
s3
[],

407 (*
¥ötf
)(c⁄° *
fmt
, ...)) {

408 i‡(
dìp
 > 0) {

409 
uöt32_t
 
≥rm
;

410 
size_t
 
l
, 
r
 = 
À·
;

411 (
≥rm
 = 
	`gë_pgèbÀ_ôems
(
À·
, 
right
, 
r
, 
s3
[0], &
l
, &r)) != 0) {

412 
	`¥ötf
(
s1
[0], 
r
 - 
l
);

413 
size_t
 
lb
 = 
l
 * 
s2
[0], 
rb
 = 
r
 * s2[0];

414 i‡((
lb
 >> 32) & 0x8000) {

415 
lb
 |= (0xFFFFLLU << 48);

416 
rb
 |= (0xFFFFLLU << 48);

418 
	`¥ötf
(" %016Œx-%016Œx %016Œx %s\n", 
lb
, 
rb
,Ñb -Üb, 
	`≥rm2°r
(
≥rm
));

419 
	`¥öt_pgdú_sub
(
dìp
 - 1, 
l
 * 
NPGENTRY
, 
r
 * NPGENTRY, 
s1
 + 1, 
s2
 + 1, 
s3
 + 1, 
¥ötf
);

422 
	}
}

426 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...)) {

427 *
s1
[] = {

433 
size_t
 
s2
[] = {
PUSIZE
, 
PMSIZE
, 
PTSIZE
, 
PGSIZE
};

434 
uöçå_t
 *
s3
[] = {
vgd
, 
vud
, 
vmd
, 
v±
};

435 
	`¥ötf
("-------------------- BEGIN --------------------\n");

436 
	`¥öt_pgdú_sub
((
s1
Ë/ (s1[0]), 0, 
NPGENTRY
, s1, 
s2
, 
s3
, 
¥ötf
);

437 
	`¥ötf
("--------------------- END ---------------------\n");

438 
	}
}

440 
EXPORT_SYMBOL
(
¥öt_pgdú
);

442 
£gdesc
 *

443 
	$gë_sv_gdt
() {

444  
gdt
;

445 
	}
}

446 
EXPORT_SYMBOL
(
gë_sv_gdt
);

	@supervisor/arch/x86_64/mm/pmm.h

1 #i‚de‡
__KERN_MM_PMM_H__


2 
	#__KERN_MM_PMM_H__


	)

4 
	~<ty≥s.h
>

5 
	~<mmu.h
>

6 
	~<memœyout.h
>

7 
	~<©omic.h
>

8 
	~<•ölock.h
>

9 
	~<as£π.h
>

14 
	spmm_m™agî
 {

15 c⁄° *
	m«me
;

16 (*
	möô
)();

18 (*
	möô_memm≠
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

20 
	mPage
 *(*
	mÆloc_∑ges
)(
size_t
 
	mn
);

21 (*
	m‰ì_∑ges
)(
Page
 *
	mba£
, 
size_t
 
	mn
);

22 
size_t
 (*
ƒ_‰ì_∑ges
)();

23 (*
	mcheck
)();

26 c⁄° 
pmm_m™agî
 *pmm_manager;

27 
•ölock_s
 
pmm_lock
;

28 
pgd_t
 *
boŸ_pgdú
;

29 
uöçå_t
 
boŸ_¸3
;

31 
pmm_öô
();

33 
Page
 *
Æloc_∑ges
(
size_t
 
n
);

34 
‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
);

35 
size_t
 
ƒ_‰ì_∑ges
();

37 
	#Æloc_∑ge
(Ë
	`Æloc_∑ges
(1)

	)

38 
	#‰ì_∑ge
(
∑ge
Ë
	`‰ì_∑ges
’age, 1)

	)

40 
pgd_t
 *
gë_pgd
’gd_à*
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

41 
pud_t
 *
gë_pud
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

42 
pmd_t
 *
gë_pmd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

43 
±e_t
 *
gë_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
);

44 
Page
 *
gë_∑ge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 **
±ï_°‹e
);

45 
∑ge_ªmove
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
);

46 
∑ge_ö£π
(
pgd_t
 *
pgdú
, 
Page
 *
∑ge
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
);

48 
lﬂd_r•0
(
uöçå_t
 
r•0
);

49 
éb_övÆid©e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
);

51 
¥öt_pgdú
((*
¥ötf
)(c⁄° *
fmt
, ...));

55 
	#VADDR_DIRECT
(
addr
Ë((*)((
uöçå_t
)◊ddrË+ 
PHYSBASE
))

	)

56 
	#PADDR_DIRECT
(
addr
Ë((
uöçå_t
)◊ddrË- 
PHYSBASE
)

	)

59 
Page
 *
∑ges
;

60 
size_t
 
≈age
;

62 
ölöe
 
µn_t


63 
	$∑ge2gidx
(
Page
 *
∑ge
)

65  
∑ge
 - 
∑ges
;

66 
	}
}

68 
ölöe
 
µn_t


69 
	$∑ge2µn
(
Page
 *
∑ge
) {

70  
	`∑ge2gidx
(
∑ge
Ë+ (
RESERVED_DRIVER_OS_SIZE
 / 
PGSIZE
);

71 
	}
}

73 
ölöe
 
uöçå_t


74 
	$∑ge2∑
(
Page
 *
∑ge
) {

75  
	`∑ge2µn
(
∑ge
Ë<< 
PGSHIFT
;

76 
	}
}

78 
ölöe
 
Page
 *

79 
	$∑2∑ge
(
uöçå_t
 
∑
) {

80 i‡(
	`PPN
(
∑
 - 
RESERVED_DRIVER_OS_SIZE
Ë>
≈age
) {

81 
	`∑nic
("pa2page called with invalidÖa");

83  &
∑ges
[
	`PPN
(
∑
 - 
RESERVED_DRIVER_OS_SIZE
)];

84 
	}
}

86 
ölöe
 *

87 
	$∑ge2va
(
Page
 *
∑ge
) {

88  
	`VADDR_DIRECT
(
	`∑ge2∑
(
∑ge
));

89 
	}
}

91 
ölöe
 
Page
 *

92 
	$va2∑ge
(*
va
) {

93  
	`∑2∑ge
(
	`PADDR_DIRECT
(
va
));

94 
	}
}

96 
ölöe
 
Page
 *

97 
	$±e2∑ge
(
±e_t
 
±e
) {

98 i‡(!(
±e
 & 
PTE_P
)) {

99 
	`∑nic
("pte2page called with invalidÖte");

101  
	`∑2∑ge
(
	`PTE_ADDR
(
±e
));

102 
	}
}

104 
ölöe
 
Page
 *

105 
	$pmd2∑ge
(
pmd_t
 
pmd
) {

106  
	`∑2∑ge
(
	`PMD_ADDR
(
pmd
));

107 
	}
}

109 
ölöe
 
Page
 *

110 
	$pud2∑ge
(
pud_t
 
pud
) {

111  
	`∑2∑ge
(
	`PUD_ADDR
(
pud
));

112 
	}
}

114 
ölöe
 
Page
 *

115 
	$pgd2∑ge
(
pgd_t
 
pgd
) {

116  
	`∑2∑ge
(
	`PGD_ADDR
(
pgd
));

117 
	}
}

119 
ölöe
 

120 
	$∑ge_ªf
(
Page
 *
∑ge
) {

121  
	`©omic_ªad
(&(
∑ge
->
ªf
));

122 
	}
}

124 
ölöe
 

125 
	$£t_∑ge_ªf
(
Page
 *
∑ge
, 
vÆ
) {

126 
	`©omic_£t
(&(
∑ge
->
ªf
), 
vÆ
);

127 
	}
}

129 
ölöe
 

130 
	$∑ge_ªf_öc
(
Page
 *
∑ge
) {

131  
	`©omic_add_ªtu∫
(&(
∑ge
->
ªf
), 1);

132 
	}
}

134 
ölöe
 

135 
	$∑ge_ªf_dec
(
Page
 *
∑ge
) {

136  
	`©omic_sub_ªtu∫
(&(
∑ge
->
ªf
), 1);

137 
	}
}

139 
p£udodesc
 
gdt_pd
;

140 
boŸ°ack
[], 
boŸ°ackt›
[];

	@supervisor/arch/x86_64/mp/boot_ap.S.h

1 #i‚de‡
__BOOT_AP_S_H__


2 
	#__BOOT_AP_S_H__


	)

5 
	#BOOT_AP_ENTRY
 0x8000

	)

6 
	#BOOT_AP_STACK_BASE
 0x7FE8

	)

8 
	#BOOT_AP_CR3
 0x7FF0

	)

10 
	#BOOT_AP_LAPIC_PHYS
 0x7FF8

	)

12 #i‚de‡
__ASSEMBLER__


13 
boŸ_≠_íåy
[];

	@supervisor/arch/x86_64/mp/lcpu.c

1 
	~<l˝u.h
>

2 
	~<sysc⁄f.h
>

3 
	~<iﬂpic.h
>

4 
	~<œpic.h
>

5 
	~<å≠.h
>

6 
	~<˛ock.h
>

7 
	~<kîn.h
>

8 
	~<©om.h
>

9 
	~<œpic.h
>

10 
	~<°rög.h
>

11 
	~<boŸ_≠.S.h
>

12 
	~<°dio.h
>

13 
	~<¨ch.h
>

14 
	~<mmu.h
>

16 
úq_c⁄åﬁ_s
 
	gúq_c⁄åﬁ
[
IRQ_COUNT
];

17 
	gl˝u_id_£t
[
LAPIC_COUNT
];

18 
	gl˝u_id_öv
[
LAPIC_COUNT
];

19 
l˝u_°©ic_s
 
	gl˝u_°©ic
[
LAPIC_COUNT
];

20 
l˝u_dy«mic_s
 
	gl˝u_dy«mic
[
LAPIC_COUNT
];

22 vﬁ©ûê
	gl˝u_öô_cou¡
 = 0;

25 
	$l˝u_öô
()

29 
ﬁd
 = 
l˝u_öô_cou¡
;

30 i‡(
	`cmpxchg32
(&
l˝u_öô_cou¡
, 
ﬁd
, old + 1) == old)

34 
	`jump_kîn
();

35 
	}
}

	@supervisor/arch/x86_64/mp/lcpu.h

1 #i‚de‡
__LCPU_H__


2 
	#__LCPU_H__


	)

4 
	~<œpic.h
>

5 
	~<å≠.h
>

7 (*
	töå_h™dÀr_f
)(
	tå≠‰ame
 *
	ttf
);

9 
	sl˝u_öfo_s


11 
œpic_id
;

12 
idx
;

13 
uöt64_t
 
‰eq
;

14 } 
	tl˝u_öfo_s
;

16 
	sl˝u_°©ic_s


18 
pgd_t
 *
öô_pgdú
;

19 
uöçå_t
 
∂s_ba£
;

20 
öå_h™dÀr_f
 
öå_h™dÀr
[256];

22 
l˝u_öfo_s
 
public
;

23 } 
	tl˝u_°©ic_s
;

25 
	sl˝u_dy«mic_s


27 } 
l˝u_dy«mic_s
;

29 
	súq_c⁄åﬁ_s


31 
l˝u_≠ic_id
;

32 } 
	túq_c⁄åﬁ_s
;

34 
úq_c⁄åﬁ_s
 
úq_c⁄åﬁ
[
IRQ_COUNT
];

36 
l˝u_id_£t
[
LAPIC_COUNT
];

37 
l˝u_id_öv
[
LAPIC_COUNT
];

39 
l˝u_°©ic_s
 
l˝u_°©ic
[
LAPIC_COUNT
];

40 
l˝u_dy«mic_s
 
l˝u_dy«mic
[
LAPIC_COUNT
];

42 
	$l˝u_öô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

	@supervisor/arch/x86_64/mp/mp.c

1 
	~<boŸ_≠.S.h
>

2 
	~<°rög.h
>

3 
	~<pmm.h
>

4 
	~<sysc⁄f.h
>

5 
	~<l˝u.h
>

6 
	~<¨ch.h
>

7 
	~<å≠.h
>

8 
	~<œpic.h
>

9 
	~<memœyout.h
>

10 
	~<°dio.h
>

11 
	~<drivî_os.h
>

14 
boŸ_≠_íåy_64
[];

16 
uöçå_t
 
	gboŸ_≠_°ack
;

19 
	$mp_öô
()

21 
	`mem£t
(
	`VADDR_DIRECT
(
BOOT_AP_ENTRY
), 0, 
PGSIZE
);

22 
	`memmove
(
	`VADDR_DIRECT
(
BOOT_AP_ENTRY
), 
boŸ_≠_íåy_64
, 
PGSIZE
);

24 
	`mem£t
(
	`VADDR_DIRECT
(
BOOT_AP_CR3
), 0, 8);

25 
	`memmove
(
	`VADDR_DIRECT
(
BOOT_AP_CR3
), &
boŸ_¸3
, (boot_cr3));

27 
	`mem£t
(
	`VADDR_DIRECT
(
BOOT_AP_LAPIC_PHYS
), 0, 8);

28 
	`memmove
(
	`VADDR_DIRECT
(
BOOT_AP_LAPIC_PHYS
), &
sysc⁄f
.
œpic_phys
, (sysconf.lapic_phys));

30 
i
, 
max_≠ic
 = 0;

31 
i
 = 0; i !
sysc⁄f
.
l˝u_cou¡
; ++ i)

33 
l˝u_°©ic
[
l˝u_id_£t
[
i
]].
public
.
idx
 = i;

34 
l˝u_°©ic
[
l˝u_id_£t
[
i
]].
public
.
œpic_id
 =Ücpu_id_set[i];

36 
l˝u_id_öv
[
l˝u_id_£t
[
i
]] = i;

37 i‡(
l˝u_id_£t
[
i
] > 
max_≠ic
) max_apic =Ücpu_id_set[i];

40 
boŸ_≠_°ack
 = (
uöçå_t
)
	`∑ge2va
(
	`Æloc_∑ges
(
max_≠ic
));

41 
	`mem£t
(
	`VADDR_DIRECT
(
BOOT_AP_STACK_BASE
), 0, 8);

42 
	`memmove
(
	`VADDR_DIRECT
(
BOOT_AP_STACK_BASE
), &
boŸ_≠_°ack
, (boot_ap_stack));

44 
≠ic_id
;

45 
i
 = 0; i < 
sysc⁄f
.
l˝u_cou¡
; ++ i)

47 #i‡
HAS_DRIVER_OS


48 i‡(
i
 =
sysc⁄f
.
l˝u_cou¡
 - 1) ;

50 
≠ic_id
 = 
l˝u_id_£t
[
i
];

51 i‡(
≠ic_id
 !
sysc⁄f
.
l˝u_boŸ
)

53 
	`œpic_≠_°¨t
(
≠ic_id
, 
BOOT_AP_ENTRY
);

57 #i‡
HAS_DRIVER_OS


58 
	`drivî_os_öô
();

62 
	}
}

65 
ölöe
 

66 
	$lgdt
(
p£udodesc
 *
pd
) {

67 
asm
 vﬁ©ûê("lgdà(%0)" :: "r" (
pd
));

68 
asm
 vﬁ©ûê("movw %%ax, %%es" :: "a" (
KERNEL_DS
));

69 
asm
 vﬁ©ûê("movw %%ax, %%ds" :: "a" (
KERNEL_DS
));

71 
asm
 volatile (

80 :: "i" (
KERNEL_CS
), "i" (
KERNEL_DS
));

81 
	}
}

84 
	$≠_boŸ_öô
()

86 
	`lgdt
(&
gdt_pd
);

87 
	`…r
(
	`GD_TSS
(
	`œpic_id
()));

88 
	`lidt
(&
idt_pd
);

89 
	`œpic_öô_≠
();

91 
	`l˝u_öô
();

92 
	}
}

	@supervisor/arch/x86_64/mp/mp.h

1 #i‚de‡
__MP_H__


2 
	#__MP_H__


	)

4 
mp_öô
();

	@supervisor/arch/x86_64/sync/sync.h

1 #i‚de‡
__KERN_SYNC_SYNC_H__


2 
	#__KERN_SYNC_SYNC_H__


	)

4 
	~<¨ch.h
>

5 
	~<öå.h
>

6 
	~<mmu.h
>

8 
ölöe
 
boﬁ


9 
	$__öå_ßve
() {

10 i‡(
	`ªad_rÊags
(Ë& 
FL_IF
) {

11 
	`öå_dißbÀ
();

15 
	}
}

17 
ölöe
 

18 
	$__öå_ª°‹e
(
boﬁ
 
Êag
) {

19 i‡(
Êag
) {

20 
	`öå_íabÀ
();

22 
	}
}

24 
	#loˇl_öå_ßve
(
x
Ëdÿ{ x = 
	`__öå_ßve
(); } 0)

	)

25 
	#loˇl_öå_ª°‹e
(
x
Ë
	`__öå_ª°‹e
(x);

	)

	@supervisor/arch/x86_64/trap/trap.c

1 
	~<ty≥s.h
>

2 
	~<mmu.h
>

3 
	~<memœyout.h
>

4 
	~<˛ock.h
>

5 
	~<å≠.h
>

6 
	~<¨ch.h
>

7 
	~<°dio.h
>

8 
	~<as£π.h
>

9 
	~<c⁄sﬁe.h
>

10 
	~<kdebug.h
>

11 
	~<ide.h
>

12 
	~<l˝u.h
>

14 
g©edesc
 
	gidt
[256] = {{0}};

16 
p£udodesc
 
	gidt_pd
 = {

17 (
idt
Ë- 1, (
uöçå_t
)idt

21 
	$idt_öô
() {

22 
uöçå_t
 
__ve˘‹s
[];

23 
i
;

24 
i
 = 0; i < (
idt
Ë/ (
g©edesc
); i ++) {

25 
	`SETGATE
(
idt
[
i
], 0, 
GD_KTEXT
, 
__ve˘‹s
[i], 
DPL_KERNEL
);

27 
	`SETGATE
(
idt
[
T_SYSCALL
], 0, 
GD_KTEXT
, 
__ve˘‹s
[T_SYSCALL], 
DPL_USER
);

28 
	`SETGATE
(
idt
[
T_IPI
], 0, 
GD_KTEXT
, 
__ve˘‹s
[T_IPI], 
DPL_USER
);

29 
	`SETGATE
(
idt
[
T_IPI_DOS
], 0, 
GD_KTEXT
, 
__ve˘‹s
[T_IPI_DOS], 
DPL_USER
);

30 
	`lidt
(&
idt_pd
);

31 
	}
}

34 
	$å≠«me
(
å≠no
) {

35 c⁄° * c⁄° 
ex˙ames
[] = {

58 i‡(
å≠no
 < (
ex˙ames
)/(const * const)) {

59  
ex˙ames
[
å≠no
];

61 i‡(
å≠no
 >
IRQ_OFFSET
 &&Årapno < IRQ_OFFSET + 16) {

65 
	}
}

67 
boﬁ


68 
	$å≠_ö_kî√l
(
å≠‰ame
 *
tf
) {

69  (
tf
->
tf_cs
 =(
uöt16_t
)
KERNEL_CS
);

70 
	}
}

72 c⁄° *
	gIA32Êags
[] = {

73 "CF", 
NULL
, "PF", NULL, "AF", NULL, "ZF", "SF",

74 "TF", "IF", "DF", "OF", 
NULL
, NULL, "NT", NULL,

75 "RF", "VM", "AC", "VIF", "VIP", "ID", 
NULL
, NULL,

79 
	$¥öt_å≠‰ame
(
å≠‰ame
 *
tf
) {

80 
	`˝rötf
("å≠‰amê© %p\n", 
tf
);

81 
	`¥öt_ªgs
(&
tf
->
tf_ªgs
);

82 
	`˝rötf
("Åø∞0x--------%08x %s\n", 
tf
->
tf_å≠no
, 
	`å≠«me
(tf->tf_trapno));

83 
	`˝rötf
("Éº 0x%016Œx\n", 
tf
->
tf_îr
);

84 
	`˝rötf
("Ñù 0x%016Œx\n", 
tf
->
tf_rù
);

85 
	`˝rötf
(" c† 0x------------%04x\n", 
tf
->
tf_cs
);

86 
	`˝rötf
(" d† 0x------------%04x\n", 
tf
->
tf_ds
);

87 
	`˝rötf
("É† 0x------------%04x\n", 
tf
->
tf_es
);

88 
	`˝rötf
(" fœg 0x%016Œx\n", 
tf
->
tf_rÊags
);

89 
	`˝rötf
("Ñ• 0x%016Œx\n", 
tf
->
tf_r•
);

90 
	`˝rötf
(" s† 0x------------%04x\n", 
tf
->
tf_ss
);

92 
i
, 
j
;

93 
i
 = 0, 
j
 = 1; i < (
IA32Êags
) / (IA32flags[0]); i ++, j <<= 1) {

94 i‡((
tf
->
tf_rÊags
 & 
j
Ë&& 
IA32Êags
[
i
] !
NULL
) {

95 
	`˝rötf
("%s,", 
IA32Êags
[
i
]);

98 
	`˝rötf
("IOPL=%d\n", (
tf
->
tf_rÊags
 & 
FL_IOPL_MASK
) >> 12);

99 
	}
}

102 
	$¥öt_ªgs
(
pushªgs
 *
ªgs
) {

103 
	`˝rötf
("Ñdò 0x%016Œx\n", 
ªgs
->
ªg_rdi
);

104 
	`˝rötf
("Ñsò 0x%016Œx\n", 
ªgs
->
ªg_rsi
);

105 
	`˝rötf
("Ñdx 0x%016Œx\n", 
ªgs
->
ªg_rdx
);

106 
	`˝rötf
("Ñcx 0x%016Œx\n", 
ªgs
->
ªg_rcx
);

107 
	`˝rötf
("Ñax 0x%016Œx\n", 
ªgs
->
ªg_øx
);

108 
	`˝rötf
("Ñ8 0x%016Œx\n", 
ªgs
->
ªg_r8
);

109 
	`˝rötf
("Ñ9 0x%016Œx\n", 
ªgs
->
ªg_r9
);

110 
	`˝rötf
("Ñ10 0x%016Œx\n", 
ªgs
->
ªg_r10
);

111 
	`˝rötf
("Ñ11 0x%016Œx\n", 
ªgs
->
ªg_r11
);

112 
	`˝rötf
("Ñbx 0x%016Œx\n", 
ªgs
->
ªg_rbx
);

113 
	`˝rötf
("Ñb∞ 0x%016Œx\n", 
ªgs
->
ªg_rbp
);

114 
	`˝rötf
("Ñ12 0x%016Œx\n", 
ªgs
->
ªg_r12
);

115 
	`˝rötf
("Ñ13 0x%016Œx\n", 
ªgs
->
ªg_r13
);

116 
	`˝rötf
("Ñ14 0x%016Œx\n", 
ªgs
->
ªg_r14
);

117 
	`˝rötf
("Ñ15 0x%016Œx\n", 
ªgs
->
ªg_r15
);

118 
	}
}

121 
	$å≠_di•©ch
(
å≠‰ame
 *
tf
) {

124 
id
 = 
	`œpic_id
();

125 
öå_h™dÀr_f
 
h
 = 
l˝u_°©ic
[
id
].
öå_h™dÀr
[
tf
->
tf_å≠no
];

127 i‡(
tf
->
tf_å≠no
 >
IRQ_OFFSET
 &&Åf->tf_å≠nÿ< IRQ_OFFSET + 
IRQ_COUNT
)

129 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_TIMER
)

131 i‡(
h
 !
NULL
)

133 
	`h
(
tf
);

138 i‡(
h
 !
NULL
 && 
id
 =
úq_c⁄åﬁ
[
tf
->
tf_å≠no
 - 
IRQ_OFFSET
].
l˝u_≠ic_id
)

139 
	`h
(
tf
);

144 i‡(
tf
->
tf_å≠no
 =
T_IPI
 ||

145 
tf
->
tf_å≠no
 =
T_IPI_DOS
)

146 
	`œpic_eoi_£nd
();

148 i‡(
h
 !
NULL
)

149 
	`h
(
tf
);

153 i‡((
tf
->
tf_cs
 & 3) == 0) {

154 
	`¥öt_å≠‰ame
(
tf
);

155 
	`∑nic
("unexpectedÅrap in kernel.\n");

159 
	}
}

162 
	$å≠
(
å≠‰ame
 *
tf
) {

164 
	`å≠_di•©ch
(
tf
);

165 
	}
}

	@supervisor/arch/x86_64/trap/trap.h

1 #i‚de‡
__KERN_TRAP_TRAP_H__


2 
	#__KERN_TRAP_TRAP_H__


	)

4 
	~<ty≥s.h
>

7 
	#T_SYSCALL
 0x80

	)

8 
	#T_IPI
 0x81

	)

9 
	#T_IPI_DOS
 0x82

	)

12 
	#T_DIVIDE
 0

13 
	#T_DEBUG
 1

14 
	#T_NMI
 2

15 
	#T_BRKPT
 3

16 
	#T_OFLOW
 4

17 
	#T_BOUND
 5

18 
	#T_ILLOP
 6

19 
	#T_DEVICE
 7

20 
	#T_DBLFLT
 8

22 
	#T_TSS
 10

23 
	#T_SEGNP
 11

24 
	#T_STACK
 12

25 
	#T_GPFLT
 13

26 
	#T_PGFLT
 14

28 
	#T_FPERR
 16

29 
	#T_ALIGN
 17

30 
	#T_MCHK
 18

31 
	#T_SIMDERR
 19

32 
	#EXCEPTION_COUNT
 32

	)

35 
	#IRQ_OFFSET
 32

36 

	)

37 
	#IRQ_TIMER
 0

	)

38 
	#IRQ_KBD
 1

	)

39 
	#IRQ_COM1
 4

	)

40 
	#IRQ_IDE1
 14

	)

41 
	#IRQ_IDE2
 15

	)

42 
	#IRQ_ERROR
 19

	)

43 
	#IRQ_SPURIOUS
 31

	)

45 
	#IRQ_COUNT
 32

	)

48 
	spushªgs
 {

49 
uöt64_t
 
	mªg_r15
;

50 
uöt64_t
 
	mªg_r14
;

51 
uöt64_t
 
	mªg_r13
;

52 
uöt64_t
 
	mªg_r12
;

53 
uöt64_t
 
	mªg_rbp
;

54 
uöt64_t
 
	mªg_rbx
;

55 
uöt64_t
 
	mªg_r11
;

56 
uöt64_t
 
	mªg_r10
;

57 
uöt64_t
 
	mªg_r9
;

58 
uöt64_t
 
	mªg_r8
;

59 
uöt64_t
 
	mªg_øx
;

60 
uöt64_t
 
	mªg_rcx
;

61 
uöt64_t
 
	mªg_rdx
;

62 
uöt64_t
 
	mªg_rsi
;

63 
uöt64_t
 
	mªg_rdi
;

66 
	så≠‰ame
 {

67 
uöt16_t
 
	mtf_ds
;

68 
uöt16_t
 
	mtf_∑ddög0
[3];

69 
uöt16_t
 
	mtf_es
;

70 
uöt16_t
 
	mtf_∑ddög1
[3];

71 
pushªgs
 
	mtf_ªgs
;

72 
uöt64_t
 
	mtf_å≠no
;

74 
uöt64_t
 
	mtf_îr
;

75 
uöçå_t
 
	mtf_rù
;

76 
uöt16_t
 
	mtf_cs
;

77 
uöt16_t
 
	mtf_∑ddög2
[3];

78 
uöt64_t
 
	mtf_rÊags
;

79 
uöçå_t
 
	mtf_r•
;

80 
uöt16_t
 
	mtf_ss
;

81 
uöt16_t
 
	mtf_∑ddög3
[3];

82 } 
__©åibuã__
((
∑cked
));

84 
idt_öô
();

85 
¥öt_å≠‰ame
(
å≠‰ame
 *
tf
);

86 
¥öt_ªgs
(
pushªgs
 *
ªgs
);

87 
boﬁ
 
å≠_ö_kî√l
(
å≠‰ame
 *
tf
);

89 
p£udodesc
 
idt_pd
;

	@supervisor/libs/assert.h

1 #i‚de‡
__KERN_DEBUG_ASSERT_H__


2 
	#__KERN_DEBUG_ASSERT_H__


	)

4 
__w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...);

5 
	$__∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

7 
	#w¨n
(...) \

8 
	`__w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

10 
	#∑nic
(...) \

11 
	`__∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

13 
	#as£π
(
x
) \

15 i‡(!(
x
)) { \

16 
	`∑nic
("assertion failed: %s", #x); \

18 
	}
} 0)

	)

21 
	#°©ic_as£π
(
x
) \

22 
x
Ë{ 0: (x): ; }

	)

	@supervisor/libs/elf.h

1 #i‚de‡
__LIBS_ELF_H__


2 
	#__LIBS_ELF_H__


	)

4 
	~<ty≥s.h
>

6 
	#ELF_MAGIC
 0x464C457FU

7 

	)

9 
	sñfhdr
 {

10 
uöt32_t
 
	me_magic
;

11 
uöt8_t
 
	me_ñf
[12];

12 
uöt16_t
 
	me_ty≥
;

13 
uöt16_t
 
	me_machöe
;

14 
uöt32_t
 
	me_vîsi⁄
;

15 
uöt64_t
 
	me_íåy
;

16 
uöt64_t
 
	me_phoff
;

17 
uöt64_t
 
	me_shoff
;

18 
uöt32_t
 
	me_Êags
;

19 
uöt16_t
 
	me_ehsize
;

20 
uöt16_t
 
	me_phítsize
;

21 
uöt16_t
 
	me_phnum
;

22 
uöt16_t
 
	me_shítsize
;

23 
uöt16_t
 
	me_shnum
;

24 
uöt16_t
 
	me_sh°∫dx
;

28 
	s¥oghdr
 {

29 
uöt32_t
 
	mp_ty≥
;

30 
uöt32_t
 
	mp_Êags
;

31 
uöt64_t
 
	mp_off£t
;

32 
uöt64_t
 
	mp_va
;

33 
uöt64_t
 
	mp_∑
;

34 
uöt64_t
 
	mp_fûesz
;

35 
uöt64_t
 
	mp_memsz
;

36 
uöt64_t
 
	mp_Æign
;

	@supervisor/libs/error.h

1 #i‚de‡
__LIBS_ERROR_H__


2 
	#__LIBS_ERROR_H__


	)

5 
	#E_UNSPECIFIED
 1

6 
	#E_BAD_PROC
 2

7 
	#E_INVAL
 3

8 
	#E_NO_MEM
 4

9 
	#E_NO_FREE_PROC
 5

10 
	#E_FAULT
 6

11 

	)

13 
	#MAXERROR
 6

	)

	@supervisor/libs/list.h

1 #i‚de‡
__LIBS_LIST_H__


2 
	#__LIBS_LIST_H__


	)

4 #i‚de‡
__ASSEMBLER__


6 
	~<ty≥s.h
>

17 
	sli°_íåy
 {

18 
li°_íåy
 *
	m¥ev
, *
	m√xt
;

21 
li°_íåy
 
	tli°_íåy_t
;

23 
ölöe
 
	$li°_öô
(
li°_íåy_t
 *
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
ölöe
 
	$li°_add
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
ölöe
 
	$li°_add_bef‹e
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
ölöe
 
	$li°_add_a·î
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
ölöe
 
	$li°_dñ
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
ölöe
 
	$li°_dñ_öô
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
ölöe
 
boﬁ
 
	$li°_em±y
(
li°_íåy_t
 *
li°
Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
ölöe
 
li°_íåy_t
 *
	$li°_√xt
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
ölöe
 
li°_íåy_t
 *
	$li°_¥ev
(
li°_íåy_t
 *
li°ñm
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
ölöe
 
	$__li°_add
(
li°_íåy_t
 *
ñm
,Üi°_íåy_à*
¥ev
,Üi°_íåy_à*
√xt
Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
ölöe
 
	$__li°_dñ
(
li°_íåy_t
 *
¥ev
,Üi°_íåy_à*
√xt
Ë
	`__©åibuã__
((
Æways_ölöe
));

40 
ölöe
 

41 
	$li°_öô
(
li°_íåy_t
 *
ñm
) {

42 
ñm
->
¥ev
 =Élm->
√xt
 =Élm;

43 
	}
}

53 
ölöe
 

54 
	$li°_add
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

55 
	`li°_add_a·î
(
li°ñm
, 
ñm
);

56 
	}
}

66 
ölöe
 

67 
	$li°_add_bef‹e
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

68 
	`__li°_add
(
ñm
, 
li°ñm
->
¥ev
,Üistelm);

69 
	}
}

79 
ölöe
 

80 
	$li°_add_a·î
(
li°_íåy_t
 *
li°ñm
,Üi°_íåy_à*
ñm
) {

81 
	`__li°_add
(
ñm
, 
li°ñm
,Üi°ñm->
√xt
);

82 
	}
}

91 
ölöe
 

92 
	$li°_dñ
(
li°_íåy_t
 *
li°ñm
) {

93 
	`__li°_dñ
(
li°ñm
->
¥ev
,Üi°ñm->
√xt
);

94 
	}
}

102 
ölöe
 

103 
	$li°_dñ_öô
(
li°_íåy_t
 *
li°ñm
) {

104 
	`li°_dñ
(
li°ñm
);

105 
	`li°_öô
(
li°ñm
);

106 
	}
}

112 
ölöe
 
boﬁ


113 
	$li°_em±y
(
li°_íåy_t
 *
li°
) {

114  
li°
->
√xt
 ==Üist;

115 
	}
}

121 
li°_íåy_t
 *

122 
	$li°_√xt
(
li°_íåy_t
 *
li°ñm
) {

123  
li°ñm
->
√xt
;

124 
	}
}

130 
li°_íåy_t
 *

131 
	$li°_¥ev
(
li°_íåy_t
 *
li°ñm
) {

132  
li°ñm
->
¥ev
;

133 
	}
}

141 
ölöe
 

142 
	$__li°_add
(
li°_íåy_t
 *
ñm
,Üi°_íåy_à*
¥ev
,Üi°_íåy_à*
√xt
) {

143 
¥ev
->
√xt
 =Çext->¥ev = 
ñm
;

144 
ñm
->
√xt
 =Çext;

145 
ñm
->
¥ev
 =Örev;

146 
	}
}

154 
ölöe
 

155 
	$__li°_dñ
(
li°_íåy_t
 *
¥ev
,Üi°_íåy_à*
√xt
) {

156 
¥ev
->
√xt
 =Çext;

157 
√xt
->
¥ev
 =Örev;

158 
	}
}

	@supervisor/libs/printfmt.c

1 
	~<¨ch.h
>

2 
	~<ty≥s.h
>

3 
	~<îr‹.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

17 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
 + 1] = {

18 [0] 
NULL
,

19 [
E_UNSPECIFIED
] "unspecifiedÉrror",

20 [
E_BAD_PROC
] "badÖrocess",

21 [
E_INVAL
] "invalidÖarameter",

22 [
E_NO_MEM
] "out of memory",

23 [
E_NO_FREE_PROC
] "out ofÖrocesses",

24 [
E_FAULT
] "segmentation fault",

37 
¥öäum
((*
putch
)(, *), *
putd©
,

38 
num
, 
ba£
, 
width
, 
∑dc
) {

39 
ªsu…
 = 
num
;

40 
mod
 = 
	`do_div
(
ªsu…
, 
ba£
);

43 i‡(
num
 >
ba£
) {

44 
	`¥öäum
(
putch
, 
putd©
, 
ªsu…
, 
ba£
, 
width
 - 1, 
∑dc
);

47 -- 
width
 > 0)

48 
	`putch
(
∑dc
, 
putd©
);

51 
	`putch
("0123456789abcdef"[
mod
], 
putd©
);

52 
	}
}

60 
	$gëuöt
(
va_li°
 
≠
, 
lÊag
) {

61 i‡(
lÊag
 >= 2) {

62  
	`va_¨g
(
≠
, );

64 i‡(
lÊag
) {

65  
	`va_¨g
(
≠
, );

68  
	`va_¨g
(
≠
, );

70 
	}
}

78 
	$gëöt
(
va_li°
 
≠
, 
lÊag
) {

79 i‡(
lÊag
 >= 2) {

80  
	`va_¨g
(
≠
, );

82 i‡(
lÊag
) {

83  
	`va_¨g
(
≠
, );

86  
	`va_¨g
(
≠
, );

88 
	}
}

97 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...) {

98 
va_li°
 
≠
;

100 
	`va_°¨t
(
≠
, 
fmt
);

101 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

102 
	`va_íd
(
≠
);

103 
	}
}

117 
v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
) {

118 c⁄° *
p
;

119 
ch
, 
îr
;

120 
num
;

121 
ba£
, 
width
, 
¥ecisi⁄
, 
lÊag
, 
ÆtÊag
;

124 (
ch
 = *(*)
fmt
 ++) != '%') {

125 i‡(
ch
 == '\0') {

128 
	`putch
(
ch
, 
putd©
);

132 
∑dc
 = ' ';

133 
width
 = 
¥ecisi⁄
 = -1;

134 
lÊag
 = 
ÆtÊag
 = 0;

136 
ªswôch
:

137 
ch
 = *(*)
fmt
 ++) {

141 
∑dc
 = '-';

142 
ªswôch
;

146 
∑dc
 = '0';

147 
ªswôch
;

151 
¥ecisi⁄
 = 0; ; ++ 
fmt
) {

152 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

153 
ch
 = *
fmt
;

154 i‡(
ch
 < '0' || ch > '9') {

158 
¥o˚ss_¥ecisi⁄
;

161 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

162 
¥o˚ss_¥ecisi⁄
;

165 i‡(
width
 < 0)

166 
width
 = 0;

167 
ªswôch
;

170 
ÆtÊag
 = 1;

171 
ªswôch
;

173 
¥o˚ss_¥ecisi⁄
:

174 i‡(
width
 < 0)

175 
width
 = 
¥ecisi⁄
,Örecision = -1;

176 
ªswôch
;

180 
lÊag
 ++;

181 
ªswôch
;

185 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
);

190 
îr
 = 
	`va_¨g
(
≠
, );

191 i‡(
îr
 < 0) {

192 
îr
 = -err;

194 i‡(
îr
 > 
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
) {

195 
	`¥ötfmt
(
putch
, 
putd©
, "îr‹ %d", 
îr
);

198 
	`¥ötfmt
(
putch
, 
putd©
, "%s", 
p
);

204 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
) {

205 
p
 = "(null)";

207 i‡(
width
 > 0 && 
∑dc
 != '-') {

208 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width --) {

209 
	`putch
(
∑dc
, 
putd©
);

212 ; (
ch
 = *
p
 ++Ë!'\0' && (
¥ecisi⁄
 < 0 || --Öªcisi⁄ >0); 
width
 --) {

213 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~')) {

214 
	`putch
('?', 
putd©
);

217 
	`putch
(
ch
, 
putd©
);

220 ; 
width
 > 0; width --) {

221 
	`putch
(' ', 
putd©
);

227 
num
 = 
	`gëöt
(
≠
, 
lÊag
);

228 i‡(()
num
 < 0) {

229 
	`putch
('-', 
putd©
);

230 
num
 = -()num;

232 
ba£
 = 10;

233 
numbî
;

237 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

238 
ba£
 = 10;

239 
numbî
;

243 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

244 
ba£
 = 8;

245 
numbî
;

249 
	`putch
('0', 
putd©
);

250 
	`putch
('x', 
putd©
);

251 
num
 = ()(
uöçå_t
)
	`va_¨g
(
≠
, *);

252 
ba£
 = 16;

253 
numbî
;

257 
num
 = 
	`gëuöt
(
≠
, 
lÊag
);

258 
ba£
 = 16;

259 
numbî
:

260 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

265 
	`putch
(
ch
, 
putd©
);

270 
	`putch
('%', 
putd©
);

271 
fmt
 --; fmt[-1] != '%'; fmt --)

276 
	}
}

279 
	s•rötbuf
 {

280 *
	mbuf
;

281 *
	mebuf
;

282 
	m˙t
;

291 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
) {

292 
b
->
˙t
 ++;

293 i‡(
b
->
buf
 < b->
ebuf
) {

294 *
b
->
buf
 ++ = 
ch
;

296 
	}
}

305 
	$¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...) {

306 
va_li°
 
≠
;

307 
˙t
;

308 
	`va_°¨t
(
≠
, 
fmt
);

309 
˙t
 = 
	`v¢¥ötf
(
°r
, 
size
, 
fmt
, 
≠
);

310 
	`va_íd
(
≠
);

311  
˙t
;

312 
	}
}

329 
	$v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

330 
•rötbuf
 
b
 = {
°r
, så + 
size
 - 1, 0};

331 i‡(
°r
 =
NULL
 || 
b
.
buf
 > b.
ebuf
) {

332  -
E_INVAL
;

335 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
≠
);

337 *
b
.
buf
 = '\0';

338  
b
.
˙t
;

339 
	}
}

	@supervisor/libs/readline.c

1 
	~<°dio.h
>

3 
	#BUFSIZE
 1024

	)

4 
	gbuf
[
BUFSIZE
];

25 
	$ªadlöe
(c⁄° *
¥om±
) {

26 i‡(
¥om±
 !
NULL
) {

27 
	`˝rötf
("%s", 
¥om±
);

29 
i
 = 0, 
c
;

31 
c
 = 
	`gëch¨
();

32 i‡(
c
 < 0) {

33  
NULL
;

35 i‡(
c
 >' ' && 
i
 < 
BUFSIZE
 - 1) {

36 
	`˝utch¨
(
c
);

37 
buf
[
i
 ++] = 
c
;

39 i‡(
c
 ='\b' && 
i
 > 0) {

40 
	`˝utch¨
(
c
);

41 
i
 --;

43 i‡(
c
 == '\n' || c == '\r') {

44 
	`˝utch¨
(
c
);

45 
buf
[
i
] = '\0';

46  
buf
;

49 
	}
}

	@supervisor/libs/stdarg.h

1 #i‚de‡
__LIBS_STDARG_H__


2 
	#__LIBS_STDARG_H__


	)

5 
__buûtö_va_li°
 
	tva_li°
;

7 
	#va_°¨t
(
≠
, 
œ°
Ë(
	`__buûtö_va_°¨t
◊p,Üa°))

	)

8 
	#va_¨g
(
≠
, 
ty≥
Ë(
	`__buûtö_va_¨g
◊p,Åy≥))

	)

9 
	#va_íd
(
≠
Ë

	)

	@supervisor/libs/stdio.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<c⁄sﬁe.h
>

12 
	$˝utch
(
c
, *
˙t
) {

13 
	`c⁄s_putc
(
c
);

14 (*
˙t
) ++;

15 
	}
}

27 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
) {

28 
˙t
 = 0;

29 
	`v¥ötfmt
((*)
˝utch
, &
˙t
, 
fmt
, 
≠
);

30  
˙t
;

31 
	}
}

40 
	$˝rötf
(c⁄° *
fmt
, ...) {

41 
va_li°
 
≠
;

42 
˙t
;

43 
	`va_°¨t
(
≠
, 
fmt
);

44 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

45 
	`va_íd
(
≠
);

46  
˙t
;

47 
	}
}

51 
	$˝utch¨
(
c
) {

52 
	`c⁄s_putc
(
c
);

53 
	}
}

60 
	$˝uts
(c⁄° *
°r
) {

61 
˙t
 = 0;

62 
c
;

63 (
c
 = *
°r
 ++) != '\0') {

64 
	`˝utch
(
c
, &
˙t
);

66 
	`˝utch
('\n', &
˙t
);

67  
˙t
;

68 
	}
}

72 
	$gëch¨
() {

73 
c
;

74 (
c
 = 
	`c⁄s_gëc
()) == 0)

76  
c
;

77 
	}
}

	@supervisor/libs/stdio.h

1 #i‚de‡
__LIBS_STDIO_H__


2 
	#__LIBS_STDIO_H__


	)

4 
	~<ty≥s.h
>

5 
	~<°d¨g.h
>

8 
˝rötf
(c⁄° *
fmt
, ...);

9 
v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
);

10 
˝utch¨
(
c
);

11 
˝uts
(c⁄° *
°r
);

12 
gëch¨
();

15 *
ªadlöe
(c⁄° *
¥om±
);

18 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

19 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
);

20 
	`¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, ...);

21 
	`v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
);

	@supervisor/libs/string.c

1 
	~<¨ch.h
>

2 
	~<°rög.h
>

11 
size_t


12 
	$°æí
(c⁄° *
s
) {

13 
size_t
 
˙t
 = 0;

14 *
s
 ++ != '\0') {

15 
˙t
 ++;

17  
˙t
;

18 
	}
}

33 
size_t


34 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
Àn
) {

35 
size_t
 
˙t
 = 0;

36 
˙t
 < 
Àn
 && *
s
 ++ != '\0') {

37 
˙t
 ++;

39  
˙t
;

40 
	}
}

55 
	$°r˝y
(*
d°
, c⁄° *
§c
) {

56 #ifde‡
__HAVE_ARCH_STRCPY


57  
	`__°r˝y
(
d°
, 
§c
);

59 *
p
 = 
d°
;

60 (*
p
 ++ = *
§c
 ++) != '\0')

62  
d°
;

64 
	}
}

77 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

78 *
p
 = 
d°
;

79 
Àn
 > 0) {

80 i‡((*
p
 = *
§c
) != '\0') {

81 
§c
 ++;

83 
p
 ++, 
Àn
 --;

85  
d°
;

86 
	}
}

104 
	$°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

105 #ifde‡
__HAVE_ARCH_STRCMP


106  
	`__°rcmp
(
s1
, 
s2
);

108 *
s1
 !'\0' && *s1 =*
s2
) {

109 
s1
 ++, 
s2
 ++;

111  ()(()*
s1
 - ()*
s2
);

113 
	}
}

127 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
) {

128 
n
 > 0 && *
s1
 !'\0' && *s1 =*
s2
) {

129 
n
 --, 
s1
 ++, 
s2
 ++;

131  (
n
 =0Ë? 0 : ()(()*
s1
 - ()*
s2
);

132 
	}
}

143 
	$°rchr
(c⁄° *
s
, 
c
) {

144 *
s
 != '\0') {

145 i‡(*
s
 =
c
) {

146  (*)
s
;

148 
s
 ++;

150  
NULL
;

151 
	}
}

163 
	$°rföd
(c⁄° *
s
, 
c
) {

164 *
s
 != '\0') {

165 i‡(*
s
 =
c
) {

168 
s
 ++;

170  (*)
s
;

171 
	}
}

204 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
) {

205 
√g
 = 0;

206 
vÆ
 = 0;

209 *
s
 == ' ' || *s == '\t') {

210 
s
 ++;

214 i‡(*
s
 == '+') {

215 
s
 ++;

217 i‡(*
s
 == '-') {

218 
s
 ++, 
√g
 = 1;

222 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x')) {

223 
s
 +2, 
ba£
 = 16;

225 i‡(
ba£
 =0 && 
s
[0] == '0') {

226 
s
 ++, 
ba£
 = 8;

228 i‡(
ba£
 == 0) {

229 
ba£
 = 10;

234 
dig
;

236 i‡(*
s
 >= '0' && *s <= '9') {

237 
dig
 = *
s
 - '0';

239 i‡(*
s
 >= 'a' && *s <= 'z') {

240 
dig
 = *
s
 - 'a' + 10;

242 i‡(*
s
 >= 'A' && *s <= 'Z') {

243 
dig
 = *
s
 - 'A' + 10;

248 i‡(
dig
 >
ba£
) {

251 
s
 ++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

255 i‡(
íd±r
) {

256 *
íd±r
 = (*Ë
s
;

258  (
√g
 ? -
vÆ
 : val);

259 
	}
}

271 
	$mem£t
(*
s
, 
c
, 
size_t
 
n
) {

272 #ifde‡
__HAVE_ARCH_MEMSET


273  
	`__mem£t
(
s
, 
c
, 
n
);

275 *
p
 = 
s
;

276 
n
 -- > 0) {

277 *
p
 ++ = 
c
;

279  
s
;

281 
	}
}

293 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

294 #ifde‡
__HAVE_ARCH_MEMMOVE


295  
	`__memmove
(
d°
, 
§c
, 
n
);

297 c⁄° *
s
 = 
§c
;

298 *
d
 = 
d°
;

299 i‡(
s
 < 
d
 && s + 
n
 > d) {

300 
s
 +
n
, 
d
 +=Ç;

301 
n
 -- > 0) {

302 *-- 
d
 = *-- 
s
;

305 
n
 -- > 0) {

306 *
d
 ++ = *
s
 ++;

309  
d°
;

311 
	}
}

328 
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

329 #ifde‡
__HAVE_ARCH_MEMCPY


330  
	`__mem˝y
(
d°
, 
§c
, 
n
);

332 c⁄° *
s
 = 
§c
;

333 *
d
 = 
d°
;

334 
n
 -- > 0) {

335 *
d
 ++ = *
s
 ++;

337  
d°
;

339 
	}
}

356 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
) {

357 c⁄° *
s1
 = (c⁄° *)
v1
;

358 c⁄° *
s2
 = (c⁄° *)
v2
;

359 
n
 -- > 0) {

360 i‡(*
s1
 !*
s2
) {

361  ()(()*
s1
 - ()*
s2
);

363 
s1
 ++, 
s2
 ++;

366 
	}
}

	@supervisor/libs/string.h

1 #i‚de‡
__LIBS_STRING_H__


2 
	#__LIBS_STRING_H__


	)

4 
	~<ty≥s.h
>

6 
size_t
 
°æí
(c⁄° *
s
);

7 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
Àn
);

9 *
°r˝y
(*
d°
, c⁄° *
§c
);

10 *
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

12 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

13 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

15 *
°rchr
(c⁄° *
s
, 
c
);

16 *
°rföd
(c⁄° *
s
, 
c
);

17 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

19 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

20 *
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

21 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

22 
memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
);

	@supervisor/libs/types.h

1 #i‚de‡
__LIBS_TYPES_H__


2 
	#__LIBS_TYPES_H__


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*)0)

	)

8 
	#CHAR_BIT
 8

	)

11 
	tboﬁ
;

14 
	töt8_t
;

15 
	tuöt8_t
;

16 
	töt16_t
;

17 
	tuöt16_t
;

18 
	töt32_t
;

19 
	tuöt32_t
;

20 
	töt64_t
;

21 
	tuöt64_t
;

23 #i‡
deföed
(
__LP64__
Ë|| deföed(
__64BIT__
Ë|| deföed(
_LP64
)

24 #i‚de‡
__UCORE_64__


25 
	#__UCORE_64__


	)

35 #ifde‡
__UCORE_64__


38 
öt64_t
 
	töçå_t
;

39 
uöt64_t
 
	tuöçå_t
;

44 
öt32_t
 
	töçå_t
;

45 
uöt32_t
 
	tuöçå_t
;

50 
uöçå_t
 
	tsize_t
;

53 
öçå_t
 
	toff_t
;

56 
size_t
 
	tµn_t
;

59 
uöçå_t
 
	t£m_t
;

65 
	#ROUNDDOWN
(
a
, 
n
) ({ \

66 
size_t
 
__a
 = (size_t)(
a
); \

67 (
	`ty≥of
(
a
))(
__a
 - __®% (
n
)); \

68 })

	)

71 
	#ROUNDUP
(
a
, 
n
) ({ \

72 
size_t
 
__n
 = (size_t)(
n
); \

73 (
	`ty≥of
(
a
))(
	`ROUNDDOWN
((
size_t
)◊Ë+ 
__n
 - 1, __n)); \

74 })

	)

77 
	#ROUNDUP_DIV
(
a
, 
n
) ({ \

78 
uöt32_t
 
__n
 = (uöt32_t)(
n
); \

79 (
	`ty≥of
(
a
))((◊Ë+ 
__n
 - 1) / __n); \

80 })

	)

83 
	#off£tof
(
ty≥
, 
membî
) \

84 ((
size_t
)(&((
ty≥
 *)0)->
membî
))

	)

92 
	#to_°ru˘
(
±r
, 
ty≥
, 
membî
) \

93 ((
ty≥
 *)((*)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

	@supervisor/mm/buddy_pmm.c

1 
	~<pmm.h
>

2 
	~<li°.h
>

3 
	~<°rög.h
>

4 
	~<buddy_pmm.h
>

28 
	#MAX_ORDER
 16

	)

29 
‰ì_¨ó_t
 
	g‰ì_¨ó
[
MAX_ORDER
 + 1];

32 
	#‰ì_li°
(
x
Ë(
‰ì_¨ó
[x].
‰ì_li°
)

	)

33 
	#ƒ_‰ì
(
x
Ë(
‰ì_¨ó
[x].
ƒ_‰ì
)

	)

35 
	#MAX_ZONE_NUM
 10

	)

36 
	sZ⁄e
 {

37 
Page
 *
	mmem_ba£
;

38 } 
	gz⁄es
[
MAX_ZONE_NUM
] = {{
NULL
}};

40 
buddy_‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
);

44 
	$buddy_öô
() {

45 
i
;

46 
i
 = 0; i <
MAX_ORDER
; i ++) {

47 
	`li°_öô
(&
	`‰ì_li°
(
i
));

48 
	`ƒ_‰ì
(
i
) = 0;

50 
	}
}

54 
	$buddy_öô_memm≠
(
Page
 *
ba£
, 
size_t
 
n
) {

55 
z⁄e_num
 = 0;

56 
	`as£π
(
n
 > 0 && 
z⁄e_num
 < 
MAX_ZONE_NUM
);

57 
Page
 *
p
 = 
ba£
;

58 ; 
p
 !
ba£
 + 
n
;Ö ++) {

59 
	`as£π
(
	`PageRe£rved
(
p
));

60 
p
->
Êags
 =Ö->
¥›îty
 = 0;

61 
p
->
z⁄e_num
 = zone_num;

62 
	`£t_∑ge_ªf
(
p
, 0);

64 
p
 = 
z⁄es
[
z⁄e_num
 ++].
mem_ba£
 = 
ba£
;

65 
size_t
 
‹dî
 = 
MAX_ORDER
, 
‹dî_size
 = (1 << order);

66 
n
 != 0) {

67 
n
 >
‹dî_size
) {

68 
p
->
¥›îty
 = 
‹dî
;

69 
	`SëPagePr›îty
(
p
);

70 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
p
->
∑ge_lök
));

71 
n
 -
‹dî_size
, 
p
 += order_size;

72 
	`ƒ_‰ì
(
‹dî
) ++;

74 
‹dî
 --;

75 
‹dî_size
 >>= 1;

77 
	}
}

80 
ölöe
 
size_t


81 
	$gë‹dî
(
size_t
 
n
) {

82 
size_t
 
‹dî
, 
‹dî_size
;

83 
‹dî
 = 0, 
‹dî_size
 = 1; ordî <
MAX_ORDER
; order ++, order_size <<= 1) {

84 i‡(
n
 <
‹dî_size
) {

85  
‹dî
;

88 
	`∑nic
("gë‹dî faûed. %d\n", 
n
);

89 
	}
}

93 
ölöe
 
Page
 *

94 
	$buddy_Æloc_∑ges_sub
(
size_t
 
‹dî
) {

95 
	`as£π
(
‹dî
 <
MAX_ORDER
);

96 
size_t
 
cur_‹dî
;

97 
cur_‹dî
 = 
‹dî
; cur_‹dî <
MAX_ORDER
; cur_order ++) {

98 i‡(!
	`li°_em±y
(&
	`‰ì_li°
(
cur_‹dî
))) {

99 
li°_íåy_t
 *
À
 = 
	`li°_√xt
(&
	`‰ì_li°
(
cur_‹dî
));

100 
Page
 *
∑ge
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

101 
	`ƒ_‰ì
(
cur_‹dî
) --;

102 
	`li°_dñ
(
À
);

103 
size_t
 
size
 = 1 << 
cur_‹dî
;

104 
cur_‹dî
 > 
‹dî
) {

105 
cur_‹dî
 --;

106 
size
 >>= 1;

107 
Page
 *
buddy
 = 
∑ge
 + 
size
;

108 
buddy
->
¥›îty
 = 
cur_‹dî
;

109 
	`SëPagePr›îty
(
buddy
);

110 
	`ƒ_‰ì
(
cur_‹dî
) ++;

111 
	`li°_add
(&
	`‰ì_li°
(
cur_‹dî
), &(
buddy
->
∑ge_lök
));

113 
	`CÀ¨PagePr›îty
(
∑ge
);

114  
∑ge
;

117  
NULL
;

118 
	}
}

121 
Page
 *

122 
	$buddy_Æloc_∑ges
(
size_t
 
n
) {

123 
	`as£π
(
n
 > 0);

124 
size_t
 
‹dî
 = 
	`gë‹dî
(
n
), 
‹dî_size
 = (1 << order);

125 
Page
 *
∑ge
 = 
	`buddy_Æloc_∑ges_sub
(
‹dî
);

126 i‡(
∑ge
 !
NULL
 && 
n
 !
‹dî_size
) {

127 
	`buddy_‰ì_∑ges
(
∑ge
 + 
n
, 
‹dî_size
 -Ç);

129  
∑ge
;

130 
	}
}

134 
ölöe
 
boﬁ


135 
	$∑ge_is_buddy
(
Page
 *
∑ge
, 
size_t
 
‹dî
, 
z⁄e_num
) {

136 i‡(
	`∑ge2gidx
(
∑ge
Ë< 
≈age
) {

137 i‡(
∑ge
->
z⁄e_num
 == zone_num) {

138  !
	`PageRe£rved
(
∑ge
Ë&& 
	`PagePr›îty
’ageË&&Öage->
¥›îty
 =
‹dî
;

142 
	}
}

145 
ölöe
 
µn_t


146 
	$∑ge2idx
(
Page
 *
∑ge
) {

147  
∑ge
 - 
z⁄es
[∑ge->
z⁄e_num
].
mem_ba£
;

148 
	}
}

151 
ölöe
 
Page
 *

152 
	$idx2∑ge
(
z⁄e_num
, 
µn_t
 
idx
) {

153  
z⁄es
[
z⁄e_num
].
mem_ba£
 + 
idx
;

154 
	}
}

159 
	$buddy_‰ì_∑ges_sub
(
Page
 *
ba£
, 
size_t
 
‹dî
) {

160 
µn_t
 
buddy_idx
, 
∑ge_idx
 = 
	`∑ge2idx
(
ba£
);

161 
	`as£π
((
∑ge_idx
 & ((1 << 
‹dî
) - 1)) == 0);

162 
Page
 *
p
 = 
ba£
;

163 ; 
p
 !
ba£
 + (1 << 
‹dî
);Ö ++) {

164 
	`as£π
(!
	`PageRe£rved
(
p
Ë&& !
	`PagePr›îty
(p));

165 
p
->
Êags
 = 0;

166 
	`£t_∑ge_ªf
(
p
, 0);

168 
z⁄e_num
 = 
ba£
->zone_num;

169 
‹dî
 < 
MAX_ORDER
) {

170 
buddy_idx
 = 
∑ge_idx
 ^ (1 << 
‹dî
);

171 
Page
 *
buddy
 = 
	`idx2∑ge
(
z⁄e_num
, 
buddy_idx
);

172 i‡(!
	`∑ge_is_buddy
(
buddy
, 
‹dî
, 
z⁄e_num
)) {

175 
	`ƒ_‰ì
(
‹dî
) --;

176 
	`li°_dñ
(&(
buddy
->
∑ge_lök
));

177 
	`CÀ¨PagePr›îty
(
buddy
);

178 
∑ge_idx
 &
buddy_idx
;

179 
‹dî
 ++;

181 
Page
 *
∑ge
 = 
	`idx2∑ge
(
z⁄e_num
, 
∑ge_idx
);

182 
∑ge
->
¥›îty
 = 
‹dî
;

183 
	`SëPagePr›îty
(
∑ge
);

184 
	`ƒ_‰ì
(
‹dî
) ++;

185 
	`li°_add
(&
	`‰ì_li°
(
‹dî
), &(
∑ge
->
∑ge_lök
));

186 
	}
}

190 
	$buddy_‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

191 
	`as£π
(
n
 > 0);

192 i‡(
n
 == 1) {

193 
	`buddy_‰ì_∑ges_sub
(
ba£
, 0);

196 
size_t
 
‹dî
 = 0, 
‹dî_size
 = 1;

197 
n
 >
‹dî_size
) {

198 
	`as£π
(
‹dî
 <
MAX_ORDER
);

199 i‡((
	`∑ge2idx
(
ba£
Ë& 
‹dî_size
) != 0) {

200 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

201 
ba£
 +
‹dî_size
;

202 
n
 -
‹dî_size
;

204 
‹dî
 ++;

205 
‹dî_size
 <<= 1;

207 
n
 != 0) {

208 
n
 < 
‹dî_size
) {

209 
‹dî
 --;

210 
‹dî_size
 >>= 1;

212 
	`buddy_‰ì_∑ges_sub
(
ba£
, 
‹dî
);

213 
ba£
 +
‹dî_size
;

214 
n
 -
‹dî_size
;

217 
	}
}

220 
size_t


221 
	$buddy_ƒ_‰ì_∑ges
() {

222 
size_t
 
ªt
 = 0, 
‹dî
 = 0;

223 ; 
‹dî
 <
MAX_ORDER
; order ++) {

224 
ªt
 +
	`ƒ_‰ì
(
‹dî
) * (1 << order);

226  
ªt
;

227 
	}
}

231 
	$buddy_check
() {

232 
i
;

233 
cou¡
 = 0, 
tŸÆ
 = 0;

234 
i
 = 0; i <
MAX_ORDER
; i ++) {

235 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

236 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

237 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

238 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

239 
cou¡
 ++, 
tŸÆ
 +(1 << 
i
);

242 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

244 
Page
 *
p0
 = 
	`Æloc_∑ges
(8), *
buddy
 =áŒoc_∑ges(8), *
p1
;

246 
	`as£π
(
p0
 !
NULL
);

247 
	`as£π
((
	`∑ge2idx
(
p0
) & 7) == 0);

248 
	`as£π
(!
	`PagePr›îty
(
p0
));

250 
li°_íåy_t
 
‰ì_li°s_°‹e
[
MAX_ORDER
 + 1];

251 
ƒ_‰ì_°‹e
[
MAX_ORDER
 + 1];

253 
i
 = 0; i <
MAX_ORDER
; i ++) {

254 
‰ì_li°s_°‹e
[
i
] = 
	`‰ì_li°
(i);

255 
	`li°_öô
(&
	`‰ì_li°
(
i
));

256 
	`as£π
(
	`li°_em±y
(&
	`‰ì_li°
(
i
)));

257 
ƒ_‰ì_°‹e
[
i
] = 
	`ƒ_‰ì
(i);

258 
	`ƒ_‰ì
(
i
) = 0;

261 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

262 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
);

263 
	`‰ì_∑ges
(
p0
, 8);

264 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 8);

265 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

266 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
 && !
	`PagePr›îty
’0Ë&& 
	`ƒ_‰ì_∑ges
() == 2);

268 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
 &&Ö1 =
p0
 + 6);

269 
	`as£π
(
	`ƒ_‰ì_∑ges
() == 0);

271 
	`‰ì_∑ges
(
p0
, 3);

272 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 1);

273 
	`as£π
(
	`PagePr›îty
(
p0
 + 2Ë&&Ö0[2].
¥›îty
 == 0);

275 
	`‰ì_∑ges
(
p0
 + 3, 3);

276 
	`‰ì_∑ges
(
p1
, 2);

278 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

280 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(6)Ë!
NULL
);

281 
	`as£π
((
p1
 = 
	`Æloc_∑ges
(2)Ë!
NULL
);

282 
	`‰ì_∑ges
(
p0
 + 4, 2);

283 
	`‰ì_∑ges
(
p1
, 2);

285 
p1
 = 
p0
 + 4;

286 
	`as£π
(
	`PagePr›îty
(
p1
Ë&&Ö1->
¥›îty
 == 2);

287 
	`‰ì_∑ges
(
p0
, 4);

288 
	`as£π
(
	`PagePr›îty
(
p0
Ë&&Ö0->
¥›îty
 == 3);

290 
	`as£π
((
p0
 = 
	`Æloc_∑ges
(8)Ë!
NULL
);

291 
	`as£π
(
	`Æloc_∑ge
(Ë=
NULL
 && 
	`ƒ_‰ì_∑ges
() == 0);

293 
i
 = 0; i <
MAX_ORDER
; i ++) {

294 
	`‰ì_li°
(
i
Ë
‰ì_li°s_°‹e
[i];

295 
	`ƒ_‰ì
(
i
Ë
ƒ_‰ì_°‹e
[i];

298 
	`‰ì_∑ges
(
p0
, 8);

299 
	`‰ì_∑ges
(
buddy
, 8);

301 
	`as£π
(
tŸÆ
 =
	`ƒ_‰ì_∑ges
());

303 
i
 = 0; i <
MAX_ORDER
; i ++) {

304 
li°_íåy_t
 *
li°
 = &
	`‰ì_li°
(
i
), *
À
 =Üist;

305 (
À
 = 
	`li°_√xt
÷e)Ë!
li°
) {

306 
Page
 *
p
 = 
	`À2∑ge
(
À
, 
∑ge_lök
);

307 
	`as£π
(
	`PagePr›îty
(
p
Ë&&Ö->
¥›îty
 =
i
);

308 
cou¡
 --, 
tŸÆ
 -(1 << 
i
);

311 
	`as£π
(
cou¡
 == 0);

312 
	`as£π
(
tŸÆ
 == 0);

313 
	}
}

316 c⁄° 
pmm_m™agî
 
	gbuddy_pmm_m™agî
 = {

317 .
«me
 = "buddy_pmm_manager",

318 .
	göô
 = 
buddy_öô
,

319 .
	göô_memm≠
 = 
buddy_öô_memm≠
,

320 .
	gÆloc_∑ges
 = 
buddy_Æloc_∑ges
,

321 .
	g‰ì_∑ges
 = 
buddy_‰ì_∑ges
,

322 .
	gƒ_‰ì_∑ges
 = 
buddy_ƒ_‰ì_∑ges
,

323 .
	gcheck
 = 
buddy_check
,

	@supervisor/mm/buddy_pmm.h

1 #i‚de‡
__KERN_MM_BUDDY_PMM_H__


2 
	#__KERN_MM_BUDDY_PMM_H__


	)

4 
	~<pmm.h
>

6 c⁄° 
pmm_m™agî
 
buddy_pmm_m™agî
;

	@supervisor/mm/pmm.c

1 
	~<ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<pmm.h
>

5 
	~<buddy_pmm.h
>

6 
	~<sync.h
>

7 
	~<îr‹.h
>

8 
	~<•ölock.h
>

11 
Page
 *
	g∑ges
;

13 
size_t
 
	g≈age
 = 0;

16 
pgd_t
 *
	gboŸ_pgdú
 = 
NULL
;

18 
uöçå_t
 
	gboŸ_¸3
;

21 c⁄° 
pmm_m™agî
 *
	gpmm_m™agî
;

22 
•ölock_s
 
	gpmm_lock
;

25 
Page
 *

26 
	$Æloc_∑ges
(
size_t
 
n
) {

27 
Page
 *
∑ge
;

28 
boﬁ
 
öå_Êag
;

29 
	`loˇl_öå_ßve
(
öå_Êag
);

30 
	`•ölock_acquúe
(&
pmm_lock
);

32 
∑ge
 = 
pmm_m™agî
->
	`Æloc_∑ges
(
n
);

34 
	`•ölock_ªÀa£
(&
pmm_lock
);

35 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

36  
∑ge
;

37 
	}
}

41 
	$‰ì_∑ges
(
Page
 *
ba£
, 
size_t
 
n
) {

42 
boﬁ
 
öå_Êag
;

43 
	`loˇl_öå_ßve
(
öå_Êag
);

44 
	`•ölock_acquúe
(&
pmm_lock
);

46 
pmm_m™agî
->
	`‰ì_∑ges
(
ba£
, 
n
);

48 
	`•ölock_ªÀa£
(&
pmm_lock
);

49 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

50 
	}
}

54 
size_t


55 
	$ƒ_‰ì_∑ges
() {

56 
size_t
 
ªt
;

57 
boﬁ
 
öå_Êag
;

58 
	`loˇl_öå_ßve
(
öå_Êag
);

59 
	`•ölock_acquúe
(&
pmm_lock
);

61 
ªt
 = 
pmm_m™agî
->
	`ƒ_‰ì_∑ges
();

63 
	`•ölock_ªÀa£
(&
pmm_lock
);

64 
	`loˇl_öå_ª°‹e
(
öå_Êag
);

65  
ªt
;

66 
	}
}

68 
Page
 *

69 
	$gë_∑ge
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 **
±ï_°‹e
) {

70 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 0);

71 i‡(
±ï_°‹e
 !
NULL
) {

72 *
±ï_°‹e
 = 
±ï
;

74 i‡(
±ï
 !
NULL
 && *±ï & 
PTE_P
) {

75  
	`∑2∑ge
(*
±ï
);

77  
NULL
;

78 
	}
}

80 
ölöe
 

81 
	$∑ge_ªmove_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
±e_t
 *
±ï
) {

82 i‡(*
±ï
 & 
PTE_P
) {

83 
Page
 *
∑ge
 = 
	`±e2∑ge
(*
±ï
);

84 i‡(
	`∑ge_ªf_dec
(
∑ge
) == 0) {

85 
	`‰ì_∑ge
(
∑ge
);

87 *
±ï
 = 0;

88 
	`éb_övÆid©e
(
pgdú
, 
œ
);

90 
	}
}

93 
	$∑ge_ªmove
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
) {

94 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 0);

95 i‡(
±ï
 !
NULL
) {

96 
	`∑ge_ªmove_±e
(
pgdú
, 
œ
, 
±ï
);

98 
	}
}

101 
	$∑ge_ö£π
(
pgd_t
 *
pgdú
, 
Page
 *
∑ge
, 
uöçå_t
 
œ
, 
uöt32_t
 
≥rm
) {

102 
±e_t
 *
±ï
 = 
	`gë_±e
(
pgdú
, 
œ
, 1);

103 i‡(
±ï
 =
NULL
) {

104  -
E_NO_MEM
;

106 
	`∑ge_ªf_öc
(
∑ge
);

107 i‡(*
±ï
 & 
PTE_P
) {

108 
Page
 *
p
 = 
	`±e2∑ge
(*
±ï
);

109 i‡(
p
 =
∑ge
) {

110 
	`∑ge_ªf_dec
(
∑ge
);

113 
	`∑ge_ªmove_±e
(
pgdú
, 
œ
, 
±ï
);

116 *
±ï
 = 
	`∑ge2∑
(
∑ge
Ë| 
PTE_P
 | 
≥rm
;

117 
	`éb_övÆid©e
(
pgdú
, 
œ
);

119 
	}
}

121 
pgd_t
 *

122 
	$gë_pgd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

123  &
pgdú
[
	`PGX
(
œ
)];

124 
	}
}

126 
pud_t
 *

127 
	$gë_pud
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

128 #i‡
PUXSHIFT
 =
PGXSHIFT


129  
	`gë_pgd
(
pgdú
, 
œ
, 
¸óã
);

131 
pgd_t
 *
pgdp
;

132 i‡((
pgdp
 = 
	`gë_pgd
(
pgdú
, 
œ
, 
¸óã
)Ë=
NULL
) {

133  
NULL
;

135 i‡(!(*
pgdp
 & 
PTE_P
)) {

136 
Page
 *
∑ge
;

137 i‡(!
¸óã
 || (
∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

138  
NULL
;

140 
	`£t_∑ge_ªf
(
∑ge
, 1);

141 
uöçå_t
 
∑
 = 
	`∑ge2∑
(
∑ge
);

142 
	`mem£t
(
	`VADDR_DIRECT
(
∑
), 0, 
PGSIZE
);

143 *
pgdp
 = 
∑
 | 
PTE_U
 | 
PTE_W
 | 
PTE_P
;

145  &((
pud_t
 *)
	`VADDR_DIRECT
(
	`PGD_ADDR
(*
pgdp
)))[
	`PUX
(
œ
)];

147 
	}
}

149 
pmd_t
 *

150 
	$gë_pmd
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

151 #i‡
PMXSHIFT
 =
PUXSHIFT


152  
	`gë_pud
(
pgdú
, 
œ
, 
¸óã
);

154 
pud_t
 *
pudp
;

155 i‡((
pudp
 = 
	`gë_pud
(
pgdú
, 
œ
, 
¸óã
)Ë=
NULL
) {

156  
NULL
;

158 i‡(!(*
pudp
 & 
PTE_P
)) {

159 
Page
 *
∑ge
;

160 i‡(!
¸óã
 || (
∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

161  
NULL
;

163 
	`£t_∑ge_ªf
(
∑ge
, 1);

164 
uöçå_t
 
∑
 = 
	`∑ge2∑
(
∑ge
);

165 
	`mem£t
(
	`VADDR_DIRECT
(
∑
), 0, 
PGSIZE
);

166 *
pudp
 = 
∑
 | 
PTE_U
 | 
PTE_W
 | 
PTE_P
;

168  &((
pmd_t
 *)
	`VADDR_DIRECT
(
	`PUD_ADDR
(*
pudp
)))[
	`PMX
(
œ
)];

170 
	}
}

172 
±e_t
 *

173 
	$gë_±e
(
pgd_t
 *
pgdú
, 
uöçå_t
 
œ
, 
boﬁ
 
¸óã
) {

174 #i‡
PTXSHIFT
 =
PMXSHIFT


175  
	`gë_pmd
(
pgdú
, 
œ
, 
¸óã
);

177 
pmd_t
 *
pmdp
;

178 i‡((
pmdp
 = 
	`gë_pmd
(
pgdú
, 
œ
, 
¸óã
)Ë=
NULL
) {

179  
NULL
;

182 i‡(!(*
pmdp
 & 
PTE_P
)) {

183 
Page
 *
∑ge
;

184 i‡(!
¸óã
 || (
∑ge
 = 
	`Æloc_∑ge
()Ë=
NULL
) {

185  
NULL
;

187 
	`£t_∑ge_ªf
(
∑ge
, 1);

188 
uöçå_t
 
∑
 = 
	`∑ge2∑
(
∑ge
);

189 
	`mem£t
(
	`VADDR_DIRECT
(
∑
), 0, 
PGSIZE
);

190 *
pmdp
 = 
∑
 | 
PTE_U
 | 
PTE_W
 | 
PTE_P
;

193  &((
±e_t
 *)
	`VADDR_DIRECT
(
	`PMD_ADDR
(*
pmdp
)))[
	`PTX
(
œ
)];

195 
	}
}

	@user-ucore/archive/badsegment.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

7 
	$maö
() {

8 
asm
 volatile("movw $0x28,%ax; movw %ax,%ds");

9 
	`∑nic
("FAIL: T.T\n");

10 
	}
}

	@user-ucore/archive/softint.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
asm
 volatile("int $14");

7 
	`∑nic
("FAIL: T.T\n");

8 
	}
}

	@user-ucore/badarg.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
pid
, 
exô_code
;

7 i‡((
pid
 = 
	`f‹k
()) == 0) {

8 
	`˝rötf
("fork ok.\n");

9 
i
;

10 
i
 = 0; i < 10; i ++) {

11 
	`yõld
();

13 
	`exô
(0xbeaf);

15 
	`as£π
(
pid
 > 0);

16 
	`as£π
(
	`waôpid
(-1, 
NULL
) != 0);

17 
	`as£π
(
	`waôpid
(
pid
, (*)0xC0000000) != 0);

18 
	`as£π
(
	`waôpid
(
pid
, &
exô_code
) == 0 &&Éxit_code == 0xbeaf);

19 
	`˝rötf
("badargÖass.\n");

21 
	}
}

	@user-ucore/badbrktest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<mÆloc.h
>

5 
	s¶Ÿ
 {

6 
	md©a
[4096];

7 
¶Ÿ
 *
	m√xt
;

11 
	$maö
() {

12 
pid
, 
exô_code
;

13 i‡((
pid
 = 
	`f‹k
()) == 0) {

14 
¶Ÿ
 *
tmp
, *
hód
 = 
NULL
;

15 
n
 = 0, 
m
 = 0;

16 
	`˝rötf
("Iám child.\n");

17 
	`˝rötf
("Iám goingÅoÉat outállÅhe mem, MU HA HA!!.\n");

18 (
tmp
 = (
¶Ÿ
 *)
	`mÆloc
((¶Ÿ))Ë!
NULL
) {

19 
n
 ++, 
m
 ++;

20 i‡(
m
 == 1000) {

21 
	`˝rötf
("Iáã %d slŸs.\n", 
m
);

22 
m
 = 0;

24 
tmp
->
√xt
 = 
hód
;

25 
hód
 = 
tmp
;

27 
	`exô
(0xdead);

29 
	`as£π
(
pid
 > 0);

30 
	`as£π
(
	`waôpid
(
pid
, &
exô_code
) == 0 &&Éxit_code != 0xdead);

31 
	`˝rötf
("child is killed by kernel,Én.\n");

33 
	`as£π
(
	`waô
() != 0);

34 
	`˝rötf
("badbrktestÖass.\n");

36 
	}
}

	@user-ucore/brkfreetest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<sysˇŒ.h
>

4 
	~<îr‹.h
>

7 
	$brk‰ìã°
() {

8 
uöçå_t
 
ﬁdbrk
 = 0;

9 
	`as£π
(
	`sys_brk
(&
ﬁdbrk
) == 0);

11 
uöçå_t
 
√wbrk
 = 
ﬁdbrk
 + 4096;

12 
	`as£π
(
	`sys_brk
(&
√wbrk
Ë=0 &&Çewbrk >
ﬁdbrk
 + 4096);

14 *
p
 = (*)
ﬁdbrk
;

15 
i
;

16 
i
 = 0; i < 4096; i ++) {

17 
p
[
i
] = ()(i * 31 + (i & 0xF));

19 
i
 = 0; i < 4096; i ++) {

20 
	`as£π
(
p
[
i
] == ()(i * 31 + (i & 0xF)));

22 
√wbrk
 = 
ﬁdbrk
;

23 
	`as£π
(
	`sys_brk
(&
√wbrk
Ë=0 &&Çewbrk =
ﬁdbrk
);

25 
	`˝rötf
("page fault!!\n");

26 
p
[0] = 0;

27 
	}
}

30 
	$maö
() {

31 
pid
, 
exô_code
;

32 i‡((
pid
 = 
	`f‹k
()) == 0) {

33 
	`brk‰ìã°
();

34 
	`exô
(0xdead);

36 
	`as£π
(
pid
 > 0);

37 
	`as£π
(
	`waôpid
(
pid
, &
exô_code
) == 0 &&Éxit_code != 0xdead);

38 
	`as£π
(
exô_code
 !-
E_PANIC
);

40 
	`˝rötf
("brkfreetestÖass.\n");

42 
	}
}

	@user-ucore/brktest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<mÆloc.h
>

5 
	s¶Ÿ
 {

6 
	md©a
[4096];

7 
¶Ÿ
 *
	m√xt
;

11 
	$maö
() {

12 
¶Ÿ
 *
tmp
, *
hód
 = 
NULL
;

13 
n
 = 0, 
rounds
 = 10;

14 
	`˝rötf
("Iám goingÅoÉat outállÅhe mem, MU HA HA!!.\n");

15 
rounds
 > 0 && (
tmp
 = (
¶Ÿ
 *)
	`mÆloc
((¶Ÿ))Ë!
NULL
) {

16 i‡((++ 
n
) % 1000 == 0) {

17 
	`˝rötf
("Iáã %d slŸs.\n", 
n
);

18 
rounds
 --;

20 
tmp
->
√xt
 = 
hód
;

21 
hód
 = 
tmp
;

22 
hód
->
d©a
[0] = ()
n
;

24 
	`˝rötf
("Iáã (©Üó°Ë%d byã mem‹y.\n", 
n
 * (
¶Ÿ
));

25 
	`¥öt_pgdú
();

27 
îr‹
 = 0;

28 
hód
 !
NULL
) {

29 i‡(
hód
->
d©a
[0] !()(
n
 --)) {

30 
îr‹
 ++;

32 
tmp
 = 
hód
->
√xt
;

33 
	`‰ì
(
hód
);

34 
hód
 = 
tmp
;

36 
	`˝rötf
("I fªêÆ»thêmem‹y.(%d)\n", 
îr‹
);

37 
	`˝rötf
("brktestÖass.\n");

39 
	}
}

	@user-ucore/buggy_event.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<uni°d.h
>

4 
	~<thªad.h
>

6 
uöçå_t
 
	gaddr
 = 0;

7 c⁄° 
size_t
 
	gsize
 = 4096 * 2;

9 
	gpid
;

12 
	$ã°
(*
¨g
) {

13 
	`as£π
(
addr
 !0 && 
	`munm≠
◊ddr, 
size
) == 0);

14 
	`£nd_evít
(
pid
, 1481);

15 
	`˝rötf
("child munmap ok.\n");

17 
	}
}

20 
	$maö
() {

21 
	`as£π
(
	`mm≠
(&
addr
, 
size
, 
MMAP_WRITE
) == 0);

23 
pid
 = 
	`gëpid
();

25 *
pidp
 = (*)
addr
, *
evíç
 = (*)(addr + 4096);

27 
thªad_t
 
tid
;

28 
	`as£π
(
	`thªad
(
ã°
, 
NULL
, &
tid
) == 0);

29 
	`as£π
(
	`ªcv_evít
(
pidp
, 
evíç
) != 0);

31 
	`thªad_waô
(&
tid
, 
NULL
);

32 
	`˝rötf
("buggy_eventÖass.\n");

34 
	}
}

	@user-ucore/buggy_wait.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<uni°d.h
>

4 
	~<thªad.h
>

6 
uöçå_t
 
	gaddr
 = 0;

7 c⁄° 
size_t
 
	gsize
 = 4096;

10 
	$ã°
(*
¨g
) {

11 
	`as£π
(
addr
 !0 && 
	`munm≠
◊ddr, 
size
) == 0);

12 
	`˝rötf
("child munmap ok.\n");

14 
	}
}

17 
	$maö
() {

18 
	`as£π
(
	`mm≠
(&
addr
, 
size
, 
MMAP_WRITE
) == 0);

20 *
exô_codï
 = (*)
addr
;

22 
thªad_t
 
tid
;

23 
	`as£π
(
	`thªad
(
ã°
, 
NULL
, &
tid
) == 0);

24 
	`as£π
(
	`thªad_waô
(&
tid
, 
exô_codï
) != 0);

26 
	`thªad_waô
(&
tid
, 
NULL
);

27 
	`˝rötf
("buggy_waitÖass.\n");

29 
	}
}

	@user-ucore/buggy_wait2.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<uni°d.h
>

5 
uöçå_t
 
	gaddr
 = 0;

6 c⁄° 
size_t
 
	gsize
 = 4096;

9 
	$maö
() {

10 
	`as£π
(
	`mm≠
(&
addr
, 
size
, 
MMAP_WRITE
) == 0);

12 *
exô_codï
 = (*)
addr
, 
pid
;

14 i‡((
pid
 = 
	`f‹k
()) == 0) {

15 
	`˝rötf
("child fork ok.\n");

16 
	`exô
(0);

19 
	`as£π
(
	`waôpid
(
pid
, 
exô_codï
) == 0 && *exit_codep == 0);

20 
	`˝rötf
("buggy_wait2Öass.\n");

22 
	}
}

	@user-ucore/cat.c

1 
	~<ulib.h
>

2 
	~<fûe.h
>

3 
	~<°©.h
>

4 
	~<uni°d.h
>

6 
	#BUFSIZE
 4096

	)

9 
	$ˇt
(
fd
) {

10 
buf„r
[
BUFSIZE
];

11 
ªt1
, 
ªt2
;

12 (
ªt1
 = 
	`ªad
(
fd
, 
buf„r
, (buffer))) > 0) {

13 i‡((
ªt2
 = 
	`wrôe
(1, 
buf„r
, 
ªt1
)) !=Ñet1) {

14  
ªt2
;

17  
ªt1
;

18 
	}
}

21 
	$maö
(
¨gc
, **
¨gv
) {

22 i‡(
¨gc
 == 1) {

23  
	`ˇt
(0);

26 
i
, 
ªt
;

27 
i
 = 1; i < 
¨gc
; i ++) {

28 i‡((
ªt
 = 
	`›í
(
¨gv
[
i
], 
O_RDONLY
)) < 0) {

29  
ªt
;

31 i‡((
ªt
 = 
	`ˇt
(ret)) != 0) {

32  
ªt
;

37 
	}
}

	@user-ucore/cowtest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<°rög.h
>

4 
	~<mÆloc.h
>

6 
	s¶Ÿ
 {

7 
	md©a
[4096];

8 
¶Ÿ
 *
	m√xt
;

11 
¶Ÿ
 *

12 
	$ex∑nd
(
num
) {

13 
¶Ÿ
 *
tmp
, *
hód
 = 
NULL
;

14 
num
 > 0) {

15 
tmp
 = (
¶Ÿ
 *)
	`mÆloc
((slot));

16 
tmp
->
√xt
 = 
hód
;

17 
hód
 = 
tmp
;

18 
num
 --;

20  
hód
;

21 
	}
}

23 
¶Ÿ
 *
	ghód
;

26 
	$swì≥r
() {

27 
¶Ÿ
 *
p
 = 
hód
;

28 
p
 !
NULL
) {

29 
p
->
d©a
[0] = ()0xEF;

30 
p
 =Ö->
√xt
;

32 
p
 = 
hód
;

33 
p
 !
NULL
) {

34 
	`as£π
(
p
->
d©a
[0] == ()0xEF);

35 
p
 =Ö->
√xt
;

37 
	`exô
(0xbeaf);

38 
	}
}

41 
	$maö
() {

42 
hód
 = 
	`ex∑nd
(6000);

44 
pid
, 
exô_code
;

45 i‡((
pid
 = 
	`f‹k
()) == 0) {

46 
	`swì≥r
();

48 
	`as£π
(
pid
 > 0);

49 
	`˝rötf
("fork ok.\n");

51 
	`as£π
(
	`waôpid
(
pid
, &
exô_code
) == 0 &&Éxit_code == 0xbeaf);

52 
	`˝rötf
("cowtestÖass.\n");

54 
	}
}

	@user-ucore/divzero.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

4 
	gzîo
;

7 
	$maö
() {

8 
	`˝rötf
("vÆuêi†%d.\n", 1 / 
zîo
);

9 
	`∑nic
("FAIL: T.T\n");

10 
	}
}

	@user-ucore/echo.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

7 
	$maö
(
¨gc
, **
¨gv
) {

8 
i
, 
nÊag
 = 0;

9 i‡(
¨gc
 > 1 && 
	`°rcmp
(
¨gv
[1], "-n") == 0) {

10 
nÊag
 = 1, 
¨gc
 --, 
¨gv
 ++;

12 
i
 = 1; i < 
¨gc
; i ++) {

13 i‡(
i
 > 1) {

14 
	`wrôe
(1, " ", 1);

16 
	`wrôe
(1, 
¨gv
[
i
], 
	`°æí
(argv[i]));

18 i‡(!
nÊag
) {

19 
	`wrôe
(1, "\n", 1);

22 
	}
}

	@user-ucore/eventtest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<îr‹.h
>

6 
	$ã°1
() {

7 
pid
, 
∑ª¡
 = 
	`gëpid
();

8 i‡((
pid
 = 
	`f‹k
()) == 0) {

9 
evít
, 
sum
 = 0;

10 
	`ªcv_evít
(&
pid
, &
evít
Ë=0 && 
∑ª¡
 ==Öid) {

11 i‡(
evít
 == -1) {

12 
	`˝rötf
("child1 Hmmm!\n");

13 
	`¶ìp
(100);

14 
	`˝rötf
("child1 quit\n");

15 
	`exô
(-1);

17 
	`˝rötf
("chûd1Ñe˚ivê%08x from %d\n", 
evít
, 
pid
);

18 
sum
 +
evít
;

20 
	`∑nic
("FAIL: T.T\n");

22 
	`as£π
(
pid
 > 0);

23 
i
 = 10;

24 
	`£nd_evít
(
pid
, 
i
) == 0) {

25 
i
 --;

26 
	`¶ìp
(50);

28 
	`˝rötf
("test1Öass.\n");

29 
	}
}

32 
	$ã°2
() {

33 
pid
;

34 i‡((
pid
 = 
	`f‹k
()) == 0) {

35 
	`˝rötf
("child2 is spinning...\n");

38 
	`as£π
(
pid
 > 0);

39 i‡(
	`£nd_evít_timeout
(
pid
, 0xbì, 100Ë=-
E_TIMEOUT
) {

40 
	`˝rötf
("test2Öass.\n");

42 
	`kûl
(
pid
);

43 
	}
}

46 
	$ã°3
() {

47 
pid
;

48 i‡((
pid
 = 
	`f‹k
()) == 0) {

49 
evít
;

50 i‡(
	`ªcv_evít_timeout
(
NULL
, &
evít
, 100Ë=-
E_TIMEOUT
) {

51 
	`˝rötf
("test3Öass.\n");

53 
	`exô
(0);

55 
	`as£π
(
pid
 > 0);

56 
	`as£π
(
	`waôpid
(
pid
, 
NULL
) == 0);

57 
	}
}

60 
	$maö
() {

61 
	`ã°1
();

62 
	`ã°2
();

63 
	`ã°3
();

64 
	`˝rötf
("eventtestÖass.\n");

66 
	}
}

	@user-ucore/exit.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

4 
	gmagic
 = -0x10384;

7 
	$maö
() {

8 
pid
, 
code
;

9 
	`˝rötf
("IámÅheÖarent. ForkingÅhe child...\n");

10 i‡((
pid
 = 
	`f‹k
()) == 0) {

11 
	`˝rötf
("IámÅhe child.\n");

12 
	`yõld
();

13 
	`yõld
();

14 
	`yõld
();

15 
	`yõld
();

16 
	`yõld
();

17 
	`yõld
();

18 
	`yõld
();

19 
	`exô
(
magic
);

21 
	`as£π
(
pid
 > 0);

22 
	`˝rötf
("IámÅheÖarent, waitingÇow..\n");

24 
	`as£π
(
	`waôpid
(
pid
, &
code
Ë=0 && codê=
magic
);

25 
	`as£π
(
	`waôpid
(
pid
, &
code
Ë!0 && 
	`waô
() != 0);

26 
	`˝rötf
("waôpid %d ok.\n", 
pid
);

28 
	`˝rötf
("exitÖass.\n");

30 
	}
}

	@user-ucore/faultread.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
	`˝rötf
("IÑead %8x from 0.\n", *(*)0);

7 
	`∑nic
("FAIL: T.T\n");

8 
	}
}

	@user-ucore/faultreadkernel.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
	`˝rötf
("IÑead %016llx from 0xffff9f8000000000!\n", *(*)0xffff9f8000000000);

7 
	`∑nic
("FAIL: T.T\n");

8 
	}
}

	@user-ucore/forktest.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

4 c⁄° 
	gmax_chûd
 = 32;

7 
	$maö
() {

8 
n
, 
pid
;

9 
n
 = 0;Ç < 
max_chûd
;Ç ++) {

10 i‡((
pid
 = 
	`f‹k
()) == 0) {

11 
	`˝rötf
("Iám chûd %d\n", 
n
);

12 
	`exô
(0);

14 
	`as£π
(
pid
 > 0);

17 i‡(
n
 > 
max_chûd
) {

18 
	`∑nic
("f‹k cœimedÅÿw‹k %dÅimes!\n", 
n
);

21 ; 
n
 > 0;Ç --) {

22 i‡(
	`waô
() != 0) {

23 
	`∑nic
("wait stoppedÉarly\n");

27 i‡(
	`waô
() == 0) {

28 
	`∑nic
("wait gotÅoo many\n");

31 
	`˝rötf
("forktestÖass.\n");

33 
	}
}

	@user-ucore/forktree.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	#DEPTH
 4

	)

7 
f‹kåì
(c⁄° *
cur
);

10 
	$f‹kchûd
(c⁄° *
cur
, 
bønch
) {

11 
nxt
[
DEPTH
 + 1];

13 i‡(
	`°æí
(
cur
Ë>
DEPTH
)

16 
	`¢¥ötf
(
nxt
, 
DEPTH
 + 1, "%s%c", 
cur
, 
bønch
);

17 i‡(
	`f‹k
() == 0) {

18 
	`f‹kåì
(
nxt
);

19 
	`yõld
();

20 
	`exô
(0);

22 
	}
}

25 
	$f‹kåì
(c⁄° *
cur
) {

26 
	`˝rötf
("%04x: Iám '%s'\n", 
	`gëpid
(), 
cur
);

28 
	`f‹kchûd
(
cur
, '0');

29 
	`f‹kchûd
(
cur
, '1');

30 
	}
}

33 
	$maö
() {

34 
	`f‹kåì
("");

36 
	}
}

	@user-ucore/fread_test.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

7 
	$maö
() {

9 
c
;

10 
	`˝rötf
("nowÑeading...\n");

12 
ªt
 = 
	`ªad
(0, &
c
, (c));

13 
	`as£π
(
ªt
 == 1);

14 
	`˝rötf
("ty≥ [%03d] %c.\n", 
c
, c);

15 } 
c
 != 3);

17 
	}
}

	@user-ucore/fread_test2.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

7 
	$maö
() {

8 
pid
, 
ªt
;

9 i‡((
pid
 = 
	`f‹k
()) == 0) {

11 
c
;

12 
ªt
 = 
	`ªad
(0, &
c
, (c));

13 
	`as£π
(
ªt
 == 1);

16 
	`as£π
(
pid
 > 0);

18 
	`¶ìp
(100);

19 
	`kûl
(
pid
);

21 
	`as£π
(
	`waôpid
(
pid
, &
ªt
) == 0 &&Ñet != 0);

22 
	`˝rötf
("fread_test2Öass.\n");

24 
	}
}

	@user-ucore/fwrite_test.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°©.h
>

5 
	~<fûe.h
>

8 
	$ã°fd
(c⁄° *
«me
, 
fd
) {

9 
°©
 
__°©
, *stat = &__stat;

10 
ªt
 = 
	`f°©
(
fd
, 
°©
);

11 
	`as£π
(
ªt
 == 0);

12 
	`¥öt_°©
(
«me
, 
fd
, 
°©
);

13 
	}
}

16 
	$maö
() {

17 
fd
 = 
	`dup
(1);

18 
	`as£π
(
fd
 >= 0);

20 
	`ã°fd
("stdin", 0);

21 
	`ã°fd
("stdout", 1);

22 
	`ã°fd
("dup: stdout", 
fd
);

24 
size
 = 1024, 
Àn
 = 0;

25 
buf
[
size
];

26 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
size
 -Üen, "Hello world!!.\n");

27 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
size
 -Üí, "IámÖro˚s†%d.\n", 
	`gëpid
());

28 
	`wrôe
(
fd
, 
buf
, 
Àn
);

30 
ªt
;

31 (
ªt
 = 
	`dup
(
fd
)) >= 0)

34 
	`˛o£
(
fd
);

35 
Àn
 = 
	`¢¥ötf
(
buf
, 
size
, "FAIL: T.T\n");

36 
	`wrôe
(
fd
, 
buf
, 
Àn
);

37 
	`˝rötf
("dup fd ok.\n");

39 
pid
;

40 i‡((
pid
 = 
	`f‹k
()) == 0) {

41 
	`¶ìp
(10);

42 
Àn
 = 
	`¢¥ötf
(
buf
, 
size
, "fork fd ok.\n");

43 
ªt
 = 
	`wrôe
(1, 
buf
, 
Àn
);

44 
	`as£π
(
ªt
 =
Àn
);

45 
	`exô
(0);

47 
	`as£π
(
pid
 > 0);

48 
	`as£π
(
	`waôpid
(
pid
, &
ªt
) == 0 &&Ñet == 0);

49 
	`˝rötf
("fwrite_testÖass.\n");

51 
	}
}

	@user-ucore/hello.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
	`˝rötf
("Hello world!!.\n");

7 
	`˝rötf
("IámÖro˚s†%d.\n", 
	`gëpid
());

8 
	`˝rötf
("helloÖass.\n");

10 
	}
}

	@user-ucore/hello2.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
	`Ârötf
(1, "Hello world!!.\n");

7 
	`Ârötf
(1, "IámÖro˚s†%d.\n", 
	`gëpid
());

8 
	`Ârötf
(1, "hello2Öass.\n");

10 
	}
}

	@user-ucore/insmod.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mod.h
>

5 
	~<fûe.h
>

6 
	~<mÆloc.h
>

7 
	~<uni°d.h
>

9 
	#MX_MOD_PATH_LEN
 1024

	)

10 
	g∑th
[
MX_MOD_PATH_LEN
];

12 
	#KERN_MODULE_PREFIX
 "/kîn-moduÀ/"

	)

13 
	#KERN_MODULE_SUFFIX
 ".ko"

	)

15 
	#KERN_MODULE_PREFIX_LEN
 13

	)

16 
	#KERN_MODULE_ADDITIONAL_LEN
 16

	)

18 
	#KERN_MODULE_DEP
 
KERN_MODULE_PREFIX
"mod.dï"

	)

20 
	#USAGE
 "ösmod <mod-«me>\n"

	)

21 
	#LOADING
 "lﬂdög moduÀ "

	)

23 
	$ö_sh‹t
(c⁄° *
«me
, 
size
) {

24  
size
 < 3 || 
	`°rcmp
(
KERN_MODULE_SUFFIX
, &
«me
[size - 3]) != 0;

25 
	}
}

27 * 
	$gë_sh‹t_«me
(*
«me
) {

28 
«mñí
 = 
	`°æí
(
«me
);

29 i‡(
	`ö_sh‹t
(
«me
, 
«mñí
)) {

30  
«me
;

32 
size
 = 
«mñí
 - 
KERN_MODULE_ADDITIONAL_LEN
;

33 * 
ªt
 = (*)
	`mÆloc
(
size
 + 1);

34 
	`mem˝y
(
ªt
, &
«me
[
KERN_MODULE_PREFIX_LEN
], 
size
);

35 
ªt
[
size
] = '\0';

36  
ªt
;

37 
	}
}

39 
	$lﬂd
(c⁄° *
«me
, 
size
) {

40 i‡(
	`ö_sh‹t
(
«me
, 
size
)) {

41 
	`¢¥ötf
(
∑th
, 
size
 + 
KERN_MODULE_ADDITIONAL_LEN
 + 1, 
KERN_MODULE_PREFIX
"%s"
KERN_MODULE_SUFFIX
, 
«me
);

42 
	`wrôe
(1, 
LOADING
, 
	`°æí
(LOADING));

43 
	`wrôe
(1, 
∑th
, 
	`°æí
(path));

44 
	`wrôe
(1, "\n", 1);

45 
	`öô_moduÀ
(
∑th
);

47 
	`öô_moduÀ
(
«me
);

49 
	}
}

55 
	$h™dÀ_dï
(c⁄° *
löe
, c⁄° *
«me
) {

56 
«me_Àn
 = 
	`°æí
(
«me
);

57 
löe_Àn
 = 
	`°æí
(
löe
);

58 i‡(
löe_Àn
 < 
«me_Àn
 + 1) {

61 
i
;

62 
i
 = 0; i < 
«me_Àn
; i++) {

63 i‡(
«me
[
i
] !
löe
[i]) {

67 i‡(
löe
[
«me_Àn
] != ':') {

70 
	`˝rötf
("[ II ] moduÀ dïídícyÑuÀ m©ch: %s\n", 
löe
);

71 
j
 = 0;

72 
i
 = 
«me_Àn
 + 1; i < 
löe_Àn
; ) {

73 i‡(
löe
[
i
] == ' ') {

74 
i
++;

77 
j
 = 
i
 + 1; j < 
löe_Àn
; j++) {

78 i‡(
löe
[
j
] == ' ') {

82 
	`lﬂd
(&
löe
[
i
], 
j
 - i);

83 
i
 = 
j
 + 1;

86 
	}
}

88 
	$lﬂd_dï
(c⁄° *
«me
) {

89 
buf„r
[1024];

90 
fd
 = 
	`›í
(
KERN_MODULE_DEP
, 
O_RDONLY
);

91 
s
 = 0;

92 
p
 = 0;

93 
c
;

94 (
s
 = 
	`ªad
(
fd
, &
c
, ())) >= 0) {

95 i‡(
s
 =0 || 
c
 == '\n' || c == '\r') {

96 
buf„r
[
p
] = '\0';

97 i‡(
p
 > 0) {

98 
h™dÀd
 = 
	`h™dÀ_dï
(
buf„r
, 
«me
);

99 i‡(
h™dÀd
) {

103 
p
 = 0;

105 
buf„r
[
p
++] = 
c
;

107 i‡(
s
 == 0) {

111 
	}
}

114 
	$maö
(
¨gc
, **
¨gv
) {

115 i‡(
¨gc
 <= 1) {

116 
	`wrôe
(1, 
USAGE
, 
	`°æí
(USAGE));

119 * 
sh‹t_«me
 = 
	`gë_sh‹t_«me
(
¨gv
[1]);

120 
	`lﬂd_dï
(
sh‹t_«me
);

121 
	`lﬂd
(
¨gv
[1], 
	`°æí
(argv[1]));

123 
	}
}

	@user-ucore/link.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<dú.h
>

5 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

8 
	$ußge
() {

9 
	`¥ötf
("usage:Üink file1 file2\n");

10 
	}
}

13 
	$maö
(
¨gc
, **
¨gv
) {

14 i‡(
¨gc
 != 3) {

15 
	`ußge
();

18  
	`lök
(
¨gv
[1],árgv[2]);

19 
	}
}

	@user-ucore/ls.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<dú.h
>

5 
	~<fûe.h
>

6 
	~<°©.h
>

7 
	~<dúít.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

11 
	#BUFSIZE
 4096

	)

14 
	$gëmode
(
uöt32_t
 
°_mode
) {

15 
mode
 = '?';

16 i‡(
	`S_ISREG
(
°_mode
)Ë
mode
 = '-';

17 i‡(
	`S_ISDIR
(
°_mode
)Ë
mode
 = 'd';

18 i‡(
	`S_ISLNK
(
°_mode
)Ë
mode
 = 'l';

19 i‡(
	`S_ISCHR
(
°_mode
)Ë
mode
 = 'c';

20 i‡(
	`S_ISBLK
(
°_mode
)Ë
mode
 = 'b';

21  
mode
;

22 
	}
}

25 
	$gë°©
(c⁄° *
«me
, 
°©
 *stat) {

26 
fd
, 
ªt
;

27 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0) {

28  
fd
;

30 
ªt
 = 
	`f°©
(
fd
, 
°©
);

31 
	`˛o£
(
fd
);

32  
ªt
;

33 
	}
}

36 
	$ls°©
(
°©
 *°©, c⁄° *
fûíame
) {

37 
	`¥ötf
(" [%c]", 
	`gëmode
(
°©
->
°_mode
));

38 
	`¥ötf
(" %3d(h)", 
°©
->
°_∆öks
);

39 
	`¥ötf
(" %8d(b)", 
°©
->
°_blocks
);

40 
	`¥ötf
(" %8d(s)", 
°©
->
°_size
);

41 
	`¥ötf
(" %s\n", 
fûíame
);

42 
	}
}

45 
	$lsdú
(c⁄° *
∑th
) {

46 
°©
 
__°©
, *stat = &__stat;

47 
cwdbuf
[
BUFSIZE
];

48 
ªt
;

49 i‡((
ªt
 = 
	`gëcwd
(
cwdbuf
, 
BUFSIZE
)) != 0) {

50  
ªt
;

52 i‡((
ªt
 = 
	`chdú
(
∑th
)) != 0) {

53  
ªt
;

55 
DIR
 *
dúp
 = 
	`›ídú
(".");

56 i‡(
dúp
 =
NULL
) {

59 
dúít
 *
dúíç
;

60 (
dúíç
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

61 i‡((
ªt
 = 
	`gë°©
(
dúíç
->
«me
, 
°©
)) != 0) {

62 
Áûed
;

64 
	`ls°©
(
°©
, 
dúíç
->
«me
);

66 
	`˛o£dú
(
dúp
);

67  
	`chdú
(
cwdbuf
);

69 
Áûed
:

70 
	`˛o£dú
(
dúp
);

71 
	`chdú
(
cwdbuf
);

72  
ªt
;

73 
	}
}

76 
	$ls
(c⁄° *
∑th
) {

77 
°©
 
__°©
, *stat = &__stat;

78 
ªt
, 
ty≥
;

79 i‡((
ªt
 = 
	`gë°©
(
∑th
, 
°©
)) != 0) {

80  
ªt
;

83 c⁄° *
fûëy≥
[] = {

91 
	`gëmode
(
°©
->
°_mode
)) {

92 '0': 
ty≥
 = 0; ;

93 'd': 
ty≥
 = 1; ;

94 'l': 
ty≥
 = 2; ;

95 'c': 
ty≥
 = 3; ;

96 'b': 
ty≥
 = 4; ;

97 : 
ty≥
 = 5; ;

100 
	`¥ötf
(" @ i†%s", 
fûëy≥
[
ty≥
]);

101 
	`¥ötf
(" %d(hlöks)", 
°©
->
°_∆öks
);

102 
	`¥ötf
(" %d(blocks)", 
°©
->
°_blocks
);

103 
	`¥ötf
(" %d(byãsË: @'%s'\n", 
°©
->
°_size
, 
∑th
);

104 i‡(
	`S_ISDIR
(
°©
->
°_mode
)) {

105  
	`lsdú
(
∑th
);

108 
	}
}

111 
	$maö
(
¨gc
, **
¨gv
) {

112 i‡(
¨gc
 == 1) {

113  
	`ls
(".");

116 
i
, 
ªt
;

117 
i
 = 1; i < 
¨gc
; i ++) {

118 i‡((
ªt
 = 
	`ls
(
¨gv
[
i
])) != 0) {

119  
ªt
;

124 
	}
}

	@user-ucore/lsmod.c

1 
	~<sysˇŒ.h
>

4 
	$maö
(
¨gc
, **
¨gv
) {

5 
	`sys_li°_moduÀ
();

7 
	}
}

	@user-ucore/matrix.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°dlib.h
>

6 
	#MATSIZE
 10

	)

8 
	gm©a
[
MATSIZE
][MATSIZE];

9 
	gm©b
[
MATSIZE
][MATSIZE];

10 
	gm©c
[
MATSIZE
][MATSIZE];

13 
	$w‹k
(
times
) {

14 
i
, 
j
, 
k
, 
size
 = 
MATSIZE
;

15 
i
 = 0; i < 
size
; i ++) {

16 
j
 = 0; j < 
size
; j ++) {

17 
m©a
[
i
][
j
] = 
m©b
[i][j] = 1;

21 
	`yõld
();

23 
	`˝rötf
("pid %d i†ru¬ög (%dÅimes)!.\n", 
	`gëpid
(), 
times
);

25 
times
 -- > 0) {

26 
i
 = 0; i < 
size
; i ++) {

27 
j
 = 0; j < 
size
; j ++) {

28 
m©c
[
i
][
j
] = 0;

29 
k
 = 0; k < 
size
; k ++) {

30 
m©c
[
i
][
j
] +
m©a
[i][
k
] * 
m©b
[k][j];

34 
i
 = 0; i < 
size
; i ++) {

35 
j
 = 0; j < 
size
; j ++) {

36 
m©a
[
i
][
j
] = 
m©b
[i][j] = 
m©c
[i][j];

40 
	`˝rötf
("pid %d d⁄e!.\n", 
	`gëpid
());

41 
	`exô
(0);

42 
	}
}

44 c⁄° 
	gtŸÆ
 = 20;

47 
	$maö
() {

48 
pids
[
tŸÆ
];

49 
	`mem£t
(
pids
, 0, (pids));

51 
i
;

52 
i
 = 0; i < 
tŸÆ
; i ++) {

53 i‡((
pids
[
i
] = 
	`f‹k
()) == 0) {

54 
	`§™d
(
i
 * i);

55 
times
 = ((()
	`ønd
()Ë% 
tŸÆ
);

56 
times
 = (times *Åimes + 10) * 100;

57 
	`w‹k
(
times
);

59 i‡(
pids
[
i
] < 0) {

60 
Áûed
;

64 
	`˝rötf
("fork ok.\n");

66 
i
 = 0; i < 
tŸÆ
; i ++) {

67 i‡(
	`waô
() != 0) {

68 
	`˝rötf
("wait failed.\n");

69 
Áûed
;

73 
	`˝rötf
("matrixÖass.\n");

76 
Áûed
:

77 
i
 = 0; i < 
tŸÆ
; i ++) {

78 i‡(
pids
[
i
] > 0) {

79 
	`kûl
(
pids
[
i
]);

82 
	`∑nic
("FAIL: T.T\n");

83 
	}
}

	@user-ucore/mboxmap.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mboxbuf.h
>

5 
	~<mÆloc.h
>

6 
	~<°dlib.h
>

8 c⁄° 
	gmod
 = 23;

9 c⁄° 
	gmax_d©a
 = 2048;

10 c⁄° 
	gmax_¶Ÿs
 = 1024;

13 
	$£nd
(
id
, *
d©a
, 
size_t
 
Àn
) {

14 
mboxbuf
 
buf
;

15 
buf
.
d©a
 = d©a, buf.
Àn
 =Üen;

16  
	`mbox_£nd
(
id
, &
buf
);

17 
	}
}

20 
	$ªcv
(
id
, *
d©a
, 
size_t
 
size
, size_à*
À≈
) {

21 
mboxbuf
 
buf
;

22 
buf
.
d©a
 = d©a, buf.
size
 = size;

23 
ªt
;

24 i‡((
ªt
 = 
	`mbox_ªcv
(
id
, &
buf
)) == 0) {

25 *
À≈
 = 
buf
.
Àn
;

27  
ªt
;

28 
	}
}

31 
	$fûãr_maö
(*
d©a
, 
mbox_d©a
, 
mbox
[]) {

32 
i
, 
cou¡
[
mod
];

33 
size_t
 
size
 = 
max_d©a
 * (), 
Àn
;

34 
	`ªcv
(
mbox_d©a
, 
d©a
, 
size
, &
Àn
) == 0) {

35 
	`as£π
((
Àn
 % ()) == 0);

36 
	`mem£t
(
cou¡
, 0, (count));

37 
Àn
 /= ();

38 
i
 = 0; i < 
Àn
; i ++) {

39 
cou¡
[
d©a
[
i
] % 
mod
] ++;

41 
i
 = 0; i < 
mod
; i ++) {

42 
	`£nd
(
mbox
[
i
], 
cou¡
 + i, ());

45 
	}
}

48 
	$£À˘_maö
(
mbox
, 
pid
) {

49 
size_t
 
Àn
;

50 
cou¡
 = 0, 
™s
;

51 
	`ªcv
(
mbox
, &
™s
, (), &
Àn
) == 0) {

52 
	`as£π
(
Àn
 == ());

53 
cou¡
 +
™s
;

55 
	`£nd_evít
(
pid
, 
cou¡
);

56 
	}
}

59 
	$waô_f‹_em±y
(
mbox
) {

60 
mboxöfo
 
öfo
;

62 i‡(
	`mbox_öfo
(
mbox
, &
öfo
) != 0) {

65 i‡(
öfo
.
¶Ÿs
 == 0) {

68 
	`¶ìp
(10);

70 
	}
}

73 
	$waô_f‹_quô
(
mbox_d©a
, 
cou¡
[], 
mbox
[], 
pids
[]) {

74 
i
, 
j
, 
pid
, 
evít
, 
™s
[
mod
];

75 
	`mem£t
(
™s
, 0, (ans));

76 
i
 = 0; i < 
mod
; i ++) {

77 i‡(
	`ªcv_evít
(&
pid
, &
evít
) != 0) {

80 
j
 = 0; j < 
mod
; j ++) {

81 i‡(
pids
[
j
] =
pid
) {

82 
™s
[
j
] = 
evít
;

83 
	`˝rötf
("--Ñecv cou¡ %02d: %08d\n", 
j
, 
evít
);

88 
îr
 = 0;

89 
i
 = 0; i < 
mod
; i ++) {

90 i‡(
cou¡
[
i
] !
™s
[i]) {

91 
îr
 ++;

92 
	`˝rötf
("wr⁄g: %d, %d, %d.\n", 
i
, 
cou¡
[i], 
™s
[i]);

95  
îr
;

96 
	}
}

99 
	$maö
() {

100 
i
, 
j
, 
k
, 
mbox
[
mod
], 
cou¡
[mod];

101 
i
 = 0; i < 
mod
; i ++) {

102 
mbox
[
i
] = 
	`mbox_öô
(
max_¶Ÿs
);

103 
	`as£π
(
mbox
[
i
] >= 0);

106 
mbox_d©a
 = 
	`mbox_öô
(
max_¶Ÿs
);

107 
	`as£π
(
mbox_d©a
 >= 0);

109 
size_t
 
Àn
, 
size
;

110 
Àn
 = 
size
 = 
max_d©a
 * ();

112 *
d©a
 = 
	`mÆloc
(
size
);

113 
	`as£π
(
d©a
 !
NULL
);

115 
s_pids
[
mod
], 
this
 = 
	`gëpid
();

116 
	`mem£t
(
s_pids
, 0, (s_pids));

118 
i
 = 0; i < 
mod
; i ++) {

119 i‡((
s_pids
[
i
] = 
	`f‹k
()) == 0) {

120 
	`£À˘_maö
(
mbox
[
i
], 
this
);

121 
	`exô
(0);

123 i‡(
s_pids
[
i
] < 0) {

124 
kûl_£À˘‹
;

128 
f_pids
[100], 
f_pids_num
 = (f_pids) / (f_pids[0]);

129 
	`mem£t
(
f_pids
, 0, (f_pids));

131 
i
 = 0; i < 
f_pids_num
; i ++) {

132 i‡((
f_pids
[
i
] = 
	`f‹k
()) == 0) {

133 
	`fûãr_maö
(
d©a
, 
mbox_d©a
, 
mbox
);

134 
	`exô
(0);

136 i‡(
f_pids
[
i
] < 0) {

137 
kûl_fûãr
;

141 
	`˝rötf
("fork children ok.\n");

143 
	`mem£t
(
cou¡
, 0, (count));

145 
	`§™d
(1481);

146 
i
 = 0; i < 10; i ++) {

147 
j
 = 0; j < 512; j ++) {

148 
k
 = 0; k < 
max_d©a
; k ++) {

149 
d©a
[
k
] = 
	`ønd
();

150 
cou¡
[
d©a
[
k
] % 
mod
] ++;

152 i‡(
	`£nd
(
mbox_d©a
, 
d©a
, 
Àn
) != 0) {

153 
	`˝rötf
("send dataÉrror!!\n");

154 
kûl_fûãr
;

157 
	`˝rötf
("round %d\n", 
i
);

160 
i
 = 0; i < 
mod
; i ++) {

161 
	`˝rötf
("-- síd cou¡ %02d: %08d\n", 
i
, 
cou¡
[i]);

164 i‡(
	`waô_f‹_em±y
(
mbox_d©a
) == 0) {

165 
	`mbox_‰ì
(
mbox_d©a
);

166 
exô_code
, 
îr
 = 0;

167 
i
 = 0; i < 
f_pids_num
; i ++) {

168 
	`waôpid
(
f_pids
[
i
], &
exô_code
);

170 
i
 = 0; i < 
mod
; i ++) {

171 i‡(
	`waô_f‹_em±y
(
mbox
[
i
]) != 0) {

172 
îr
 ++;

175 i‡(
îr
 == 0) {

176 
	`˝rötf
("wait children ok.\n");

177 
i
 = 0; i < 
mod
; i ++) {

178 
	`mbox_‰ì
(
mbox
[
i
]);

180 i‡(
	`waô_f‹_quô
(
mbox_d©a
, 
cou¡
, 
mbox
, 
s_pids
) == 0) {

181 
	`˝rötf
("mboxmapÖass.\n");

187 
kûl_fûãr
:

188 
i
 = 0; i < 
f_pids_num
; i ++) {

189 i‡(
f_pids
[
i
] > 0) {

190 
	`kûl
(
f_pids
[
i
]);

194 
kûl_£À˘‹
:

195 
i
 = 0; i < 
mod
; i ++) {

196 i‡(
s_pids
[
i
] > 0) {

197 
	`kûl
(
s_pids
[
i
]);

200 
	`∑nic
("FAIL: T.T\n");

201 
	}
}

	@user-ucore/mboxtest.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<ulib.h
>

4 
	~<mboxbuf.h
>

5 
	~<mÆloc.h
>

6 
	~<îr‹.h
>

8 c⁄° 
	gmbox_¶Ÿs
 = 128;

11 
	$mbox_ã°
() {

12 
mbox_id
 = 
	`mbox_öô
(1);

13 
	`as£π
(
mbox_id
 >= 0);

15 
mboxbuf
 
__buf
, *
buf
 = &__buf;

16 
buf
->
size
 = 4096;

17 
buf
->
Àn
 = buf->
size
;

18 
buf
->
d©a
 = (*)0xF0000000;

19 
	`as£π
(
	`mbox_£nd
(
mbox_id
, 
buf
) < 0);

21 
buf
->
d©a
 = 
	`mÆloc
((Ë* buf->
size
);

22 
	`as£π
(
buf
->
d©a
 !
NULL
);

24 *
d©a
 = (*)(
buf
->data);

25 
i
;

26 
i
 = 0; i < 
buf
->
size
; i ++) {

27 
d©a
[
i
] = ()i;

29 
buf
->
Àn
 = buf->
size
;

31 
timeout
 = 100, 
ßved_m£c
 = 
	`gëtime_m£c
();

33 
	`as£π
(
	`mbox_£nd
(
mbox_id
, 
buf
) == 0);

34 
	`as£π
(
	`mbox_£nd_timeout
(
mbox_id
, 
buf
, 
timeout
Ë=-
E_TIMEOUT
);

35 
	`as£π
(()(
	`gëtime_m£c
(Ë- 
ßved_m£c
Ë>
timeout
);

37 
size_t
 
ßved_size
 = 
buf
->
size
;

38 
buf
->
size
 = 100;

39 
	`as£π
(
	`mbox_ªcv
(
mbox_id
, 
buf
) != 0);

41 
buf
->
size
 = 
ßved_size
 - 1;

42 
	`as£π
(
	`mbox_ªcv
(
mbox_id
, 
buf
) != 0);

44 
buf
->
size
 = 
ßved_size
;

45 
	`mem£t
(
buf
->
d©a
, 0, (Ë* buf->
size
);

46 
	`as£π
(
	`mbox_ªcv
(
mbox_id
, 
buf
) == 0);

48 
	`as£π
(
buf
->
size
 =
ßved_size
 && buf->
Àn
 == saved_size);

49 
d©a
 = (*)(
buf
->data);

50 
i
 = 0; i < 
buf
->
size
; i ++) {

51 
	`as£π
(
d©a
[
i
] == ()i);

54 
ßved_m£c
 = 
	`gëtime_m£c
();

55 
	`as£π
(
	`mbox_ªcv_timeout
(
mbox_id
, 
buf
, 
timeout
Ë=-
E_TIMEOUT
);

56 
	`as£π
(()(
	`gëtime_m£c
(Ë- 
ßved_m£c
Ë>
timeout
);

58 
	`as£π
(
	`mbox_‰ì
(
mbox_id
) == 0);

59 
	`as£π
(
	`mbox_£nd
(
mbox_id
, 
buf
) != 0);

61 
	`exô
(0);

62 
	}
}

65 
	$maö
() {

66 
pid
, 
ªt
;

67 i‡((
pid
 = 
	`f‹k
()) == 0) {

68 
	`mbox_ã°
();

70 
	`as£π
(
pid
 > 0 && 
	`waôpid
’id, &
ªt
) == 0 &&Ñet == 0);

71 
	`˝rötf
("mboxtestÖass.\n");

73 
	}
}

	@user-ucore/mkdir.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<dú.h
>

5 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

8 
	$ußge
() {

9 
	`¥ötf
("usage: mkdir dir [...]\n");

10 
	}
}

13 
	$maö
(
¨gc
, **
¨gv
) {

14 i‡(
¨gc
 == 1) {

15 
	`ußge
();

19 
i
, 
ªt
;

20 
i
 = 1; i < 
¨gc
; i ++) {

21 i‡((
ªt
 = 
	`mkdú
(
¨gv
[
i
])) != 0) {

22  
ªt
;

27 
	}
}

	@user-ucore/mmaptest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<uni°d.h
>

6 
	$maö
() {

7 c⁄° 
size
 = 4096;

8 *
m≠≥d
[10] = {0};

10 
uöçå_t
 
addr
 = 0;

12 
	`as£π
(
	`mm≠
(
NULL
, 
size
, 0) != 0 && mmap((*)0xC0000000, size, 0) != 0);

14 
i
;

15 
i
 = 0; i < 10; i ++) {

16 
	`as£π
(
	`mm≠
(&
addr
, 
size
, 
MMAP_WRITE
) == 0 &&áddr != 0);

17 
m≠≥d
[
i
] = (*)
addr
,áddr = 0;

19 
	`˝rötf
("mmap step1 ok.\n");

21 
i
 = 0; i < 10; i ++) {

22 
	`as£π
(
	`munm≠
((
uöçå_t
)
m≠≥d
[
i
], 
size
) == 0);

25 
	`˝rötf
("munmap step1 ok.\n");

27 
addr
 = 0x80000000;

28 
	`as£π
(
	`mm≠
(&
addr
, 
size
, 
MMAP_WRITE
) == 0);

29 
m≠≥d
[0] = (*)
addr
;

31 
addr
 = 0x80001000;

32 
	`as£π
(
	`mm≠
(&
addr
, 
size
, 
MMAP_WRITE
) == 0);

33 
m≠≥d
[1] = (*)
addr
;

35 
	`˝rötf
("mmap step2 ok.\n");

37 
addr
 = 0x80001800;

38 
	`as£π
(
	`mm≠
(&
addr
, 100, 0) != 0);

40 
	`˝rötf
("mmap step3 ok.\n");

42 
	`as£π
(
	`munm≠
((
uöçå_t
)
m≠≥d
[0], 
size
 * 2 + 100) == 0);

44 
	`˝rötf
("mumap step2 ok.\n");

46 
addr
 = 0;

47 
	`as£π
(
	`mm≠
(&
addr
, 128, 
MMAP_WRITE
) == 0 &&áddr != 0);

48 
m≠≥d
[0] = (*)
addr
;

50 *
buf„r
 = 
m≠≥d
[0];

51 
i
 = 0; i < 128; i ++) {

52 
buf„r
[
i
] = ()(i * i);

55 
i
 = 0; i < 128; i ++) {

56 
	`as£π
(
buf„r
[
i
] == ()(i * i));

59 
	`˝rötf
("mmaptestÖass.\n");

61 
	}
}

	@user-ucore/nulldevfs_test.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

5 
	~<uni°d.h
>

9 
	$maö
() {

10 
fd
=0,
ªt
;

11 
buf
[5];

12 
buf
[0]=buf[1]=buf[2]=buf[3]='a';buf[4]='\n';

13 
fd
=
	`›í
("nuŒ:",
O_RDWR
);

14 
	`˝rötf
("NULL fd i†%d\n",
fd
);

15 
ªt
=
	`wrôe
(
fd
,"hello",5);

16 
	`˝rötf
("wrôê%dÅÿNULL\n",
ªt
);

17 
ªt
=
	`ªad
(
fd
,
buf
,5);

18 
	`˝rötf
("ªad %d from NULL, bu‡i†%s\n",
ªt
,
buf
);

20 
	`Ârötf
(1, "Hello world!!.\n");

21 
	`Ârötf
(1, "IámÖro˚s†%d.\n", 
	`gëpid
());

22 
	`Ârötf
(1, "hello2Öass.\n");

24 
	}
}

	@user-ucore/pgdir.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
	`˝rötf
("Iám %d,Öröàpgdú.\n", 
	`gëpid
());

7 
	`¥öt_pgdú
();

8 
	`˝rötf
("pgdirÖass.\n");

10 
	}
}

	@user-ucore/pipetest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

5 
	~<°©.h
>

6 
	~<uni°d.h
>

7 
	~<mÆloc.h
>

9 
	gbuf
[4096];

12 
	$ã°1
() {

13 
__fd
[2];

14 
	`as£π
(
	`pùe
(
NULL
Ë!0 &&Öùe(
__fd
) == 0);

16 
i
, 
pid
, 
fd
, 
Àn
;

17 i‡((
pid
 = 
	`f‹k
()) == 0) {

18 
fd
 = 
__fd
[1];

19 
i
 = 0; i < 10; i ++) {

20 
	`yõld
();

22 i‡(
	`wrôe
(
fd
, "A", 1) == 1) {

23 
	`˝rötf
("child write ok\n");

25 
	`exô
(0);

27 
	`as£π
(
pid
 > 0);

29 
fd
 = 
__fd
[0], 
	`˛o£
(__fd[1]);

30 
	`as£π
((
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf))) == 1 && buf[0] == 'A');

31 
	`as£π
(
	`waô
(Ë=0 && 
	`˛o£
(
fd
) == 0);

33 
	`˝rötf
("parentÑead ok\n");

34 
	`˝rötf
("pipetest step1Öass.\n");

35 
	}
}

38 
	$ã°2
() {

39 
__fd
[2], 
fd
, 
ªt
;

40 
	`as£π
(
	`pùe
(
NULL
Ë!0 &&Öùe(
__fd
) == 0);

42 
°©
 
__°©
, *stat = &__stat;

44 
fd
 = 
__fd
[0], 
ªt
 = 
	`f°©
(fd, 
°©
);

45 
	`as£π
(
ªt
 == 0);

46 
	`¥öt_°©
("pùe0", 
fd
, 
°©
);

47 
	`as£π
(
	`S_ISCHR
(
°©
->
°_mode
));

49 
fd
 = 
__fd
[1], 
ªt
 = 
	`f°©
(fd, 
°©
);

50 
	`as£π
(
ªt
 == 0);

51 
	`¥öt_°©
("pùe1", 
fd
, 
°©
);

52 
	`as£π
(
	`S_ISCHR
(
°©
->
°_mode
));

54 
	`˛o£
(
__fd
[0]), close(__fd[1]);

55 
	`˝rötf
("pipetest step2Öass.\n");

56 
	}
}

59 
	$ã°3
() {

60 
__fd
[2];

61 
	`as£π
(
	`pùe
(
NULL
Ë!0 &&Öùe(
__fd
) == 0);

63 *
msg
 = "Hello world!!.";

64 
size_t
 
Àn
 = 
	`°æí
(
msg
);

66 
pid
, 
fd
, 
ªt
;

67 i‡((
pid
 = 
	`f‹k
()) == 0) {

68 
fd
 = 
__fd
[1];

69 
	`as£π
(
	`ªad
(
fd
, 
buf
, (buf)) < 0);

70 
ªt
 = 
	`wrôe
(
fd
, 
msg
, 
Àn
);

71 
	`as£π
(
ªt
 =
Àn
);

72 
	`exô
(0);

74 
	`as£π
(
pid
 > 0);

76 
fd
 = 
__fd
[0], 
	`˛o£
(__fd[1]);

77 
	`as£π
(
	`wrôe
(
fd
, 
msg
, 
Àn
) < 0);

79 
tŸÆ
 = 0;

80 (
ªt
 = 
	`ªad
(
fd
, 
buf
 + 
tŸÆ
, (buf) -Åotal)) > 0) {

81 
tŸÆ
 +
ªt
;

83 
buf
[
tŸÆ
] = '\0';

84 
	`as£π
(
tŸÆ
 =
Àn
 && 
	`°rcmp
(
buf
, 
msg
) == 0);

85 
	`as£π
(
	`waô
(Ë=0 && 
	`˛o£
(
fd
) == 0);

86 
	`˝rötf
("pipetest step3Öass.\n");

87 
	}
}

90 
	$ã°4
() {

91 c⁄° *
«me
 = "test";

92 
fd
, 
__fd
;

93 
fd
 = 
__fd
 = 
	`mkfifo
(
«me
, 
O_CREAT
 | 
O_RDONLY
);

94 
	`as£π
(
fd
 >= 0);

96 
fd
 = 
	`mkfifo
(
«me
, 
O_CREAT
 | 
O_RDONLY
);

97 
	`as£π
(
fd
 >0 && 
	`˛o£
(fd) == 0);

99 
	`as£π
(
	`mkfifo
(
«me
, 
O_CREAT
 | 
O_EXCL
 | 
O_RDONLY
) < 0);

100 
	`as£π
(
	`mkfifo
(
«me
, 
O_WRONLY
) < 0);

102 
fd
 = 
	`mkfifo
(
«me
, 
O_CREAT
 | 
O_WRONLY
 | 
O_EXCL
);

103 
	`as£π
(
fd
 >0 && 
	`˛o£
(fd) == 0);

104 
	`as£π
(
	`ªad
(
__fd
, 
buf
, (buf)Ë=0 && 
	`˛o£
(__fd) == 0);

106 
fd
 = 
	`mkfifo
(
«me
, 
O_CREAT
 | 
O_RDONLY
 | 
O_EXCL
);

107 
	`as£π
(
fd
 >= 0);

109 
pid
, 
ªt
;

110 i‡((
pid
 = 
	`f‹k
()) == 0) {

111 
fd
 = 
	`mkfifo
(
«me
, 
O_CREAT
 | 
O_WRONLY
 | 
O_EXCL
);

112 
	`as£π
(
fd
 >= 0);

113 
	`mem£t
(
buf
, 'A', (buf));

114 
ªt
 = 
	`wrôe
(
fd
, 
buf
, (buf));

115 
	`as£π
(
ªt
 =(
buf
));

116 
	`exô
(0);

118 
	`as£π
(
pid
 > 0);

120 
size_t
 
tŸÆ
 = 0;

121 (
ªt
 = 
	`ªad
(
fd
, 
buf
 + 
tŸÆ
, (buf) -Åotal)) > 0) {

122 
tŸÆ
 +
ªt
;

124 
	`as£π
(
tŸÆ
 =(
buf
));

126 
i
;

127 
i
 = 0; i < 
tŸÆ
; i ++) {

128 
	`as£π
(
buf
[
i
] == 'A');

130 
	`˝rötf
("pipetest step4Öass.\n");

131 
	}
}

134 
	$maö
() {

135 
	`ã°1
();

136 
	`ã°2
();

137 
	`ã°3
();

138 
	`ã°4
();

139 
	`˝rötf
("pipetestÖass.\n");

141 
	}
}

	@user-ucore/pipetest2.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

5 
	~<mÆloc.h
>

6 
	~<°rög.h
>

7 
	~<thªad.h
>

8 
	~<uni°d.h
>

10 
	g__fd
[2], 
	gfd
;

12 
thªad_t
 
	gtids
[10];

13 
	gtŸÆ
 = (
tids
) / (tids[0]);

16 
	$thªad_maö
(*
¨g
) {

17 
id
 = ()
¨g
;

18 
	`˝rötf
("thi†i†%d\n", 
id
);

20 
size_t
 
n
 = 10000;

21 *
buf
 = 
	`mÆloc
((Ë* 
n
);

22 i‡(
buf
 =
NULL
) {

26 
	`mem£t
(
buf
, ()
id
, 
n
);

28 
i
, 
rounds
 = 20, 
ªt
;

29 
i
 = 0; i < 
rounds
; i ++) {

30 i‡((
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
n
)) < 0 ||Ñet !=Ç) {

31 
	`˝rötf
("pipe is closed,ÅooÉarly.\n");

34 i‡(
id
 == 0) {

35 
	`˝rötf
("£nd %d/%d\n", 
i
, 
rounds
);

39 
	}
}

42 
	$¥o˚ss_maö
() {

43 
cou¡s
[
tŸÆ
], 
i
, 
ªt
;

44 
i
 = 0; i < 
tŸÆ
; i ++) {

45 
cou¡s
[
i
] = 0;

48 
buf
[128];

49 
size_t
 
n
 = (
buf
);

52 i‡((
ªt
 = 
	`ªad
(
fd
, 
buf
, 
n
)) <= 0) {

55 
i
 = 0; i < 
ªt
; i ++) {

56 
cou¡s
[(()
buf
[
i
]Ë% 
tŸÆ
] ++;

59 
i
 = 0; i < 
tŸÆ
; i ++) {

60 
	`˝rötf
("%dÑód†%d\n", 
i
, 
cou¡s
[i]);

62 
	`exô
(0);

63 
	}
}

66 
	$maö
() {

67 
pid
, 
i
;

68 
	`as£π
(
	`pùe
(
__fd
) == 0);

70 i‡((
pid
 = 
	`f‹k
()) == 0) {

71 
fd
 = 
__fd
[0], 
	`˛o£
(__fd[1]);

72 
	`¥o˚ss_maö
();

74 
	`as£π
(
pid
 > 0);

76 
fd
 = 
__fd
[1], 
	`˛o£
(__fd[0]);

77 
	`mem£t
(
tids
, 0, (
thªad_t
Ë* 
tŸÆ
);

78 
i
 = 0; i < 
tŸÆ
; i ++) {

79 i‡(
	`thªad
(
thªad_maö
, (*)()
i
, 
tids
 + i) != 0) {

80 
Áûed
;

84 
exô_code
;

85 
i
 = 0; i < 
tŸÆ
; i ++) {

86 i‡(
	`thªad_waô
(
tids
 + 
i
, &
exô_code
) != 0 ||Éxit_code != 0) {

87 
Áûed
;

91 
i
 = 0; i < 
tŸÆ
; i ++) {

92 
	`yõld
();

95 
	`˛o£
(
__fd
[0]), close(__fd[1]);

96 
	`as£π
(
	`waôpid
(
pid
, &
exô_code
) == 0 &&Éxit_code == 0);

97 
	`˝rötf
("pipetest2Öass.\n");

100 
Áûed
:

101 
i
 = 0; i < 
tŸÆ
; i ++) {

102 i‡(
tids
[
i
].
pid
 > 0) {

103 
	`kûl
(
tids
[
i
].
pid
);

106 
	`kûl
(
pid
);

107 
	`∑nic
("FAIL: T.T\n");

108 
	}
}

	@user-ucore/primer.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<mÆloc.h
>

5 
	~<lock.h
>

7 
	gtŸÆ
 = 1000;

9 *
	gnŸe
;

10 
lock_t
 *
	glocks
;

13 
	$ß„_shmem_mÆloc
(
size_t
 
size
) {

14 *
ªt
;

15 i‡((
ªt
 = 
	`shmem_mÆloc
(
size
)Ë=
NULL
) {

16 
	`exô
(-0xdead);

18  
ªt
;

19 
	}
}

22 
	$ªad
(
ödex
) {

23 
lock_t
 *
l
 = 
locks
 + 
ödex
;

24 
ªt
;

25 
åy_agaö
:

26 
	`lock
(
l
);

27 i‡((
ªt
 = 
nŸe
[
ödex
]) > 0) {

28 
nŸe
[
ödex
] = 0;

30 
	`u∆ock
(
l
);

31 i‡(
ªt
 == 0) {

32 
	`yõld
();

33 
åy_agaö
;

35  
ªt
;

36 
	}
}

39 
	$wrôe
(
ödex
, 
vÆ
, 
boﬁ
 
f‹˚
) {

40 
lock_t
 *
l
 = 
locks
 + 
ödex
;

41 
ªt
;

42 
åy_agaö
:

43 
	`lock
(
l
);

44 i‡((
ªt
 = 
nŸe
[
ödex
]) >= 0) {

45 i‡(
ªt
 =0 || 
f‹˚
) {

46 
nŸe
[
ödex
] = 
vÆ
;

49 
	`u∆ock
(
l
);

50 i‡(
ªt
 > 0 && !
f‹˚
) {

51 
	`yõld
();

52 
åy_agaö
;

54  (
ªt
 > 0) ? 0 :Ñet;

55 
	}
}

58 
	$¥imïroc
() {

59 
ödex
 = 0, 
this
, 
num
, 
pid
 = 0;

60 
t›
:

61 
this
 = 
	`ªad
(
ödex
);

62 
	`˝rötf
("%d i†®¥imî.\n", 
this
);

64 (
num
 = 
	`ªad
(
ödex
)) > 0) {

65 i‡((
num
 % 
this
) == 0) {

68 i‡(
pid
 == 0) {

69 i‡(
ödex
 + 1 =
tŸÆ
 || (
pid
 = 
	`f‹k
()) < 0) {

70 
out
;

72 i‡(
pid
 == 0) {

73 
ödex
 ++;

74 
t›
;

77 i‡(
	`wrôe
(
ödex
 + 1, 
num
, 0) != 0) {

78 
out
;

82 
out
:

83 
	`˝rötf
("[%04d] %d quô.\n", 
	`gëpid
(), 
ödex
);

84 
	`wrôe
(
ödex
, -1, 1);

85 
	}
}

88 
	$maö
() {

89 
nŸe
 = 
	`ß„_shmem_mÆloc
(
tŸÆ
 * ());

90 
locks
 = 
	`ß„_shmem_mÆloc
(
tŸÆ
 * (
lock_t
));

92 
i
, 
pid
;

93 
i
 = 0; i < 
tŸÆ
; i ++) {

94 
nŸe
[
i
] = 0;

95 
	`lock_öô
(
locks
 + 
i
);

98 
	`˝rötf
("sharemem init ok.\n");

100 
time
 = 
	`gëtime_m£c
();

102 i‡((
pid
 = 
	`f‹k
()) == 0) {

103 
	`¥imïroc
();

104 
	`exô
(0);

106 
	`as£π
(
pid
 > 0);

108 
i
 = 2; ; i ++) {

109 i‡(
	`wrôe
(0, 
i
, 0) != 0) {

114 
	`˝rötf
("u£ %d m£cs.\n", 
	`gëtime_m£c
(Ë- 
time
);

115 
	`˝rötf
("primerÖass.\n");

117 
	}
}

	@user-ucore/primer2.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<mÆloc.h
>

5 
	~<°rög.h
>

7 c⁄° 
	gtŸÆ
 = 1000;

8 *
	gnŸe
;

11 
	$ß„_shmem_mÆloc
(
size_t
 
size
) {

12 *
ªt
;

13 i‡((
ªt
 = 
	`shmem_mÆloc
(
size
)Ë=
NULL
) {

14 
	`exô
(-0xdead);

16  
ªt
;

17 
	}
}

20 
	$__ªad
(
ödex
, 
£m_t
 
£m
[]) {

21 
ªt
;

22 i‡(
	`£m_waô
(
£m
[0]) != 0) {

25 
ªt
 = 
nŸe
[
ödex
];

26 i‡(
	`£m_po°
(
£m
[1]) != 0) {

29  
ªt
;

30 
	}
}

33 
	$__wrôe
(
ödex
, 
£m_t
 
£m
[], 
vÆ
) {

34 
ªt
;

35 i‡(
	`£m_waô
(
£m
[1]) != 0) {

38 
ªt
 = 
nŸe
[
ödex
],ÇŸe[ödex] = 
vÆ
;

39 i‡(
	`£m_po°
(
£m
[0]) != 0) {

42  (
ªt
 >= 0) ? 0 : -1;

43 
	}
}

46 
	$ªad_™d_quô
(
ödex
, 
£m_t
 
£m
[]) {

47 
	`£m_waô
(
£m
[0]);

48 
nŸe
[
ödex
] = -1;

49 
	`£m_po°
(
£m
[1]);

50 
	}
}

53 
	$¥imïroc
(
£m_t
 
£m
[]) {

54 
ödex
 = 0, 
this
, 
num
, 
pid
 = 0;

55 
£m_t
 
√xt_£m
[2];

56 
t›
:

57 
this
 = 
	`__ªad
(
ödex
, 
£m
);

58 
	`˝rötf
("%d i†®¥imî.\n", 
this
);

60 (
num
 = 
	`__ªad
(
ödex
, 
£m
)) > 0) {

61 i‡((
num
 % 
this
) == 0) {

64 i‡(
pid
 == 0) {

65 i‡(
ödex
 + 1 =
tŸÆ
) {

66 
out
;

68 i‡((
√xt_£m
[0] = 
	`£m_öô
(0)) < 0 || (next_sem[1] = sem_init(1)) < 0) {

69 
out
;

71 i‡((
pid
 = 
	`f‹k
()) == 0) {

72 
£m
[0] = 
√xt_£m
[0];

73 
£m
[1] = 
√xt_£m
[1];

74 
ödex
 ++;

75 
t›
;

77 i‡(
pid
 < 0) {

78 
out
;

81 i‡(
	`__wrôe
(
ödex
 + 1, 
√xt_£m
, 
num
) != 0) {

82 
out
;

86 
out
:

87 
	`˝rötf
("[%04d] %d quô.\n", 
	`gëpid
(), 
ödex
);

88 
	`ªad_™d_quô
(
ödex
, 
£m
);

89 
	}
}

92 
	$maö
() {

93 
nŸe
 = 
	`ß„_shmem_mÆloc
(
tŸÆ
 * ());

94 
	`mem£t
(
nŸe
, 0, (Ë* 
tŸÆ
);

95 
	`˝rötf
("sharemem init ok.\n");

97 
£m_t
 
£m
[2];

98 
	`as£π
((
£m
[0] = 
	`£m_öô
(0)) > 0 && (sem[1] = sem_init(1)) > 0);

100 
time
 = 
	`gëtime_m£c
();

102 
pid
;

103 i‡((
pid
 = 
	`f‹k
()) == 0) {

104 
	`¥imïroc
(
£m
);

105 
	`exô
(0);

107 
	`as£π
(
pid
 > 0);

109 
i
;

110 
i
 = 2; ; i ++) {

111 i‡(
	`__wrôe
(0, 
£m
, 
i
) != 0) {

116 
	`˝rötf
("u£ %d m£cs.\n", 
	`gëtime_m£c
(Ë- 
time
);

117 
	`˝rötf
("primer2Öass.\n");

119 
	}
}

	@user-ucore/primer3.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<°rög.h
>

6 c⁄° 
	gtŸÆ
 = 1000;

9 
	$¥imïroc
() {

10 
ödex
 = 0, 
this
, 
num
, 
pid
 = 0;

11 
t›
:

12 
	`ªcv_evít
(
NULL
, &
this
);

13 
	`˝rötf
("%d i†®¥imî.\n", 
this
);

15 
	`ªcv_evít
(
NULL
, &
num
) == 0) {

16 i‡((
num
 % 
this
) == 0) {

19 i‡(
pid
 == 0) {

20 i‡(
ödex
 + 1 =
tŸÆ
) {

21 
out
;

23 i‡((
pid
 = 
	`f‹k
()) == 0) {

24 
ödex
 ++;

25 
t›
;

27 i‡(
pid
 < 0) {

28 
out
;

31 i‡(
	`£nd_evít
(
pid
, 
num
) != 0) {

32 
out
;

35 
out
:

36 
	`˝rötf
("[%04d] %d quô.\n", 
	`gëpid
(), 
ödex
);

37 
	}
}

40 
	$maö
() {

41 
i
, 
pid
;

42 
time
 = 
	`gëtime_m£c
();

43 i‡((
pid
 = 
	`f‹k
()) == 0) {

44 
	`¥imïroc
();

45 
	`exô
(0);

47 
	`as£π
(
pid
 > 0);

49 
i
 = 2; ; i ++) {

50 i‡(
	`£nd_evít
(
pid
, 
i
) != 0) {

54 
	`˝rötf
("u£ %d m£cs.\n", 
	`gëtime_m£c
(Ë- 
time
);

55 
	`˝rötf
("primer3Öass.\n");

57 
	}
}

	@user-ucore/pwd.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<dú.h
>

5 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

6 
	#BUFSIZE
 4096

	)

9 
	$maö
(
¨gc
, **
¨gv
) {

10 
ªt
;

11 
cwdbuf
[
BUFSIZE
];

12 i‡((
ªt
 = 
	`gëcwd
(
cwdbuf
, (cwdbuf))) != 0) {

13  
ªt
;

15 
	`¥ötf
("%s\n", 
cwdbuf
);

17 
	}
}

	@user-ucore/rename.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<dú.h
>

5 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

8 
	$ußge
() {

9 
	`¥ötf
("usage:Ñename fromÅo\n");

10 
	}
}

13 
	$maö
(
¨gc
, **
¨gv
) {

14 i‡(
¨gc
 != 3) {

15 
	`ußge
();

18  
	`ª«me
(
¨gv
[1],árgv[2]);

19 
	}
}

	@user-ucore/rmmod.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mod.h
>

5 
	~<fûe.h
>

7 
	#MX_MOD_PATH_LEN
 1024

	)

8 
	g∑th
[
MX_MOD_PATH_LEN
];

10 
	#KERN_MODULE_PREFIX
 "/kîn-moduÀ/"

	)

11 
	#KERN_MODULE_SUFFIX
 ".ko"

	)

13 
	#KERN_MODULE_ADDITIONAL_LEN
 16

	)

15 
	#USAGE
 "rmmod <mod-«me>\n"

	)

16 
	#LOADING
 "ªmovög moduÀ "

	)

19 
	$maö
(
¨gc
, **
¨gv
) {

20 i‡(
¨gc
 <= 1) {

21 
	`wrôe
(1, 
USAGE
, 
	`°æí
(USAGE));

24 
size
 = 
	`°æí
(
¨gv
[1]);

25 * 
∑øm
 = 
¨gv
[1];

26 i‡(
size
 < 3 || 
	`°rcmp
(
KERN_MODULE_SUFFIX
, &
∑øm
[size - 3]) != 0) {

27 
	`¢¥ötf
(
∑th
, 
size
 + 
KERN_MODULE_ADDITIONAL_LEN
 + 1, 
KERN_MODULE_PREFIX
"%s"
KERN_MODULE_SUFFIX
, 
∑øm
);

28 
	`wrôe
(1, 
LOADING
, 
	`°æí
(LOADING));

29 
	`wrôe
(1, 
∑th
, 
	`°æí
(path));

30 
	`wrôe
(1, "\n", 1);

31 
	`˛ónup_moduÀ
(
∑th
);

33 
	`˛ónup_moduÀ
(
∑øm
);

36 
	}
}

	@user-ucore/robot.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<fûe.h
>

6 
	$maö
() {

7 
buf„r
[1024];

9 
ªt
;

10 i‡((
ªt
 = 
	`ªad
(0, 
buf„r
, (buffer))) <= 0) {

11  
ªt
;

13 
	`wrôe
(1, 
buf„r
, 
ªt
);

15 
	}
}

	@user-ucore/sem_rf.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mÆloc.h
>

6 
	#s˝rötf
(...) \

8 
	`£m_waô
(
£m_c⁄sﬁe
); \

9 
	`˝rötf
(
__VA_ARGS__
); \

10 
	`£m_po°
(
£m_c⁄sﬁe
); \

11 } 0)

	)

14 
£m_t
 
	g£m_cou¡
, 
	g£m_wrôe
, 
	g£m_c⁄sﬁe
;

15 *
	gpCou¡
;

18 
	$Áûed
() {

19 
	`˝rötf
("FAIL: T.T\n");

20 
	`exô
(-1);

21 
	}
}

24 
	$check_£m_vÆue_sub
(
£m_t
 
£m_id
, 
vÆue
) {

25 
vÆue_°‹e
;

26 i‡(
	`£m_gë_vÆue
(
£m_id
, &
vÆue_°‹e
Ë!0 || vÆue_°‹ê!
vÆue
) {

30 
	}
}

33 
	$check_£m_vÆue
() {

34 i‡(
	`check_£m_vÆue_sub
(
£m_cou¡
, 1) != 0

35 || 
	`check_£m_vÆue_sub
(
£m_wrôe
, 1) != 0) {

36 
	`Áûed
();

38 i‡(*
pCou¡
 != 0) {

39 
	`Áûed
();

41 
	}
}

44 
	$öô
() {

45 i‡((
£m_c⁄sﬁe
 = 
	`£m_öô
(1)) < 0) {

46 
	`Áûed
();

48 i‡((
£m_cou¡
 = 
	`£m_öô
(1)Ë< 0 || (
£m_wrôe
 = sem_init(1)) < 0) {

49 
	`Áûed
();

51 i‡((
pCou¡
 = 
	`shmem_mÆloc
(())Ë=
NULL
) {

52 
	`Áûed
();

54 *
pCou¡
 = 0;

55 
	}
}

58 
	$ªadî
(
id
, 
time
) {

59 
	`s˝rötf
("ªadî %d: (pid:%dË¨rive\n", 
id
, 
	`gëpid
());

60 
	`£m_waô
(
£m_cou¡
);

61 i‡(*
pCou¡
 == 0) {

62 
	`£m_waô
(
£m_wrôe
);

64 (*
pCou¡
) ++;

65 
	`£m_po°
(
£m_cou¡
);

67 
	`s˝rötf
("Ñódî_r‡%d: (pid:%dË°¨à%d\n", 
id
, 
	`gëpid
(), 
time
);

68 
	`¶ìp
(
time
);

69 
	`s˝rötf
("Ñódî_r‡%d: (pid:%dËíd %d\n", 
id
, 
	`gëpid
(), 
time
);

71 
	`£m_waô
(
£m_cou¡
);

72 (*
pCou¡
) --;

73 i‡(*
pCou¡
 == 0) {

74 
	`£m_po°
(
£m_wrôe
);

76 
	`£m_po°
(
£m_cou¡
);

77 
	}
}

80 
	$wrôî
(
id
, 
time
) {

81 
	`s˝rötf
("wrôî %d: (pid:%dË¨rive\n", 
id
, 
	`gëpid
());

82 
	`£m_waô
(
£m_wrôe
);

84 
	`s˝rötf
(" wrôî_r‡%d: (pid:%dË°¨à%d\n", 
id
, 
	`gëpid
(), 
time
);

85 
	`¶ìp
(
time
);

86 
	`s˝rötf
(" wrôî_r‡%d: (pid:%dËíd %d\n", 
id
, 
	`gëpid
(), 
time
);

88 
	`£m_po°
(
£m_wrôe
);

89 
	}
}

92 
	$ªad_ã°_rf
() {

93 
	`˝rötf
("---------------------------------\n");

94 
	`check_£m_vÆue
();

95 
	`§™d
(0);

96 
i
, 
tŸÆ
 = 10, 
time
;

97 
i
 = 0; i < 
tŸÆ
; i ++) {

98 
time
 = ()
	`ønd
() % 3;

99 i‡(
	`f‹k
() == 0) {

100 
	`yõld
();

101 
	`ªadî
(
i
, 100 + 
time
 * 10);

102 
	`exô
(0);

106 
i
 = 0; i < 
tŸÆ
; i ++) {

107 i‡(
	`waô
() != 0) {

108 
	`Áûed
();

111 
	`˝rötf
("read_test_rf ok.\n");

112 
	}
}

115 
	$wrôe_ã°_rf
() {

116 
	`˝rötf
("---------------------------------\n");

117 
	`check_£m_vÆue
();

118 
	`§™d
(100);

119 
i
, 
tŸÆ
 = 10, 
time
;

120 
i
 = 0; i < 
tŸÆ
; i ++) {

121 
time
 = ()
	`ønd
() % 3;

122 i‡(
	`f‹k
() == 0) {

123 
	`yõld
();

124 
	`wrôî
(
i
, 100 + 
time
 * 10);

125 
	`exô
(0);

129 
i
 = 0; i < 
tŸÆ
; i ++) {

130 i‡(
	`waô
() != 0) {

131 
	`Áûed
();

134 
	`˝rötf
("write_test_rf ok.\n");

135 
	}
}

138 
	$ªad_wrôe_ã°_rf
() {

139 
	`˝rötf
("---------------------------------\n");

140 
	`check_£m_vÆue
();

141 
	`§™d
(200);

142 
i
, 
tŸÆ
 = 10, 
time
;

143 
i
 = 0; i < 
tŸÆ
; i ++) {

144 
time
 = ()
	`ønd
() % 3;

145 i‡(
	`f‹k
() == 0) {

146 
	`yõld
();

147 i‡(
time
 == 0) {

148 
	`wrôî
(
i
, 100 + 
time
 * 10);

151 
	`ªadî
(
i
, 100 + 
time
 * 10);

153 
	`exô
(0);

157 
i
 = 0; i < 
tŸÆ
; i ++) {

158 i‡(
	`waô
() != 0) {

159 
	`Áûed
();

162 
	`˝rötf
("read_write_test_rf ok.\n");

163 
	}
}

166 
	$maö
() {

167 
	`öô
();

168 
	`ªad_ã°_rf
();

169 
	`wrôe_ã°_rf
();

170 
	`ªad_wrôe_ã°_rf
();

172 
	`˝rötf
("sem_rfÖass..\n");

174 
	}
}

	@user-ucore/sem_wf.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mÆloc.h
>

6 
	#s˝rötf
(...) \

8 
	`£m_waô
(
£m_c⁄sﬁe
); \

9 
	`˝rötf
(
__VA_ARGS__
); \

10 
	`£m_po°
(
£m_c⁄sﬁe
); \

11 } 0)

	)

14 
£m_t
 
	g£m_ªad
, 
	g£m_wrôe
, 
	g£m_c⁄sﬁe
;

15 
£m_t
 
	g£m_x
, 
	g£m_y
, 
	g£m_z
;

16 *
	gpCou¡R
, *
	gpCou¡W
;

19 
	$Áûed
() {

20 
	`˝rötf
("FAIL: T.T\n");

21 
	`exô
(-1);

22 
	}
}

25 
	$check_£m_vÆue_sub
(
£m_t
 
£m_id
, 
vÆue
) {

26 
vÆue_°‹e
;

27 i‡(
	`£m_gë_vÆue
(
£m_id
, &
vÆue_°‹e
Ë!0 || vÆue_°‹ê!
vÆue
) {

31 
	}
}

34 
	$check_£m_vÆue
() {

35 i‡(
	`check_£m_vÆue_sub
(
£m_ªad
, 1) != 0

36 || 
	`check_£m_vÆue_sub
(
£m_wrôe
, 1) != 0) {

37 
	`Áûed
();

39 i‡(
	`check_£m_vÆue_sub
(
£m_x
, 1) != 0

40 || 
	`check_£m_vÆue_sub
(
£m_y
, 1) != 0

41 || 
	`check_£m_vÆue_sub
(
£m_z
, 1) != 0) {

42 
	`Áûed
();

44 i‡(*
pCou¡R
 !0 || *
pCou¡W
 != 0) {

45 
	`Áûed
();

47 
	}
}

50 
	$öô
() {

51 i‡((
£m_c⁄sﬁe
 = 
	`£m_öô
(1)) < 0) {

52 
	`Áûed
();

54 i‡((
£m_ªad
 = 
	`£m_öô
(1)Ë< 0 || (
£m_wrôe
 = sem_init(1)) < 0) {

55 
	`Áûed
();

57 i‡((
£m_x
 = 
	`£m_öô
(1)Ë< 0 || (
£m_y
 = sem_öô(1)Ë< 0 || (
£m_z
 = sem_init(1)) < 0) {

58 
	`Áûed
();

60 i‡((
pCou¡R
 = 
	`shmem_mÆloc
(())Ë=
NULL
 || (
pCou¡W
 = shmem_malloc(())) == NULL) {

61 
	`Áûed
();

63 *
pCou¡R
 = *
pCou¡W
 = 0;

64 
	}
}

67 
	$ªadî
(
id
, 
time
) {

68 
	`s˝rötf
("ªadî %d: (pid:%dË¨rive\n", 
id
, 
	`gëpid
());

69 
	`£m_waô
(
£m_z
);

70 
	`£m_waô
(
£m_ªad
);

71 
	`£m_waô
(
£m_x
);

72 (*
pCou¡R
) ++;

73 i‡(*
pCou¡R
 == 1) {

74 
	`£m_waô
(
£m_wrôe
);

76 
	`£m_po°
(
£m_x
);

77 
	`£m_po°
(
£m_ªad
);

78 
	`£m_po°
(
£m_z
);

80 
	`s˝rötf
("Ñódî_r‡%d: (pid:%dË°¨à%d\n", 
id
, 
	`gëpid
(), 
time
);

81 
	`¶ìp
(
time
);

82 
	`s˝rötf
("Ñódî_r‡%d: (pid:%dËíd %d\n", 
id
, 
	`gëpid
(), 
time
);

84 
	`£m_waô
(
£m_x
);

85 (*
pCou¡R
) --;

86 i‡(*
pCou¡R
 == 0) {

87 
	`£m_po°
(
£m_wrôe
);

89 
	`£m_po°
(
£m_x
);

90 
	}
}

93 
	$wrôî
(
id
, 
time
) {

94 
	`s˝rötf
("wrôî %d: (pid:%dË¨rive\n", 
id
, 
	`gëpid
());

95 
	`£m_waô
(
£m_y
);

96 (*
pCou¡W
) ++;

97 i‡(*
pCou¡W
 == 1) {

98 
	`£m_waô
(
£m_ªad
);

100 
	`£m_po°
(
£m_y
);

101 
	`£m_waô
(
£m_wrôe
);

103 
	`s˝rötf
(" wrôî_r‡%d: (pid:%dË°¨à%d\n", 
id
, 
	`gëpid
(), 
time
);

104 
	`¶ìp
(
time
);

105 
	`s˝rötf
(" wrôî_r‡%d: (pid:%dËíd %d\n", 
id
, 
	`gëpid
(), 
time
);

107 
	`£m_po°
(
£m_wrôe
);

108 
	`£m_waô
(
£m_y
);

109 (*
pCou¡W
) --;

110 i‡(*
pCou¡W
 == 0) {

111 
	`£m_po°
(
£m_ªad
);

113 
	`£m_po°
(
£m_y
);

114 
	}
}

117 
	$ªad_ã°_wf
() {

118 
	`˝rötf
("---------------------------------\n");

119 
	`check_£m_vÆue
();

120 
	`§™d
(0);

121 
i
, 
tŸÆ
 = 10, 
time
;

122 
i
 = 0; i < 
tŸÆ
; i ++) {

123 
time
 = ()
	`ønd
() % 3;

124 i‡(
	`f‹k
() == 0) {

125 
	`yõld
();

126 
	`ªadî
(
i
, 100 + 
time
 * 10);

127 
	`exô
(0);

131 
i
 = 0; i < 
tŸÆ
; i ++) {

132 i‡(
	`waô
() != 0) {

133 
	`Áûed
();

136 
	`˝rötf
("read_test_wf ok.\n");

137 
	}
}

140 
	$wrôe_ã°_wf
() {

141 
	`˝rötf
("---------------------------------\n");

142 
	`check_£m_vÆue
();

143 
	`§™d
(100);

144 
i
, 
tŸÆ
 = 10, 
time
;

145 
i
 = 0; i < 
tŸÆ
; i ++) {

146 
time
 = ()
	`ønd
() % 3;

147 i‡(
	`f‹k
() == 0) {

148 
	`yõld
();

149 
	`wrôî
(
i
, 100 + 
time
 * 10);

150 
	`exô
(0);

154 
i
 = 0; i < 
tŸÆ
; i ++) {

155 i‡(
	`waô
() != 0) {

156 
	`Áûed
();

159 
	`˝rötf
("write_test_wf ok.\n");

160 
	}
}

163 
	$ªad_wrôe_ã°_wf
() {

164 
	`˝rötf
("---------------------------------\n");

165 
	`check_£m_vÆue
();

166 
	`§™d
(200);

167 
i
, 
tŸÆ
 = 10, 
time
;

168 
i
 = 0; i < 
tŸÆ
; i ++) {

169 
time
 = ()
	`ønd
() % 3;

170 i‡(
	`f‹k
() == 0) {

171 
	`yõld
();

172 i‡(
time
 == 0) {

173 
	`wrôî
(
i
, 100 + 
time
 * 10);

176 
	`ªadî
(
i
, 100 + 
time
 * 10);

178 
	`exô
(0);

182 
i
 = 0; i < 
tŸÆ
; i ++) {

183 i‡(
	`waô
() != 0) {

184 
	`Áûed
();

187 
	`˝rötf
("read_write_test_wf ok.\n");

188 
	}
}

191 
	$maö
() {

192 
	`öô
();

193 
	`ªad_ã°_wf
();

194 
	`wrôe_ã°_wf
();

195 
	`ªad_wrôe_ã°_wf
();

197 
	`˝rötf
("sem_wfÖass..\n");

199 
	}
}

	@user-ucore/semtest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$£m_ã°
() {

6 
£m_t
 
£m_id
 = 
	`£m_öô
(1);

7 
	`as£π
(
£m_id
 > 0);

8 
	`˝rötf
("£m_id = 0x%016Œx\n", 
£m_id
);

10 
i
, 
vÆue
;

11 
i
 = 0; i < 10; i ++) {

12 
	`as£π
(
	`£m_gë_vÆue
(
£m_id
, &
vÆue
) == 0);

13 
	`as£π
(
vÆue
 =
i
 + 1 && 
	`£m_po°
(
£m_id
) == 0);

15 
	`˝rötf
("post ok.\n");

17 ; 
i
 > 0; i --) {

18 
	`as£π
(
	`£m_waô
(
£m_id
) == 0);

19 
	`as£π
(
	`£m_gë_vÆue
(
£m_id
, &
vÆue
Ë=0 && vÆuê=
i
);

21 
	`˝rötf
("wait ok.\n");

23 
pid
, 
ªt
;

24 i‡((
pid
 = 
	`f‹k
()) == 0) {

25 
	`as£π
(
	`£m_gë_vÆue
(
£m_id
, &
vÆue
) == 0);

26 
	`as£π
(
vÆue
 =1 && 
	`£m_waô
(
£m_id
) == 0);

28 
	`¶ìp
(10);

29 
i
 = 0; i < 10; i ++) {

30 
	`˝rötf
("¶ì∞%d\n", 
i
);

31 
	`¶ìp
(20);

33 
	`as£π
(
	`£m_po°
(
£m_id
) == 0);

34 
	`exô
(0);

36 
	`as£π
(
pid
 > 0);

38 
	`¶ìp
(10);

39 
i
 = 0; i < 10; i ++) {

40 
	`yõld
();

43 
	`˝rötf
("wait semaphore...\n");

45 
	`as£π
(
	`£m_waô
(
£m_id
) == 0);

46 
	`as£π
(
	`£m_gë_vÆue
(
£m_id
, &
vÆue
) == 0 && value == 0);

47 
	`˝rötf
("hold semaphore.\n");

49 
	`as£π
(
	`waôpid
(
pid
, &
ªt
) == 0 &&Ñet == 0);

50 
	`as£π
(
	`£m_gë_vÆue
(
£m_id
, &
vÆue
) == 0 && value == 0);

51 
	`˝rötf
("forkÖass.\n");

52 
	`exô
(0);

53 
	}
}

56 
	$maö
() {

57 
pid
, 
ªt
;

58 i‡((
pid
 = 
	`f‹k
()) == 0) {

59 
	`£m_ã°
();

61 
	`as£π
(
pid
 > 0 && 
	`waôpid
’id, &
ªt
) == 0 &&Ñet == 0);

62 
	`˝rötf
("semtestÖass.\n");

64 
	}
}

	@user-ucore/semtest2.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

4 
£m_t
 
	gmuãx
;

6 
	$ã°1
() {

7 
	`˝rötf
("semtest2Åest1:\n");

8 
∆o›
 = 3, 
i
, 
pid
;

9 i‡((
pid
 = 
	`f‹k
()) == 0) {

10 
i
 = 0; i < 
∆o›
; i ++) {

11 
	`£m_waô
(
muãx
);

12 
	`˝rötf
("chûd sèπ %d.\n", 
i
);

13 
	`¶ìp
(50);

14 
	`˝rötf
("childÉnd.\n");

15 
	`£m_po°
(
muãx
);

17 
	`˝rötf
("childÉxit.\n");

18 
	`exô
(0xbad);

20 
	`as£π
(
pid
 > 0);

21 
	`yõld
();

22 
i
 = 0; i < 
∆o›
; i ++) {

23 
	`£m_waô
(
muãx
);

24 
	`˝rötf
("∑ª¡ sèπ %d.\n", 
i
);

25 
	`¶ìp
(50);

26 
	`˝rötf
("parentÉnd.\n");

27 
	`£m_po°
(
muãx
);

29 
	`as£π
(
	`waô
() == 0);

30 
	}
}

32 
	$ã°2
() {

33 
	`˝rötf
("semtest2Åest2:\n");

34 
∆o›
 = 3, 
i
, 
pid
;

35 i‡((
pid
 = 
	`f‹k
()) == 0) {

36 
	`£m_waô
(
muãx
);

37 
i
 = 0; i < 
∆o›
; i ++) {

38 
	`£m_waô
(
muãx
);

39 
	`˝rötf
("chûd %d\n", 
i
);

40 
	`¶ìp
(50 * (
i
 + 1));

41 
	`£m_po°
(
muãx
);

43 
	`£m_po°
(
muãx
);

44 
	`exô
(0xbad);

46 
	`as£π
(
pid
 > 0);

47 
	`¶ìp
(30);

48 
i
 = 0; i < 
∆o›
; i ++) {

49 
	`£m_po°
(
muãx
);

50 
	`yõld
();

51 
	`˝rötf
("∑ª¡ %d\n", 
i
);

52 
	`£m_waô
(
muãx
);

54 
	`as£π
(
	`waô
() == 0);

55 
	}
}

58 
	$maö
() {

59 
	`as£π
((
muãx
 = 
	`£m_öô
(1)) > 0);

60 
	`ã°1
();

61 
	`ã°2
();

62 
	`˝rötf
("semtest2Öass.\n");

64 
	}
}

	@user-ucore/semtest3.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<îr‹.h
>

5 
£m_t
 
	gmuãx
;

8 
	$maö
() {

9 
	`as£π
((
muãx
 = 
	`£m_öô
(0)) > 0);

11 
	`˝rötf
("waitÇow...\n");

13 
	`as£π
(
	`£m_waô_timeout
(
muãx
, 500Ë=-
E_TIMEOUT
);

15 
	`˝rötf
("waitÅimeout\n");

17 
pid
;

18 i‡((
pid
 = 
	`f‹k
()) == 0) {

19 
	`˝rötf
("childÇow sleep\n");

20 
	`¶ìp
(500);

21 
	`£m_po°
(
muãx
);

22 
	`exô
(0);

24 
	`as£π
(
pid
 > 0);

26 
	`yõld
();

27 
	`as£π
(
	`£m_waô_timeout
(
muãx
, ~0) == 0);

28 
	`˝rötf
("semtest3Öass.\n");

30 
	}
}

	@user-ucore/semtest4.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

4 
£m_t
 
	gmuãx
;

7 
	$maö
() {

8 
	`as£π
((
muãx
 = 
	`£m_öô
(1)) > 0);

9 
	`as£π
(
	`£m_po°
(
muãx
) == 0);

11 
vÆue
, 
pid
;

12 
	`as£π
(
	`£m_gë_vÆue
(
muãx
, &
vÆue
) == 0 && value == 2);

13 
	`as£π
(
	`£m_‰ì
(
muãx
Ë=0 && 
	`£m_gë_vÆue
(muãx, &
vÆue
) != 0);

15 
	`as£π
((
muãx
 = 
	`£m_öô
(0)) > 0);

16 i‡((
pid
 = 
	`f‹k
()) == 0) {

17 
	`as£π
(
	`£m_waô
(
muãx
) != 0);

18 
	`˝rötf
("childÉxit ok.\n");

19 
	`exô
(0);

21 
	`as£π
(
pid
 > 0);

22 
	`as£π
(
	`£m_‰ì
(
muãx
Ë=0 && 
	`waôpid
(
pid
, &
vÆue
) == 0 && value == 0);

23 
	`˝rötf
("semtest4Öass.\n");

25 
	}
}

	@user-ucore/sfs_dirtest1.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°©.h
>

5 
	~<dúít.h
>

6 
	~<fûe.h
>

7 
	~<dú.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

13 
	$gëmode
(
uöt32_t
 
°_mode
) {

14 
mode
 = '?';

15 i‡(
	`S_ISREG
(
°_mode
)Ë
mode
 = '-';

16 i‡(
	`S_ISDIR
(
°_mode
)Ë
mode
 = 'd';

17 i‡(
	`S_ISLNK
(
°_mode
)Ë
mode
 = 'l';

18 i‡(
	`S_ISCHR
(
°_mode
)Ë
mode
 = 'c';

19 i‡(
	`S_ISBLK
(
°_mode
)Ë
mode
 = 'b';

20  
mode
;

21 
	}
}

24 
	$ß„_°©
(c⁄° *
«me
) {

25 
°©
 
__°©
, *stat = &__stat;

26 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
), 
ªt
 = 
	`f°©
(fd, 
°©
);

27 
	`as£π
(
fd
 >0 && 
ªt
 == 0);

28 
	`¥ötf
("%¯%3d %4d %10d ", 
	`gëmode
(
°©
->
°_mode
),

29 
°©
->
°_∆öks
, sèt->
°_blocks
, sèt->
°_size
);

30 
	}
}

33 
	$ß„_chdú
(c⁄° *
∑th
) {

34 
ªt
 = 
	`chdú
(
∑th
);

35 
	`as£π
(
ªt
 == 0);

36 
	}
}

39 
	$ß„_gëcwd
(
round
) {

40 
buf„r
[
FS_MAX_FPATH_LEN
 + 1];

41 
ªt
 = 
	`gëcwd
(
buf„r
, (buffer));

42 
	`as£π
(
ªt
 == 0);

43 
	`¥ötf
("%d: cuºít: %s\n", 
round
, 
buf„r
);

44 
	}
}

47 
	$ß„_lsdú
(
round
) {

48 
DIR
 *
dúp
 = 
	`›ídú
(".");

49 
	`as£π
(
dúp
 !
NULL
);

50 
dúít
 *
dúíç
;

51 (
dúíç
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

52 
	`¥ötf
("%d: ", 
round
);

53 
	`ß„_°©
(
dúíç
->
«me
);

54 
	`¥ötf
("%s\n", 
dúíç
->
«me
);

56 
	`˛o£dú
(
dúp
);

57 
	}
}

60 
	$ch™gedú
(c⁄° *
∑th
) {

61 
round
 = 0;

62 
	`¥ötf
("------------------------\n");

63 
	`ß„_chdú
(
∑th
);

64 
	`ß„_gëcwd
(
round
);

65 
	`ß„_lsdú
(
round
);

66 
round
 ++;

67 
	}
}

70 
	$maö
() {

71 
	`ch™gedú
("/");

72 
	`ch™gedú
("/./../././../../././.././../.././../testman/..");

73 
	`ch™gedú
("home");

74 
	`ch™gedú
("../testman");

75 
	`ch™gedú
("coreutils");

76 
	`ch™gedú
("../././.././../../testman");

77 
	`ch™gedú
("/");

78 
	`¥ötf
("sfs_dirtest1Öass.\n");

80 
	}
}

	@user-ucore/sfs_dirtest2.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°©.h
>

5 
	~<dúít.h
>

6 
	~<fûe.h
>

7 
	~<dú.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

13 
	$ß„_›í
(c⁄° *
∑th
, 
›í_Êags
) {

14 
fd
 = 
	`›í
(
∑th
, 
›í_Êags
);

15 
	`as£π
(
fd
 >= 0);

16  
fd
;

17 
	}
}

19 
°©
 *

20 
	$ß„_f°©
(
fd
) {

21 
°©
 
__°©
, *stat = &__stat;

22 
ªt
 = 
	`f°©
(
fd
, 
°©
);

23 
	`as£π
(
ªt
 == 0);

24  
°©
;

25 
	}
}

28 
	$gëmode
(
uöt32_t
 
°_mode
) {

29 
mode
 = '?';

30 i‡(
	`S_ISREG
(
°_mode
)Ë
mode
 = '-';

31 i‡(
	`S_ISDIR
(
°_mode
)Ë
mode
 = 'd';

32 i‡(
	`S_ISLNK
(
°_mode
)Ë
mode
 = 'l';

33 i‡(
	`S_ISCHR
(
°_mode
)Ë
mode
 = 'c';

34 i‡(
	`S_ISBLK
(
°_mode
)Ë
mode
 = 'b';

35  
mode
;

36 
	}
}

39 
	$ß„_°©
(c⁄° *
«me
) {

40 
°©
 
__°©
, *stat = &__stat;

41 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
), 
ªt
 = 
	`f°©
(fd, 
°©
);

42 
	`as£π
(
fd
 >0 && 
ªt
 == 0);

43 
	`¥ötf
("%¯%3d %4d %10d ", 
	`gëmode
(
°©
->
°_mode
),

44 
°©
->
°_∆öks
, sèt->
°_blocks
, sèt->
°_size
);

45 
	}
}

48 
	$ß„_chdú
(c⁄° *
∑th
) {

49 
ªt
 = 
	`chdú
(
∑th
);

50 
	`as£π
(
ªt
 == 0);

51 
	}
}

54 
	$ß„_gëcwd
(
round
) {

55 
buf„r
[
FS_MAX_FPATH_LEN
 + 1];

56 
ªt
 = 
	`gëcwd
(
buf„r
, (buffer));

57 
	`as£π
(
ªt
 == 0);

58 
	`¥ötf
("%d: cuºít: %s\n", 
round
, 
buf„r
);

59 
	}
}

62 
	$ß„_lsdú
(
round
) {

63 
DIR
 *
dúp
 = 
	`›ídú
(".");

64 
	`as£π
(
dúp
 !
NULL
);

65 
dúít
 *
dúíç
;

66 (
dúíç
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

67 
	`¥ötf
("%d: ", 
round
);

68 
	`ß„_°©
(
dúíç
->
«me
);

69 
	`¥ötf
("%s\n", 
dúíç
->
«me
);

71 
	`˛o£dú
(
dúp
);

72 
	}
}

75 
	$ch™gedú
(c⁄° *
∑th
) {

76 
round
 = 0;

77 
	`¥ötf
("------------------------\n");

78 
	`ß„_chdú
(
∑th
);

79 
	`ß„_gëcwd
(
round
);

80 
	`ß„_lsdú
(
round
);

81 
round
 ++;

82 
	}
}

85 
	$ß„_mkdú
(c⁄° *
∑th
) {

86 
ªt
 = 
	`mkdú
(
∑th
);

87 
	`as£π
(
ªt
 == 0);

88 
	}
}

91 
	$ß„_lök
(c⁄° *
‰om
, c⁄° *
to
) {

92 
ªt
 = 
	`lök
(
‰om
, 
to
);

93 
	`as£π
(
ªt
 == 0);

94 
	}
}

97 
	$ß„_u∆ök
(c⁄° *
∑th
) {

98 
ªt
 = 
	`u∆ök
(
∑th
);

99 
	`as£π
(
ªt
 == 0);

100 
	}
}

103 
	$maö
() {

104 
fd1
, 
fd2
;

105 
°©
 *stat;

107 
	`ch™gedú
("/test"); {

108 
	`ß„_mkdú
("/test/dir0/");

109 
	`as£π
(
	`mkdú
("testfile") != 0 && mkdir("../test/dir0/") != 0);

110 
	`as£π
(
	`mkdú
("dir0/dir1/dir2") != 0);

111 
	`ß„_mkdú
("dir0/dir1/");

113 
fd1
 = 
	`ß„_›í
("fûe1", 
O_CREAT
 | 
O_RDWR
 | 
O_EXCL
);

114 
fd2
 = 
	`ß„_›í
("fûe1", 
O_CREAT
 | 
O_RDWR
);

116 
°©
 = 
	`ß„_f°©
(
fd1
);

117 
	`as£π
(
°©
->
°_∆öks
 == 1);

118 
°©
 = 
	`ß„_f°©
(
fd2
);

119 
	`as£π
(
°©
->
°_∆öks
 == 1);

121 
	`as£π
(
	`›í
("fûe1", 
O_CREAT
 | 
O_EXCL
) < 0);

122 
	`ch™gedú
(".");

124 
	`ß„_lök
("file1", "dir0/dir1/file2");

125 
	`ch™gedú
(".");

127 
°©
 = 
	`ß„_f°©
(
fd1
);

128 
	`as£π
(
°©
->
°_∆öks
 == 2);

131 
	`ch™gedú
("dir0/dir1"); {

132 
	`as£π
(
	`u∆ök
("dir0/dir1") != 0);

134 
	`ß„_u∆ök
("/test/dir0/dir1/file2");

135 
	`ß„_u∆ök
("/test/dir0/dir1");

137 
°©
 = 
	`ß„_f°©
(
fd1
);

138 
	`as£π
(
°©
->
°_∆öks
 == 1);

141 
	`ch™gedú
("/test/dir0"); {

142 
	`ß„_u∆ök
("../file1");

143 
	`ß„_u∆ök
("../dir0");

146 
	`ch™gedú
("/test");

147 
	`¥ötf
("sfs_dirtest2Öass.\n");

149 
	}
}

	@user-ucore/sfs_dirtest3.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°©.h
>

5 
	~<dúít.h
>

6 
	~<fûe.h
>

7 
	~<dú.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

13 
	$ß„_›í
(c⁄° *
∑th
, 
›í_Êags
) {

14 
fd
 = 
	`›í
(
∑th
, 
›í_Êags
);

15 
	`as£π
(
fd
 >= 0);

16  
fd
;

17 
	}
}

19 
°©
 *

20 
	$ß„_f°©
(
fd
) {

21 
°©
 
__°©
, *stat = &__stat;

22 
ªt
 = 
	`f°©
(
fd
, 
°©
);

23 
	`as£π
(
ªt
 == 0);

24  
°©
;

25 
	}
}

28 
	$ß„_wrôe
(
fd
, *
d©a
, 
size_t
 
Àn
) {

29 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
Àn
);

30 
	`as£π
(
ªt
 =
Àn
);

31 
	}
}

34 
	$gëmode
(
uöt32_t
 
°_mode
) {

35 
mode
 = '?';

36 i‡(
	`S_ISREG
(
°_mode
)Ë
mode
 = '-';

37 i‡(
	`S_ISDIR
(
°_mode
)Ë
mode
 = 'd';

38 i‡(
	`S_ISLNK
(
°_mode
)Ë
mode
 = 'l';

39 i‡(
	`S_ISCHR
(
°_mode
)Ë
mode
 = 'c';

40 i‡(
	`S_ISBLK
(
°_mode
)Ë
mode
 = 'b';

41  
mode
;

42 
	}
}

45 
	$ß„_°©
(c⁄° *
«me
) {

46 
°©
 
__°©
, *stat = &__stat;

47 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
), 
ªt
 = 
	`f°©
(fd, 
°©
);

48 
	`as£π
(
fd
 >0 && 
ªt
 == 0);

49 
	`¥ötf
("%¯%3d %4d %10d ", 
	`gëmode
(
°©
->
°_mode
),

50 
°©
->
°_∆öks
, sèt->
°_blocks
, sèt->
°_size
);

51 
	}
}

54 
	$ß„_chdú
(c⁄° *
∑th
) {

55 
ªt
 = 
	`chdú
(
∑th
);

56 
	`as£π
(
ªt
 == 0);

57 
	}
}

60 
	$ß„_gëcwd
(
round
) {

61 
buf„r
[
FS_MAX_FPATH_LEN
 + 1];

62 
ªt
 = 
	`gëcwd
(
buf„r
, (buffer));

63 
	`as£π
(
ªt
 == 0);

64 
	`¥ötf
("%d: cuºít: %s\n", 
round
, 
buf„r
);

65 
	}
}

68 
	$ß„_lsdú
(
round
) {

69 
DIR
 *
dúp
 = 
	`›ídú
(".");

70 
	`as£π
(
dúp
 !
NULL
);

71 
dúít
 *
dúíç
;

72 (
dúíç
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

73 
	`¥ötf
("%d: ", 
round
);

74 
	`ß„_°©
(
dúíç
->
«me
);

75 
	`¥ötf
("%s\n", 
dúíç
->
«me
);

77 
	`˛o£dú
(
dúp
);

78 
	}
}

81 
	$ch™gedú
(c⁄° *
∑th
) {

82 
round
 = 0;

83 
	`¥ötf
("------------------------\n");

84 
	`ß„_chdú
(
∑th
);

85 
	`ß„_gëcwd
(
round
);

86 
	`ß„_lsdú
(
round
);

87 
round
 ++;

88 
	}
}

91 
	$ß„_mkdú
(c⁄° *
∑th
) {

92 
ªt
 = 
	`mkdú
(
∑th
);

93 
	`as£π
(
ªt
 == 0);

94 
	}
}

97 
	$ß„_ª«me
(c⁄° *
‰om
, c⁄° *
to
) {

98 
ªt
 = 
	`ª«me
(
‰om
, 
to
);

99 
	`as£π
(
ªt
 == 0);

100 
	}
}

103 
	$ß„_u∆ök
(c⁄° *
∑th
) {

104 
ªt
 = 
	`u∆ök
(
∑th
);

105 
	`as£π
(
ªt
 == 0);

106 
	}
}

109 
	$maö
() {

110 
fd
;

111 
°©
 *stat;

113 
	`ch™gedú
("/test");

114 
	`ß„_mkdú
("dir0");

115 
	`ß„_mkdú
("dir0/dir1");

116 
fd
 = 
	`ß„_›í
("dú0/fûe1", 
O_CREAT
 | 
O_RDWR
 | 
O_EXCL
);

118 c⁄° *
msg
 = "Hello world!!\n";

119 
buf„r
[1024];

120 
size_t
 
Àn
 = 
	`°æí
(
msg
);

121 
	`mem˝y
(
buf„r
, 
msg
, 
Àn
);

122 
	`ß„_wrôe
(
fd
, 
buf„r
, 
Àn
);

124 
°©
 = 
	`ß„_f°©
(
fd
);

125 
	`as£π
(
°©
->
°_size
 =
Àn
 && sèt->
°_∆öks
 == 1);

127 
	`ch™gedú
("dir0/dir1");

128 
	`ß„_ª«me
("../file1", "file2");

129 
	`ß„_wrôe
(
fd
, 
buf„r
, 
Àn
);

130 
	`˛o£
(
fd
);

131 
	`ch™gedú
(".");

133 
fd
 = 
	`ß„_›í
("fûe2", 
O_RDONLY
);

134 
°©
 = 
	`ß„_f°©
(
fd
);

135 
	`as£π
(
°©
->
°_size
 =
Àn
 * 2);

137 
	`ß„_ª«me
("../dir1", "../../dir2");

138 
	`ch™gedú
("/test");

140 
	`ß„_u∆ök
("dir2/file2");

141 
	`ß„_u∆ök
("dir0");

142 
	`ß„_u∆ök
("dir2");

144 
	`ch™gedú
(".");

146 
	`¥ötf
("sfs_dirtest3Öass.\n");

148 
	}
}

	@user-ucore/sfs_exectest1.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

6 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

9 
	$maö
() {

10 
fd
[2], 
ªt
 = 
	`pùe
(fd);

11 
	`as£π
(
ªt
 == 0);

13 
pid
;

14 i‡((
pid
 = 
	`f‹k
()) == 0) {

15 
	`˛o£
(0), clo£(
fd
[1]);

16 i‡((
ªt
 = 
	`dup2
(
fd
[0], 0)) < 0) {

17 
	`exô
(
ªt
);

19 
ªt
 = 
	`exec
("bin/robot");

20 
	`∑nic
("chûdÉxe¯Áûed: %e\n", 
ªt
);

22 
	`as£π
(
pid
 > 0);

24 
	`˛o£
(
fd
[0]);

26 
i
;

27 
i
 = 0; i < 32; i ++) {

28 
	`Ârötf
(
fd
[1], "%02d: Hñlÿw‹ld!!.\n", 
i
);

30 
	`˛o£
(
fd
[1]);

32 
	`as£π
(
	`waô
() == 0);

33 
	`˝rötf
("sfs_exectest1Öass.\n");

35 
	}
}

	@user-ucore/sfs_exectest2.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<fûe.h
>

6 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

8 c⁄° *
	gcmd
 = "bin/sfs_exectest2";

11 
	$maö
(
¨gc
, **
¨gv
) {

12 
i
;

13 
i
 = 0; i < 
¨gc
; i ++) {

14 
	`¥ötf
("%d-%d: %s\n", 
¨gc
, 
i
, 
¨gv
[i]);

16 
¨gc
) {

18 
	`exec
(
cmd
, "arg0");

20 
	`exec
(
cmd
, "arg0", "arg1");

22 
	`exec
(
cmd
, "arg0", "arg1", "arg2");

24 
	`exec
(
cmd
, "arg0", "arg1", "arg2", "arg3");

26 
	`exec
(
cmd
, "arg0", "arg1", "arg2", "arg3", "arg4");

28 
	`˝rötf
("sfs_exectest2Öass.\n");

30 
	}
}

	@user-ucore/sfs_filetest1.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<°©.h
>

6 
	~<fûe.h
>

7 
	~<dú.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

13 
	$ß„_›í
(c⁄° *
∑th
, 
›í_Êags
) {

14 
fd
 = 
	`›í
(
∑th
, 
›í_Êags
);

15 
	`as£π
(
fd
 >= 0);

16  
fd
;

17 
	}
}

19 
°©
 *

20 
	$ß„_f°©
(
fd
) {

21 
°©
 
__°©
, *stat = &__stat;

22 
ªt
 = 
	`f°©
(
fd
, 
°©
);

23 
	`as£π
(
ªt
 == 0);

24  
°©
;

25 
	}
}

28 
	$ß„_dup
(
fd1
) {

29 
fd2
 = 
	`dup
(
fd1
);

30 
	`as£π
(
fd2
 >= 0);

31  
fd2
;

32 
	}
}

35 
	$ß„_ªad
(
fd
, *
d©a
, 
size_t
 
Àn
) {

36 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
Àn
);

37 
	`as£π
(
ªt
 =
Àn
);

38 
	}
}

41 
	$ß„_wrôe
(
fd
, *
d©a
, 
size_t
 
Àn
) {

42 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
Àn
);

43 
	`as£π
(
ªt
 =
Àn
);

44 
	}
}

47 
	$ß„_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
) {

48 
ªt
 = 
	`£ek
(
fd
, 
pos
, 
whí˚
);

49 
	`as£π
(
ªt
 == 0);

50 
	}
}

52 
uöt32_t
 
	gbuf„r
[1024];

55 
	$öô_d©a
(
fd
, 
∑ges
) {

56 
i
, 
j
;

57 
uöt32_t
 
vÆue
 = 0;

58 
i
 = 0; i < 
∑ges
; i ++) {

59 
j
 = 0; j < (
buf„r
) / (buffer[0]); j ++) {

60 
buf„r
[
j
] = 
vÆue
 ++;

62 
	`ß„_wrôe
(
fd
, 
buf„r
, (buffer));

64 
	}
}

67 
	$øndom_ã°
(
fd
, 
∑ges
) {

68 
i
, 
j
;

69 c⁄° 
size
 = (
buf„r
) / (buffer[0]);

70 
	`ß„_£ek
(
fd
, 0, 
LSEEK_SET
);

71 
i
 = 0; i < 
∑ges
; i ++) {

72 
	`ß„_ªad
(
fd
, 
buf„r
, (buffer));

73 
j
 = 0; j < 32; j ++) {

74 
uöt32_t
 
vÆue
 = 
	`ønd
(Ë% 
size
;

75 
	`as£π
(
buf„r
[
vÆue
] =
i
 * 
size
 + value);

78 
	}
}

81 
	$maö
() {

82 
fd1
 = 
	`ß„_›í
("/ã°/ã°fûe", 
O_RDWR
 | 
O_TRUNC
);

83 
°©
 *°© = 
	`ß„_f°©
(
fd1
);

84 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_blocks
 == 0);

86 c⁄° 
≈ages
 = 128;

87 
	`öô_d©a
(
fd1
, 
≈ages
);

88 
	`¥ötf
("init_data ok.\n");

90 
fd2
 = 
	`ß„_dup
(
fd1
);

91 
°©
 = 
	`ß„_f°©
(
fd2
);

92 
	`as£π
(
°©
->
°_size
 =
≈ages
 * (
buf„r
));

94 
	`øndom_ã°
(
fd2
, 
≈ages
);

95 
	`¥ötf
("random_test ok.\n");

97 
fd3
 = 
	`ß„_›í
("/ã°/ã°fûe", 
O_RDWR
 | 
O_TRUNC
);

98 
°©
 = 
	`ß„_f°©
(
fd3
);

99 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_blocks
 == 0);

100 
	`ß„_£ek
(
fd3
, (
buf„r
), 
LSEEK_END
);

101 
	`ß„_£ek
(
fd3
, 0, 
LSEEK_SET
);

102 
°©
 = 
	`ß„_f°©
(
fd3
);

103 
	`as£π
(
°©
->
°_size
 =(
buf„r
));

105 
	`ß„_£ek
(
fd3
, (
buf„r
), 
LSEEK_END
);

106 
°©
 = 
	`ß„_f°©
(
fd3
);

107 
	`as£π
(
°©
->
°_size
 =(
buf„r
) * 2);

109 
	`ß„_£ek
(
fd3
, -(
buf„r
), 
LSEEK_CUR
);

110 
	`ß„_ªad
(
fd3
, 
buf„r
, (buffer));

111 
i
;

112 
i
 = 0; i < (
buf„r
) / (buffer[0]); i ++) {

113 
	`as£π
(
buf„r
[
i
] == 0);

115 
fd4
 = 
	`ß„_›í
("/ã°/ã°fûe", 
O_WRONLY
 | 
O_TRUNC
);

116 
°©
 = 
	`ß„_f°©
(
fd4
);

117 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_blocks
 == 0);

118 
	`¥ötf
("sfs_filetest1Öass.\n");

120 
	}
}

	@user-ucore/sfs_filetest2.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<°©.h
>

6 
	~<fûe.h
>

7 
	~<dú.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

13 
	$ß„_›í
(c⁄° *
∑th
, 
›í_Êags
) {

14 
fd
 = 
	`›í
(
∑th
, 
›í_Êags
);

15 
	`as£π
(
fd
 >= 0);

16  
fd
;

17 
	}
}

19 
°©
 *

20 
	$ß„_f°©
(
fd
) {

21 
°©
 
__°©
, *stat = &__stat;

22 
ªt
 = 
	`f°©
(
fd
, 
°©
);

23 
	`as£π
(
ªt
 == 0);

24  
°©
;

25 
	}
}

28 
	$ß„_ªad
(
fd
, *
d©a
, 
size_t
 
Àn
) {

29 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
Àn
);

30 
	`as£π
(
ªt
 =
Àn
);

31 
	}
}

34 
	$ß„_wrôe
(
fd
, *
d©a
, 
size_t
 
Àn
) {

35 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
Àn
);

36 
	`as£π
(
ªt
 =
Àn
);

37 
	}
}

40 
	$ß„_£ek
(
fd
, 
off_t
 
pos
, 
whí˚
) {

41 
ªt
 = 
	`£ek
(
fd
, 
pos
, 
whí˚
);

42 
	`as£π
(
ªt
 == 0);

43 
	}
}

45 
	gbuf„r
[4096];

48 
	$maö
() {

49 
fd
 = 
	`ß„_›í
("/ã°/ã°fûe", 
O_RDWR
 | 
O_TRUNC
);

50 
°©
 *°© = 
	`ß„_f°©
(
fd
);

51 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_blocks
 == 0);

53 
	`ß„_£ek
(
fd
, (
buf„r
Ë* 1024 * 2, 
LSEEK_SET
);

55 
i
;

56 
i
 = 0; i < (
buf„r
); i ++) {

57 
buf„r
[
i
] = i;

59 
	`ß„_wrôe
(
fd
, 
buf„r
, (buffer));

60 
	`mem£t
(
buf„r
, 0, (buffer));

62 
	`ß„_£ek
(
fd
, -(
buf„r
), 
LSEEK_END
);

63 
	`ß„_ªad
(
fd
, 
buf„r
, (buffer));

65 
i
 = 0; i < (
buf„r
); i ++) {

66 
	`as£π
(
buf„r
[
i
] == ()i);

69 
fd
 = 
	`ß„_›í
("/ã°/ã°fûe", 
O_RDWR
 | 
O_TRUNC
);

70 
°©
 = 
	`ß„_f°©
(
fd
);

71 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_blocks
 == 0);

72 
	`¥ötf
("sfs_filetest2Öass.\n");

74 
	}
}

	@user-ucore/sfs_filetest3.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<°©.h
>

5 
	~<dúít.h
>

6 
	~<fûe.h
>

7 
	~<dú.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

13 
	$ß„_›í
(c⁄° *
∑th
, 
›í_Êags
) {

14 
fd
 = 
	`›í
(
∑th
, 
›í_Êags
);

15 
	`as£π
(
fd
 >= 0);

16  
fd
;

17 
	}
}

19 
°©
 *

20 
	$ß„_f°©
(
fd
) {

21 
°©
 
__°©
, *stat = &__stat;

22 
ªt
 = 
	`f°©
(
fd
, 
°©
);

23 
	`as£π
(
ªt
 == 0);

24  
°©
;

25 
	}
}

28 
	$ß„_ªad
(
fd
, *
d©a
, 
size_t
 
Àn
) {

29 
ªt
 = 
	`ªad
(
fd
, 
d©a
, 
Àn
);

30 
	`as£π
(
ªt
 =
Àn
);

31 
	}
}

34 
	$ß„_wrôe
(
fd
, *
d©a
, 
size_t
 
Àn
) {

35 
ªt
 = 
	`wrôe
(
fd
, 
d©a
, 
Àn
);

36 
	`as£π
(
ªt
 =
Àn
);

37 
	}
}

40 
	$gëmode
(
uöt32_t
 
°_mode
) {

41 
mode
 = '?';

42 i‡(
	`S_ISREG
(
°_mode
)Ë
mode
 = '-';

43 i‡(
	`S_ISDIR
(
°_mode
)Ë
mode
 = 'd';

44 i‡(
	`S_ISLNK
(
°_mode
)Ë
mode
 = 'l';

45 i‡(
	`S_ISCHR
(
°_mode
)Ë
mode
 = 'c';

46 i‡(
	`S_ISBLK
(
°_mode
)Ë
mode
 = 'b';

47  
mode
;

48 
	}
}

51 
	$ß„_°©
(c⁄° *
«me
) {

52 
°©
 
__°©
, *stat = &__stat;

53 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
), 
ªt
 = 
	`f°©
(fd, 
°©
);

54 
	`as£π
(
fd
 >0 && 
ªt
 == 0);

55 
	`¥ötf
("%¯%3d %4d %10d ", 
	`gëmode
(
°©
->
°_mode
),

56 
°©
->
°_∆öks
, sèt->
°_blocks
, sèt->
°_size
);

57 
	}
}

60 
	$ß„_chdú
(c⁄° *
∑th
) {

61 
ªt
 = 
	`chdú
(
∑th
);

62 
	`as£π
(
ªt
 == 0);

63 
	}
}

66 
	$ß„_gëcwd
(
round
) {

67 
buf„r
[
FS_MAX_FPATH_LEN
 + 1];

68 
ªt
 = 
	`gëcwd
(
buf„r
, (buffer));

69 
	`as£π
(
ªt
 == 0);

70 
	`¥ötf
("%d: cuºít: %s\n", 
round
, 
buf„r
);

71 
	}
}

74 
	$ß„_lsdú
(
round
) {

75 
DIR
 *
dúp
 = 
	`›ídú
(".");

76 
	`as£π
(
dúp
 !
NULL
);

77 
dúít
 *
dúíç
;

78 (
dúíç
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

79 
	`¥ötf
("%d: ", 
round
);

80 
	`ß„_°©
(
dúíç
->
«me
);

81 
	`¥ötf
("%s\n", 
dúíç
->
«me
);

83 
	`˛o£dú
(
dúp
);

84 
	}
}

87 
	$ch™gedú
(c⁄° *
∑th
) {

88 
round
 = 0;

89 
	`¥ötf
("------------------------\n");

90 
	`ß„_chdú
(
∑th
);

91 
	`ß„_gëcwd
(
round
);

92 
	`ß„_lsdú
(
round
);

93 
round
 ++;

94 
	}
}

97 
	$ß„_lök
(c⁄° *
‰om
, c⁄° *
to
) {

98 
ªt
 = 
	`lök
(
‰om
, 
to
);

99 
	`as£π
(
ªt
 == 0);

100 
	}
}

103 
	$ß„_u∆ök
(c⁄° *
∑th
) {

104 
ªt
 = 
	`u∆ök
(
∑th
);

105 
	`as£π
(
ªt
 == 0);

106 
	}
}

109 
	$maö
() {

110 
fd1
, 
fd2
;

111 
°©
 *stat;

113 
	`ch™gedú
("/test");

114 
fd1
 = 
	`ß„_›í
("ã°fûe", 
O_RDWR
 | 
O_TRUNC
);

115 
°©
 = 
	`ß„_f°©
(
fd1
);

116 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_∆öks
 == 1);

118 
	`ß„_lök
("testfile", "orz");

120 
fd2
 = 
	`ß„_›í
("‹z", 
O_RDONLY
);

121 
°©
 = 
	`ß„_f°©
(
fd1
);

122 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_∆öks
 == 2);

123 
°©
 = 
	`ß„_f°©
(
fd2
);

124 
	`as£π
(
°©
->
°_size
 =0 && sèt->
°_∆öks
 == 2);

126 c⁄° *
msg
 = "Hello world!!\n";

127 
buf„r
[1024];

128 
size_t
 
Àn
 = 
	`°æí
(
msg
);

129 
	`mem˝y
(
buf„r
, 
msg
, 
Àn
);

130 
	`ß„_wrôe
(
fd1
, 
buf„r
, 
Àn
);

132 
	`ch™gedú
(".");

133 
	`mem£t
(
buf„r
, 0, (buffer));

134 
	`ß„_ªad
(
fd2
, 
buf„r
, 
Àn
);

135 
	`as£π
(
	`°∫cmp
(
buf„r
, 
msg
, 
Àn
) == 0);

137 
	`˝rötf
("linkÅest ok.\n");

139 
	`ß„_u∆ök
("orz");

140 
°©
 = 
	`ß„_f°©
(
fd2
);

141 
	`as£π
(
°©
->
°_size
 =
Àn
 && sèt->
°_∆öks
 == 1);

142 
	`˛o£
(
fd2
);

143 
	`ch™gedú
(".");

145 
	`˝rötf
("unlinkÅest ok.\n");

147 
fd2
 = 
	`ß„_›í
("ã°fûe", 
O_RDWR
 | 
O_TRUNC
);

148 
	`ß„_wrôe
(
fd1
, 
buf„r
, 
Àn
);

150 
°©
 = 
	`ß„_f°©
(
fd2
);

151 
	`as£π
(
°©
->
°_size
 =
Àn
 * 2 && sèt->
°_∆öks
 == 1);

153 
fd2
 = 
	`ß„_›í
("ã°fûe", 
O_RDWR
 | 
O_TRUNC
);

155 
	`as£π
(
	`lök
("test", "..") != 0);

156 
	`as£π
(
	`lök
("testfile", ".") != 0);

157 
	`as£π
(
	`lök
("testfile", "./testfile") != 0);

158 
	`as£π
(
	`u∆ök
(".") != 0 && unlink("..") != 0);

160 
	`ch™gedú
(".");

161 
	`˝rötf
("sfs_filetest3Öass.\n");

163 
	}
}

	@user-ucore/sh.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mÆloc.h
>

5 
	~<dú.h
>

6 
	~<fûe.h
>

7 
	~<îr‹.h
>

8 
	~<uni°d.h
>

10 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

11 
	#putc
(
c
Ë
	`¥ötf
("%c", c)

	)

13 
	#BUFSIZE
 4096

	)

14 
	#WHITESPACE
 " \t\r\n"

	)

15 
	#SYMBOLS
 "<|>&;"

	)

17 *
	gshcwd
 = 
NULL
;

20 
	$gëtokí
(**
p1
, **
p2
) {

21 *
s
;

22 i‡((
s
 = *
p1
Ë=
NULL
) {

25 
	`°rchr
(
WHITESPACE
, *
s
Ë!
NULL
) {

26 *
s
 ++ = '\0';

28 i‡(*
s
 == '\0') {

32 *
p2
 = 
s
;

33 
tokí
 = 'w';

34 i‡(
	`°rchr
(
SYMBOLS
, *
s
Ë!
NULL
) {

35 
tokí
 = *
s
, *s ++ = '\0';

38 
boﬁ
 
Êag
 = 0;

39 *
s
 !'\0' && (
Êag
 || 
	`°rchr
(
WHITESPACE
 
SYMBOLS
, *sË=
NULL
)) {

40 i‡(*
s
 == '"') {

41 *
s
 = ' ', 
Êag
 = !flag;

43 
s
 ++;

46 *
p1
 = (*
s
 !'\0' ? s : 
NULL
);

47  
tokí
;

48 
	}
}

51 
	$ªadlöe
(c⁄° *
¥om±
) {

52 
buf„r
[
BUFSIZE
];

53 i‡(
¥om±
 !
NULL
) {

54 
	`¥ötf
("%s", 
¥om±
);

56 
ªt
, 
i
 = 0;

58 
c
;

59 i‡((
ªt
 = 
	`ªad
(0, &
c
, ())) < 0) {

60  
NULL
;

62 i‡(
ªt
 == 0) {

63 i‡(
i
 > 0) {

64 
buf„r
[
i
] = '\0';

67  
NULL
;

70 i‡(
c
 == 3) {

71  
NULL
;

73 i‡(
c
 >' ' && 
i
 < 
BUFSIZE
 - 1) {

74 
	`putc
(
c
);

75 
buf„r
[
i
 ++] = 
c
;

77 i‡(
c
 ='\b' && 
i
 > 0) {

78 
	`putc
(
c
);

79 
i
 --;

81 i‡(
c
 == '\n' || c == '\r') {

82 
	`putc
(
c
);

83 
buf„r
[
i
] = '\0';

87  
buf„r
;

88 
	}
}

91 
	$ußge
() {

92 
	`¥ötf
("usage: sh [command-file]\n");

93 
	}
}

96 
	$ª›í
(
fd2
, c⁄° *
fûíame
, 
uöt32_t
 
›í_Êags
) {

97 
ªt
, 
fd1
;

98 
	`˛o£
(
fd2
);

99 i‡((
ªt
 = 
	`›í
(
fûíame
, 
›í_Êags
)Ë>0 &&Ñë !
fd2
) {

100 
	`˛o£
(
fd2
);

101 
fd1
 = 
ªt
,Ñë = 
	`dup2
(fd1, 
fd2
);

102 
	`˛o£
(
fd1
);

104  
ªt
 < 0 ?Ñet : 0;

105 
	}
}

108 
	$ã°fûe
(c⁄° *
«me
) {

109 
ªt
;

110 i‡((
ªt
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0) {

111  
ªt
;

113 
	`˛o£
(
ªt
);

115 
	}
}

118 
	$runcmd
(*
cmd
) {

119 
¨gv0
[
BUFSIZE
];

120 c⁄° *
¨gv
[
EXEC_MAX_ARG_NUM
 + 1];

121 *
t
;

122 
¨gc
, 
tokí
, 
ªt
, 
p
[2];

123 
agaö
:

124 
¨gc
 = 0;

126 
tokí
 = 
	`gëtokí
(&
cmd
, &
t
)) {

128 i‡(
¨gc
 =
EXEC_MAX_ARG_NUM
) {

129 
	`¥ötf
("shÉrror:Åoo manyárguments\n");

132 
¨gv
[
¨gc
 ++] = 
t
;

135 i‡(
	`gëtokí
(&
cmd
, &
t
) != 'w') {

136 
	`¥ötf
("shÉrror: syntaxÉrror: <Çot followed by word\n");

139 i‡((
ªt
 = 
	`ª›í
(0, 
t
, 
O_RDONLY
)) != 0) {

140  
ªt
;

144 i‡(
	`gëtokí
(&
cmd
, &
t
) != 'w') {

145 
	`¥ötf
("shÉrror: syntaxÉrror: >Çot followed by word\n");

148 i‡((
ªt
 = 
	`ª›í
(1, 
t
, 
O_RDWR
 | 
O_TRUNC
 | 
O_CREAT
)) != 0) {

149  
ªt
;

153 i‡((
ªt
 = 
	`pùe
(
p
)) != 0) {

154  
ªt
;

156 i‡((
ªt
 = 
	`f‹k
()) == 0) {

157 
	`˛o£
(0);

158 i‡((
ªt
 = 
	`dup2
(
p
[0], 0)) < 0) {

159  
ªt
;

161 
	`˛o£
(
p
[0]), close(p[1]);

162 
agaö
;

165 i‡(
ªt
 < 0) {

166  
ªt
;

168 
	`˛o£
(1);

169 i‡((
ªt
 = 
	`dup2
(
p
[1], 1)) < 0) {

170  
ªt
;

172 
	`˛o£
(
p
[0]), close(p[1]);

173 
runô
;

177 
runô
;

179 i‡((
ªt
 = 
	`f‹k
()) == 0) {

180 
runô
;

183 i‡(
ªt
 < 0) {

184  
ªt
;

186 
	`waôpid
(
ªt
, 
NULL
);

187 
agaö
;

191 
	`¥ötf
("shÉº‹: badÑëu∫ %d from gëtokí\n", 
tokí
);

196 
runô
:

197 i‡(
¨gc
 == 0) {

200 i‡(
	`°rcmp
(
¨gv
[0], "cd") == 0) {

201 i‡(
¨gc
 != 2) {

204 
	`°r˝y
(
shcwd
, 
¨gv
[1]);

207 i‡((
ªt
 = 
	`ã°fûe
(
¨gv
[0])) != 0) {

208 i‡(
ªt
 !-
E_NOENT
) {

209  
ªt
;

211 
	`¢¥ötf
(
¨gv0
, ◊rgv0), "/bö/%s", 
¨gv
[0]);

212 
¨gv
[0] = 
¨gv0
;

214 
¨gv
[
¨gc
] = 
NULL
;

215  
	`__exec
(
NULL
, 
¨gv
);

216 
	}
}

219 
	$maö
(
¨gc
, **
¨gv
) {

220 
ªt
, 
öãø˘ive
 = 1;

221 i‡(
¨gc
 == 2) {

222 i‡((
ªt
 = 
	`ª›í
(0, 
¨gv
[1], 
O_RDONLY
)) != 0) {

223  
ªt
;

225 
öãø˘ive
 = 0;

227 i‡(
¨gc
 > 2) {

228 
	`ußge
();

231 
shcwd
 = 
	`shmem_mÆloc
(
BUFSIZE
);

232 
	`as£π
(
shcwd
 !
NULL
);

234 *
buf„r
;

235 (
buf„r
 = 
	`ªadlöe
((
öãø˘ive
Ë? "$ " : 
NULL
)) != NULL) {

236 
shcwd
[0] = '\0';

237 
pid
;

238 i‡((
pid
 = 
	`f‹k
()) == 0) {

239 
ªt
 = 
	`runcmd
(
buf„r
);

240 
	`exô
(
ªt
);

242 
	`as£π
(
pid
 >= 0);

243 i‡(
	`waôpid
(
pid
, &
ªt
) == 0) {

244 i‡(
ªt
 =0 && 
shcwd
[0] != '\0') {

245 
ªt
 = 
	`chdú
(
shcwd
);

247 i‡(
ªt
 != 0) {

248 
	`¥ötf
("îr‹: %d - %e\n", 
ªt
,Ñet);

253 
	}
}

	@user-ucore/shmemtest.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<mÆloc.h
>

5 
	~<°rög.h
>

7 *
	gbuf1
, *
	gbuf2
;

10 
	$maö
() {

11 
	`as£π
((
buf1
 = 
	`shmem_mÆloc
(8192)Ë!
NULL
);

12 
	`as£π
((
buf2
 = 
	`mÆloc
(4096)Ë!
NULL
);

14 
i
;

15 
i
 = 0; i < 4096; i ++) {

16 *(*)(
buf1
 + 
i
) = ()i;

18 
	`mem£t
(
buf2
, 0, 4096);

20 
pid
, 
exô_code
;

21 i‡((
pid
 = 
	`f‹k
()) == 0) {

22 
i
 = 0; i < 4096; i ++) {

23 
	`as£π
(*(*)(
buf1
 + 
i
) == ()i);

25 
	`mem˝y
(
buf1
 + 4096, buf1, 4096);

26 
	`mem£t
(
buf1
, 0, 4096);

27 
	`mem£t
(
buf2
, 0xFF, 4096);

28 
	`exô
(0);

30 
	`as£π
(
pid
 > 0 && 
	`waôpid
’id, &
exô_code
) == 0 &&Éxit_code == 0);

32 
i
 = 0; i < 4096; i ++) {

33 
	`as£π
(*(*)(
buf1
 + 4096 + 
i
) == ()i);

34 
	`as£π
(*(*)(
buf1
 + 
i
) == 0);

35 
	`as£π
(*(*)(
buf2
 + 
i
) == 0);

38 
	`‰ì
(
buf1
);

39 
	`‰ì
(
buf2
);

41 
	`˝rötf
("shmemtestÖass.\n");

43 
	}
}

	@user-ucore/sleep.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<mÆloc.h
>

5 
	s¶Ÿ
 {

6 
	md©a
[4096];

7 
¶Ÿ
 *
	m√xt
;

11 
	$gluâ⁄
() {

12 
¶Ÿ
 *
tmp
, *
hód
 = 
NULL
;

13 
n
 = 0;

14 
	`˝rötf
("Iám childánd I willÉat outállÅhe memory.\n");

15 (
tmp
 = (
¶Ÿ
 *)
	`mÆloc
((¶Ÿ))Ë!
NULL
) {

16 i‡((++ 
n
) % 1000 == 0) {

17 
	`˝rötf
("Iáã %d slŸs.\n", 
n
);

18 
	`¶ìp
(50);

20 
tmp
->
√xt
 = 
hód
;

21 
hód
 = 
tmp
;

23 
	`exô
(0xdead);

24 
	}
}

27 
	$¶ìpy
(
pid
) {

28 
i
, 
time
 = 100;

29 
i
 = 0; i < 10; i ++) {

30 
	`¶ìp
(
time
);

31 
	`˝rötf
("¶ì∞%d x %d sli˚s.\n", 
i
 + 1, 
time
);

33 
	`as£π
(
	`kûl
(
pid
) == 0);

34 
	`exô
(0);

35 
	}
}

38 
	$maö
() {

39 
time
 = 
	`gëtime_m£c
();

40 
pid1
, 
pid2
, 
exô_code
;

41 i‡((
pid1
 = 
	`f‹k
()) == 0) {

42 
	`gluâ⁄
();

44 
	`as£π
(
pid1
 > 0);

46 i‡((
pid2
 = 
	`f‹k
()) == 0) {

47 
	`¶ìpy
(
pid1
);

49 i‡(
pid2
 < 0) {

50 
	`kûl
(
pid1
);

51 
	`∑nic
("fork failed.\n");

54 
	`as£π
(
	`waôpid
(
pid2
, &
exô_code
) == 0 &&Éxit_code == 0);

55 
	`˝rötf
("u£ %04d m£cs.\n", 
	`gëtime_m£c
(Ë- 
time
);

56 
	`˝rötf
("sleepÖass.\n");

58 
	}
}

	@user-ucore/sleepkill.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
pid
;

7 i‡((
pid
 = 
	`f‹k
()) == 0) {

8 
	`¶ìp
(~0);

9 
	`exô
(0xdead);

11 
	`as£π
(
pid
 > 0);

13 
	`¶ìp
(100);

14 
	`as£π
(
	`kûl
(
pid
) == 0);

15 
	`˝rötf
("sleepkillÖass.\n");

17 
	}
}

	@user-ucore/spin.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

5 
	$maö
() {

6 
pid
, 
ªt
;

7 
	`˝rötf
("IámÅheÖarent. ForkingÅhe child...\n");

8 i‡((
pid
 = 
	`f‹k
()) == 0) {

9 
	`˝rötf
("IámÅhe child. spinning ...\n");

12 
	`˝rötf
("IámÅheÖarent. RunningÅhe child...\n");

14 
	`yõld
();

15 
	`yõld
();

16 
	`yõld
();

18 
	`˝rötf
("IámÅheÖarent. KillingÅhe child...\n");

20 
	`as£π
((
ªt
 = 
	`kûl
(
pid
)) == 0);

21 
	`˝rötf
("kû»ªtu∫†%d\n", 
ªt
);

23 
	`as£π
((
ªt
 = 
	`waôpid
(
pid
, 
NULL
)) == 0);

24 
	`˝rötf
("waôÑëu∫†%d\n", 
ªt
);

26 
	`˝rötf
("spin mayÖass.\n");

28 
	}
}

	@user-ucore/spipetest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<°rög.h
>

4 
	~<•ùe.h
>

5 
	~<mÆloc.h
>

8 
	$maö
() {

9 
•ùe_t
 
pùe
;

10 
	`as£π
(
	`•ùe
(&
pùe
) == 0);

12 
i
, 
pid
;

13 i‡((
pid
 = 
	`f‹k
()) == 0) {

14 
i
 = 0; i < 10; i ++) {

15 
	`yõld
();

17 i‡(
	`•ùewrôe
(&
pùe
, "A", 1) == 1) {

18 
	`˝rötf
("child write ok\n");

20 
	`•ùe˛o£
(&
pùe
);

21 
	`exô
(0);

23 
	`as£π
(
pid
 > 0);

25 
	`¶ìp
(100);

26 
Àn
;

27 
buf
[100];

28 
	`as£π
((
Àn
 = 
	`•ùîód
(&
pùe
, 
buf
, (buf))) == 1 && buf[0] == 'A');

29 
	`as£π
(
	`•ùe˛o£
(&
pùe
) == 0);

30 
	`˝rötf
("parentÑead ok\n");

31 
	`˝rötf
("spipetestÖass\n");

33 
	}
}

	@user-ucore/spipetest2.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<°rög.h
>

4 
	~<•ùe.h
>

5 
	~<mÆloc.h
>

6 
	~<°rög.h
>

7 
	~<thªad.h
>

9 
•ùe_t
 
	gpùe
;

11 
thªad_t
 
	gtids
[10];

12 
	gtŸÆ
 = (
tids
) / (tids[0]);

15 
	$thªad_maö
(*
¨g
) {

16 
id
 = ()
¨g
;

17 
	`˝rötf
("thi†i†%d\n", 
id
);

19 
size_t
 
n
 = 10000;

20 *
buf
 = 
	`mÆloc
((Ë* 
n
);

21 i‡(
buf
 =
NULL
) {

25 
	`mem£t
(
buf
, ()
id
, 
n
);

27 
i
, 
rounds
 = 20;

28 
i
 = 0; i < 
rounds
; i ++) {

29 
size_t
 
ªt
 = 
	`•ùewrôe
(&
pùe
, 
buf
, 
n
);

30 i‡(
ªt
 !
n
) {

31 
	`˝rötf
("pipe is closed,ÅooÉarly.\n");

34 i‡(
id
 == 0) {

35 
	`˝rötf
("£nd %d/%d\n", 
i
, 
rounds
);

39 
	}
}

42 
	$¥o˚ss_maö
() {

43 
cou¡s
[
tŸÆ
], 
i
;

44 
i
 = 0; i < 
tŸÆ
; i ++) {

45 
cou¡s
[
i
] = 0;

48 
buf
[128];

49 
size_t
 
n
 = (
buf
);

52 
size_t
 
ªt
 = 
	`•ùîód
(&
pùe
, 
buf
, 
n
);

53 i‡(
ªt
 == 0) {

56 
i
 = 0; i < 
ªt
; i ++) {

57 
cou¡s
[(()
buf
[
i
]Ë% 
tŸÆ
] ++;

60 i‡(
	`•ùeis˛o£d
(&
pùe
)) {

61 
i
 = 0; i < 
tŸÆ
; i ++) {

62 
	`˝rötf
("%dÑód†%d\n", 
i
, 
cou¡s
[i]);

64 
	`exô
(0);

66 
	`exô
(0xbad);

67 
	}
}

70 
	$maö
() {

71 
pid
, 
i
;

72 
	`as£π
(
	`•ùe
(&
pùe
) == 0);

74 i‡((
pid
 = 
	`f‹k
()) == 0) {

75 
	`¥o˚ss_maö
();

77 
	`as£π
(
pid
 > 0);

79 
	`mem£t
(
tids
, 0, (
thªad_t
Ë* 
tŸÆ
);

80 
i
 = 0; i < 
tŸÆ
; i ++) {

81 i‡(
	`thªad
(
thªad_maö
, (*)()
i
, 
tids
 + i) != 0) {

82 
Áûed
;

86 
exô_code
;

87 
i
 = 0; i < 
tŸÆ
; i ++) {

88 i‡(
	`thªad_waô
(
tids
 + 
i
, &
exô_code
) != 0 ||Éxit_code != 0) {

89 
Áûed
;

93 
i
 = 0; i < 
tŸÆ
; i ++) {

94 
	`yõld
();

97 
	`as£π
(
	`•ùe˛o£
(&
pùe
) == 0);

98 
	`as£π
(
	`waôpid
(
pid
, &
exô_code
) == 0 &&Éxit_code == 0);

99 
	`˝rötf
("spipetest2Öass.\n");

102 
Áûed
:

103 
i
 = 0; i < 
tŸÆ
; i ++) {

104 i‡(
tids
[
i
].
pid
 > 0) {

105 
	`kûl
(
tids
[
i
].
pid
);

108 
	`kûl
(
pid
);

109 
	`∑nic
("FAIL: T.T\n");

110 
	}
}

	@user-ucore/swaptest.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

3 
	~<°rög.h
>

4 
	~<mÆloc.h
>

6 c⁄° 
	gsize
 = 5 * 1024 * 1024;

7 *
	gbuf„r
;

9 
	gpid
[10] = {0}, 
	gpids
;

12 
	$do_yõld
() {

13 
i
;

14 
i
 = 0; i < 5; i ++) {

15 
	`yõld
();

17 
	}
}

20 
	$w‹k
(
num
, 
boﬁ
 
¥öt
) {

21 
	#¥ötf
(...) \

23 i‡((
¥öt
)) { \

24 
	`˝rötf
(
__VA_ARGS__
); \

26 } 0)

	)

28 
	`do_yõld
();

30 
i
, 
j
;

31 
i
 = 0; i < 
size
; i ++) {

32 
	`as£π
(
buf„r
[
i
] == ()(i * i));

35 
	`¥ötf
("check cow ok.\n");

37 
c
 = ()
num
;

39 
i
 = 0; i < 5; i ++, 
c
 ++) {

40 
	`¥ötf
("round %d\n", 
i
);

41 
	`mem£t
(
buf„r
, 
c
, 
size
);

42 
j
 = 0; j < 
size
; j ++) {

43 
	`as£π
(
buf„r
[
i
] =
c
);

47 
	`do_yõld
();

49 
	`¥ötf
("child check ok.\n");

51 #unde‡
¥ötf


52 
	}
}

55 
	$maö
() {

56 
	`as£π
((
buf„r
 = 
	`mÆloc
(
size
)Ë!
NULL
);

57 
	`˝rötf
("buf„∏sizê%08x\n", 
size
);

59 
pids
 = (
pid
) / (pid[0]);

61 
i
;

62 
i
 = 0; i < 
size
; i ++) {

63 
buf„r
[
i
] = ()(i * i);

66 
i
 = 0; i < 
pids
; i ++) {

67 i‡((
pid
[
i
] = 
	`f‹k
()) == 0) {

68 
	`¶ìp
((
pids
 - 
i
) * 10);

69 
	`˝rötf
("chûd %d f‹k ok,Öid = %d.\n", 
i
, 
	`gëpid
());

70 
	`w‹k
(
	`gëpid
(), 
i
 == 0);

71 
	`exô
(0xbee);

73 i‡(
pid
[
i
] < 0) {

74 
Áûed
;

77 
	`˝rötf
("parent init ok.\n");

79 
i
 = 0; i < 
pids
; i ++) {

80 
exô_code
, 
ªt
;

81 i‡((
ªt
 = 
	`waôpid
(
pid
[
i
], &
exô_code
)) == 0) {

82 i‡(
exô_code
 == 0xbee) {

86 
	`˝rötf
("wait failed: %d,Öid = %d,Ñet = %d,Éxit = %x.\n",

87 
i
, 
pid
[i], 
ªt
, 
exô_code
);

88 
Áûed
;

91 
	`˝rötf
("wait ok.\n");

92 
i
 = 0; i < 
size
; i ++) {

93 
	`as£π
(
buf„r
[
i
] == ()(i * i));

96 
	`˝rötf
("check buffer ok.\n");

97 
	`˝rötf
("swaptestÖass.\n");

100 
Áûed
:

101 
i
 = 0; i < 
pids
; i ++) {

102 i‡(
pid
[
i
] > 0) {

103 
	`kûl
(
pid
[
i
]);

106 
	`∑nic
("FAIL: T.T\n");

107 
	}
}

	@user-ucore/test_mod_add.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mod.h
>

5 
	~<uni°d.h
>

6 
	~<sysˇŒ.h
>

7 
	~<fûe.h
>

9 
	#USAGE
 "ã°_mod_add <öt1> <öt2>\n"

	)

11 
	$isdigô
(
c
) {

12  
c
 >= '0' && c <= '9';

13 
	}
}

15 
	$©oi
(c⁄° * 
s
) {

16 c⁄° * 
p
;

17 
ªt
 = 0;

18 
sign
 = 1;

19 
p
 = 
s
; *p;Ö++) {

20 i‡(
	`isdigô
(*
p
)) {

21 
ªt
 =Ñë * 10 + (*
p
 - '0');

22 } i‡(*
p
 == '-') {

23 
sign
 = 0;

26  
sign
 ? 
ªt
 : -ret;

27 
	}
}

30 
	$maö
(
¨gc
, **
¨gv
) {

31 i‡(
¨gc
 <= 2) {

32 
	`wrôe
(1, 
USAGE
, 
	`°æí
(USAGE));

35 
a
 = 
	`©oi
(
¨gv
[1]);

36 
b
 = 
	`©oi
(
¨gv
[2]);

37 
c
 = 
	`sys_mod_add
(
a
, 
b
);

38 
rs
[30];

39 
	`¢¥ötf
(
rs
, 30, "%d + %d = %d\n", 
a
, 
b
, 
c
);

40 
	`wrôe
(1, 
rs
, 
	`°æí
(rs));

42 
	}
}

	@user-ucore/test_mod_mul.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<mod.h
>

5 
	~<uni°d.h
>

6 
	~<sysˇŒ.h
>

7 
	~<fûe.h
>

9 
	#USAGE
 "ã°_mod_add <öt1> <öt2>\n"

	)

11 
	$isdigô
(
c
) {

12  
c
 >= '0' && c <= '9';

13 
	}
}

15 
	$©oi
(c⁄° * 
s
) {

16 c⁄° * 
p
;

17 
ªt
 = 0;

18 
sign
 = 1;

19 
p
 = 
s
; *p;Ö++) {

20 i‡(
	`isdigô
(*
p
)) {

21 
ªt
 =Ñë * 10 + (*
p
 - '0');

22 } i‡(*
p
 == '-') {

23 
sign
 = 0;

26  
sign
 ? 
ªt
 : -ret;

27 
	}
}

30 
	$maö
(
¨gc
, **
¨gv
) {

31 i‡(
¨gc
 <= 2) {

32 
	`wrôe
(1, 
USAGE
, 
	`°æí
(USAGE));

35 
a
 = 
	`©oi
(
¨gv
[1]);

36 
b
 = 
	`©oi
(
¨gv
[2]);

37 
c
 = 
	`sys_mod_mul
(
a
, 
b
);

38 
rs
[30];

39 
	`¢¥ötf
(
rs
, 30, "%d * %d = %d\n", 
a
, 
b
, 
c
);

40 
	`wrôe
(1, 
rs
, 
	`°æí
(rs));

42 
	}
}

	@user-ucore/testbss.c

1 
	~<°dio.h
>

2 
	~<ulib.h
>

4 
	#ARRAYSIZE
 (1024*1024)

	)

6 
uöt32_t
 
	gbig¨øy
[
ARRAYSIZE
];

9 
	$maö
() {

10 
	`˝rötf
("Making sure bss worksÑight...\n");

11 
i
;

12 
i
 = 0; i < 
ARRAYSIZE
; i ++) {

13 i‡(
big¨øy
[
i
] != 0) {

14 
	`∑nic
("big¨øy[%d] i¢'à˛óªd!\n", 
i
);

17 
i
 = 0; i < 
ARRAYSIZE
; i ++) {

18 
big¨øy
[
i
] = i;

20 
i
 = 0; i < 
ARRAYSIZE
; i ++) {

21 i‡(
big¨øy
[
i
] != i) {

22 
	`∑nic
("big¨øy[%d] didn'àhﬁd it†vÆue!\n", 
i
);

26 
	`˝rötf
("Yes, good. Now doingá wild write offÅheÉnd...\n");

27 
	`˝rötf
("testbss mayÖass.\n");

29 
big¨øy
[
ARRAYSIZE
 + 1024] = 0;

30 
	`∑nic
("FAIL: T.T\n");

31 
	}
}

	@user-ucore/threadbench1.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<thªad.h
>

5 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

7 
	#NR_LOOPS
 10000

	)

10 
	$ã°
(*
¨g
) {

11 
pid
 = 
	`gëpid
();

12 
	`¥ötf
 ("ChûdÅhªadÖid = %d\n", 
pid
);

14 
i
, 
j
;

15 
i
 = 0; i < 
NR_LOOPS
; i++)

16 
j
 = 0; j < 
NR_LOOPS
; j++)

20 
	}
}

22 
	#NR_THREADS
 10

	)

25 
	$maö
() {

26 
pid
 = 
	`gëpid
();

27 
	`¥ötf
 ("ThêmaöÅhªadÖid = %d\n", 
pid
);

29 
thªad_t
 
tid
[
NR_THREADS
];

30 
i
;

32 
i
 = 0; i < 
NR_THREADS
; i++) {

33 i‡(
	`thªad
(
ã°
, 
NULL
, 
tid
 + 
i
) != 0)

34 
	`¥ötf
 ("Thªad %d i†nŸ cª©ed.\n", 
i
);

37 
exô_code
;

38 
i
 = 0; i < 
NR_THREADS
; i++) {

39 i‡(
	`thªad_waô
(
tid
 + 
i
, &
exô_code
) != 0 ||Éxit_code != 0xbee)

40 
	`¥ötf
 ("Thªad %d i†nŸÑu¿n‹mÆly.\n", 
i
);

43 
	`˝rötf
("threadÅestbench1Éxits.\n");

45 
	}
}

	@user-ucore/threadfork.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<thªad.h
>

5 c⁄° 
	gf‹knum
 = 125;

8 
	$do_yõld
() {

9 
i
;

10 
i
 = 0; i < 30; i ++) {

11 
	`¶ìp
(10);

12 
	`yõld
();

14 
	}
}

17 
	$¥o˚ss_maö
() {

18 
	`do_yõld
();

19 
	}
}

22 
	$thªad_maö
(*
¨g
) {

23 
i
, 
pid
;

24 
i
 = 0; i < 
f‹knum
; i ++) {

25 i‡((
pid
 = 
	`f‹k
()) == 0) {

26 
	`¥o˚ss_maö
();

27 
	`exô
(0);

30 
	`do_yõld
();

32 
	}
}

35 
	$maö
() {

36 
thªad_t
 
tids
[10];

38 
i
, 
n
 = (
tids
) / (tids[0]);

39 
i
 = 0; i < 
n
; i ++) {

40 i‡(
	`thªad
(
thªad_maö
, 
NULL
, 
tids
 + 
i
) != 0) {

41 
Áûed
;

45 
cou¡
 = 0;

46 
	`waô
() == 0) {

47 
cou¡
 ++;

50 
	`as£π
(
cou¡
 =(
f‹knum
 + 1Ë* 
n
);

51 
	`˝rötf
("threadforkÖass.\n");

54 
Áûed
:

55 
i
 = 0; i < 
n
; i ++) {

56 i‡(
tids
[
i
].
pid
 > 0) {

57 
	`kûl
(
tids
[
i
].
pid
);

60 
	`∑nic
("FAIL: T.T\n");

61 
	}
}

	@user-ucore/threadgroup1.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<thªad.h
>

6 
	$thªad_lo›
(*
¨g
) {

9 
	}
}

12 
	$maö
() {

13 
thªad_t
 
tids
[10];

15 
i
, 
n
 = (
tids
) / (tids[0]);

16 
i
 = 0; i < 
n
; i ++) {

17 i‡(
	`thªad
(
thªad_lo›
, 
NULL
, 
tids
 + 
i
) != 0) {

18 
Áûed
;

22 
	`˝rötf
("thread ok.\n");

24 
i
 = 0; i < 3; i ++) {

25 
	`˝rötf
("yõld %d.\n", 
i
);

26 
	`yõld
();

28 
	`˝rötf
("exitÅhread groupÇow.\n");

31 
Áûed
:

32 
i
 = 0; i < 10; i ++) {

33 i‡(
tids
[
i
].
pid
 > 0) {

34 
	`kûl
(
tids
[
i
].
pid
);

37 
	`∑nic
("FAIL: T.T\n");

38 
	}
}

	@user-ucore/threadgroup2.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<thªad.h
>

6 
	$thªad_lo›
(*
¨g
) {

7 
quô
 = ()
¨g
;

8 
quô
 != 0)

11 
i
;

12 
i
 = 0; i < 3; i ++) {

13 
	`˝rötf
("yõld %d.\n", 
i
);

14 
	`yõld
();

16 
	`˝rötf
("exitÅhread groupÇow.\n");

17 
	`exô
(0);

18 
	}
}

21 
	$maö
() {

22 
thªad_t
 
tids
[10];

24 
i
, 
n
 = (
tids
) / (tids[0]);

25 
i
 = 0; i < 
n
; i ++) {

26 i‡(
	`thªad
(
thªad_lo›
, (*)()
i
, 
tids
 + i) != 0) {

27 
Áûed
;

31 
	`˝rötf
("thread ok.\n");

38 
Áûed
:

39 
i
 = 0; i < 10; i ++) {

40 i‡(
tids
[
i
].
pid
 > 0) {

41 
	`kûl
(
tids
[
i
].
pid
);

44 
	`∑nic
("FAIL: T.T\n");

45 
	}
}

	@user-ucore/threadtest.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<thªad.h
>

6 
	$ã°
(*
¨g
) {

7 
	`˝rötf
("child ok.\n");

9 
	}
}

12 
	$maö
() {

13 
thªad_t
 
tid
;

14 
	`as£π
(
	`thªad
(
ã°
, 
NULL
, &
tid
) == 0);

15 
	`˝rötf
("thread ok.\n");

17 
exô_code
;

18 
	`as£π
(
	`thªad_waô
(&
tid
, &
exô_code
) == 0 &&Éxit_code == 0xbee);

20 
	`˝rötf
("threadtestÖass.\n");

22 
	}
}

	@user-ucore/threadwork.c

1 
	~<ulib.h
>

2 
	~<mÆloc.h
>

3 
	~<thªad.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

8 **
	gbuf„r
;

9 
thªad_t
 *
	gtids
;

10 c⁄° 
	gsize
 = 47, 
	grounds
 = 103;

13 
	$w‹k
(*
¨g
) {

14 
n
 = ()
¨g
;

15 
vÆue
 = 
	`hash32
(
n
 *Ç, 8);

16 
	`˝rötf
("òam %02d, %02d, i gŸ %08x\n", 
n
, 
	`gëpid
(), 
vÆue
);

17 
	`yõld
();

18 
i
, 
j
;

19 
i
 = 0; i < 
size
; i ++) {

20 
j
 = 
n
; j < 
size
 * 
rounds
; j += size) {

21 
buf„r
[
i
][
j
] = ()
vÆue
;

25 
	}
}

28 
	$lo›
(*
¨g
) {

29 
	`˝rötf
("child: doÇothing\n");

31 
	}
}

34 
	$maö
() {

35 
buf„r
 = (**)
	`mÆloc
((*Ë* 
size
);

37 
i
, 
j
, 
k
, 
ªt
;

38 
i
 = 0; i < 
size
; i ++) {

39 
	`as£π
((
buf„r
[
i
] = (*)
	`mÆloc
((Ë* 
size
 * 
rounds
)Ë!
NULL
);

43 
	`¥öt_pgdú
();

45 
	`as£π
((
tids
 = (
thªad_t
 *)
	`mÆloc
(—hªad_tË* 
size
)Ë!
NULL
);

46 
	`mem£t
(
tids
, 0, (
thªad_t
Ë* 
size
);

49 
i
 = 0; i < 
size
; i ++) {

50 i‡((
ªt
 = 
	`thªad
(
w‹k
, (*)()
i
, 
tids
 + i)) != 0) {

51 
	`˝rötf
("thªad %d faûed,Ñëu∫†%d\n", 
i
, 
ªt
);

52 
Áûed
;

56 
	`˝rötf
("thread ok.\n");

59 
i
 = 0; i < 
size
 * 2; i ++) {

60 
	`yõld
();

64 
	`¥öt_pgdú
();

67 
i
 = 0; i < 
size
; i ++) {

68 
exô_code
 = 0;

69 i‡(
	`thªad_waô
(
tids
 + 
i
, &
exô_code
) != 0) {

70 
Áûed
;

72 i‡(
exô_code
 != 0xbee) {

73 
	`˝rötf
("thªad %dÉxô faûed, %d\n", 
i
, 
exô_code
);

74 
Áûed
;

78 
	`˝rötf
("thread wait ok.\n");

80 
	`¥öt_pgdú
();

82 
k
 = 0; k < 
size
; k ++) {

83 
vÆue
 = 
	`hash32
(
k
 * k, 8);

84 
i
 = 0; i < 
size
; i ++) {

85 
j
 = 
k
; j < 
size
 * 
rounds
; j += size) {

86 
	`as£π
(
buf„r
[
i
][
j
] =()
vÆue
);

92 
thªad_t
 
lo›_tid
;

93 
	`as£π
(
	`thªad
(
lo›
, 
NULL
, &
lo›_tid
) == 0);

94 
	`˝rötf
("loop init ok.\n");

96 i‡(
	`thªad_kûl
(&
lo›_tid
) != 0) {

97 
	`kûl
(
lo›_tid
.
pid
);

98 
	`∑nic
("killÜoop_tid failed.\n");

102 
	`as£π
(
	`waô
() == 0 && wait() != 0);

104 
	`˝rötf
("threadworkÖass.\n");

107 
Áûed
:

108 
i
 = 0; i < 
size
; i ++) {

109 i‡(
tids
[
i
].
pid
 > 0) {

110 
	`kûl
(
tids
[
i
].
pid
);

113 
	`∑nic
("FAIL: T.T\n");

114 
	}
}

	@user-ucore/time.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<sysˇŒ.h
>

5 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

8 
	$maö
(
¨gc
, **
¨gv
)

10 
pid
;

11 
¨gv
[
¨gc
] = 0;

12 
uöt64_t
 
bef‹e
 = 
	`sys_gëtime
 ();

14 i‡(
¨gc
 > 1) {

15 
pid
 = 
	`f‹k
 ();

16 i‡(
pid
 < 0) {

17 
	`¥ötf
 ("Error: cannot forkÖrocess.\n");

18 } i‡(
pid
 == 0) {

19 
	`__exec
 (
NULL
, 
¨gv
 + 1);

21 
	`waôpid
 (
pid
, 
NULL
);

24 
uöt64_t
 
a·î
 = 
	`sys_gëtime
 ();

26 
	`¥ötf
 ("\n ===== Summary ===== \n");

27 
	`¥ötf
 ("ªÆ %ldÅicks.\n", 
a·î
 - 
bef‹e
);

28 
	`¥ötf
 ("\n");

30 
	}
}

	@user-ucore/unlink.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

3 
	~<dú.h
>

5 
	#¥ötf
(...Ë
	`Ârötf
(1, 
__VA_ARGS__
)

	)

8 
	$ußge
() {

9 
	`¥ötf
("usage: unlink dir [...]\n");

10 
	}
}

13 
	$maö
(
¨gc
, **
¨gv
) {

14 i‡(
¨gc
 == 1) {

15 
	`ußge
();

19 
i
, 
ªt
;

20 
i
 = 1; i < 
¨gc
; i ++) {

21 i‡((
ªt
 = 
	`u∆ök
(
¨gv
[
i
])) != 0) {

22  
ªt
;

27 
	}
}

	@user-ucore/waitkill.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

5 
	$do_yõld
() {

6 
	`yõld
();

7 
	`yõld
();

8 
	`yõld
();

9 
	`yõld
();

10 
	`yõld
();

11 
	`yõld
();

12 
	}
}

14 
	g∑ª¡
, 
	gpid1
, 
	gpid2
;

17 
	$lo›
() {

18 
	`˝rötf
("child 1.\n");

20 
	}
}

23 
	$w‹k
() {

24 
	`˝rötf
("child 2.\n");

25 
	`do_yõld
();

26 i‡(
	`kûl
(
∑ª¡
) == 0) {

27 
	`˝rötf
("killÖarent ok.\n");

28 
	`do_yõld
();

29 i‡(
	`kûl
(
pid1
) == 0) {

30 
	`˝rötf
("kill child1 ok.\n");

31 
	`exô
(0);

34 
	`exô
(-1);

35 
	}
}

38 
	$maö
() {

39 
∑ª¡
 = 
	`gëpid
();

40 i‡((
pid1
 = 
	`f‹k
()) == 0) {

41 
	`lo›
();

44 
	`as£π
(
pid1
 > 0);

46 i‡((
pid2
 = 
	`f‹k
()) == 0) {

47 
	`w‹k
();

49 i‡(
pid2
 > 0) {

50 
	`˝rötf
("wait child 1.\n");

51 
	`waôpid
(
pid1
, 
NULL
);

52 
	`∑nic
("waôpid %dÑëu∫s\n", 
pid1
);

55 
	`kûl
(
pid1
);

57 
	`∑nic
("FAIL: T.T\n");

58 
	}
}

	@user-ucore/yield.c

1 
	~<ulib.h
>

2 
	~<°dio.h
>

5 
	$maö
() {

6 
i
;

7 
	`˝rötf
("Hñlo, IámÖro˚s†%d.\n", 
	`gëpid
());

8 
i
 = 0; i < 5; i ++) {

9 
	`yõld
();

10 
	`˝rötf
("Back i¿¥o˚s†%d, iãøti⁄ %d.\n", 
	`gëpid
(), 
i
);

12 
	`˝rötf
("AŒ d⁄êöÖro˚s†%d.\n", 
	`gëpid
());

13 
	`˝rötf
("yieldÖass.\n");

15 
	}
}

	@/usr/include/assert.h

42 
	~<sys/cdefs.h
>

43 #ifde‡
__˝lu•lus


44 
	~<°dlib.h
>

52 #unde‡
as£π


53 #unde‡
__as£π


55 #ifde‡
NDEBUG


56 
	#as£π
(
e
Ë(()0)

	)

59 #i‚de‡
__GNUC__


61 
	g__BEGIN_DECLS


62 #i‚de‡
__˝lu•lus


63 
	$ab‹t
(Ë
__dód2
;

65 
	`¥ötf
(c⁄° * 
__ª°ri˘
, ...);

66 
__END_DECLS


68 
	#as£π
(
e
) \

69 ((Ë((
e
Ë? 0 : 
	`__as£π
 (#e, 
__FILE__
, 
__LINE__
)))

	)

70 
	#__as£π
(
e
, 
fûe
, 
löe
) \

71 (()
	`¥ötf
 ("%s:%u: faûedás£πi⁄ `%s'\n", 
fûe
, 
löe
, 
e
), 
	`ab‹t
())

	)

75 
__BEGIN_DECLS


76 
	$__as£π_πn
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

77 #i‡
	`deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1070)

78 
	$__ïrötf
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

80 
__END_DECLS


82 #i‡
	`deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1070)

83 
	#__as£π
(
e
, 
fûe
, 
löe
) \

84 
	`__ïrötf
 ("%s:%u: faûedás£πi⁄ `%s'\n", 
fûe
, 
löe
, 
e
)

	)

87 
	#__as£π
(
e
, 
fûe
, 
löe
) \

88 
	`__as£π_πn
 ((c⁄° *)-1L, 
fûe
, 
löe
, 
e
)

	)

91 #i‡
__DARWIN_UNIX03


92 
	#as£π
(
e
) \

93 (
	`__buûtö_ex≥˘
(!(
e
), 0Ë? 
	`__as£π_πn
(
__func__
, 
__FILE__
, 
__LINE__
, #eË: ()0)

	)

95 
	#as£π
(
e
) \

96 (
	`__buûtö_ex≥˘
(!(
e
), 0Ë? 
	`__as£π
 (#e, 
__FILE__
, 
__LINE__
Ë: ()0)

	)

	@/usr/include/dirent.h

58 #i‚de‡
_DIRENT_H_


59 
	#_DIRENT_H_


	)

64 
	~<_ty≥s.h
>

65 
	~<sys/dúít.h
>

66 
	~<Avaûabûôy.h
>

68 
	g_ãŒdú
;

72 
	m__dd_fd
;

73 
	m__dd_loc
;

74 
	m__dd_size
;

75 *
	m__dd_buf
;

76 
	m__dd_Àn
;

77 
	m__dd_£ek
;

78 
	m__dd_ªwöd
;

79 
	m__dd_Êags
;

80 
__d¨wö_±hªad_muãx_t
 
	m__dd_lock
;

81 
_ãŒdú
 *
	m__dd_td
;

82 } 
	tDIR
;

84 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

86 
	#DIRBLKSIZ
 1024

	)

88 
	#dúfd
(
dúp
Ë((dúp)->
__dd_fd
)

	)

91 
	#DTF_HIDEW
 0x0001

	)

92 
	#DTF_NODUP
 0x0002

	)

93 
	#DTF_REWIND
 0x0004

	)

94 
	#__DTF_READALL
 0x0008

	)

98 #i‚de‡
KERNEL


100 
	~<sys/cdefs.h
>

102 
	g__BEGIN_DECLS


103 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

104 
	$Æphas‹t
(c⁄° *, c⁄° *Ë
	`__DARWIN_INODE64
(
Æphas‹t
);

106 
	$˛o£dú
(
DIR
 *Ë
	`__DARWIN_ALIAS
(
˛o£dú
);

107 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

108 
	$gëdúíåõs
(, *, , *)

109 #i‡
__DARWIN_64_BIT_INO_T


114 
	`__asm
("_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect")

116 
	$__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_0
,
__MAC_10_6
, 
__IPHONE_2_0
,__IPHONE_2_0)

120 
DIR
 *
	$›ídú
(c⁄° *Ë
	`__DARWIN_ALIAS_I
(
›ídú
);

121 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

122 
DIR
 *
	$__›ídú2
(c⁄° *, Ë
	`__DARWIN_ALIAS_I
(
__›ídú2
);

124 
dúít
 *
	$ªaddú
(
DIR
 *Ë
	`__DARWIN_INODE64
(
ªaddú
);

125 
	$ªaddú_r
(
DIR
 *, 
dúít
 *, dúíà**Ë
	`__DARWIN_INODE64
(
ªaddú_r
);

126 
	$ªwöddú
(
DIR
 *Ë
	`__DARWIN_ALIAS_I
(
ªwöddú
);

127 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

128 
	`sˇndú
(c⁄° *, 
dúít
 ***,

129 (*)(
dúít
 *), (*)(c⁄° *, c⁄° *)Ë
	`__DARWIN_INODE64
(
sˇndú
);

130 #ifde‡
__BLOCKS__


131 
	`sˇndú_b
(c⁄° *, 
dúít
 ***,

132 (^)(
dúít
 *), (^)(c⁄° *, c⁄° *)Ë
	$__DARWIN_INODE64
(
sˇndú_b
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

135 
	$£ekdú
(
DIR
 *, Ë
	`__DARWIN_ALIAS_I
(
£ekdú
);

136 
	$ãŒdú
(
DIR
 *Ë
	`__DARWIN_ALIAS_I
(
ãŒdú
);

137 
__END_DECLS


	@/usr/include/errno.h

23 
	~<sys/î∫o.h
>

	@/usr/include/fcntl.h

23 
	~<sys/f˙é.h
>

	@/usr/include/getopt.h

40 #i‚de‡
_GETOPT_H_


41 
	#_GETOPT_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<uni°d.h
>

50 
	#no_¨gumít
 0

	)

51 
	#ªquúed_¨gumít
 1

	)

52 
	#›ti⁄Æ_¨gumít
 2

	)

54 
	s›ti⁄
 {

56 c⁄° *
	m«me
;

61 
	mhas_¨g
;

63 *
	mÊag
;

65 
	mvÆ
;

68 
__BEGIN_DECLS


69 
gë›t_l⁄g
(, * const *, const *,

70 c⁄° 
›ti⁄
 *, *);

71 
gë›t_l⁄g_⁄ly
(, * const *, const *,

72 c⁄° 
›ti⁄
 *, *);

73 #i‚de‡
_GETOPT


74 
	#_GETOPT


	)

75 
	$gë›t
(, * c⁄° [], c⁄° *Ë
	`__DARWIN_ALIAS
(
gë›t
);

77 *
›èrg
;

78 
›töd
, 
›ãº
, 
›t›t
;

80 #i‚de‡
_OPTRESET


81 
	#_OPTRESET


	)

82 
›åe£t
;

84 
__END_DECLS


	@/usr/include/limits.h

60 #i‚de‡
_LIMITS_H_


61 
	#_LIMITS_H_


	)

63 
	~<sys/cdefs.h
>

64 
	~<machöe/limôs.h
>

65 
	~<sys/sy¶imôs.h
>

67 #i‡
__DARWIN_C_LEVEL
 > 
__DARWIN_C_ANSI


68 
	#_POSIX_ARG_MAX
 4096

	)

69 
	#_POSIX_CHILD_MAX
 25

	)

70 
	#_POSIX_LINK_MAX
 8

	)

71 
	#_POSIX_MAX_CANON
 255

	)

72 
	#_POSIX_MAX_INPUT
 255

	)

73 
	#_POSIX_NAME_MAX
 14

	)

74 
	#_POSIX_NGROUPS_MAX
 8

	)

75 
	#_POSIX_OPEN_MAX
 20

	)

76 
	#_POSIX_PATH_MAX
 256

	)

77 
	#_POSIX_PIPE_BUF
 512

	)

78 
	#_POSIX_SSIZE_MAX
 32767

	)

79 
	#_POSIX_STREAM_MAX
 8

	)

80 
	#_POSIX_TZNAME_MAX
 6

	)

82 
	#_POSIX2_BC_BASE_MAX
 99

	)

83 
	#_POSIX2_BC_DIM_MAX
 2048

	)

84 
	#_POSIX2_BC_SCALE_MAX
 99

	)

85 
	#_POSIX2_BC_STRING_MAX
 1000

	)

86 
	#_POSIX2_EQUIV_CLASS_MAX
 2

	)

87 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

88 
	#_POSIX2_LINE_MAX
 2048

	)

89 
	#_POSIX2_RE_DUP_MAX
 255

	)

92 #i‡
__DARWIN_C_LEVEL
 >= 199309L

93 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

94 
	#_POSIX_AIO_MAX
 1

	)

95 
	#_POSIX_DELAYTIMER_MAX
 32

	)

96 
	#_POSIX_MQ_OPEN_MAX
 8

	)

97 
	#_POSIX_MQ_PRIO_MAX
 32

	)

98 
	#_POSIX_RTSIG_MAX
 8

	)

99 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

100 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

101 
	#_POSIX_SIGQUEUE_MAX
 32

	)

102 
	#_POSIX_TIMER_MAX
 32

	)

105 #i‡
__DARWIN_C_LEVEL
 >= 199506L

106 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

107 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

108 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

111 #i‡
__DARWIN_C_LEVEL
 >= 200112

112 
	#_POSIX_HOST_NAME_MAX
 255

	)

113 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

114 
	#_POSIX_SS_REPL_MAX
 4

	)

115 
	#_POSIX_SYMLINK_MAX
 255

	)

116 
	#_POSIX_SYMLOOP_MAX
 8

	)

117 
	#_POSIX_TRACE_EVENT_NAME_MAX
 30

	)

118 
	#_POSIX_TRACE_NAME_MAX
 8

	)

119 
	#_POSIX_TRACE_SYS_MAX
 8

	)

120 
	#_POSIX_TRACE_USER_EVENT_MAX
 32

	)

121 
	#_POSIX_TTY_NAME_MAX
 9

	)

122 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

123 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

125 
	#_POSIX_RE_DUP_MAX
 
_POSIX2_RE_DUP_MAX


	)

128 #i‡
__DARWIN_C_LEVEL
 >= 200809L

129 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 4

	)

130 
	#PTHREAD_KEYS_MAX
 512

	)

131 
	#PTHREAD_STACK_MIN
 8192

	)

134 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


135 
	#OFF_MIN
 
LLONG_MIN


	)

136 
	#OFF_MAX
 
LLONG_MAX


	)

140 #i‡
__DARWIN_C_LEVEL
 > 
__DARWIN_C_ANSI


143 #i‡!
deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE < 200112L

144 
	#PASS_MAX
 128

	)

147 
	#NL_ARGMAX
 9

	)

148 
	#NL_LANGMAX
 14

	)

149 
	#NL_MSGMAX
 32767

	)

150 
	#NL_NMAX
 1

	)

151 
	#NL_SETMAX
 255

	)

152 
	#NL_TEXTMAX
 2048

	)

154 
	#_XOPEN_IOV_MAX
 16

	)

155 
	#IOV_MAX
 1024

	)

156 
	#_XOPEN_NAME_MAX
 255

	)

157 
	#_XOPEN_PATH_MAX
 1024

	)

	@/usr/include/monitor.h

30 #i‚de‡
__MONITOR_HEADER__


31 
	#__MONITOR_HEADER__


	)

33 
	~<sys/cdefs.h
>

35 
__BEGIN_DECLS


36 
m⁄°¨tup
 (*
lowpc
, *
highpc
);

38 
m⁄ô‹
 (*
lowpc
, *
highpc
, *
buf
, 
bufsiz
, 
˙tsiz
);

40 
m⁄c⁄åﬁ
 (
mode
);

42 
m⁄ouçut
 (c⁄° *
fûíame
);

44 
m⁄öô
 ();

46 
m⁄ª£t
 ();

47 
	g__END_DECLS


	@/usr/include/sched.h

24 #i‚de‡
_SCHED_H_


25 
	#_SCHED_H_


	)

27 
	~<±hªad_im∂.h
>

28 
	~<sys/cdefs.h
>

30 
	g__BEGIN_DECLS


34 #i‚de‡
__POSIX_LIB__


35 
	ssched_∑øm
 { 
	msched_¥i‹ôy
; 
	m__›aque
[
__SCHED_PARAM_SIZE__
]; };

38 
sched_yõld
();

39 
sched_gë_¥i‹ôy_mö
();

40 
sched_gë_¥i‹ôy_max
();

41 
	g__END_DECLS


	@/usr/include/stab.h

42 
	#N_GSYM
 0x20

	)

43 
	#N_FNAME
 0x22

	)

44 
	#N_FUN
 0x24

	)

45 
	#N_STSYM
 0x26

	)

46 
	#N_LCSYM
 0x28

	)

47 
	#N_MAIN
 0x2®

	)

48 
	#N_PC
 0x30

	)

49 
	#N_RSYM
 0x40

	)

50 
	#N_SLINE
 0x44

	)

51 
	#N_DSLINE
 0x46

	)

52 
	#N_BSLINE
 0x48

	)

53 
	#N_SSYM
 0x60

	)

54 
	#N_SO
 0x64

	)

55 
	#N_LSYM
 0x80

	)

56 
	#N_BINCL
 0x82

	)

57 
	#N_SOL
 0x84

	)

58 
	#N_PSYM
 0xa0

	)

59 
	#N_EINCL
 0xa2

	)

60 
	#N_ENTRY
 0xa4

	)

61 
	#N_LBRAC
 0xc0

	)

62 
	#N_EXCL
 0xc2

	)

63 
	#N_RBRAC
 0xe0

	)

64 
	#N_BCOMM
 0xe2

	)

65 
	#N_ECOMM
 0xe4

	)

66 
	#N_ECOML
 0xe8

	)

67 
	#N_LENG
 0x„

	)

	@/usr/include/stdint.h

6 #i‚de‡
_STDINT_H_


7 
	#_STDINT_H_


	)

9 #i‡
__LP64__


10 
	#__WORDSIZE
 64

	)

12 
	#__WORDSIZE
 32

	)

18 #i‚de‡
_INT8_T


19 
	#_INT8_T


	)

20 sig√d 
	töt8_t
;

23 #i‚de‡
_INT16_T


24 
	#_INT16_T


	)

25 
	töt16_t
;

28 #i‚de‡
_INT32_T


29 
	#_INT32_T


	)

30 
	töt32_t
;

33 #i‚de‡
_INT64_T


34 
	#_INT64_T


	)

35 
	töt64_t
;

38 #i‚de‡
_UINT8_T


39 
	#_UINT8_T


	)

40 
	tuöt8_t
;

43 #i‚de‡
_UINT16_T


44 
	#_UINT16_T


	)

45 
	tuöt16_t
;

48 #i‚de‡
_UINT32_T


49 
	#_UINT32_T


	)

50 
	tuöt32_t
;

53 #i‚de‡
_UINT64_T


54 
	#_UINT64_T


	)

55 
	tuöt64_t
;

59 
öt8_t
 
	töt_Àa°8_t
;

60 
öt16_t
 
	töt_Àa°16_t
;

61 
öt32_t
 
	töt_Àa°32_t
;

62 
öt64_t
 
	töt_Àa°64_t
;

63 
uöt8_t
 
	tuöt_Àa°8_t
;

64 
uöt16_t
 
	tuöt_Àa°16_t
;

65 
uöt32_t
 
	tuöt_Àa°32_t
;

66 
uöt64_t
 
	tuöt_Àa°64_t
;

70 
öt8_t
 
	töt_Á°8_t
;

71 
öt16_t
 
	töt_Á°16_t
;

72 
öt32_t
 
	töt_Á°32_t
;

73 
öt64_t
 
	töt_Á°64_t
;

74 
uöt8_t
 
	tuöt_Á°8_t
;

75 
uöt16_t
 
	tuöt_Á°16_t
;

76 
uöt32_t
 
	tuöt_Á°32_t
;

77 
uöt64_t
 
	tuöt_Á°64_t
;

82 #i‚de‡
_INTPTR_T


83 
	#_INTPTR_T


	)

84 
	töçå_t
;

87 #i‚de‡
_UINTPTR_T


88 
	#_UINTPTR_T


	)

89 
	tuöçå_t
;

94 #i‚de‡
_INTMAX_T


95 
	#_INTMAX_T


	)

96 #ifde‡
__INTMAX_TYPE__


97 
__INTMAX_TYPE__
 
	tötmax_t
;

99 
	tötmax_t
;

103 #i‚de‡
_UINTMAX_T


104 
	#_UINTMAX_T


	)

105 #ifde‡
__UINTMAX_TYPE__


106 
__UINTMAX_TYPE__
 
	tuötmax_t
;

108 
	tuötmax_t
;

119 
	#INT8_MAX
 127

	)

120 
	#INT16_MAX
 32767

	)

121 
	#INT32_MAX
 2147483647

	)

122 
	#INT64_MAX
 9223372036854775807LL

	)

124 
	#INT8_MIN
 -128

	)

125 
	#INT16_MIN
 -32768

	)

132 
	#INT32_MIN
 (-
INT32_MAX
-1)

	)

133 
	#INT64_MIN
 (-
INT64_MAX
-1)

	)

135 
	#UINT8_MAX
 255

	)

136 
	#UINT16_MAX
 65535

	)

137 
	#UINT32_MAX
 4294967295U

	)

138 
	#UINT64_MAX
 18446744073709551615ULL

	)

141 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

142 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

143 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

144 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

146 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

147 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

148 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

149 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

151 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

152 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

153 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

154 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

157 
	#INT_FAST8_MIN
 
INT8_MIN


	)

158 
	#INT_FAST16_MIN
 
INT16_MIN


	)

159 
	#INT_FAST32_MIN
 
INT32_MIN


	)

160 
	#INT_FAST64_MIN
 
INT64_MIN


	)

162 
	#INT_FAST8_MAX
 
INT8_MAX


	)

163 
	#INT_FAST16_MAX
 
INT16_MAX


	)

164 
	#INT_FAST32_MAX
 
INT32_MAX


	)

165 
	#INT_FAST64_MAX
 
INT64_MAX


	)

167 
	#UINT_FAST8_MAX
 
UINT8_MAX


	)

168 
	#UINT_FAST16_MAX
 
UINT16_MAX


	)

169 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

170 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

174 #i‡
__WORDSIZE
 == 64

175 
	#INTPTR_MIN
 
INT64_MIN


	)

176 
	#INTPTR_MAX
 
INT64_MAX


	)

178 
	#INTPTR_MIN
 
INT32_MIN


	)

179 
	#INTPTR_MAX
 
INT32_MAX


	)

182 #i‡
__WORDSIZE
 == 64

183 
	#UINTPTR_MAX
 
UINT64_MAX


	)

185 
	#UINTPTR_MAX
 
UINT32_MAX


	)

189 
	#INTMAX_MIN
 
INT64_MIN


	)

190 
	#INTMAX_MAX
 
INT64_MAX


	)

192 
	#UINTMAX_MAX
 
UINT64_MAX


	)

195 #i‡
__WORDSIZE
 == 64

196 
	#PTRDIFF_MIN
 
INT64_MIN


	)

197 
	#PTRDIFF_MAX
 
INT64_MAX


	)

199 
	#PTRDIFF_MIN
 
INT32_MIN


	)

200 
	#PTRDIFF_MAX
 
INT32_MAX


	)

207 #i‡
__WORDSIZE
 == 64

208 
	#SIZE_MAX
 
UINT64_MAX


	)

210 
	#SIZE_MAX
 
UINT32_MAX


	)

213 #i‚de‡
WCHAR_MAX


214 #ifde‡
__WCHAR_MAX__


215 
	#WCHAR_MAX
 
__WCHAR_MAX__


	)

217 
	#WCHAR_MAX
 0x7fffffff

	)

225 #i‚de‡
WCHAR_MIN


226 #i‡
WCHAR_MAX
 == 0xffff

227 
	#WCHAR_MIN
 0

	)

229 
	#WCHAR_MIN
 (-
WCHAR_MAX
-1)

	)

233 
	#WINT_MIN
 
INT32_MIN


	)

234 
	#WINT_MAX
 
INT32_MAX


	)

236 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

237 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

240 
	#INT8_C
(
v
Ë(v)

	)

241 
	#INT16_C
(
v
Ë(v)

	)

242 
	#INT32_C
(
v
Ë(v)

	)

243 
	#INT64_C
(
v
Ë(v ## 
LL
)

	)

245 
	#UINT8_C
(
v
Ë(v ## 
U
)

	)

246 
	#UINT16_C
(
v
Ë(v ## 
U
)

	)

247 
	#UINT32_C
(
v
Ë(v ## 
U
)

	)

248 
	#UINT64_C
(
v
Ë(v ## 
ULL
)

	)

250 
	#INTMAX_C
(
v
Ë(v ## 
LL
)

	)

251 
	#UINTMAX_C
(
v
Ë(v ## 
ULL
)

	)

	@/usr/include/stdio.h

61 #i‚def 
_STDIO_H_


62 
	#_STDIO_H_


	)

64 
	~<sys/cdefs.h
>

65 
	~<Avaûabûôy.h
>

67 
	~<_ty≥s.h
>

69 #i‚de‡
_VA_LIST


70 
	#_VA_LIST


	)

73 
__d¨wö_va_li°
 
	tva_li°
;

76 #i‚def 
_SIZE_T


77 
	#_SIZE_T


	)

78 
__d¨wö_size_t
 
	tsize_t
;

81 #i‚de‡
NULL


82 
	#NULL
 
__DARWIN_NULL


	)

85 
__d¨wö_off_t
 
	tÂos_t
;

87 
	#_FSTDIO


	)

96 
	s__sbuf
 {

97 *
	m_ba£
;

98 
	m_size
;

102 
	g__sFILEX
;

130 
	s__sFILE
 {

131 *
	m_p
;

132 
	m_r
;

133 
	m_w
;

134 
	m_Êags
;

135 
	m_fûe
;

136 
__sbuf
 
	m_bf
;

137 
	m_lbfsize
;

140 *
	m_cookõ
;

141 (*
	m_˛o£
)(*);

142 (*
	m_ªad
) (*, *, );

143 
Âos_t
 (*
_£ek
Ë(*, 
	mÂos_t
, );

144 (*
	m_wrôe
)(*, const *, );

147 
__sbuf
 
	m_ub
;

148 
__sFILEX
 *
	m_exåa
;

149 
	m_ur
;

152 
	m_ubuf
[3];

153 
	m_nbuf
[1];

156 
__sbuf
 
	m_lb
;

159 
	m_blksize
;

160 
Âos_t
 
	m_off£t
;

161 } 
	tFILE
;

163 
__BEGIN_DECLS


164 
FILE
 *
__°döp
;

165 
FILE
 *
__°douç
;

166 
FILE
 *
__°dîΩ
;

167 
	g__END_DECLS


169 
	#__SLBF
 0x0001

	)

170 
	#__SNBF
 0x0002

	)

171 
	#__SRD
 0x0004

	)

172 
	#__SWR
 0x0008

	)

174 
	#__SRW
 0x0010

	)

175 
	#__SEOF
 0x0020

	)

176 
	#__SERR
 0x0040

	)

177 
	#__SMBF
 0x0080

	)

178 
	#__SAPP
 0x0100

	)

179 
	#__SSTR
 0x0200

	)

180 
	#__SOPT
 0x0400

	)

181 
	#__SNPT
 0x0800

	)

182 
	#__SOFF
 0x1000

	)

183 
	#__SMOD
 0x2000

	)

184 
	#__SALC
 0x4000

	)

185 
	#__SIGN
 0x8000

	)

196 
	#_IOFBF
 0

	)

197 
	#_IOLBF
 1

	)

198 
	#_IONBF
 2

	)

200 
	#BUFSIZ
 1024

	)

201 
	#EOF
 (-1)

	)

204 
	#FOPEN_MAX
 20

	)

205 
	#FILENAME_MAX
 1024

	)

208 #i‚de‡
_ANSI_SOURCE


209 
	#P_tmpdú
 "/v¨/tmp/"

	)

211 
	#L_tm≤am
 1024

	)

212 
	#TMP_MAX
 308915776

	)

214 #i‚de‡
SEEK_SET


215 
	#SEEK_SET
 0

	)

217 #i‚de‡
SEEK_CUR


218 
	#SEEK_CUR
 1

	)

220 #i‚de‡
SEEK_END


221 
	#SEEK_END
 2

	)

224 
	#°dö
 
__°döp


	)

225 
	#°dout
 
__°douç


	)

226 
	#°dîr
 
__°dîΩ


	)

228 #ifde‡
_DARWIN_UNLIMITED_STREAMS


229 #i‡
deföed
(
__IPHONE_OS_VERSION_MIN_REQUIRED
Ë&& __IPHONE_OS_VERSION_MIN_REQUIRED < 
__IPHONE_3_2


231 #ñi‡
deföed
(
__MAC_OS_X_VERSION_MIN_REQUIRED
Ë&& __MAC_OS_X_VERSION_MIN_REQUIRED < 
__MAC_10_6


238 
__BEGIN_DECLS


239 
˛óªº
(
FILE
 *);

240 
f˛o£
(
FILE
 *);

241 
„of
(
FILE
 *);

242 
„º‹
(
FILE
 *);

243 
fÊush
(
FILE
 *);

244 
fgëc
(
FILE
 *);

245 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 *);

246 *
fgës
(* 
__ª°ri˘
, , 
FILE
 *);

247 #i‡
deföed
(
_DARWIN_UNLIMITED_STREAMS
Ë|| deföed(
_DARWIN_C_SOURCE
)

248 
FILE
 *
	$f›í
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
, 
	`__DARWIN_EXTSN
(
f›í
));

250 
FILE
 *
	$f›í
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_2_0
, 
	`__DARWIN_ALIAS
(
f›í
));

252 
	$Ârötf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	$__DARWIN_LDBL_COMPAT
(
Ârötf
Ë
	`__¥ötÊike
(2, 3);

253 
	`Âutc
(, 
FILE
 *);

254 
	$Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
Âuts
);

255 
size_t
 
	`‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

256 
FILE
 *
	$‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict,

257 
FILE
 * 
__ª°ri˘
Ë
	`__DARWIN_ALIAS
(
‰e›í
);

258 
	$fsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	$__DARWIN_LDBL_COMPAT
(
fsˇnf
Ë
	`__sˇnÊike
(2, 3);

259 
	`f£ek
(
FILE
 *, , );

260 
	`f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

261 
	`·ñl
(
FILE
 *);

262 
size_t
 
	$fwrôe
(c⁄° * 
__ª°ri˘
, 
size_t
, size_t, 
FILE
 * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
fwrôe
);

263 
	`gëc
(
FILE
 *);

264 
	`gëch¨
();

265 *
	`gës
(*);

266 
	`≥º‹
(const *);

267 
	$¥ötf
(c⁄° * 
__ª°ri˘
, ...Ë
	$__DARWIN_LDBL_COMPAT
(
¥ötf
Ë
	`__¥ötÊike
(1, 2);

268 
	`putc
(, 
FILE
 *);

269 
	`putch¨
();

270 
	`puts
(const *);

271 
	`ªmove
(const *);

272 
	`ª«me
 (const *, const *);

273 
	`ªwöd
(
FILE
 *);

274 
	$sˇnf
(c⁄° * 
__ª°ri˘
, ...Ë
	$__DARWIN_LDBL_COMPAT
(
sˇnf
Ë
	`__sˇnÊike
(1, 2);

275 
	`£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

276 
	`£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

277 
	$•rötf
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	$__DARWIN_LDBL_COMPAT
(
•rötf
Ë
	`__¥ötÊike
(2, 3);

278 
	$ssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, ...Ë
	$__DARWIN_LDBL_COMPAT
(
ssˇnf
Ë
	`__sˇnÊike
(2, 3);

279 
FILE
 *
	`tmpfûe
();

280 *
	`tm≤am
(*);

281 
	`ungëc
(, 
FILE
 *);

282 
	$vÂrötf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
vÂrötf
Ë
	`__¥ötÊike
(2, 0);

283 
	$v¥ötf
(c⁄° * 
__ª°ri˘
, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
v¥ötf
Ë
	`__¥ötÊike
(1, 0);

284 
	$v•rötf
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
v•rötf
Ë
	`__¥ötÊike
(2, 0);

285 
__END_DECLS


293 #i‡
__DARWIN_C_LEVEL
 >= 198808L

294 
	#L_˘îmid
 1024

	)

296 
__BEGIN_DECLS


297 #i‚de‡
__CTERMID_DEFINED


299 
	#__CTERMID_DEFINED
 1

	)

300 *
	`˘îmid
(*);

303 #i‡
	`deföed
(
_DARWIN_UNLIMITED_STREAMS
Ë|| deföed(
_DARWIN_C_SOURCE
)

304 
FILE
 *
	$fd›í
(, c⁄° *Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
, 
	`__DARWIN_EXTSN
(
fd›í
));

306 
FILE
 *
	$fd›í
(, c⁄° *Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_2_0
, 
	`__DARWIN_ALIAS
(
fd›í
));

308 
	`fûío
(
FILE
 *);

309 
__END_DECLS


317 #i‡
__DARWIN_C_LEVEL
 >= 199209L

318 
__BEGIN_DECLS


319 
	`p˛o£
(
FILE
 *);

320 #i‡
	`deföed
(
_DARWIN_UNLIMITED_STREAMS
Ë|| deföed(
_DARWIN_C_SOURCE
)

321 
FILE
 *
	$p›í
(c⁄° *, c⁄° *Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
, 
	`__DARWIN_EXTSN
(
p›í
));

323 
FILE
 *
	$p›í
(c⁄° *, c⁄° *Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_2_0
, 
	`__DARWIN_ALIAS
(
p›í
));

325 
__END_DECLS


337 #i‡
__DARWIN_C_LEVEL
 >= 199506L

340 
__BEGIN_DECLS


341 
	`__§gë
(
FILE
 *);

342 
	$__svfsˇnf
(
FILE
 *, c⁄° *, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
__svfsˇnf
Ë
	`__sˇnÊike
(2, 0);

343 
	`__swbuf
(, 
FILE
 *);

344 
__END_DECLS


350 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

351 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

352 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

353 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

354  (*
_p
->_p++ = 
_c
);

356  (
	`__swbuf
(
_c
, 
_p
));

357 
	}
}

362 
	#__•utc
(
c
, 
p
) \

363 (--(
p
)->
_w
 < 0 ? \

364 (
p
)->
_w
 >’)->
_lbfsize
 ? \

365 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

366 ()*(
p
)->
_p
++ : \

367 
	`__swbuf
('\n', 
p
) : \

368 
	`__swbuf
(()(
c
), 
p
) : \

369 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

372 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

373 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

374 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

375 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

377 
__BEGIN_DECLS


378 
Êockfûe
(
FILE
 *);

379 
·rylockfûe
(
FILE
 *);

380 
fu∆ockfûe
(
FILE
 *);

381 
gëc_u∆ocked
(
FILE
 *);

382 
gëch¨_u∆ocked
();

383 
putc_u∆ocked
(, 
FILE
 *);

384 
putch¨_u∆ocked
();

387 #i‡!
deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE < 200112L

388 
gëw
(
FILE
 *);

389 
putw
(, 
FILE
 *);

392 *
	$ãm≤am
(c⁄° *, c⁄° *Ë
	`__DARWIN_ALIAS
(
ãm≤am
);

393 
__END_DECLS


395 #i‚de‡
löt


396 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

397 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

400 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

401 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
(x, 
°dout
)

	)

411 #i‡
__DARWIN_C_LEVEL
 >= 200112L

412 #i‚def 
_OFF_T


413 
	#_OFF_T


	)

414 
__d¨wö_off_t
 
	toff_t
;

417 
__BEGIN_DECLS


418 
	`f£eko
(
FILE
 *, 
off_t
, );

419 
off_t
 
	`·ñlo
(
FILE
 *);

420 
__END_DECLS


423 #i‡
__DARWIN_C_LEVEL
 >200112L || 
	`deföed
(
_C99_SOURCE
Ë|| deföed(
__˝lu•lus
)

424 
__BEGIN_DECLS


425 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, c⁄° * __ª°ri˘, ...Ë
	$__DARWIN_LDBL_COMPAT
(
¢¥ötf
Ë
	`__¥ötÊike
(3, 4);

426 
	$vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
vfsˇnf
Ë
	`__sˇnÊike
(2, 0);

427 
	$vsˇnf
(c⁄° * 
__ª°ri˘
, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
vsˇnf
Ë
	`__sˇnÊike
(1, 0);

428 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, c⁄° * __ª°ri˘, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
v¢¥ötf
Ë
	`__¥ötÊike
(3, 0);

429 
	$vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
vssˇnf
Ë
	`__sˇnÊike
(2, 0);

430 
__END_DECLS


439 #i‡
__DARWIN_C_LEVEL
 >= 200809L

440 #i‚de‡
_SSIZE_T


441 
	#_SSIZE_T


	)

442 
__d¨wö_ssize_t
 
	tssize_t
;

445 
__BEGIN_DECLS


446 
	$d¥ötf
(, c⁄° * 
__ª°ri˘
, ...Ë
	$__DARWIN_LDBL_COMPAT
(
d¥ötf
Ë
	$__¥ötÊike
(2, 3Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

447 
	$vd¥ötf
(, c⁄° * 
__ª°ri˘
, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
vd¥ötf
Ë
	$__¥ötÊike
(2, 0Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

448 
ssize_t
 
	$gëdñim
(** 
__ª°ri˘
, 
size_t
 * __ª°ri˘, , 
FILE
 * __ª°ri˘Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

449 
ssize_t
 
	$gëlöe
(** 
__ª°ri˘
, 
size_t
 * __ª°ri˘, 
FILE
 * __ª°ri˘Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

450 
__END_DECLS


457 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


458 
__BEGIN_DECLS


459 
__c⁄°
 
sys_√º
;

460 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

462 
	$a•rötf
(**, c⁄° *, ...Ë
	$__DARWIN_LDBL_COMPAT
(
a•rötf
Ë
	`__¥ötÊike
(2, 3);

463 *
	`˘îmid_r
(*);

464 *
	`fgë 
(
FILE
 *, 
size_t
 *);

465 
__c⁄°
 *
	`fmtcheck
(const *, const *);

466 
	`Âurge
(
FILE
 *);

467 
	`£tbuf„r
(
FILE
 *, *, );

468 
	`£éöebuf
(
FILE
 *);

469 
	$va•rötf
(**, c⁄° *, 
va_li°
Ë
	$__DARWIN_LDBL_COMPAT
(
va•rötf
Ë
	`__¥ötÊike
(2, 0);

470 
FILE
 *
	`z›í
(const *, const *, );

476 
FILE
 *
	`fun›í
(const *,

479 
	$Âos_t
 (*)(*, 
Âos_t
, ),

481 
__END_DECLS


482 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

483 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

485 
	#„of_u∆ocked
(
p
Ë
	`__s„of
’)

	)

486 
	#„º‹_u∆ocked
(
p
Ë
	`__s„º‹
’)

	)

487 
	#˛óªº_u∆ocked
(
p
Ë
	`__s˛óªº
’)

	)

488 
	#fûío_u∆ocked
(
p
Ë
	`__sfûío
’)

	)

493 #ifde‡
_USE_EXTENDED_LOCALES_


494 
	~<xloˇÀ/_°dio.h
>

497 #i‡
	`deföed
 (
__GNUC__
Ë&& 
_FORTIFY_SOURCE
 > 0 && !deföed (
__˝lu•lus
)

499 
	~<£cuª/_°dio.h
>

	@/usr/include/stdlib.h

58 #i‚de‡
_STDLIB_H_


59 
	#_STDLIB_H_


	)

61 
	~<Avaûabûôy.h
>

63 
	~<_ty≥s.h
>

64 #i‡!
deföed
(
_ANSI_SOURCE
)

65 
	~<sys/waô.h
>

66 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

67 
	~<Æloˇ.h
>

71 #i‚def 
_SIZE_T


72 
	#_SIZE_T


	)

75 
__d¨wö_size_t
 
	tsize_t
;

78 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

79 #i‚de‡
_CT_RUNE_T


80 
	#_CT_RUNE_T


	)

81 
__d¨wö_˘_ru√_t
 
	t˘_ru√_t
;

84 #i‚de‡
_RUNE_T


85 
	#_RUNE_T


	)

86 
__d¨wö_ru√_t
 
	tru√_t
;

90 #i‚def 
__˝lu•lus


91 #i‚def 
_WCHAR_T


92 
	#_WCHAR_T


	)

93 
__d¨wö_wch¨_t
 
	twch¨_t
;

98 
	mquŸ
;

99 
	mªm
;

100 } 
	tdiv_t
;

103 
	mquŸ
;

104 
	mªm
;

105 } 
	tldiv_t
;

107 #i‡!
__DARWIN_NO_LONG_LONG


109 
	mquŸ
;

110 
	mªm
;

111 } 
	tŒdiv_t
;

114 #i‚de‡
NULL


115 
	#NULL
 
__DARWIN_NULL


	)

118 
	#EXIT_FAILURE
 1

	)

119 
	#EXIT_SUCCESS
 0

	)

121 
	#RAND_MAX
 0x7fffffff

	)

123 #ifde‡
_USE_EXTENDED_LOCALES_


124 
	~<_xloˇÀ.h
>

127 #i‚de‡
MB_CUR_MAX


128 #ifde‡
_USE_EXTENDED_LOCALES_


129 
	#MB_CUR_MAX
 (
	`___mb_cur_max
())

	)

130 #i‚de‡
MB_CUR_MAX_L


131 
	#MB_CUR_MAX_L
(
x
Ë(
	`___mb_cur_max_l
(x))

	)

134 
__mb_cur_max
;

135 
	#MB_CUR_MAX
 
__mb_cur_max


	)

139 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)) \

140 && 
deföed
(
_USE_EXTENDED_LOCALES_
Ë&& !
	$deföed
(
MB_CUR_MAX_L
)

141 
	#MB_CUR_MAX_L
(
x
Ë(
	`___mb_cur_max_l
(x))

	)

144 
__BEGIN_DECLS


145 
	$ab‹t
(Ë
__dód2
;

146 
	$abs
(Ë
__puª2
;

147 
	`©exô
((*)());

148 
	`©of
(const *);

149 
	`©oi
(const *);

150 
	`©ﬁ
(const *);

151 #i‡!
__DARWIN_NO_LONG_LONG


153 
	`©ﬁl
(const *);

155 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

156 
size_t
, (*)(const *, const *));

157 *
	`ˇŒoc
(
size_t
, size_t);

158 
div_t
 
	$div
(, Ë
__puª2
;

159 
	$exô
(Ë
__dód2
;

160 
	`‰ì
(*);

161 *
	`gëív
(const *);

162 
	$œbs
(Ë
__puª2
;

163 
ldiv_t
 
	$ldiv
(, Ë
__puª2
;

164 #i‡!
__DARWIN_NO_LONG_LONG


166 
	`Œabs
();

167 
Œdiv_t
 
	`Œdiv
(, );

169 *
	`mÆloc
(
size_t
);

170 
	`mbÀn
(c⁄° *, 
size_t
);

171 
size_t
 
	`mb°owcs
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t);

172 
	`mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

173 
	$posix_memÆign
(**, 
size_t
, size_tË
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_0
);

174 
	`qs‹t
(*, 
size_t
, size_t,

176 
	`ønd
();

177 *
	`ªÆloc
(*, 
size_t
);

178 
	`§™d
();

179 
	$°πod
(c⁄° *, **Ë
	`__DARWIN_ALIAS
(
°πod
);

180 
	$°πof
(c⁄° *, **Ë
	`__DARWIN_ALIAS
(
°πof
);

181 
	`°πﬁ
(const *, **, );

183 
	$°πﬁd
(c⁄° *, **Ë
	`__DARWIN_LDBL_COMPAT
(
°πﬁd
);

184 #i‡!
__DARWIN_NO_LONG_LONG


186 
	`°πﬁl
(const *, **, );

189 
	`°πoul
(const *, **, );

190 #i‡!
__DARWIN_NO_LONG_LONG


192 
	`°πouŒ
(const *, **, );

194 
	$sy°em
(c⁄° *Ë
	`__DARWIN_ALIAS_C
(
sy°em
);

195 
size_t
 
	`wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

196 
	`w˘omb
(*, 
wch¨_t
);

198 #i‚de‡
_ANSI_SOURCE


199 
	$_Exô
(Ë
__dód2
;

200 
	`a64l
(const *);

201 
	`dønd48
();

202 *
	`ecvt
(, , *
__ª°ri˘
, *__restrict);

203 
	`î™d48
([3]);

204 *
	`fcvt
(, , *
__ª°ri˘
, *__restrict);

205 *
	`gcvt
(, , *);

206 
	`gësub›t
(**, * const *, **);

207 
	`gø¡±
();

208 #i‡
__DARWIN_UNIX03


209 *
	`öô°©e
(, *, 
size_t
);

211 *
	`öô°©e
(, *, );

213 
	`jønd48
([3]);

214 *
	`l64a
();

215 
	`lc⁄g48
([7]);

216 
	`Ã™d48
();

217 *
	`mkãmp
(*);

218 
	`mk°emp
(*);

219 
	`mønd48
();

220 
	`ƒ™d48
([3]);

221 
	`posix_›í±
();

222 *
	`±¢ame
();

223 
	$puãnv
(*Ë
	`__DARWIN_ALIAS
(
puãnv
);

224 
	`øndom
();

225 
	`ønd_r
(*);

226 #i‡(
__DARWIN_UNIX03
 && !
	`deföed
(
_POSIX_C_SOURCE
)Ë|| deföed(
_DARWIN_C_SOURCE
Ë|| deföed(
_DARWIN_BETTER_REALPATH
)

227 *
	$ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __ª°ri˘Ë
	`__DARWIN_EXTSN
(
ªÆ∑th
);

229 *
	$ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __ª°ri˘Ë
	`__DARWIN_ALIAS
(
ªÆ∑th
);

232 *
	`£ed48
([3]);

233 
	$£ãnv
(c⁄° *, c⁄° *, Ë
	`__DARWIN_ALIAS
(
£ãnv
);

234 #i‡
__DARWIN_UNIX03


235 
	$£tkey
(c⁄° *Ë
	`__DARWIN_ALIAS
(
£tkey
);

237 
	`£tkey
(const *);

239 *
	`£t°©e
(const *);

240 
	`§™d48
();

241 #i‡
__DARWIN_UNIX03


242 
	`§™dom
();

244 
	`§™dom
();

246 
	`u∆ock±
();

247 #i‡
__DARWIN_UNIX03


248 
	$un£ãnv
(c⁄° *Ë
	`__DARWIN_ALIAS
(
un£ãnv
);

250 
	`un£ãnv
(const *);

254 #i‡!
	`deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

255 
	~<machöe/ty≥s.h
>

257 #i‚de‡
_DEV_T


258 
__d¨wö_dev_t
 
	tdev_t
;

259 
	#_DEV_T


	)

262 #i‚def 
_MODE_T


263 
__d¨wö_mode_t
 
	tmode_t
;

264 
	#_MODE_T


	)

267 
u_öt32_t


268 
	`¨c4øndom
();

269 
	`¨c4øndom_addøndom
(* , );

270 
	$¨c4øndom_buf
(* , 
size_t
 ) 
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

271 
	`¨c4øndom_°ú
();

272 
u_öt32_t


273 
	$¨c4øndom_unif‹m
(
u_öt32_t
 ) 
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

274 #ifde‡
__BLOCKS__


275 
	`©exô_b
((^)()Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

276 *
	`b£¨ch_b
(c⁄° *, c⁄° *, 
size_t
,

277 
size_t
, (^)(c⁄° *, c⁄° *)Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

281 *
	`cgëˇp
(*, const *, );

282 
	`cgë˛o£
();

283 
	`cgëít
(**, **, const *);

284 
	`cgëfú°
(**, **);

285 
	`cgëm©ch
(const *, const *);

286 
	`cgë√xt
(**, **);

287 
	`cgënum
(*, const *, *);

288 
	`cgë£t
(const *);

289 
	`cgë°r
(*, const *, **);

290 
	`cgëu°r
(*, const *, **);

292 
	$d´m⁄
(, Ë
	$__DARWIN_1050
(
d´m⁄
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_0
, 
__MAC_10_5
, 
__IPHONE_2_0
, __IPHONE_2_0);

293 *
	`dev«me
(
dev_t
, 
mode_t
);

294 *
	`dev«me_r
(
dev_t
, 
mode_t
, *
buf
, 
Àn
);

295 *
	`gëbsize
(*, *);

296 
	`gëlﬂdavg
([], );

298 *
	`gë¥og«me
();

300 
	`hóps‹t
(*, 
size_t
, size_t,

302 #ifde‡
__BLOCKS__


303 
	`hóps‹t_b
(*, 
size_t
, size_t,

304 (^)(c⁄° *, c⁄° *)Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

306 
	`mîges‹t
(*, 
size_t
, size_t,

308 #ifde‡
__BLOCKS__


309 
	`mîges‹t_b
(*, 
size_t
, size_t,

310 (^)(c⁄° *, c⁄° *)Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

312 
	`ps‹t
(*, 
size_t
, size_t,

313 (*)(c⁄° *, c⁄° *)Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

314 #ifde‡
__BLOCKS__


315 
	`ps‹t_b
(*, 
size_t
, size_t,

316 (^)(c⁄° *, c⁄° *)Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

318 
	`ps‹t_r
(*, 
size_t
, size_t, *,

319 (*)(*, c⁄° *, c⁄° *)Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

320 #ifde‡
__BLOCKS__


321 
	`qs‹t_b
(*, 
size_t
, size_t,

322 (^)(c⁄° *, c⁄° *)Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

324 
	`qs‹t_r
(*, 
size_t
, size_t, *,

326 
	`ødixs‹t
(const **, , const *,

328 
	`£çrog«me
(const *);

329 
	`§adixs‹t
(const **, , const *,

331 
	`§™ddev
();

332 
	`§™domdev
();

333 *
	`ªÆlocf
(*, 
size_t
);

334 #i‡!
__DARWIN_NO_LONG_LONG


336 
	`°πoq
(const *, **, );

338 
	`°πouq
(const *, **, );

340 *
sub›èrg
;

341 *
	`vÆloc
(
size_t
);

345 #i‡!
	`deföed
(
__˝lu•lus
Ë&& deföed(
__WCHAR_MAX__
) && __WCHAR_MAX__ <= 0xffffU

346 #¥agm®
GCC
 
pois⁄
 
mb°owcs
 
mbtowc
 
wc°ombs
 
w˘omb


348 
__END_DECLS


350 #ifde‡
_USE_EXTENDED_LOCALES_


351 
	~<xloˇÀ/_°dlib.h
>

	@/usr/include/string.h

58 #i‚de‡
_STRING_H_


59 
	#_STRING_H_


	)

61 
	~<_ty≥s.h
>

63 
	~<sys/cdefs.h
>

64 
	~<Avaûabûôy.h
>

66 #i‚def 
_SIZE_T


67 
	#_SIZE_T


	)

68 
__d¨wö_size_t
 
	tsize_t
;

71 #i‚de‡
NULL


72 
	#NULL
 
__DARWIN_NULL


	)

79 
__BEGIN_DECLS


80 *
memchr
(c⁄° *, , 
size_t
);

81 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

82 *
mem˝y
(*, c⁄° *, 
size_t
);

83 *
memmove
(*, c⁄° *, 
size_t
);

84 *
mem£t
(*, , 
size_t
);

85 *
°rˇt
(*, const *);

86 *
°rchr
(const *, );

87 
°rcmp
(const *, const *);

88 
°rcﬁl
(const *, const *);

89 *
°r˝y
(*, const *);

90 
size_t
 
°rc•n
(const *, const *);

91 *
	$°ªº‹
(Ë
	`__DARWIN_ALIAS
(
°ªº‹
);

92 
size_t
 
	`°æí
(const *);

93 *
	`°∫ˇt
(*, c⁄° *, 
size_t
);

94 
	`°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

95 *
	`°∫˝y
(*, c⁄° *, 
size_t
);

96 *
	`°Ωbrk
(const *, const *);

97 *
	`°ºchr
(const *, );

98 
size_t
 
	`°r•n
(const *, const *);

99 *
	`°r°r
(const *, const *);

100 *
	`°πok
(*, const *);

101 
size_t
 
	`°rx‰m
(*, const *, size_t);

102 
__END_DECLS


112 #i‡
__DARWIN_C_LEVEL
 >= 199506L

113 
__BEGIN_DECLS


114 *
	`°πok_r
(*, const *, **);

115 
__END_DECLS


124 #i‡
__DARWIN_C_LEVEL
 >= 200112L

125 
__BEGIN_DECLS


126 
	`°ªº‹_r
(, *, 
size_t
);

127 *
	`°rdup
(const *);

128 *
	`memc˝y
(*, c⁄° *, , 
size_t
);

129 
__END_DECLS


138 #i‡
__DARWIN_C_LEVEL
 >= 200809L

139 
__BEGIN_DECLS


140 *
	`°p˝y
(*, const *);

141 *
	$°≤˝y
(*, c⁄° *, 
size_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

142 *
	$°∫dup
(c⁄° *, 
size_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

143 
size_t
 
	$°∫Àn
(c⁄° *, 
size_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

144 *
	`°rsig«l
(
sig
);

145 
__END_DECLS


152 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


153 #i‚de‡
_SSIZE_T


154 
	#_SSIZE_T


	)

155 
__d¨wö_ssize_t
 
	tssize_t
;

158 
__BEGIN_DECLS


159 *
	$memmem
(c⁄° *, 
size_t
, c⁄° *, size_tË
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

160 
	$mem£t_∑âîn4
(*, c⁄° *, 
size_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_3_0
);

161 
	$mem£t_∑âîn8
(*, c⁄° *, 
size_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_3_0
);

162 
	$mem£t_∑âîn16
(*, c⁄° *, 
size_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_3_0
);

164 *
	`°rˇ£°r
(const *, const *);

165 *
	`°∫°r
(c⁄° *, c⁄° *, 
size_t
);

166 
size_t
 
	`°æˇt
(*, const *, size_t);

167 
size_t
 
	`°æ˝y
(*, const *, size_t);

168 
	`°rmode
(, *);

169 *
	`°r£p
(**, const *);

172 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

173 
__END_DECLS


180 
	~"°rögs.h
"

184 #ifde‡
_USE_EXTENDED_LOCALES_


185 
	~<xloˇÀ/_°rög.h
>

188 #i‡
	`deföed
 (
__GNUC__
Ë&& 
_FORTIFY_SOURCE
 > 0 && !deföed (
__˝lu•lus
)

190 
	~<£cuª/_°rög.h
>

	@/usr/include/sys/mman.h

76 #i‚def 
_SYS_MMAN_H_


77 
	#_SYS_MMAN_H_


	)

79 
	~<sys/≠∂ópi›ts.h
>

80 
	~<sys/cdefs.h
>

82 
	~<sys/_ty≥s.h
>

88 #i‚def 
_MODE_T


89 
__d¨wö_mode_t
 
	tmode_t
;

90 
	#_MODE_T


	)

93 #i‚de‡
_OFF_T


94 
__d¨wö_off_t
 
	toff_t
;

95 
	#_OFF_T


	)

98 #i‚de‡
_SIZE_T


99 
	#_SIZE_T


	)

100 
__d¨wö_size_t
 
	tsize_t
;

107 
	#PROT_NONE
 0x00

	)

108 
	#PROT_READ
 0x01

	)

109 
	#PROT_WRITE
 0x02

	)

110 
	#PROT_EXEC
 0x04

	)

116 
	#MAP_SHARED
 0x0001

	)

117 
	#MAP_PRIVATE
 0x0002

	)

118 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

119 
	#MAP_COPY
 
MAP_PRIVATE


	)

125 
	#MAP_FIXED
 0x0010

	)

126 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

127 
	#MAP_RENAME
 0x0020

	)

128 
	#MAP_NORESERVE
 0x0040

	)

129 
	#MAP_RESERVED0080
 0x0080

	)

130 
	#MAP_NOEXTEND
 0x0100

	)

131 
	#MAP_HASSEMAPHORE
 0x0200

	)

132 
	#MAP_NOCACHE
 0x0400

	)

133 
	#MAP_JIT
 0x0800

	)

139 
	#MCL_CURRENT
 0x0001

	)

140 
	#MCL_FUTURE
 0x0002

	)

145 
	#MAP_FAILED
 ((*)-1Ë

	)

150 
	#MS_ASYNC
 0x0001

	)

151 
	#MS_INVALIDATE
 0x0002

	)

152 
	#MS_SYNC
 0x0010

	)

154 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

155 
	#MS_KILLPAGES
 0x0004

	)

156 
	#MS_DEACTIVATE
 0x0008

	)

161 
	#MAP_FILE
 0x0000

	)

162 
	#MAP_ANON
 0x1000

	)

169 
	#POSIX_MADV_NORMAL
 0

	)

170 
	#POSIX_MADV_RANDOM
 1

	)

171 
	#POSIX_MADV_SEQUENTIAL
 2

	)

172 
	#POSIX_MADV_WILLNEED
 3

	)

173 
	#POSIX_MADV_DONTNEED
 4

	)

175 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

176 
	#MADV_NORMAL
 
POSIX_MADV_NORMAL


	)

177 
	#MADV_RANDOM
 
POSIX_MADV_RANDOM


	)

178 
	#MADV_SEQUENTIAL
 
POSIX_MADV_SEQUENTIAL


	)

179 
	#MADV_WILLNEED
 
POSIX_MADV_WILLNEED


	)

180 
	#MADV_DONTNEED
 
POSIX_MADV_DONTNEED


	)

181 
	#MADV_FREE
 5

	)

182 
	#MADV_ZERO_WIRED_PAGES
 6

	)

183 
	#MADV_FREE_REUSABLE
 7

	)

184 
	#MADV_FREE_REUSE
 8

	)

185 
	#MADV_CAN_REUSE
 9

	)

190 
	#MINCORE_INCORE
 0x1

	)

191 
	#MINCORE_REFERENCED
 0x2

	)

192 
	#MINCORE_MODIFIED
 0x4

	)

193 
	#MINCORE_REFERENCED_OTHER
 0x8

	)

194 
	#MINCORE_MODIFIED_OTHER
 0x10

	)

199 
__BEGIN_DECLS


201 
mlockÆl
();

202 
mu∆ockÆl
();

204 
mlock
(c⁄° *, 
size_t
);

205 #i‚de‡
_MMAP


206 
	#_MMAP


	)

208 * 
	$mm≠
(*, 
size_t
, , , , 
off_t
Ë
	`__DARWIN_ALIAS
(
mm≠
);

211 
	$m¥Ÿe˘
(*, 
size_t
, Ë
	`__DARWIN_ALIAS
(
m¥Ÿe˘
);

213 
	$msync
(*, 
size_t
, Ë
	`__DARWIN_ALIAS_C
(
msync
);

215 
	`mu∆ock
(c⁄° *, 
size_t
);

217 
	$munm≠
(*, 
size_t
Ë
	`__DARWIN_ALIAS
(
munm≠
);

219 
	`shm_›í
(const *, , ...);

220 
	`shm_u∆ök
(const *);

222 
	`posix_madvi£
(*, 
size_t
, );

224 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

225 
	`madvi£
(*, 
size_t
, );

226 
	`möc‹e
(c⁄° *, 
size_t
, *);

227 
	`möhîô
(*, 
size_t
, );

229 
__END_DECLS


	@/usr/include/sys/stat.h

70 #i‚de‡
_SYS_STAT_H_


71 
	#_SYS_STAT_H_


	)

73 
	~<sys/_ty≥s.h
>

74 
	~<sys/cdefs.h
>

75 
	~<Avaûabûôy.h
>

78 
	#__√ed_°ru˘_time•ec


	)

79 
	~<sys/_°ru˘s.h
>

86 #i‚de‡
_BLKCNT_T


87 
__d¨wö_blk˙t_t
 
	tblk˙t_t
;

88 
	#_BLKCNT_T


	)

91 #i‚de‡
_BLKSIZE_T


92 
__d¨wö_blksize_t
 
	tblksize_t
;

93 
	#_BLKSIZE_T


	)

96 #i‚de‡
_DEV_T


97 
__d¨wö_dev_t
 
	tdev_t
;

98 
	#_DEV_T


	)

101 #i‚def 
_INO_T


102 
__d¨wö_öo_t
 
	töo_t
;

103 
	#_INO_T


	)

106 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

107 #i‚def 
_INO64_T


108 
__d¨wö_öo64_t
 
	töo64_t
;

109 
	#_INO64_T


	)

113 #i‚def 
_MODE_T


114 
__d¨wö_mode_t
 
	tmode_t
;

115 
	#_MODE_T


	)

118 #i‚de‡
_NLINK_T


119 
__uöt16_t
 
	t∆ök_t
;

120 
	#_NLINK_T


	)

123 #i‚de‡
_UID_T


124 
__d¨wö_uid_t
 
	tuid_t
;

125 
	#_UID_T


	)

128 #i‚de‡
_GID_T


129 
__d¨wö_gid_t
 
	tgid_t
;

130 
	#_GID_T


	)

133 #i‚de‡
_OFF_T


134 
__d¨wö_off_t
 
	toff_t
;

135 
	#_OFF_T


	)

138 #i‚def 
_TIME_T


139 
	#_TIME_T


	)

140 
__d¨wö_time_t
 
	ttime_t
;

144 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

153 
	so°©
 {

154 
__uöt16_t
 
	m°_dev
;

155 
öo_t
 
	m°_öo
;

156 
mode_t
 
	m°_mode
;

157 
∆ök_t
 
	m°_∆ök
;

158 
__uöt16_t
 
	m°_uid
;

159 
__uöt16_t
 
	m°_gid
;

160 
__uöt16_t
 
	m°_rdev
;

161 
__öt32_t
 
	m°_size
;

162 
time•ec
 
	m°_©ime•ec
;

163 
time•ec
 
	m°_mtime•ec
;

164 
time•ec
 
	m°_˘ime•ec
;

165 
__öt32_t
 
	m°_blksize
;

166 
__öt32_t
 
	m°_blocks
;

167 
__uöt32_t
 
	m°_Êags
;

168 
__uöt32_t
 
	m°_gí
;

171 
	#__DARWIN_STRUCT_STAT64_TIMES
 \

172 
time•ec
 
°_©ime•ec
; \

173 
time•ec
 
°_mtime•ec
; \

174 
time•ec
 
°_˘ime•ec
; \

175 
time•ec
 
°_búthtime•ec
;

	)

179 
	#__DARWIN_STRUCT_STAT64_TIMES
 \

180 
time_t
 
°_©ime
; \

181 
°_©imí£c
; \

182 
time_t
 
°_mtime
; \

183 
°_mtimí£c
; \

184 
time_t
 
°_˘ime
; \

185 
°_˘imí£c
; \

186 
time_t
 
°_búthtime
; \

187 
°_búthtimí£c
;

	)

201 
	#__DARWIN_STRUCT_STAT64
 { \

202 
dev_t
 
°_dev
; \

203 
mode_t
 
°_mode
; \

204 
∆ök_t
 
°_∆ök
; \

205 
__d¨wö_öo64_t
 
°_öo
; \

206 
uid_t
 
°_uid
; \

207 
gid_t
 
°_gid
; \

208 
dev_t
 
°_rdev
; \

209 
__DARWIN_STRUCT_STAT64_TIMES
 \

210 
off_t
 
°_size
; \

211 
blk˙t_t
 
°_blocks
; \

212 
blksize_t
 
°_blksize
; \

213 
__uöt32_t
 
°_Êags
; \

214 
__uöt32_t
 
°_gí
; \

215 
__öt32_t
 
°_l•¨e
; \

216 
__öt64_t
 
°_q•¨e
[2]; \

217 }

	)

223 #i‡
__DARWIN_64_BIT_INO_T


225 
°©
 
	g__DARWIN_STRUCT_STAT64
;

229 
	s°©
 {

230 
dev_t
 
	m°_dev
;

231 
öo_t
 
	m°_öo
;

232 
mode_t
 
	m°_mode
;

233 
∆ök_t
 
	m°_∆ök
;

234 
uid_t
 
	m°_uid
;

235 
gid_t
 
	m°_gid
;

236 
dev_t
 
	m°_rdev
;

237 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

238 
time•ec
 
	m°_©ime•ec
;

239 
time•ec
 
	m°_mtime•ec
;

240 
time•ec
 
	m°_˘ime•ec
;

242 
time_t
 
	m°_©ime
;

243 
	m°_©imí£c
;

244 
time_t
 
	m°_mtime
;

245 
	m°_mtimí£c
;

246 
time_t
 
	m°_˘ime
;

247 
	m°_˘imí£c
;

249 
off_t
 
	m°_size
;

250 
blk˙t_t
 
	m°_blocks
;

251 
blksize_t
 
	m°_blksize
;

252 
__uöt32_t
 
	m°_Êags
;

253 
__uöt32_t
 
	m°_gí
;

254 
__öt32_t
 
	m°_l•¨e
;

255 
__öt64_t
 
	m°_q•¨e
[2];

260 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

262 #i‡!
__DARWIN_ONLY_64_BIT_INO_T


264 
°©64
 
	g__DARWIN_STRUCT_STAT64
;

273 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

274 
	#°_©ime
 
°_©ime•ec
.
tv_£c


	)

275 
	#°_mtime
 
°_mtime•ec
.
tv_£c


	)

276 
	#°_˘ime
 
°_˘ime•ec
.
tv_£c


	)

277 
	#°_búthtime
 
°_búthtime•ec
.
tv_£c


	)

284 #i‚de‡
S_IFMT


286 
	#S_IFMT
 0170000

	)

287 
	#S_IFIFO
 0010000

	)

288 
	#S_IFCHR
 0020000

	)

289 
	#S_IFDIR
 0040000

	)

290 
	#S_IFBLK
 0060000

	)

291 
	#S_IFREG
 0100000

	)

292 
	#S_IFLNK
 0120000

	)

293 
	#S_IFSOCK
 0140000

	)

294 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

295 
	#S_IFWHT
 0160000

	)

300 
	#S_IRWXU
 0000700

	)

301 
	#S_IRUSR
 0000400

	)

302 
	#S_IWUSR
 0000200

	)

303 
	#S_IXUSR
 0000100

	)

305 
	#S_IRWXG
 0000070

	)

306 
	#S_IRGRP
 0000040

	)

307 
	#S_IWGRP
 0000020

	)

308 
	#S_IXGRP
 0000010

	)

310 
	#S_IRWXO
 0000007

	)

311 
	#S_IROTH
 0000004

	)

312 
	#S_IWOTH
 0000002

	)

313 
	#S_IXOTH
 0000001

	)

315 
	#S_ISUID
 0004000

	)

316 
	#S_ISGID
 0002000

	)

317 
	#S_ISVTX
 0001000

	)

319 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

320 
	#S_ISTXT
 
S_ISVTX


	)

321 
	#S_IREAD
 
S_IRUSR


	)

322 
	#S_IWRITE
 
S_IWUSR


	)

323 
	#S_IEXEC
 
S_IXUSR


	)

333 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
Ë

	)

334 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
Ë

	)

335 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
Ë

	)

336 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
Ë

	)

337 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
Ë

	)

338 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
Ë

	)

339 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
Ë

	)

340 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

341 
	#S_ISWHT
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFWHT
Ë

	)

359 
	#S_TYPEISMQ
(
buf
Ë(0Ë

	)

360 
	#S_TYPEISSEM
(
buf
Ë(0Ë

	)

361 
	#S_TYPEISSHM
(
buf
Ë(0Ë

	)

377 
	#S_TYPEISTMO
(
buf
Ë(0Ë

	)

380 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

381 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

383 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

385 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

387 
	#S_BLKSIZE
 512

	)

394 
	#UF_SETTABLE
 0x0000fff‡

	)

395 
	#UF_NODUMP
 0x00000001

	)

396 
	#UF_IMMUTABLE
 0x00000002

	)

397 
	#UF_APPEND
 0x00000004

	)

398 
	#UF_OPAQUE
 0x00000008

	)

404 
	#UF_COMPRESSED
 0x00000020

	)

405 
	#UF_TRACKED
 0x00000040

	)

407 
	#UF_HIDDEN
 0x00008000

	)

412 
	#SF_SETTABLE
 0xffff0000

	)

413 
	#SF_ARCHIVED
 0x00010000

	)

414 
	#SF_IMMUTABLE
 0x00020000

	)

415 
	#SF_APPEND
 0x00040000

	)

428 
__BEGIN_DECLS


430 
	$chmod
(c⁄° *, 
mode_t
Ë
	`__DARWIN_ALIAS
(
chmod
);

431 
	$fchmod
(, 
mode_t
Ë
	`__DARWIN_ALIAS
(
fchmod
);

432 
	$f°©
(, 
°©
 *Ë
	`__DARWIN_INODE64
(
f°©
);

433 
	$l°©
(c⁄° *, 
°©
 *Ë
	`__DARWIN_INODE64
(
l°©
);

434 
	`mkdú
(c⁄° *, 
mode_t
);

435 
	`mkfifo
(c⁄° *, 
mode_t
);

436 
	$°©
(c⁄° *, 
°©
 *Ë
	`__DARWIN_INODE64
(stat);

437 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

438 
mode_t
 
	`umask
(mode_t);

440 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

441 #i‚de‡
_FILESEC_T


442 
_fûe£c
;

443 
_fûe£c
 *
	tfûe£c_t
;

444 
	#_FILESEC_T


	)

446 
	`chÊags
(c⁄° *, 
__uöt32_t
);

447 
	`chmodx_≈
(c⁄° *, 
fûe£c_t
);

448 
	`fchÊags
(, 
__uöt32_t
);

449 
	`fchmodx_≈
(, 
fûe£c_t
);

450 
	$f°©x_≈
(, 
°©
 *, 
fûe£c_t
Ë
	`__DARWIN_INODE64
(
f°©x_≈
);

451 
	$lchÊags
(c⁄° *, 
__uöt32_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

452 
	$lchmod
(c⁄° *, 
mode_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

453 
	$l°©x_≈
(c⁄° *, 
°©
 *, 
fûe£c_t
Ë
	`__DARWIN_INODE64
(
l°©x_≈
);

454 
	`mkdúx_≈
(c⁄° *, 
fûe£c_t
);

455 
	`mkfifox_≈
(c⁄° *, 
fûe£c_t
);

456 
	$°©x_≈
(c⁄° *, 
°©
 *, 
fûe£c_t
Ë
	`__DARWIN_INODE64
(
°©x_≈
);

457 
	$umaskx_≈
(
fûe£c_t
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_4
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

459 #i‡!
__DARWIN_ONLY_64_BIT_INO_T


461 
	$f°©x64_≈
(, 
°©64
 *, 
fûe£c_t
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

462 
	$l°©x64_≈
(c⁄° *, 
°©64
 *, 
fûe£c_t
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

463 
	$°©x64_≈
(c⁄° *, 
°©64
 *, 
fûe£c_t
Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

464 
	$f°©64
(, 
°©64
 *Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

465 
	$l°©64
(c⁄° *, 
°©64
 *Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

466 
	$°©64
(c⁄° *, 
°©64
 *Ë
	`__OSX_AVAILABLE_BUT_DEPRECATED
(
__MAC_10_5
,
__MAC_10_6
,
__IPHONE_NA
,__IPHONE_NA);

470 
__END_DECLS


	@/usr/include/sys/types.h

69 #i‚de‡
_SYS_TYPES_H_


70 
	#_SYS_TYPES_H_


	)

72 
	~<sys/≠∂ópi›ts.h
>

74 #i‚de‡
__ASSEMBLER__


75 
	~<sys/cdefs.h
>

78 
	~<machöe/ty≥s.h
>

79 
	~<sys/_ty≥s.h
>

81 
	~<machöe/ídün.h
>

83 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

84 
	tu_ch¨
;

85 
	tu_sh‹t
;

86 
	tu_öt
;

87 #i‚de‡
_U_LONG


88 
	tu_l⁄g
;

89 
	#_U_LONG


	)

91 
	tush‹t
;

92 
	tuöt
;

95 
u_öt64_t
 
	tu_quad_t
;

96 
öt64_t
 
	tquad_t
;

97 
quad_t
 * 
	tqaddr_t
;

99 * 
	tˇddr_t
;

100 
öt32_t
 
	tdaddr_t
;

102 #i‚de‡
_DEV_T


103 
__d¨wö_dev_t
 
	tdev_t
;

104 
	#_DEV_T


	)

107 
u_öt32_t
 
	tfix±_t
;

109 #i‚de‡
_BLKCNT_T


110 
__d¨wö_blk˙t_t
 
	tblk˙t_t
;

111 
	#_BLKCNT_T


	)

114 #i‚de‡
_BLKSIZE_T


115 
__d¨wö_blksize_t
 
	tblksize_t
;

116 
	#_BLKSIZE_T


	)

119 #i‚de‡
_GID_T


120 
__d¨wö_gid_t
 
	tgid_t
;

121 
	#_GID_T


	)

124 #i‚de‡
_IN_ADDR_T


125 
	#_IN_ADDR_T


	)

126 
__uöt32_t
 
	tö_addr_t
;

129 #i‚de‡
_IN_PORT_T


130 
	#_IN_PORT_T


	)

131 
__uöt16_t
 
	tö_p‹t_t
;

134 #i‚def 
_INO_T


135 
__d¨wö_öo_t
 
	töo_t
;

136 
	#_INO_T


	)

139 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

140 #i‚def 
_INO64_T


141 
__d¨wö_öo64_t
 
	töo64_t
;

142 
	#_INO64_T


	)

146 #i‚de‡
_KEY_T


147 
	#_KEY_T


	)

148 
__öt32_t
 
	tkey_t
;

151 #i‚def 
_MODE_T


152 
__d¨wö_mode_t
 
	tmode_t
;

153 
	#_MODE_T


	)

156 #i‚de‡
_NLINK_T


157 
__uöt16_t
 
	t∆ök_t
;

158 
	#_NLINK_T


	)

161 #i‚de‡
_ID_T


162 
	#_ID_T


	)

163 
__d¨wö_id_t
 
	tid_t
;

166 #i‚de‡
_PID_T


167 
__d¨wö_pid_t
 
	tpid_t
;

168 
	#_PID_T


	)

171 #i‚de‡
_OFF_T


172 
__d¨wö_off_t
 
	toff_t
;

173 
	#_OFF_T


	)

176 
öt32_t
 
	t£gsz_t
;

177 
öt32_t
 
	tswblk_t
;

179 #i‚de‡
_UID_T


180 
__d¨wö_uid_t
 
	tuid_t
;

181 
	#_UID_T


	)

184 #i‚de‡
_ID_T


185 
__d¨wö_id_t
 
	tid_t
;

186 
	#_ID_T


	)

189 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

191 #i‡
deföed
(
__˝lu•lus
)

197 
ölöe
 
__öt32_t
 
	$maj‹
(
__uöt32_t
 
_x
)

199  (
__öt32_t
)(((
__uöt32_t
)
_x
 >> 24) & 0xff);

200 
	}
}

202 
ölöe
 
__öt32_t
 
	$mö‹
(
__uöt32_t
 
_x
)

204  (
__öt32_t
)((
_x
) & 0xffffff);

205 
	}
}

207 
ölöe
 
dev_t
 
	$makedev
(
__uöt32_t
 
_maj‹
, __uöt32_à
_mö‹
)

209  (
dev_t
)(((
_maj‹
Ë<< 24Ë| (
_mö‹
));

210 
	}
}

214 
	#maj‹
(
x
Ë((
öt32_t
)(((
u_öt32_t
)(xË>> 24Ë& 0xff))

	)

215 
	#mö‹
(
x
Ë((
öt32_t
)((xË& 0xffffff))

	)

216 
	#makedev
(
x
,
y
Ë((
dev_t
)(((xË<< 24Ë| (y)))

	)

221 #i‚def 
_CLOCK_T


222 
	#_CLOCK_T


	)

223 
__d¨wö_˛ock_t
 
	t˛ock_t
;

226 #i‚de‡
_SIZE_T


227 
	#_SIZE_T


	)

230 
__d¨wö_size_t
 
	tsize_t
;

233 #i‚def 
_SSIZE_T


234 
	#_SSIZE_T


	)

235 
__d¨wö_ssize_t
 
	tssize_t
;

238 #i‚def 
_TIME_T


239 
	#_TIME_T


	)

240 
__d¨wö_time_t
 
	ttime_t
;

243 #i‚de‡
_USECONDS_T


244 
	#_USECONDS_T


	)

245 
__d¨wö_u£c⁄ds_t
 
	tu£c⁄ds_t
;

248 #i‚de‡
_SUSECONDS_T


249 
	#_SUSECONDS_T


	)

250 
__d¨wö_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

253 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

259 
	#__√ed_fd_£t


	)

260 
	~<sys/_°ru˘s.h
>

262 
	#NBBY
 
__DARWIN_NBBY


	)

263 
	#NFDBITS
 
__DARWIN_NFDBITS


	)

264 
	#howm™y
(
x
, 
y
Ë
	`__DARWIN_howm™y
(x, yË

	)

265 
__öt32_t
 
	tfd_mask
;

273 #i‚def 
FD_SETSIZE


274 
	#FD_SETSIZE
 
__DARWIN_FD_SETSIZE


	)

276 #i‚de‡
FD_SET


277 
	#FD_SET
(
n
, 
p
Ë
	`__DARWIN_FD_SET
“,Ö)

	)

279 #i‚de‡
FD_CLR


280 
	#FD_CLR
(
n
, 
p
Ë
	`__DARWIN_FD_CLR
“,Ö)

	)

282 #i‚de‡
FD_ISSET


283 
	#FD_ISSET
(
n
, 
p
Ë
	`__DARWIN_FD_ISSET
“,Ö)

	)

285 #i‚de‡
FD_ZERO


286 
	#FD_ZERO
(
p
Ë
	`__DARWIN_FD_ZERO
’)

	)

288 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

289 #i‚de‡
FD_COPY


290 
	#FD_COPY
(
f
, 
t
Ë
	`__DARWIN_FD_COPY
(f,Å)

	)

295 #i‡
deföed
(
__STDC__
Ë&& deföed(
KERNEL
)

301 
	g¥oc
;

302 
	gpgΩ
;

303 
	gu¸ed
;

304 
	grußge
;

305 
	gfûe
;

306 
	gbuf
;

307 
	gây
;

308 
	guio
;

314 #i‚de‡
__POSIX_LIB__


316 #i‚de‡
_PTHREAD_ATTR_T


317 
	#_PTHREAD_ATTR_T


	)

318 
__d¨wö_±hªad_©å_t
 
	t±hªad_©å_t
;

320 #i‚de‡
_PTHREAD_COND_T


321 
	#_PTHREAD_COND_T


	)

322 
__d¨wö_±hªad_c⁄d_t
 
	t±hªad_c⁄d_t
;

324 #i‚de‡
_PTHREAD_CONDATTR_T


325 
	#_PTHREAD_CONDATTR_T


	)

326 
__d¨wö_±hªad_c⁄d©å_t
 
	t±hªad_c⁄d©å_t
;

328 #i‚de‡
_PTHREAD_MUTEX_T


329 
	#_PTHREAD_MUTEX_T


	)

330 
__d¨wö_±hªad_muãx_t
 
	t±hªad_muãx_t
;

332 #i‚de‡
_PTHREAD_MUTEXATTR_T


333 
	#_PTHREAD_MUTEXATTR_T


	)

334 
__d¨wö_±hªad_muãx©å_t
 
	t±hªad_muãx©å_t
;

336 #i‚de‡
_PTHREAD_ONCE_T


337 
	#_PTHREAD_ONCE_T


	)

338 
__d¨wö_±hªad_⁄˚_t
 
	t±hªad_⁄˚_t
;

340 #i‚de‡
_PTHREAD_RWLOCK_T


341 
	#_PTHREAD_RWLOCK_T


	)

342 
__d¨wö_±hªad_rwlock_t
 
	t±hªad_rwlock_t
;

344 #i‚de‡
_PTHREAD_RWLOCKATTR_T


345 
	#_PTHREAD_RWLOCKATTR_T


	)

346 
__d¨wö_±hªad_rwlock©å_t
 
	t±hªad_rwlock©å_t
;

348 #i‚de‡
_PTHREAD_T


349 
	#_PTHREAD_T


	)

350 
__d¨wö_±hªad_t
 
	t±hªad_t
;

355 #i‚de‡
_PTHREAD_KEY_T


356 
	#_PTHREAD_KEY_T


	)

357 
__d¨wö_±hªad_key_t
 
	t±hªad_key_t
;

361 #i‚de‡
_FSBLKCNT_T


362 
	#_FSBLKCNT_T


	)

363 
__d¨wö_fsblk˙t_t
 
	tfsblk˙t_t
;

366 #i‚de‡
_FSFILCNT_T


367 
	#_FSFILCNT_T


	)

368 
__d¨wö_fsfû˙t_t
 
	tfsfû˙t_t
;

	@/usr/include/unistd.h

68 #i‚de‡
_UNISTD_H_


69 
	#_UNISTD_H_


	)

71 
	~<_ty≥s.h
>

72 
	~<sys/uni°d.h
>

73 
	~<Avaûabûôy.h
>

75 #i‚de‡
_GID_T


76 
	#_GID_T


	)

77 
__d¨wö_gid_t
 
	tgid_t
;

80 #i‚de‡
_INTPTR_T


81 
	#_INTPTR_T


	)

82 
__d¨wö_öçå_t
 
	töçå_t
;

85 #i‚de‡
_OFF_T


86 
	#_OFF_T


	)

87 
__d¨wö_off_t
 
	toff_t
;

90 #i‚de‡
_PID_T


91 
	#_PID_T


	)

92 
__d¨wö_pid_t
 
	tpid_t
;

95 #i‚de‡
_SIZE_T


96 
	#_SIZE_T


	)

99 
__d¨wö_size_t
 
	tsize_t
;

102 #i‚def 
_SSIZE_T


103 
	#_SSIZE_T


	)

104 
__d¨wö_ssize_t
 
	tssize_t
;

107 #i‚de‡
_UID_T


108 
	#_UID_T


	)

109 
__d¨wö_uid_t
 
	tuid_t
;

112 #i‚de‡
_USECONDS_T


113 
	#_USECONDS_T


	)

114 
__d¨wö_u£c⁄ds_t
 
	tu£c⁄ds_t
;

117 #i‚de‡
NULL


118 
	#NULL
 
__DARWIN_NULL


	)

121 
	#STDIN_FILENO
 0

	)

122 
	#STDOUT_FILENO
 1

	)

123 
	#STDERR_FILENO
 2

	)

128 
	#_XOPEN_VERSION
 600

	)

129 
	#_XOPEN_XCU_VERSION
 4

	)

133 
	#_POSIX_ADVISORY_INFO
 (-1Ë

	)

134 
	#_POSIX_ASYNCHRONOUS_IO
 (-1Ë

	)

135 
	#_POSIX_BARRIERS
 (-1Ë

	)

136 
	#_POSIX_CHOWN_RESTRICTED
 200112L

	)

137 
	#_POSIX_CLOCK_SELECTION
 (-1Ë

	)

138 
	#_POSIX_CPUTIME
 (-1Ë

	)

139 
	#_POSIX_FSYNC
 200112L

	)

140 
	#_POSIX_IPV6
 200112L

	)

141 
	#_POSIX_JOB_CONTROL
 200112L

	)

142 
	#_POSIX_MAPPED_FILES
 200112L

	)

143 
	#_POSIX_MEMLOCK
 (-1Ë

	)

144 
	#_POSIX_MEMLOCK_RANGE
 (-1Ë

	)

145 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

146 
	#_POSIX_MESSAGE_PASSING
 (-1Ë

	)

147 
	#_POSIX_MONOTONIC_CLOCK
 (-1Ë

	)

148 
	#_POSIX_NO_TRUNC
 200112L

	)

149 
	#_POSIX_PRIORITIZED_IO
 (-1Ë

	)

150 
	#_POSIX_PRIORITY_SCHEDULING
 (-1Ë

	)

151 
	#_POSIX_RAW_SOCKETS
 (-1Ë

	)

152 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

153 
	#_POSIX_REALTIME_SIGNALS
 (-1Ë

	)

154 
	#_POSIX_REGEXP
 200112L

	)

155 
	#_POSIX_SAVED_IDS
 200112L

	)

156 
	#_POSIX_SEMAPHORES
 (-1Ë

	)

157 
	#_POSIX_SHARED_MEMORY_OBJECTS
 (-1Ë

	)

158 
	#_POSIX_SHELL
 200112L

	)

159 
	#_POSIX_SPAWN
 (-1Ë

	)

160 
	#_POSIX_SPIN_LOCKS
 (-1Ë

	)

161 
	#_POSIX_SPORADIC_SERVER
 (-1Ë

	)

162 
	#_POSIX_SYNCHRONIZED_IO
 (-1Ë

	)

163 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

164 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

165 
	#_POSIX_THREAD_CPUTIME
 (-1Ë

	)

166 
	#_POSIX_THREAD_PRIO_INHERIT
 (-1Ë

	)

167 
	#_POSIX_THREAD_PRIO_PROTECT
 (-1Ë

	)

168 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 (-1Ë

	)

169 
	#_POSIX_THREAD_PROCESS_SHARED
 200112L

	)

170 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

171 
	#_POSIX_THREAD_SPORADIC_SERVER
 (-1Ë

	)

172 
	#_POSIX_THREADS
 200112L

	)

173 
	#_POSIX_TIMEOUTS
 (-1Ë

	)

174 
	#_POSIX_TIMERS
 (-1Ë

	)

175 
	#_POSIX_TRACE
 (-1Ë

	)

176 
	#_POSIX_TRACE_EVENT_FILTER
 (-1Ë

	)

177 
	#_POSIX_TRACE_INHERIT
 (-1Ë

	)

178 
	#_POSIX_TRACE_LOG
 (-1Ë

	)

179 
	#_POSIX_TYPED_MEMORY_OBJECTS
 (-1Ë

	)

180 #i‚de‡
_POSIX_VDISABLE


181 
	#_POSIX_VDISABLE
 0xf‡

	)

184 #i‡
__DARWIN_C_LEVEL
 >= 199209L

185 
	#_POSIX2_C_BIND
 200112L

	)

186 
	#_POSIX2_C_DEV
 200112L

	)

187 
	#_POSIX2_CHAR_TERM
 200112L

	)

188 
	#_POSIX2_FORT_DEV
 (-1Ë

	)

189 
	#_POSIX2_FORT_RUN
 200112L

	)

190 
	#_POSIX2_LOCALEDEF
 200112L

	)

191 
	#_POSIX2_PBS
 (-1)

	)

192 
	#_POSIX2_PBS_ACCOUNTING
 (-1)

	)

193 
	#_POSIX2_PBS_CHECKPOINT
 (-1)

	)

194 
	#_POSIX2_PBS_LOCATE
 (-1)

	)

195 
	#_POSIX2_PBS_MESSAGE
 (-1)

	)

196 
	#_POSIX2_PBS_TRACK
 (-1)

	)

197 
	#_POSIX2_SW_DEV
 200112L

	)

198 
	#_POSIX2_UPE
 200112L

	)

201 
	#__ILP32_OFF32
 (-1)

	)

202 
	#__ILP32_OFFBIG
 (-1)

	)

203 
	#__LP64_OFF64
 (-1)

	)

204 
	#__LPBIG_OFFBIG
 (-1)

	)

206 #ifde‡
__LP64__


207 #unde‡
__LP64_OFF64


208 
	#__LP64_OFF64
 (1)

	)

209 #unde‡
__LPBIG_OFFBIG


210 
	#__LPBIG_OFFBIG
 (1)

	)

212 #unde‡
__ILP32_OFFBIG


213 
	#__ILP32_OFFBIG
 (1)

	)

216 #i‡
__DARWIN_C_LEVEL
 >= 200112L

217 
	#_POSIX_V6_ILP32_OFF32
 
__ILP32_OFF32


	)

218 
	#_POSIX_V6_ILP32_OFFBIG
 
__ILP32_OFFBIG


	)

219 
	#_POSIX_V6_LP64_OFF64
 
__LP64_OFF64


	)

220 
	#_POSIX_V6_LPBIG_OFFBIG
 
__LPBIG_OFFBIG


	)

223 #i‡
__DARWIN_C_LEVEL
 >= 200809L

224 
	#_POSIX_V7_ILP32_OFF32
 
__ILP32_OFF32


	)

225 
	#_POSIX_V7_ILP32_OFFBIG
 
__ILP32_OFFBIG


	)

226 
	#_POSIX_V7_LP64_OFF64
 
__LP64_OFF64


	)

227 
	#_POSIX_V7_LPBIG_OFFBIG
 
__LPBIG_OFFBIG


	)

230 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


231 
	#_V6_ILP32_OFF32
 
__ILP32_OFF32


	)

232 
	#_V6_ILP32_OFFBIG
 
__ILP32_OFFBIG


	)

233 
	#_V6_LP64_OFF64
 
__LP64_OFF64


	)

234 
	#_V6_LPBIG_OFFBIG
 
__LPBIG_OFFBIG


	)

237 #i‡(
__DARWIN_C_LEVEL
 >199506L && __DARWIN_C_LEVEL < 200809LË|| __DARWIN_C_LEVEL >
__DARWIN_C_FULL


239 
	#_XBS5_ILP32_OFF32
 
__ILP32_OFF32


	)

240 
	#_XBS5_ILP32_OFFBIG
 
__ILP32_OFFBIG


	)

241 
	#_XBS5_LP64_OFF64
 
__LP64_OFF64


	)

242 
	#_XBS5_LPBIG_OFFBIG
 
__LPBIG_OFFBIG


	)

245 #i‡
__DARWIN_C_LEVEL
 >= 199506L

246 
	#_XOPEN_CRYPT
 (1)

	)

247 
	#_XOPEN_ENH_I18N
 (1Ë

	)

248 
	#_XOPEN_LEGACY
 (-1Ë

	)

249 
	#_XOPEN_REALTIME
 (-1Ë

	)

250 
	#_XOPEN_REALTIME_THREADS
 (-1Ë

	)

251 
	#_XOPEN_SHM
 (1)

	)

252 
	#_XOPEN_STREAMS
 (-1Ë

	)

253 
	#_XOPEN_UNIX
 (1)

	)

257 
	#_SC_ARG_MAX
 1

	)

258 
	#_SC_CHILD_MAX
 2

	)

259 
	#_SC_CLK_TCK
 3

	)

260 
	#_SC_NGROUPS_MAX
 4

	)

261 
	#_SC_OPEN_MAX
 5

	)

262 
	#_SC_JOB_CONTROL
 6

	)

263 
	#_SC_SAVED_IDS
 7

	)

264 
	#_SC_VERSION
 8

	)

265 
	#_SC_BC_BASE_MAX
 9

	)

266 
	#_SC_BC_DIM_MAX
 10

	)

267 
	#_SC_BC_SCALE_MAX
 11

	)

268 
	#_SC_BC_STRING_MAX
 12

	)

269 
	#_SC_COLL_WEIGHTS_MAX
 13

	)

270 
	#_SC_EXPR_NEST_MAX
 14

	)

271 
	#_SC_LINE_MAX
 15

	)

272 
	#_SC_RE_DUP_MAX
 16

	)

273 
	#_SC_2_VERSION
 17

	)

274 
	#_SC_2_C_BIND
 18

	)

275 
	#_SC_2_C_DEV
 19

	)

276 
	#_SC_2_CHAR_TERM
 20

	)

277 
	#_SC_2_FORT_DEV
 21

	)

278 
	#_SC_2_FORT_RUN
 22

	)

279 
	#_SC_2_LOCALEDEF
 23

	)

280 
	#_SC_2_SW_DEV
 24

	)

281 
	#_SC_2_UPE
 25

	)

282 
	#_SC_STREAM_MAX
 26

	)

283 
	#_SC_TZNAME_MAX
 27

	)

285 #i‡
__DARWIN_C_LEVEL
 >= 199309L

286 
	#_SC_ASYNCHRONOUS_IO
 28

	)

287 
	#_SC_PAGESIZE
 29

	)

288 
	#_SC_MEMLOCK
 30

	)

289 
	#_SC_MEMLOCK_RANGE
 31

	)

290 
	#_SC_MEMORY_PROTECTION
 32

	)

291 
	#_SC_MESSAGE_PASSING
 33

	)

292 
	#_SC_PRIORITIZED_IO
 34

	)

293 
	#_SC_PRIORITY_SCHEDULING
 35

	)

294 
	#_SC_REALTIME_SIGNALS
 36

	)

295 
	#_SC_SEMAPHORES
 37

	)

296 
	#_SC_FSYNC
 38

	)

297 
	#_SC_SHARED_MEMORY_OBJECTS
 39

	)

298 
	#_SC_SYNCHRONIZED_IO
 40

	)

299 
	#_SC_TIMERS
 41

	)

300 
	#_SC_AIO_LISTIO_MAX
 42

	)

301 
	#_SC_AIO_MAX
 43

	)

302 
	#_SC_AIO_PRIO_DELTA_MAX
 44

	)

303 
	#_SC_DELAYTIMER_MAX
 45

	)

304 
	#_SC_MQ_OPEN_MAX
 46

	)

305 
	#_SC_MAPPED_FILES
 47

	)

306 
	#_SC_RTSIG_MAX
 48

	)

307 
	#_SC_SEM_NSEMS_MAX
 49

	)

308 
	#_SC_SEM_VALUE_MAX
 50

	)

309 
	#_SC_SIGQUEUE_MAX
 51

	)

310 
	#_SC_TIMER_MAX
 52

	)

313 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


314 
	#_SC_NPROCESSORS_CONF
 57

	)

315 
	#_SC_NPROCESSORS_ONLN
 58

	)

318 #i‡
__DARWIN_C_LEVEL
 >= 200112L

319 
	#_SC_2_PBS
 59

	)

320 
	#_SC_2_PBS_ACCOUNTING
 60

	)

321 
	#_SC_2_PBS_CHECKPOINT
 61

	)

322 
	#_SC_2_PBS_LOCATE
 62

	)

323 
	#_SC_2_PBS_MESSAGE
 63

	)

324 
	#_SC_2_PBS_TRACK
 64

	)

325 
	#_SC_ADVISORY_INFO
 65

	)

326 
	#_SC_BARRIERS
 66

	)

327 
	#_SC_CLOCK_SELECTION
 67

	)

328 
	#_SC_CPUTIME
 68

	)

329 
	#_SC_FILE_LOCKING
 69

	)

330 
	#_SC_GETGR_R_SIZE_MAX
 70

	)

331 
	#_SC_GETPW_R_SIZE_MAX
 71

	)

332 
	#_SC_HOST_NAME_MAX
 72

	)

333 
	#_SC_LOGIN_NAME_MAX
 73

	)

334 
	#_SC_MONOTONIC_CLOCK
 74

	)

335 
	#_SC_MQ_PRIO_MAX
 75

	)

336 
	#_SC_READER_WRITER_LOCKS
 76

	)

337 
	#_SC_REGEXP
 77

	)

338 
	#_SC_SHELL
 78

	)

339 
	#_SC_SPAWN
 79

	)

340 
	#_SC_SPIN_LOCKS
 80

	)

341 
	#_SC_SPORADIC_SERVER
 81

	)

342 
	#_SC_THREAD_ATTR_STACKADDR
 82

	)

343 
	#_SC_THREAD_ATTR_STACKSIZE
 83

	)

344 
	#_SC_THREAD_CPUTIME
 84

	)

345 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 85

	)

346 
	#_SC_THREAD_KEYS_MAX
 86

	)

347 
	#_SC_THREAD_PRIO_INHERIT
 87

	)

348 
	#_SC_THREAD_PRIO_PROTECT
 88

	)

349 
	#_SC_THREAD_PRIORITY_SCHEDULING
 89

	)

350 
	#_SC_THREAD_PROCESS_SHARED
 90

	)

351 
	#_SC_THREAD_SAFE_FUNCTIONS
 91

	)

352 
	#_SC_THREAD_SPORADIC_SERVER
 92

	)

353 
	#_SC_THREAD_STACK_MIN
 93

	)

354 
	#_SC_THREAD_THREADS_MAX
 94

	)

355 
	#_SC_TIMEOUTS
 95

	)

356 
	#_SC_THREADS
 96

	)

357 
	#_SC_TRACE
 97

	)

358 
	#_SC_TRACE_EVENT_FILTER
 98

	)

359 
	#_SC_TRACE_INHERIT
 99

	)

360 
	#_SC_TRACE_LOG
 100

	)

361 
	#_SC_TTY_NAME_MAX
 101

	)

362 
	#_SC_TYPED_MEMORY_OBJECTS
 102

	)

363 
	#_SC_V6_ILP32_OFF32
 103

	)

364 
	#_SC_V6_ILP32_OFFBIG
 104

	)

365 
	#_SC_V6_LP64_OFF64
 105

	)

366 
	#_SC_V6_LPBIG_OFFBIG
 106

	)

367 
	#_SC_IPV6
 118

	)

368 
	#_SC_RAW_SOCKETS
 119

	)

369 
	#_SC_SYMLOOP_MAX
 120

	)

372 #i‡
__DARWIN_C_LEVEL
 >= 199506L

373 
	#_SC_ATEXIT_MAX
 107

	)

374 
	#_SC_IOV_MAX
 56

	)

375 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

376 
	#_SC_XOPEN_CRYPT
 108

	)

377 
	#_SC_XOPEN_ENH_I18N
 109

	)

378 
	#_SC_XOPEN_LEGACY
 110

	)

379 
	#_SC_XOPEN_REALTIME
 111

	)

380 
	#_SC_XOPEN_REALTIME_THREADS
 112

	)

381 
	#_SC_XOPEN_SHM
 113

	)

382 
	#_SC_XOPEN_STREAMS
 114

	)

383 
	#_SC_XOPEN_UNIX
 115

	)

384 
	#_SC_XOPEN_VERSION
 116

	)

385 
	#_SC_XOPEN_XCU_VERSION
 121

	)

388 #i‡(
__DARWIN_C_LEVEL
 >199506L && __DARWIN_C_LEVEL < 200809LË|| __DARWIN_C_LEVEL >
__DARWIN_C_FULL


390 
	#_SC_XBS5_ILP32_OFF32
 122

	)

391 
	#_SC_XBS5_ILP32_OFFBIG
 123

	)

392 
	#_SC_XBS5_LP64_OFF64
 124

	)

393 
	#_SC_XBS5_LPBIG_OFFBIG
 125

	)

396 #i‡
__DARWIN_C_LEVEL
 >= 200112L

397 
	#_SC_SS_REPL_MAX
 126

	)

398 
	#_SC_TRACE_EVENT_NAME_MAX
 127

	)

399 
	#_SC_TRACE_NAME_MAX
 128

	)

400 
	#_SC_TRACE_SYS_MAX
 129

	)

401 
	#_SC_TRACE_USER_EVENT_MAX
 130

	)

404 #i‡
__DARWIN_C_LEVEL
 < 200112L || __DARWIN_C_LEVEL >
__DARWIN_C_FULL


406 
	#_SC_PASS_MAX
 131

	)

409 #i‡
__DARWIN_C_LEVEL
 >= 199209L

410 #i‚de‡
_CS_PATH


411 
	#_CS_PATH
 1

	)

415 #i‡
__DARWIN_C_LEVEL
 >= 200112

416 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 2

	)

417 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 3

	)

418 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 4

	)

419 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 5

	)

420 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 6

	)

421 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 7

	)

422 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 8

	)

423 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 9

	)

424 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 10

	)

425 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 11

	)

426 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 12

	)

427 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 13

	)

428 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 14

	)

431 #i‡(
__DARWIN_C_LEVEL
 >199506L && __DARWIN_C_LEVEL < 200809LË|| __DARWIN_C_LEVEL >
__DARWIN_C_FULL


433 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 20

	)

434 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 21

	)

435 
	#_CS_XBS5_ILP32_OFF32_LIBS
 22

	)

436 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 23

	)

437 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 24

	)

438 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 25

	)

439 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 26

	)

440 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 27

	)

441 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 28

	)

442 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 29

	)

443 
	#_CS_XBS5_LP64_OFF64_LIBS
 30

	)

444 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 31

	)

445 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 32

	)

446 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 33

	)

447 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 34

	)

448 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 35

	)

451 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


452 
	#_CS_DARWIN_USER_DIR
 65536

	)

453 
	#_CS_DARWIN_USER_TEMP_DIR
 65537

	)

454 
	#_CS_DARWIN_USER_CACHE_DIR
 65538

	)

458 #ifde‡
_DARWIN_UNLIMITED_GETGROUPS


459 #i‡
deföed
(
__IPHONE_OS_VERSION_MIN_REQUIRED
Ë&& __IPHONE_OS_VERSION_MIN_REQUIRED < 
__IPHONE_3_2


461 #ñi‡
deföed
(
__MAC_OS_X_VERSION_MIN_REQUIRED
Ë&& __MAC_OS_X_VERSION_MIN_REQUIRED < 
__MAC_10_6


468 
__BEGIN_DECLS


469 
	$_exô
(Ë
__dód2
;

470 
	`ac˚ss
(const *, );

472 
	`Æ¨m
();

473 
	`chdú
(const *);

474 
	`chown
(c⁄° *, 
uid_t
, 
gid_t
);

476 
	$˛o£
(Ë
	`__DARWIN_ALIAS_C
(
˛o£
);

478 
	`dup
();

479 
	`dup2
(, );

480 
	`exe˛
(const *, const *, ...);

481 
	`exe˛e
(const *, const *, ...);

482 
	`exe˛p
(const *, const *, ...);

483 
	`execv
(const *, * const *);

484 
	`execve
(const *, * const *, * const *);

485 
	`execvp
(const *, * const *);

486 
pid_t
 
	`f‹k
();

487 
	`Â©hc⁄f
(, );

488 *
	`gëcwd
(*, 
size_t
);

489 
gid_t
 
	`gëegid
();

490 
uid_t
 
	`gëeuid
();

491 
gid_t
 
	`gëgid
();

492 #i‡
	`deföed
(
_DARWIN_UNLIMITED_GETGROUPS
Ë|| deföed(
_DARWIN_C_SOURCE
)

493 
	$gëgroups
(, 
gid_t
 []Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
, 
	`__DARWIN_EXTSN
(
gëgroups
));

495 
	`gëgroups
(, 
gid_t
 []);

497 *
	`gëlogö
();

498 
pid_t
 
	`gëpgΩ
();

499 
pid_t
 
	`gëpid
();

500 
pid_t
 
	`gëµid
();

501 
uid_t
 
	`gëuid
();

502 
	`ißây
();

503 
	`lök
(const *, const *);

504 
off_t
 
	`l£ek
(, off_t, );

505 
	`∑thc⁄f
(const *, );

507 
	$∑u£
(Ë
	`__DARWIN_ALIAS_C
(
∑u£
);

509 
	`pùe
([2]);

511 
ssize_t
 
	$ªad
(, *, 
size_t
Ë
	`__DARWIN_ALIAS_C
(
ªad
);

513 
	`rmdú
(const *);

514 
	`£tgid
(
gid_t
);

515 
	`£çgid
(
pid_t
,Öid_t);

516 
pid_t
 
	`£tsid
();

517 
	`£tuid
(
uid_t
);

520 
	$¶ìp
(Ë
	`__DARWIN_ALIAS_C
(
¶ìp
);

522 
	`sysc⁄f
();

523 
pid_t
 
	`tcgëpgΩ
();

524 
	`tc£çgΩ
(, 
pid_t
);

525 *
	`ây«me
();

527 #i‡
__DARWIN_UNIX03


528 
	$ây«me_r
(, *, 
size_t
Ë
	`__DARWIN_ALIAS
(
ây«me_r
);

530 *
	`ây«me_r
(, *, 
size_t
);

533 
	`u∆ök
(const *);

535 
ssize_t
 
	$wrôe
(, c⁄° *, 
size_t
Ë
	`__DARWIN_ALIAS_C
(
wrôe
);

536 
__END_DECLS


544 #i‡
__DARWIN_C_LEVEL
 >= 199209L

545 
__BEGIN_DECLS


546 
size_t
 
	$c⁄f°r
(, *, 
size_t
Ë
	`__DARWIN_ALIAS
(
c⁄f°r
);

548 
	$gë›t
(, * c⁄° [], c⁄° *Ë
	`__DARWIN_ALIAS
(
gë›t
);

550 *
›èrg
;

551 
›töd
, 
›ãº
, 
›t›t
;

552 
__END_DECLS


563 #i‡
__DARWIN_C_LEVEL
 >= 199506L

565 
	#F_ULOCK
 0

	)

566 
	#F_LOCK
 1

	)

567 
	#F_TLOCK
 2

	)

568 
	#F_TEST
 3

	)

570 
__BEGIN_DECLS


574 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE < 200112L

575 *
	`brk
(const *);

576 
	$chroŸ
(c⁄° *Ë
	`__POSIX_C_DEPRECATED
(199506L);

579 *
	`¸y±
(const *, const *);

580 #i‚de‡
__CTERMID_DEFINED


582 
	#__CTERMID_DEFINED
 1

	)

583 *
	`˘îmid
(*);

585 #i‡
__DARWIN_UNIX03


586 
	$í¸y±
(*, Ë
	`__DARWIN_ALIAS
(
í¸y±
);

588 
	`í¸y±
(*, );

590 
	`fchdú
();

591 
	`gëho°id
();

592 
pid_t
 
	`gëpgid
(pid_t);

593 
pid_t
 
	`gësid
(pid_t);

596 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE < 200112L

597 
	$gëdèbÀsize
(Ë
	`__POSIX_C_DEPRECATED
(199506L);

598 
	$gë∑gesize
(Ë
__puª2
 
	`__POSIX_C_DEPRECATED
(199506L);

599 *
	$gë∑ss
(c⁄° *Ë
	`__POSIX_C_DEPRECATED
(199506L);

603 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE < 200809L

604 *
	$gëwd
(*Ë
	`__POSIX_C_DEPRECATED
(200112L);

607 
	$lchown
(c⁄° *, 
uid_t
, 
gid_t
Ë
	`__DARWIN_ALIAS
(
lchown
);

609 
	$lockf
(, , 
off_t
Ë
	`__DARWIN_ALIAS_C
(
lockf
);

611 
	$ni˚
(Ë
	`__DARWIN_ALIAS
(
ni˚
);

613 
ssize_t
 
	$¥ód
(, *, 
size_t
, 
off_t
Ë
	`__DARWIN_ALIAS_C
(
¥ód
);

615 
ssize_t
 
	$pwrôe
(, c⁄° *, 
size_t
, 
off_t
Ë
	`__DARWIN_ALIAS_C
(
pwrôe
);

618 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE < 200112L

621 *
	`sbrk
();

624 #i‡
__DARWIN_UNIX03


625 
pid_t
 
	$£çgΩ
(Ë
	`__DARWIN_ALIAS
(
£çgΩ
);

627 
	`£çgΩ
(
pid_t
 
pid
,Öid_à
pgΩ
);

630 
	$£åegid
(
gid_t
, gid_tË
	`__DARWIN_ALIAS
(
£åegid
);

632 
	$£åeuid
(
uid_t
, uid_tË
	`__DARWIN_ALIAS
(
£åeuid
);

634 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

635 
	`sync
();

636 
	`åunˇã
(c⁄° *, 
off_t
);

637 
u£c⁄ds_t
 
	`uÆ¨m
(useconds_t, useconds_t);

638 
	$u¶ìp
(
u£c⁄ds_t
Ë
	`__DARWIN_ALIAS_C
(
u¶ìp
);

639 
pid_t
 
	`vf‹k
();

642 
	$fsync
(Ë
	`__DARWIN_ALIAS_C
(
fsync
);

644 
	`·runˇã
(, 
off_t
);

645 
	`gëlogö_r
(*, 
size_t
);

646 
__END_DECLS


656 #i‡
__DARWIN_C_LEVEL
 >= 200112L

657 
__BEGIN_DECLS


658 
	`fchown
(, 
uid_t
, 
gid_t
);

659 
	`gëho°«me
(*, 
size_t
);

660 
ssize_t
 
	`ªadlök
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

661 
	`£ãgid
(
gid_t
);

662 
	`£ãuid
(
uid_t
);

663 
	`symlök
(const *, const *);

664 
__END_DECLS


671 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


672 
	~<sys/£À˘.h
>

674 #i‚de‡
_DEV_T


675 
	#_DEV_T


	)

676 
__d¨wö_dev_t
 
	tdev_t
;

679 #i‚de‡
_MODE_T


680 
	#_MODE_T


	)

681 
__d¨wö_mode_t
 
	tmode_t
;

684 #i‚de‡
_UUID_T


685 
	#_UUID_T


	)

686 
__d¨wö_uuid_t
 
	tuuid_t
;

689 
__BEGIN_DECLS


690 
	$_Exô
(Ë
__dód2
;

691 
	`ac˚ssx_≈
(c⁄° 
ac˚ssx_des¸ùt‹
 *, 
size_t
, *, 
uid_t
);

692 
	`ac˘
(const *);

693 
	`add_¥ofû
(*, 
size_t
, , );

694 
	`ídu£rshñl
();

695 
	`execvP
(const *, const *, * const *);

696 *
	`fÊag°o°r
();

697 
	`gëdomaö«me
(*, );

698 
	`gëgrou∂i°
(const *, , *, *);

699 
	$gëho°uuid
(
uuid_t
, c⁄° 
time•ec
 *Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

700 
mode_t
 
	`gëmode
(const *, mode_t);

701 
	`gë≥îeid
(, 
uid_t
 *, 
gid_t
 *);

702 
	`gësgroups_≈
(*, 
uuid_t
);

703 *
	`gëu£rshñl
();

704 
	`gëwgroups_≈
(*, 
uuid_t
);

705 
	`öôgroups
(const *, );

706 
	`úu£rok
(, , const *, const *);

707 
	`úu£rok_ß
(const *, , , const *, const *);

708 
	`is£tugid
();

709 *
	`mkdãmp
(*);

710 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

711 
	`mk°emp
(*);

712 
	`mk°emps
(*, );

713 *
	`mkãmp
(*);

714 
	`nfssvc
(, *);

715 
	`¥ofû
(*, 
size_t
, , );

716 
	`±hªad_£tugid_≈
(
uid_t
, 
gid_t
);

717 
	`±hªad_gëugid_≈
–
uid_t
 *, 
gid_t
 *);

718 
	`rcmd
(**, , const *, const *, const *, *);

719 
	`rcmd_af
(**, , const *, const *, const *, *,

721 
	`ªboŸ
();

722 
	`ªvoke
(const *);

723 
	`ºesvp‹t
(*);

724 
	`ºesvp‹t_af
(*, );

725 
	`ru£rok
(const *, , const *, const *);

726 
	`£tdomaö«me
(const *, );

727 
	`£tgroups
(, c⁄° 
gid_t
 *);

728 
	`£tho°id
();

729 
	`£tho°«me
(const *, );

730 #i‡
__DARWIN_UNIX03


731 
	$£tkey
(c⁄° *Ë
	`__DARWIN_ALIAS
(
£tkey
);

733 
	`£tkey
(const *);

735 
	`£éogö
(const *);

736 *
	$£tmode
(c⁄° *Ë
	`__DARWIN_ALIAS_STARTING
(
__MAC_10_6
, 
__IPHONE_2_0
, 
	`__DARWIN_ALIAS
(
£tmode
));

737 
	`£ågid
(
gid_t
);

738 
	`£åuid
(
uid_t
);

739 
	`£tsgroups_≈
(, c⁄° 
uuid_t
);

740 
	`£tu£rshñl
();

741 
	`£twgroups_≈
(, c⁄° 
uuid_t
);

742 
	`°πofÊags
(**, *, *);

743 
	`sw≠⁄
(const *);

744 
	`sysˇŒ
(, ...);

745 
	`ây¶Ÿ
();

746 
	`undñëe
(const *);

747 
	`unwhôeout
(const *);

748 *
	`vÆloc
(
size_t
);

750 *
sub›èrg
;

751 
	`gësub›t
(**, * const *, **);

754 #ifde‡
__LP64__


755 
	$fgë©åli°
(,*,*,
size_t
,Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_0
);

756 
	$f£èâæi°
(,*,*,
size_t
,Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_0
);

757 
	$gë©åli°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
gë©åli°
);

758 
	$£èâæi°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
£èâæi°
);

759 
	`exch™ged©a
(const *,const *,);

760 
	`gëdúíåõßâr
(,*,*,
size_t
,*,*,*,);

763 
	$fgë©åli°
(,*,*,
size_t
,Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_0
);

764 
	$f£èâæi°
(,*,*,
size_t
,Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_0
);

765 
	$gë©åli°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
gë©åli°
);

766 
	$£èâæi°
(c⁄° *,*,*,
size_t
,Ë
	`__DARWIN_ALIAS
(
£èâæi°
);

767 
	`exch™ged©a
(const *,const *,);

768 
	`gëdúíåõßâr
(,*,*,
size_t
,*,*,*,);

772 
fs£¨chblock
;

773 
£¨ch°©e
;

775 
	`£¨chfs
(c⁄° *, 
fs£¨chblock
 *, *, , , 
£¨ch°©e
 *);

776 
	`fs˘l
(const *,,*,);

777 
	$ffs˘l
(,,*,Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_0
);

779 
›åe£t
;

781 
__END_DECLS


	@/usr/include/Availability.h

24 #i‚de‡
__AVAILABILITY__


25 
	#__AVAILABILITY__


	)

119 
	#__MAC_10_0
 1000

	)

120 
	#__MAC_10_1
 1010

	)

121 
	#__MAC_10_2
 1020

	)

122 
	#__MAC_10_3
 1030

	)

123 
	#__MAC_10_4
 1040

	)

124 
	#__MAC_10_5
 1050

	)

125 
	#__MAC_10_6
 1060

	)

126 
	#__MAC_10_7
 1070

	)

127 
	#__MAC_NA
 9999

	)

129 
	#__IPHONE_2_0
 20000

	)

130 
	#__IPHONE_2_1
 20100

	)

131 
	#__IPHONE_2_2
 20200

	)

132 
	#__IPHONE_3_0
 30000

	)

133 
	#__IPHONE_3_1
 30100

	)

134 
	#__IPHONE_3_2
 30200

	)

135 
	#__IPHONE_4_0
 40000

	)

136 
	#__IPHONE_4_1
 40100

	)

137 
	#__IPHONE_4_2
 40200

	)

138 
	#__IPHONE_4_3
 40300

	)

139 
	#__IPHONE_NA
 99999

	)

141 
	~<AvaûabûôyI¡î«l.h
>

144 #ifde‡
__IPHONE_OS_VERSION_MIN_REQUIRED


145 
	#__OSX_AVAILABLE_STARTING
(
_mac
, 
_ùh⁄e
Ë
__AVAILABILITY_INTERNAL
##
	)
_iphone

146 
	#__OSX_AVAILABLE_BUT_DEPRECATED
(
_macI¡ro
, 
_macDï
, 
_ùh⁄eI¡ro
, 
_ùh⁄eDï
) \

147 
__AVAILABILITY_INTERNAL
##
_ùh⁄eI¡ro
##
_DEP
##
_ùh⁄eDï


	)

149 #ñi‡
deföed
(
__MAC_OS_X_VERSION_MIN_REQUIRED
)

150 
	#__OSX_AVAILABLE_STARTING
(
_mac
, 
_ùh⁄e
Ë
__AVAILABILITY_INTERNAL
##
	)
_mac

151 
	#__OSX_AVAILABLE_BUT_DEPRECATED
(
_macI¡ro
, 
_macDï
, 
_ùh⁄eI¡ro
, 
_ùh⁄eDï
) \

152 
__AVAILABILITY_INTERNAL
##
_macI¡ro
##
_DEP
##
_macDï


	)

155 
	#__OSX_AVAILABLE_STARTING
(
_mac
, 
_ùh⁄e
)

	)

156 
	#__OSX_AVAILABLE_BUT_DEPRECATED
(
_macI¡ro
, 
_macDï
, 
_ùh⁄eI¡ro
, 
_ùh⁄eDï
)

	)

	@/usr/include/_types.h

24 #i‚de‡
__TYPES_H_


25 
	#__TYPES_H_


	)

27 
	~<sys/_ty≥s.h
>

29 #i‡
__GNUC__
 > 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 >= 7

30 
	#__°rfm⁄like
(
fmèrg
, 
fú°v¨¨g
) \

31 
	`__©åibuã__
((
	`__f‹m©__
 (
__°rfm⁄__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

32 
	#__°r·imñike
(
fmèrg
) \

33 
	`__©åibuã__
((
	`__f‹m©__
 (
__°r·ime__
, 
fmèrg
, 0)))

	)

35 
	#__°rfm⁄like
(
fmèrg
, 
fú°v¨¨g
)

	)

36 
	#__°r·imñike
(
fmèrg
)

	)

39 
	t__d¨wö_∆_ôem
;

40 
	t__d¨wö_w˘øns_t
;

41 #ifde‡
__LP64__


42 
__uöt32_t
 
	t__d¨wö_w˘y≥_t
;

44 
	t__d¨wö_w˘y≥_t
;

47 #ifde‡
__WCHAR_MAX__


48 
	#__DARWIN_WCHAR_MAX
 
__WCHAR_MAX__


	)

50 
	#__DARWIN_WCHAR_MAX
 0x7fffffff

	)

53 #i‡
__DARWIN_WCHAR_MAX
 > 0xffffU

54 
	#__DARWIN_WCHAR_MIN
 (-0x7ffffff‡- 1)

	)

56 
	#__DARWIN_WCHAR_MIN
 0

	)

58 
	#__DARWIN_WEOF
 ((
__d¨wö_wöt_t
)-1)

	)

60 #i‚de‡
_FORTIFY_SOURCE


61 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1050)

62 
	#_FORTIFY_SOURCE
 0

	)

64 
	#_FORTIFY_SOURCE
 2

	)

	@/usr/include/_xlocale.h

24 #i‚de‡
__XLOCALE_H_


25 
	#__XLOCALE_H_


	)

27 
	~<sys/cdefs.h
>

29 
__BEGIN_DECLS


30 
___mb_cur_max
();

31 
___mb_cur_max_l
(
loˇÀ_t
);

32 
	g__END_DECLS


	@/usr/include/alloca.h

24 #i‚de‡
_ALLOCA_H_


25 
	#_ALLOCA_H_


	)

27 
	~<sys/cdefs.h
>

28 
	~<_ty≥s.h
>

30 #i‚def 
_SIZE_T


31 
	#_SIZE_T


	)

32 
__d¨wö_size_t
 
	tsize_t
;

35 
__BEGIN_DECLS


36 *
Æloˇ
(
size_t
);

37 
	g__END_DECLS


39 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 3

41 #unde‡
Æloˇ


42 #unde‡
__Æloˇ


43 
	#Æloˇ
(
size
Ë
	`__Æloˇ
(size)

	)

44 
	#__Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
(size)

	)

	@/usr/include/machine/endian.h

31 #i‚de‡
_BSD_MACHINE_ENDIAN_H_


32 
	#_BSD_MACHINE_ENDIAN_H_


	)

34 #i‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

35 
	~"i386/ídün.h
"

36 #ñi‡
deföed
 (
__¨m__
)

37 
	~"¨m/ídün.h
"

39 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/limits.h

5 #i‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

6 
	~<i386/limôs.h
>

7 #ñi‡
deföed
 (
__¨m__
)

8 
	~<¨m/limôs.h
>

10 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/types.h

31 #i‚de‡
_BSD_MACHINE_TYPES_H_


32 
	#_BSD_MACHINE_TYPES_H_


	)

34 #i‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

35 
	~"i386/ty≥s.h
"

36 #ñi‡
deföed
 (
__¨m__
)

37 
	~"¨m/ty≥s.h
"

39 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/pthread_impl.h

24 #i‚de‡
_PTHREAD_IMPL_H_


25 
	#_PTHREAD_IMPL_H_


	)

32 #i‚de‡
__POSIX_LIB__


37 
	#_PTHREAD_MUTEX_SIG_öô
 0x32AAABA7

	)

39 
	#_PTHREAD_ERRORCHECK_MUTEX_SIG_öô
 0x32AAABA1

	)

40 
	#_PTHREAD_RECURSIVE_MUTEX_SIG_öô
 0x32AAABA2

	)

41 
	#_PTHREAD_FIRSTFIT_MUTEX_SIG_öô
 0x32AAABA3

	)

43 
	#_PTHREAD_COND_SIG_öô
 0x3CB0B1BB

	)

44 
	#_PTHREAD_ONCE_SIG_öô
 0x30B1BCBA

	)

45 
	#_PTHREAD_RWLOCK_SIG_öô
 0x2DA8B3B4

	)

50 
	#SCHED_OTHER
 1

	)

51 
	#SCHED_FIFO
 4

	)

52 
	#SCHED_RR
 2

	)

54 
	#__SCHED_PARAM_SIZE__
 4

	)

	@/usr/include/secure/_stdio.h

24 #i‚de‡
_STDIO_H_


25 #îr‹ 
îr‹
 "Never use <secure/_stdio.h> directly; include <stdio.h> instead."

28 #i‚de‡
_SECURE__STDIO_H_


29 
	#_SECURE__STDIO_H_


	)

31 
	~<£cuª/_comm⁄.h
>

33 #i‡
_USE_FORTIFY_LEVEL
 > 0

35 #unde‡
•rötf


36 #unde‡
v•rötf


38 #i‡
__DARWIN_C_LEVEL
 >= 200112L

39 #unde‡
¢¥ötf


40 #unde‡
v¢¥ötf


45 
	$__•rötf_chk
 (* 
__ª°ri˘
, , 
size_t
,

46 c⁄° * 
__ª°ri˘
, ...)

47 
	`__DARWIN_LDBL_COMPAT
 (
__•rötf_chk
);

49 
	#•rötf
(
°r
, ...) \

50 
	`__buûtö___•rötf_chk
 (
°r
, 0, 
	`__d¨wö_obsz
(°r), 
__VA_ARGS__
)

	)

52 
	$__¢¥ötf_chk
 (* 
__ª°ri˘
, 
size_t
, , size_t,

53 c⁄° * 
__ª°ri˘
, ...)

54 
	`__DARWIN_LDBL_COMPAT
 (
__¢¥ötf_chk
);

56 #i‡
__DARWIN_C_LEVEL
 >= 200112L

57 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

58 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 0, 
	`__d¨wö_obsz
(°r), 
__VA_ARGS__
)

	)

60 
	$__v•rötf_chk
 (* 
__ª°ri˘
, , 
size_t
,

61 c⁄° * 
__ª°ri˘
, 
va_li°
)

62 
	`__DARWIN_LDBL_COMPAT
 (
__v•rötf_chk
);

64 
	#v•rötf
(
°r
, 
f‹m©
, 
≠
) \

65 
	`__buûtö___v•rötf_chk
 (
°r
, 0, 
	`__d¨wö_obsz
(°r), 
f‹m©
, 
≠
)

	)

67 
	$__v¢¥ötf_chk
 (* 
__ª°ri˘
, 
size_t
, , size_t,

68 c⁄° * 
__ª°ri˘
, 
va_li°
)

69 
	`__DARWIN_LDBL_COMPAT
 (
__v¢¥ötf_chk
);

71 
	#v¢¥ötf
(
°r
, 
Àn
, 
f‹m©
, 
≠
) \

72 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 0, 
	`__d¨wö_obsz
(°r), 
f‹m©
, 
≠
)

	)

	@/usr/include/secure/_string.h

24 #i‚de‡
_STRING_H_


28 #i‚de‡
_SECURE__STRING_H_


29 
	#_SECURE__STRING_H_


	)

31 
	~<sys/cdefs.h
>

32 
	~<£cuª/_comm⁄.h
>

34 #i‡
_USE_FORTIFY_LEVEL
 > 0

39 #unde‡
mem˝y


40 #unde‡
memmove


41 #unde‡
mem£t


42 #unde‡
°r˝y


43 #i‡
__DARWIN_C_LEVEL
 >= 200809L

44 #unde‡
°p˝y


45 #unde‡
°≤˝y


47 #unde‡
°∫˝y


48 #unde‡
°rˇt


49 #i‡! (
deföed
(
__IPHONE_OS_VERSION_MIN_REQUIRED
) && __IPHONE_OS_VERSION_MIN_REQUIRED < 32000)

50 #unde‡
°∫ˇt


53 
	#mem˝y
(
de°
, 
§c
, 
Àn
) \

54 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

55 ? 
	`__buûtö___mem˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz0
 (dest)) \

56 : 
	`__ölöe_mem˝y_chk
 (
de°
, 
§c
, 
Àn
))

	)

58 
__ölöe
 *

59 
	$__ölöe_mem˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
)

61  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz0
(__dest));

62 
	}
}

64 
	#memmove
(
de°
, 
§c
, 
Àn
) \

65 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

66 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz0
 (dest)) \

67 : 
	`__ölöe_memmove_chk
 (
de°
, 
§c
, 
Àn
))

	)

69 
__ölöe
 *

70 
	$__ölöe_memmove_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
)

72  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz0
(__dest));

73 
	}
}

75 
	#mem£t
(
de°
, 
vÆ
, 
Àn
) \

76 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

77 ? 
	`__buûtö___mem£t_chk
 (
de°
, 
vÆ
, 
Àn
, 
	`__d¨wö_obsz0
 (dest)) \

78 : 
	`__ölöe_mem£t_chk
 (
de°
, 
vÆ
, 
Àn
))

	)

80 
__ölöe
 *

81 
	$__ölöe_mem£t_chk
 (*
__de°
, 
__vÆ
, 
size_t
 
__Àn
)

83  
	`__buûtö___mem£t_chk
 (
__de°
, 
__vÆ
, 
__Àn
, 
	`__d¨wö_obsz0
(__dest));

84 
	}
}

86 
	#°r˝y
(
de°
, 
§c
) \

87 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

88 ? 
	`__buûtö___°r˝y_chk
 (
de°
, 
§c
, 
	`__d¨wö_obsz
 (dest)) \

89 : 
	`__ölöe_°r˝y_chk
 (
de°
, 
§c
))

	)

91 
__ölöe
 *

92 
	$__ölöe_°r˝y_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

94  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__d¨wö_obsz
(__dest));

95 
	}
}

97 #i‡
__DARWIN_C_LEVEL
 >= 200809L

98 
	#°p˝y
(
de°
, 
§c
) \

99 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

100 ? 
	`__buûtö___°p˝y_chk
 (
de°
, 
§c
, 
	`__d¨wö_obsz
 (dest)) \

101 : 
	`__ölöe_°p˝y_chk
 (
de°
, 
§c
))

	)

103 
__ölöe
 *

104 
	$__ölöe_°p˝y_chk
 (*
__de°
, c⁄° *
__§c
)

106  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__d¨wö_obsz
(__dest));

107 
	}
}

109 
	#°≤˝y
(
de°
, 
§c
, 
Àn
) \

110 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

111 ? 
	`__buûtö___°≤˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz
 (dest)) \

112 : 
	`__ölöe_°≤˝y_chk
 (
de°
, 
§c
, 
Àn
))

	)

114 
__ölöe
 *

115 
	$__ölöe_°≤˝y_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

116 
size_t
 
__Àn
)

118  
	`__buûtö___°≤˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz
(__dest));

119 
	}
}

122 
	#°∫˝y
(
de°
, 
§c
, 
Àn
) \

123 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

124 ? 
	`__buûtö___°∫˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz
 (dest)) \

125 : 
	`__ölöe_°∫˝y_chk
 (
de°
, 
§c
, 
Àn
))

	)

127 
__ölöe
 *

128 
	$__ölöe_°∫˝y_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

129 
size_t
 
__Àn
)

131  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz
(__dest));

132 
	}
}

134 
	#°rˇt
(
de°
, 
§c
) \

135 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

136 ? 
	`__buûtö___°rˇt_chk
 (
de°
, 
§c
, 
	`__d¨wö_obsz
 (dest)) \

137 : 
	`__ölöe_°rˇt_chk
 (
de°
, 
§c
))

	)

139 
__ölöe
 *

140 
	$__ölöe_°rˇt_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__d¨wö_obsz
(__dest));

143 
	}
}

145 #i‡! (
deföed
(
__IPHONE_OS_VERSION_MIN_REQUIRED
) && __IPHONE_OS_VERSION_MIN_REQUIRED < 32000)

146 
	#°∫ˇt
(
de°
, 
§c
, 
Àn
) \

147 ((
	`__d¨wö_obsz0
 (
de°
Ë!(
size_t
) -1) \

148 ? 
	`__buûtö___°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
, 
	`__d¨wö_obsz
 (dest)) \

149 : 
	`__ölöe_°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
))

	)

151 
__ölöe
 *

152 
	$__ölöe_°∫ˇt_chk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__Àn
)

155  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__d¨wö_obsz
(__dest));

156 
	}
}

	@/usr/include/strings.h

58 #i‚de‡
_STRINGS_H_


59 
	#_STRINGS_H_


	)

61 
	~<_ty≥s.h
>

63 
	~<sys/cdefs.h
>

64 
	~<Avaûabûôy.h
>

66 #i‚def 
_SIZE_T


67 
	#_SIZE_T


	)

68 
__d¨wö_size_t
 
	tsize_t
;

71 
	g__BEGIN_DECLS


73 #i‡!
deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE < 200809L

74 
	$bcmp
(c⁄° *, c⁄° *, 
size_t
Ë
	`__POSIX_C_DEPRECATED
(200112L);

75 
	$bc›y
(c⁄° *, *, 
size_t
Ë
	`__POSIX_C_DEPRECATED
(200112L);

76 
	$bzîo
(*, 
size_t
Ë
	`__POSIX_C_DEPRECATED
(200112L);

77 *
	$ödex
(c⁄° *, Ë
	`__POSIX_C_DEPRECATED
(200112L);

78 *
	$rödex
(c⁄° *, Ë
	`__POSIX_C_DEPRECATED
(200112L);

81 
	`ffs
();

82 
	`°rˇ£cmp
(const *, const *);

83 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

84 
__END_DECLS


87 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


88 
__BEGIN_DECLS


89 
	$ff¶
(Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

90 
	$Ês
(Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

91 
	$Ê¶
(Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

92 
__END_DECLS


94 
	~<°rög.h
>

	@/usr/include/sys/_structs.h

29 
	~<sys/cdefs.h
>

30 
	~<sys/_ty≥s.h
>

32 #ifde‡
__√ed_uc⁄ãxt_t


33 #i‚de‡
__√ed_°ru˘_uc⁄ãxt


34 
	#__√ed_°ru˘_uc⁄ãxt


	)

38 #ifde‡
__√ed_uc⁄ãxt64_t


39 #i‚de‡
__√ed_°ru˘_uc⁄ãxt64


40 
	#__√ed_°ru˘_uc⁄ãxt64


	)

44 #ifde‡
__√ed_°ru˘_uc⁄ãxt


45 #i‚de‡
__√ed_°ru˘_mc⁄ãxt


46 
	#__√ed_°ru˘_mc⁄ãxt


	)

50 #ifde‡
__√ed_°ru˘_uc⁄ãxt64


51 #i‚de‡
__√ed_°ru˘_mc⁄ãxt64


52 
	#__√ed_°ru˘_mc⁄ãxt64


	)

56 #i‡
deföed
(
__√ed_°ru˘_mc⁄ãxt
Ë|| deföed(
__√ed_°ru˘_mc⁄ãxt64
)

57 
	~<machöe/_°ru˘s.h
>

60 #i‡
deföed
(
__√ed_°ack_t
Ë|| deföed(
__√ed_°ru˘_uc⁄ãxt
Ë|| deföed(
__√ed_°ru˘_uc⁄ãxt64
)

61 #i‚de‡
__√ed_°ru˘_sigÆt°ack


62 
	#__√ed_°ru˘_sigÆt°ack


	)

66 #ifde‡
__√ed_°ru˘_sigÆt°ack


67 #unde‡
__√ed_°ru˘_sigÆt°ack


69 #i‚de‡
_STRUCT_SIGALTSTACK


70 #i‡
__DARWIN_UNIX03


71 
	#_STRUCT_SIGALTSTACK
 
__d¨wö_sigÆt°ack


	)

73 
	#_STRUCT_SIGALTSTACK
 
sigÆt°ack


	)

75 
	g_STRUCT_SIGALTSTACK


77 *
	gss_•
;

78 
__d¨wö_size_t
 
	gss_size
;

79 
	gss_Êags
;

84 #ifde‡
__√ed_°ru˘_time•ec


85 #unde‡
__√ed_°ru˘_time•ec


86 #i‚de‡
_STRUCT_TIMESPEC


87 
	#_STRUCT_TIMESPEC
 
time•ec


	)

88 
	g_STRUCT_TIMESPEC


90 
__d¨wö_time_t
 
	gtv_£c
;

91 
	gtv_n£c
;

96 #ifde‡
__√ed_°ru˘_timevÆ


97 #unde‡
__√ed_°ru˘_timevÆ


98 #i‚de‡
_STRUCT_TIMEVAL


99 
	#_STRUCT_TIMEVAL
 
timevÆ


	)

100 
	g_STRUCT_TIMEVAL


102 
__d¨wö_time_t
 
	gtv_£c
;

103 
__d¨wö_su£c⁄ds_t
 
	gtv_u£c
;

108 #ifde‡
__√ed_°ru˘_timevÆ32


109 #unde‡
__√ed_°ru˘_timevÆ32


110 #i‚de‡
_STRUCT_TIMEVAL32


111 
	#_STRUCT_TIMEVAL32
 
timevÆ32


	)

112 
	g_STRUCT_TIMEVAL32


114 
__öt32_t
 
	gtv_£c
;

115 
__öt32_t
 
	gtv_u£c
;

120 #ifde‡
__√ed_°ru˘_uc⁄ãxt


121 #unde‡
__√ed_°ru˘_uc⁄ãxt


122 #i‚de‡
_STRUCT_UCONTEXT


123 #i‡
__DARWIN_UNIX03


124 
	#_STRUCT_UCONTEXT
 
__d¨wö_uc⁄ãxt


	)

126 
	#_STRUCT_UCONTEXT
 
uc⁄ãxt


	)

128 
	g_STRUCT_UCONTEXT


130 
	guc_⁄°ack
;

131 
__d¨wö_sig£t_t
 
	guc_sigmask
;

132 
_STRUCT_SIGALTSTACK
 
	guc_°ack
;

133 
_STRUCT_UCONTEXT
 *
	guc_lök
;

134 
__d¨wö_size_t
 
	guc_mcsize
;

135 
_STRUCT_MCONTEXT
 *
	guc_mc⁄ãxt
;

136 #ifde‡
_XOPEN_SOURCE


137 
_STRUCT_MCONTEXT
 
	g__mc⁄ãxt_d©a
;

143 #ifde‡
__√ed_°ru˘_uc⁄ãxt64


144 #unde‡
__√ed_°ru˘_uc⁄ãxt64


145 #i‚de‡
_STRUCT_UCONTEXT64


146 #i‡
__DARWIN_UNIX03


147 
	#_STRUCT_UCONTEXT64
 
__d¨wö_uc⁄ãxt64


	)

149 
	#_STRUCT_UCONTEXT64
 
uc⁄ãxt64


	)

151 
	g_STRUCT_UCONTEXT64


153 
	guc_⁄°ack
;

154 
__d¨wö_sig£t_t
 
	guc_sigmask
;

155 
_STRUCT_SIGALTSTACK
 
	guc_°ack
;

156 
_STRUCT_UCONTEXT64
 *
	guc_lök
;

157 
__d¨wö_size_t
 
	guc_mcsize
;

158 
_STRUCT_MCONTEXT64
 *
	guc_mc⁄ãxt64
;

164 #ifde‡
__√ed_fd_£t


165 #unde‡
__√ed_fd_£t


166 #i‚de‡
_FD_SET


167 
	#_FD_SET


	)

174 #ifde‡
FD_SETSIZE


175 
	#__DARWIN_FD_SETSIZE
 
FD_SETSIZE


	)

177 
	#__DARWIN_FD_SETSIZE
 1024

	)

179 
	#__DARWIN_NBBY
 8

	)

180 
	#__DARWIN_NFDBITS
 ((
__öt32_t
Ë* 
__DARWIN_NBBY
Ë

	)

181 
	#__DARWIN_howm™y
(
x
, 
y
Ë((((xË% (y)Ë=0Ë? ((xË/ (y)Ë: (((xË/ (y)Ë+ 1)Ë

	)

183 
__BEGIN_DECLS


184 
	sfd_£t
 {

185 
__öt32_t
 
	mfds_bôs
[
__DARWIN_howm™y
(
__DARWIN_FD_SETSIZE
, 
__DARWIN_NFDBITS
)];

186 } 
	tfd_£t
;

187 
__END_DECLS


190 
__ölöe
 

191 
	$__d¨wö_fd_is£t
(
_n
, c⁄° 
fd_£t
 *
_p
)

193  (
_p
->
fds_bôs
[
_n
/
__DARWIN_NFDBITS
] & (1<<(_n % __DARWIN_NFDBITS)));

194 
	}
}

196 
	#__DARWIN_FD_SET
(
n
, 
p
Ëdÿ{ 
__fd
 = (n); (’)->
fds_bôs
[__fd/
__DARWIN_NFDBITS
] |(1<<(__fd % __DARWIN_NFDBITS))); } 0)

	)

197 
	#__DARWIN_FD_CLR
(
n
, 
p
Ëdÿ{ 
__fd
 = (n); (’)->
fds_bôs
[__fd/
__DARWIN_NFDBITS
] &~(1<<(__fd % __DARWIN_NFDBITS))); } 0)

	)

198 
	#__DARWIN_FD_ISSET
(
n
, 
p
Ë
	`__d¨wö_fd_is£t
(“), (p))

	)

200 #i‡
__GNUC__
 > 3 || __GNUC__ =3 && 
__GNUC_MINOR__
 >= 3

205 
	#__DARWIN_FD_ZERO
(
p
Ë
	`__buûtö_bzîo
’, (*’)))

	)

207 
	#__DARWIN_FD_ZERO
(
p
Ë
	`bzîo
’, (*’)))

	)

210 
	#__DARWIN_FD_COPY
(
f
, 
t
Ë
	`bc›y
(f,Å, (*(f)))

	)

214 #ifde‡
__√ed_°ack_t


215 #unde‡
__√ed_°ack_t


216 #i‚de‡
_STACK_T


217 
	#_STACK_T


	)

218 
_STRUCT_SIGALTSTACK
 
	t°ack_t
;

222 #ifde‡
__√ed_uc⁄ãxt_t


223 #unde‡
__√ed_uc⁄ãxt_t


225 #i‚de‡
_UCONTEXT_T


226 
	#_UCONTEXT_T


	)

227 
_STRUCT_UCONTEXT
 
	tuc⁄ãxt_t
;

231 #ifde‡
__√ed_uc⁄ãxt64_t


232 #unde‡
__√ed_uc⁄ãxt64_t


233 #i‚de‡
_UCONTEXT64_T


234 
	#_UCONTEXT64_T


	)

235 
_STRUCT_UCONTEXT64
 
	tuc⁄ãxt64_t
;

	@/usr/include/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

36 #i‡
deföed
(
__LP64__
)

37 
	#__PTHREAD_SIZE__
 1168

	)

38 
	#__PTHREAD_ATTR_SIZE__
 56

	)

39 
	#__PTHREAD_MUTEXATTR_SIZE__
 8

	)

40 
	#__PTHREAD_MUTEX_SIZE__
 56

	)

41 
	#__PTHREAD_CONDATTR_SIZE__
 8

	)

42 
	#__PTHREAD_COND_SIZE__
 40

	)

43 
	#__PTHREAD_ONCE_SIZE__
 8

	)

44 
	#__PTHREAD_RWLOCK_SIZE__
 192

	)

45 
	#__PTHREAD_RWLOCKATTR_SIZE__
 16

	)

47 
	#__PTHREAD_SIZE__
 596

	)

48 
	#__PTHREAD_ATTR_SIZE__
 36

	)

49 
	#__PTHREAD_MUTEXATTR_SIZE__
 8

	)

50 
	#__PTHREAD_MUTEX_SIZE__
 40

	)

51 
	#__PTHREAD_CONDATTR_SIZE__
 4

	)

52 
	#__PTHREAD_COND_SIZE__
 24

	)

53 
	#__PTHREAD_ONCE_SIZE__
 4

	)

54 
	#__PTHREAD_RWLOCK_SIZE__
 124

	)

55 
	#__PTHREAD_RWLOCKATTR_SIZE__
 12

	)

58 
	s__d¨wö_±hªad_h™dÀr_ªc


60 (*
	m__routöe
)(*);

61 *
	m__¨g
;

62 
__d¨wö_±hªad_h™dÀr_ªc
 *
	m__√xt
;

64 
	s_›aque_±hªad_©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_ATTR_SIZE__
]; };

65 
	s_›aque_±hªad_c⁄d_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_COND_SIZE__
]; };

66 
	s_›aque_±hªad_c⁄d©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_CONDATTR_SIZE__
]; };

67 
	s_›aque_±hªad_muãx_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_MUTEX_SIZE__
]; };

68 
	s_›aque_±hªad_muãx©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_MUTEXATTR_SIZE__
]; };

69 
	s_›aque_±hªad_⁄˚_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_ONCE_SIZE__
]; };

70 
	s_›aque_±hªad_rwlock_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_RWLOCK_SIZE__
]; };

71 
	s_›aque_±hªad_rwlock©å_t
 { 
	m__sig
; 
	m__›aque
[
__PTHREAD_RWLOCKATTR_SIZE__
]; };

72 
	s_›aque_±hªad_t
 { 
	m__sig
; 
__d¨wö_±hªad_h™dÀr_ªc
 *
	m__˛ónup_°ack
; 
	m__›aque
[
__PTHREAD_SIZE__
]; };

80 #ifde‡
__˝lu•lus


81 #ifde‡
__GNUG__


82 
	#__DARWIN_NULL
 
__nuŒ


	)

84 #ifde‡
__LP64__


85 
	#__DARWIN_NULL
 (0L)

	)

87 
	#__DARWIN_NULL
 0

	)

91 
	#__DARWIN_NULL
 ((*)0)

	)

94 
__öt64_t
 
	t__d¨wö_blk˙t_t
;

95 
__öt32_t
 
	t__d¨wö_blksize_t
;

96 
__öt32_t
 
	t__d¨wö_dev_t
;

97 
	t__d¨wö_fsblk˙t_t
;

98 
	t__d¨wö_fsfû˙t_t
;

99 
__uöt32_t
 
	t__d¨wö_gid_t
;

100 
__uöt32_t
 
	t__d¨wö_id_t
;

101 
__uöt64_t
 
	t__d¨wö_öo64_t
;

102 #i‡
__DARWIN_64_BIT_INO_T


103 
__d¨wö_öo64_t
 
	t__d¨wö_öo_t
;

105 
__uöt32_t
 
	t__d¨wö_öo_t
;

107 
__d¨wö_«tuøl_t
 
	t__d¨wö_mach_p‹t_«me_t
;

108 
__d¨wö_mach_p‹t_«me_t
 
	t__d¨wö_mach_p‹t_t
;

109 
__uöt16_t
 
	t__d¨wö_mode_t
;

110 
__öt64_t
 
	t__d¨wö_off_t
;

111 
__öt32_t
 
	t__d¨wö_pid_t
;

112 
_›aque_±hªad_©å_t


113 
	t__d¨wö_±hªad_©å_t
;

114 
_›aque_±hªad_c⁄d_t


115 
	t__d¨wö_±hªad_c⁄d_t
;

116 
_›aque_±hªad_c⁄d©å_t


117 
	t__d¨wö_±hªad_c⁄d©å_t
;

118 
	t__d¨wö_±hªad_key_t
;

119 
_›aque_±hªad_muãx_t


120 
	t__d¨wö_±hªad_muãx_t
;

121 
_›aque_±hªad_muãx©å_t


122 
	t__d¨wö_±hªad_muãx©å_t
;

123 
_›aque_±hªad_⁄˚_t


124 
	t__d¨wö_±hªad_⁄˚_t
;

125 
_›aque_±hªad_rwlock_t


126 
	t__d¨wö_±hªad_rwlock_t
;

127 
_›aque_±hªad_rwlock©å_t


128 
	t__d¨wö_±hªad_rwlock©å_t
;

129 
_›aque_±hªad_t


130 *
	t__d¨wö_±hªad_t
;

131 
__uöt32_t
 
	t__d¨wö_sig£t_t
;

132 
__öt32_t
 
	t__d¨wö_su£c⁄ds_t
;

133 
__uöt32_t
 
	t__d¨wö_uid_t
;

134 
__uöt32_t
 
	t__d¨wö_u£c⁄ds_t
;

135 
	t__d¨wö_uuid_t
[16];

136 
	t__d¨wö_uuid_°rög_t
[37];

	@/usr/include/sys/appleapiopts.h

29 #i‚de‡
__SYS_APPLEAPIOPTS_H__


30 
	#__SYS_APPLEAPIOPTS_H__


	)

33 #i‚de‡
__APPLE_API_STANDARD


34 
	#__APPLE_API_STANDARD


	)

37 #i‚de‡
__APPLE_API_STABLE


38 
	#__APPLE_API_STABLE


	)

41 #i‚de‡
__APPLE_API_STRICT_CONFORMANCE


43 #i‚de‡
__APPLE_API_EVOLVING


44 
	#__APPLE_API_EVOLVING


	)

47 #i‚de‡
__APPLE_API_UNSTABLE


48 
	#__APPLE_API_UNSTABLE


	)

51 #i‚de‡
__APPLE_API_PRIVATE


52 
	#__APPLE_API_PRIVATE


	)

55 #i‚de‡
__APPLE_API_OBSOLETE


56 
	#__APPLE_API_OBSOLETE


	)

	@/usr/include/sys/cdefs.h

67 #i‚def 
_CDEFS_H_


68 
	#_CDEFS_H_


	)

70 #i‡
deföed
(
__˝lu•lus
)

71 
	#__BEGIN_DECLS
 "C" {

	)

72 
	#__END_DECLS
 }

	)

74 
	#__BEGIN_DECLS


	)

75 
	#__END_DECLS


	)

85 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

86 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

87 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

88 
	#__STRING
(
x
Ë#x

	)

90 
	#__c⁄°
 c⁄°

	)

91 
	#__sig√d
 sig√d

	)

92 
	#__vﬁ©ûe
 vﬁ©ûe

	)

93 #i‡
deföed
(
__˝lu•lus
)

94 
	#__ölöe
 
ölöe


	)

96 #i‚de‡
__GNUC__


97 
	#__ölöe


	)

102 
	#__P
(
¥Ÿos
Ë(Ë

	)

103 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

104 
	#__STRING
(
x
Ë"x"

	)

106 #i‚de‡
__GNUC__


107 
	#__c⁄°


	)

108 
	#__ölöe


	)

109 
	#__sig√d


	)

110 
	#__vﬁ©ûe


	)

121 #i‚def 
NO_ANSI_KEYWORDS


122 c⁄° 
__c⁄°


	)

123 
	#ölöe
 
__ölöe


	)

124 sig√d 
__sig√d


	)

125 vﬁ©ûê
__vﬁ©ûe


	)

137 #i‡
deföed
(
__MWERKS__
) && (__MWERKS__ > 0x2400)

139 #ñi‡
__GNUC__
 > 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 >= 5

140 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

141 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

142 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >= 5 && __GNUC_MINOR__ < 7

143 
	#__unu£d


	)

145 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

148 
	#__©åibuã__
(
x
Ë

	)

149 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

151 
	#__dód
 
__vﬁ©ûe


	)

152 
	#__puª
 
__c⁄°


	)

157 #i‚de‡
__dód


158 
	#__dód


	)

159 
	#__puª


	)

161 #i‚de‡
__dód2


162 
	#__dód2


	)

163 
	#__puª2


	)

164 
	#__unu£d


	)

167 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

168 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

170 
	#__u£d


	)

179 #i‡!(
__GNUC__
 =2 && 
__GNUC_MINOR__
 == 95)

180 #i‡
__STDC_VERSION__
 < 199901

181 
	#__ª°ri˘


	)

183 
	#__ª°ri˘
 
ª°ri˘


	)

195 #i‡
__GNUC__
 > 2 || __GNUC__ =2 && 
__GNUC_MINOR__
 >= 7

196 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
) \

197 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

198 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
) \

199 
	`__©åibuã__
((
	`__f‹m©__
 (
__sˇnf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

201 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

202 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

205 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__u£d
 = 
	)
string

207 #i‚de‡
__COPYRIGHT


208 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
c›yright
,s)

	)

211 #i‚de‡
__RCSID


212 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
rcsid
,s)

	)

215 #i‚de‡
__SCCSID


216 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
sccsid
,s)

	)

219 #i‚de‡
__PROJECT_VERSION


220 
	#__PROJECT_VERSION
(
s
Ë
	`__IDSTRING
(
¥oje˘_vîsi⁄
,s)

	)

262 
	#__DARWIN_ONLY_64_BIT_INO_T
 0

	)

264 
	#__DARWIN_ONLY_VERS_1050
 0

	)

284 #i‡!
deföed
(
__DARWIN_ONLY_UNIX_CONFORMANCE
)

285 #i‡
deföed
(
__LP64__
)

286 
	#__DARWIN_ONLY_UNIX_CONFORMANCE
 1

	)

288 
	#__DARWIN_ONLY_UNIX_CONFORMANCE
 0

	)

292 #i‡!
deföed
(
__DARWIN_UNIX03
)

293 #i‡ 
__DARWIN_ONLY_UNIX_CONFORMANCE


294 #i‡
deföed
(
_NONSTD_SOURCE
)

297 
	#__DARWIN_UNIX03
 1

	)

298 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1040)

299 
	#__DARWIN_UNIX03
 0

	)

300 #ñi‡
deföed
(
_DARWIN_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

301 #i‡
deföed
(
_NONSTD_SOURCE
)

304 
	#__DARWIN_UNIX03
 1

	)

305 #ñi‡
deföed
(
_NONSTD_SOURCE
)

306 
	#__DARWIN_UNIX03
 0

	)

308 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0) < 1050)

309 
	#__DARWIN_UNIX03
 0

	)

311 
	#__DARWIN_UNIX03
 1

	)

316 #i‡!
deföed
(
__DARWIN_64_BIT_INO_T
)

317 #i‡ 
deföed
(
_DARWIN_USE_64_BIT_INODE
)

318 #i‡
deföed
(
_DARWIN_NO_64_BIT_INODE
)

321 
	#__DARWIN_64_BIT_INO_T
 1

	)

322 #ñi‡
deföed
(
_DARWIN_NO_64_BIT_INODE
)

323 #i‡
__DARWIN_ONLY_64_BIT_INO_T


326 
	#__DARWIN_64_BIT_INO_T
 0

	)

328 #i‡
__DARWIN_ONLY_64_BIT_INO_T


329 
	#__DARWIN_64_BIT_INO_T
 1

	)

330 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
Ë&& ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0Ë< 1060Ë|| 
__DARWIN_UNIX03
 == 0

331 
	#__DARWIN_64_BIT_INO_T
 0

	)

333 
	#__DARWIN_64_BIT_INO_T
 1

	)

338 #i‡!
deföed
(
__DARWIN_VERS_1050
)

339 #i‡ 
__DARWIN_ONLY_VERS_1050


340 
	#__DARWIN_VERS_1050
 1

	)

341 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
Ë&& ((__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__-0Ë< 1050Ë|| 
__DARWIN_UNIX03
 == 0

342 
	#__DARWIN_VERS_1050
 0

	)

344 
	#__DARWIN_VERS_1050
 1

	)

348 #i‡!
deföed
(
__DARWIN_NON_CANCELABLE
)

349 
	#__DARWIN_NON_CANCELABLE
 0

	)

355 #i‡
__DARWIN_UNIX03


356 #i‡
__DARWIN_ONLY_UNIX_CONFORMANCE


357 
	#__DARWIN_SUF_UNIX03


	)

359 
	#__DARWIN_SUF_UNIX03
 "$UNIX2003"

	)

362 #i‡
__DARWIN_64_BIT_INO_T


363 #i‡
__DARWIN_ONLY_64_BIT_INO_T


364 
	#__DARWIN_SUF_64_BIT_INO_T


	)

366 
	#__DARWIN_SUF_64_BIT_INO_T
 "$INODE64"

	)

369 
	#__DARWIN_SUF_64_BIT_INO_T


	)

372 #i‡
__DARWIN_VERS_1050


373 #i‡
__DARWIN_ONLY_VERS_1050


374 
	#__DARWIN_SUF_1050


	)

376 
	#__DARWIN_SUF_1050
 "$1050"

	)

379 
	#__DARWIN_SUF_1050


	)

382 #i‡
__DARWIN_NON_CANCELABLE


383 
	#__DARWIN_SUF_NON_CANCELABLE
 "$NOCANCEL"

	)

385 
	#__DARWIN_SUF_NON_CANCELABLE


	)

389 
	#__DARWIN_SUF_UNIX03


	)

390 
	#__DARWIN_SUF_64_BIT_INO_T


	)

391 
	#__DARWIN_SUF_NON_CANCELABLE


	)

392 
	#__DARWIN_SUF_1050


	)

395 
	#__DARWIN_SUF_EXTSN
 "$DARWIN_EXTSN"

	)

400 
	#__DARWIN_ALIAS
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_UNIX03
)

	)

401 
	#__DARWIN_ALIAS_C
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_NON_CANCELABLE
 
__DARWIN_SUF_UNIX03
)

	)

402 
	#__DARWIN_ALIAS_I
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_64_BIT_INO_T
 
__DARWIN_SUF_UNIX03
)

	)

403 
	#__DARWIN_INODE64
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_64_BIT_INO_T
)

	)

405 
	#__DARWIN_1050
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
)

	)

406 
	#__DARWIN_1050ALIAS
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_UNIX03
)

	)

407 
	#__DARWIN_1050ALIAS_C
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_NON_CANCELABLE
 
__DARWIN_SUF_UNIX03
)

	)

408 
	#__DARWIN_1050ALIAS_I
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_64_BIT_INO_T
 
__DARWIN_SUF_UNIX03
)

	)

409 
	#__DARWIN_1050INODE64
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_1050
 
__DARWIN_SUF_64_BIT_INO_T
)

	)

411 
	#__DARWIN_EXTSN
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_EXTSN
)

	)

412 
	#__DARWIN_EXTSN_C
(
sym
Ë
	`__asm
("_" 
	`__STRING
(symË
__DARWIN_SUF_EXTSN
 
__DARWIN_SUF_NON_CANCELABLE
)

	)

417 
	~<sys/_symbﬁ_Æüsög.h
>

419 #i‡
deföed
(
__IPHONE_OS_VERSION_MIN_REQUIRED
)

420 
	#__DARWIN_ALIAS_STARTING
(
_mac
, 
_ùh⁄e
, 
x
Ë
__DARWIN_ALIAS_STARTING_IPHONE_
##
	`_ùh⁄e
(x)

	)

421 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
)

422 
	#__DARWIN_ALIAS_STARTING
(
_mac
, 
_ùh⁄e
, 
x
Ë
__DARWIN_ALIAS_STARTING_MAC_
##
	`_mac
(x)

	)

424 
	#__DARWIN_ALIAS_STARTING
(
_mac
, 
_ùh⁄e
, 
x
)

	)

449 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1L

450 #unde‡
_POSIX_C_SOURCE


451 
	#_POSIX_C_SOURCE
 199009L

	)

455 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2L

456 #unde‡
_POSIX_C_SOURCE


457 
	#_POSIX_C_SOURCE
 199209L

	)

461 #ifde‡
_XOPEN_SOURCE


462 #i‡
_XOPEN_SOURCE
 - 0L >700L && (!
deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE - 0L < 200809L)

463 #unde‡
_POSIX_C_SOURCE


464 
	#_POSIX_C_SOURCE
 200809L

	)

465 #ñi‡
_XOPEN_SOURCE
 - 0L >600L && (!
deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE - 0L < 200112L)

466 #unde‡
_POSIX_C_SOURCE


467 
	#_POSIX_C_SOURCE
 200112L

	)

468 #ñi‡
_XOPEN_SOURCE
 - 0L >500L && (!
deföed
(
_POSIX_C_SOURCE
) || _POSIX_C_SOURCE - 0L < 199506L)

469 #unde‡
_POSIX_C_SOURCE


470 
	#_POSIX_C_SOURCE
 199506L

	)

478 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

479 
	#_POSIX_C_SOURCE
 198808L

	)

485 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ >4Ë|| ((__GNUC__ =3Ë&& (
__GNUC_MINOR__
 >= 1)))

486 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

487 
	#__u«vaûabÀ
 
	`__©åibuã__
((
u«vaûabÀ
))

	)

489 
	#__dïªˇãd


	)

490 
	#__u«vaûabÀ


	)

494 
	~<sys/_posix_avaûabûôy.h
>

496 
	#__POSIX_C_DEPRECATED
(
vî
Ë
___POSIX_C_DEPRECATED_STARTING_
##
	)
ver

504 
	#__DARWIN_C_ANSI
 010000L

	)

505 
	#__DARWIN_C_FULL
 900000L

	)

507 #i‡ 
deföed
(
_ANSI_SOURCE
)

508 
	#__DARWIN_C_LEVEL
 
__DARWIN_C_ANSI


	)

509 #ñi‡
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_DARWIN_C_SOURCE
Ë&& !deföed(
_NONSTD_SOURCE
)

510 
	#__DARWIN_C_LEVEL
 
_POSIX_C_SOURCE


	)

512 
	#__DARWIN_C_LEVEL
 
__DARWIN_C_FULL


	)

521 
	#__DARWIN_NO_LONG_LONG
 (
	`deföed
(
__STRICT_ANSI__
) \

522 && (
__STDC_VERSION__
-0 < 199901L) \

523 && !
	`deföed
(
__GNUG__
))

	)

531 #i‡
deföed
(
__¨m__
)

532 
	#__DARWIN_LDBL_COMPAT
(
x
Ë

	)

533 
	#__DARWIN_LDBL_COMPAT2
(
x
Ë

	)

534 
	#__DARWIN_LONG_DOUBLE_IS_DOUBLE
 1

	)

535 #ñi‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

536 
	#__DARWIN_LDBL_COMPAT
(
x
Ë

	)

537 
	#__DARWIN_LDBL_COMPAT2
(
x
Ë

	)

538 
	#__DARWIN_LONG_DOUBLE_IS_DOUBLE
 0

	)

540 #îr‹ 
Unknown
 
¨chôe˘uª


551 #i‡
__DARWIN_64_BIT_INO_T


552 
	#_DARWIN_FEATURE_64_BIT_INODE
 1

	)

559 #i‡
__DARWIN_LONG_DOUBLE_IS_DOUBLE


560 
	#_DARWIN_FEATURE_LONG_DOUBLE_IS_DOUBLE
 1

	)

569 #i‡
__DARWIN_ONLY_64_BIT_INO_T


570 
	#_DARWIN_FEATURE_ONLY_64_BIT_INODE
 1

	)

577 #i‡
__DARWIN_ONLY_VERS_1050


578 
	#_DARWIN_FEATURE_ONLY_VERS_1050
 1

	)

585 #i‡
__DARWIN_ONLY_UNIX_CONFORMANCE


586 
	#_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE
 1

	)

593 #i‡
__DARWIN_UNIX03


594 
	#_DARWIN_FEATURE_UNIX_CONFORMANCE
 3

	)

603 #i‚de‡
__CAST_AWAY_QUALIFIER


604 
	#__CAST_AWAY_QUALIFIER
(
v¨übÀ
, 
quÆifõr
, 
ty≥
Ë—y≥Ë()(v¨übÀ)

	)

	@/usr/include/sys/dirent.h

75 #i‚de‡
_SYS_DIRENT_H


76 
	#_SYS_DIRENT_H


	)

78 
	~<sys/_ty≥s.h
>

79 
	~<sys/cdefs.h
>

81 #i‚def 
_INO_T


82 
__d¨wö_öo_t
 
	töo_t
;

83 
	#_INO_T


	)

87 
	#__DARWIN_MAXNAMLEN
 255

	)

89 #¥agm®
∑ck
(4)

91 #i‡!
__DARWIN_64_BIT_INO_T


92 
	sdúít
 {

93 
öo_t
 
	md_öo
;

94 
__uöt16_t
 
	md_ª˛í
;

95 
__uöt8_t
 
	md_ty≥
;

96 
__uöt8_t
 
	md_«mÀn
;

97 
	md_«me
[
__DARWIN_MAXNAMLEN
 + 1];

101 #¥agm®
∑ck
()

103 
	#__DARWIN_MAXPATHLEN
 1024

	)

105 
	#__DARWIN_STRUCT_DIRENTRY
 { \

106 
__uöt64_t
 
d_öo
; \

107 
__uöt64_t
 
d_£ekoff
; \

108 
__uöt16_t
 
d_ª˛í
; \

109 
__uöt16_t
 
d_«mÀn
; \

110 
__uöt8_t
 
d_ty≥
; \

111 
d_«me
[
__DARWIN_MAXPATHLEN
]; \

112 }

	)

114 #i‡
__DARWIN_64_BIT_INO_T


115 
dúít
 
	g__DARWIN_STRUCT_DIRENTRY
;

120 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

121 
	#d_fûío
 
d_öo


	)

122 
	#MAXNAMLEN
 
__DARWIN_MAXNAMLEN


	)

126 
	#DT_UNKNOWN
 0

	)

127 
	#DT_FIFO
 1

	)

128 
	#DT_CHR
 2

	)

129 
	#DT_DIR
 4

	)

130 
	#DT_BLK
 6

	)

131 
	#DT_REG
 8

	)

132 
	#DT_LNK
 10

	)

133 
	#DT_SOCK
 12

	)

134 
	#DT_WHT
 14

	)

139 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

140 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

	@/usr/include/sys/errno.h

69 #i‚def 
_SYS_ERRNO_H_


70 
	#_SYS_ERRNO_H_


	)

72 
	~<sys/cdefs.h
>

74 
__BEGIN_DECLS


75 * 
__îr‹
();

76 
	#î∫o
 (*
	`__îr‹
())

	)

77 
	g__END_DECLS


83 
	#EPERM
 1

	)

84 
	#ENOENT
 2

	)

85 
	#ESRCH
 3

	)

86 
	#EINTR
 4

	)

87 
	#EIO
 5

	)

88 
	#ENXIO
 6

	)

89 
	#E2BIG
 7

	)

90 
	#ENOEXEC
 8

	)

91 
	#EBADF
 9

	)

92 
	#ECHILD
 10

	)

93 
	#EDEADLK
 11

	)

95 
	#ENOMEM
 12

	)

96 
	#EACCES
 13

	)

97 
	#EFAULT
 14

	)

98 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


99 
	#ENOTBLK
 15

	)

101 
	#EBUSY
 16

	)

102 
	#EEXIST
 17

	)

103 
	#EXDEV
 18

	)

104 
	#ENODEV
 19

	)

105 
	#ENOTDIR
 20

	)

106 
	#EISDIR
 21

	)

107 
	#EINVAL
 22

	)

108 
	#ENFILE
 23

	)

109 
	#EMFILE
 24

	)

110 
	#ENOTTY
 25

	)

111 
	#ETXTBSY
 26

	)

112 
	#EFBIG
 27

	)

113 
	#ENOSPC
 28

	)

114 
	#ESPIPE
 29

	)

115 
	#EROFS
 30

	)

116 
	#EMLINK
 31

	)

117 
	#EPIPE
 32

	)

120 
	#EDOM
 33

	)

121 
	#ERANGE
 34

	)

124 
	#EAGAIN
 35

	)

125 
	#EWOULDBLOCK
 
EAGAIN


	)

126 
	#EINPROGRESS
 36

	)

127 
	#EALREADY
 37

	)

130 
	#ENOTSOCK
 38

	)

131 
	#EDESTADDRREQ
 39

	)

132 
	#EMSGSIZE
 40

	)

133 
	#EPROTOTYPE
 41

	)

134 
	#ENOPROTOOPT
 42

	)

135 
	#EPROTONOSUPPORT
 43

	)

136 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


137 
	#ESOCKTNOSUPPORT
 44

	)

139 
	#ENOTSUP
 45

	)

140 #i‡!
__DARWIN_UNIX03
 && !
deföed
(
KERNEL
)

149 
	#EOPNOTSUPP
 
ENOTSUP


	)

152 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


153 
	#EPFNOSUPPORT
 46

	)

155 
	#EAFNOSUPPORT
 47

	)

156 
	#EADDRINUSE
 48

	)

157 
	#EADDRNOTAVAIL
 49

	)

160 
	#ENETDOWN
 50

	)

161 
	#ENETUNREACH
 51

	)

162 
	#ENETRESET
 52

	)

163 
	#ECONNABORTED
 53

	)

164 
	#ECONNRESET
 54

	)

165 
	#ENOBUFS
 55

	)

166 
	#EISCONN
 56

	)

167 
	#ENOTCONN
 57

	)

168 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


169 
	#ESHUTDOWN
 58

	)

170 
	#ETOOMANYREFS
 59

	)

172 
	#ETIMEDOUT
 60

	)

173 
	#ECONNREFUSED
 61

	)

175 
	#ELOOP
 62

	)

176 
	#ENAMETOOLONG
 63

	)

179 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


180 
	#EHOSTDOWN
 64

	)

182 
	#EHOSTUNREACH
 65

	)

183 
	#ENOTEMPTY
 66

	)

186 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


187 
	#EPROCLIM
 67

	)

188 
	#EUSERS
 68

	)

190 
	#EDQUOT
 69

	)

193 
	#ESTALE
 70

	)

194 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


195 
	#EREMOTE
 71

	)

196 
	#EBADRPC
 72

	)

197 
	#ERPCMISMATCH
 73

	)

198 
	#EPROGUNAVAIL
 74

	)

199 
	#EPROGMISMATCH
 75

	)

200 
	#EPROCUNAVAIL
 76

	)

203 
	#ENOLCK
 77

	)

204 
	#ENOSYS
 78

	)

206 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


207 
	#EFTYPE
 79

	)

208 
	#EAUTH
 80

	)

209 
	#ENEEDAUTH
 81

	)

212 
	#EPWROFF
 82

	)

213 
	#EDEVERR
 83

	)

216 
	#EOVERFLOW
 84

	)

219 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


220 
	#EBADEXEC
 85

	)

221 
	#EBADARCH
 86

	)

222 
	#ESHLIBVERS
 87

	)

223 
	#EBADMACHO
 88

	)

226 
	#ECANCELED
 89

	)

228 
	#EIDRM
 90

	)

229 
	#ENOMSG
 91

	)

230 
	#EILSEQ
 92

	)

231 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


232 
	#ENOATTR
 93

	)

235 
	#EBADMSG
 94

	)

236 
	#EMULTIHOP
 95

	)

237 
	#ENODATA
 96

	)

238 
	#ENOLINK
 97

	)

239 
	#ENOSR
 98

	)

240 
	#ENOSTR
 99

	)

241 
	#EPROTO
 100

	)

242 
	#ETIME
 101

	)

244 #i‡
__DARWIN_UNIX03
 || 
deföed
(
KERNEL
)

246 
	#EOPNOTSUPP
 102

	)

249 
	#ENOPOLICY
 103

	)

251 #i‡
__DARWIN_C_LEVEL
 >= 200809L

252 
	#ENOTRECOVERABLE
 104

	)

253 
	#EOWNERDEAD
 105

	)

256 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


257 
	#ELAST
 105

	)

	@/usr/include/sys/fcntl.h

70 #i‚de‡
_SYS_FCNTL_H_


71 
	#_SYS_FCNTL_H_


	)

78 
	~<sys/_ty≥s.h
>

79 
	~<sys/cdefs.h
>

80 
	~<Avaûabûôy.h
>

83 #i‚de‡
_SIZE_T


84 
	#_SIZE_T


	)

85 
__d¨wö_size_t
 
	tsize_t
;

88 #i‚def 
_MODE_T


89 
__d¨wö_mode_t
 
	tmode_t
;

90 
	#_MODE_T


	)

93 #i‚de‡
_OFF_T


94 
__d¨wö_off_t
 
	toff_t
;

95 
	#_OFF_T


	)

98 #i‚de‡
_PID_T


99 
__d¨wö_pid_t
 
	tpid_t
;

100 
	#_PID_T


	)

111 
	#O_RDONLY
 0x0000

	)

112 
	#O_WRONLY
 0x0001

	)

113 
	#O_RDWR
 0x0002

	)

114 
	#O_ACCMODE
 0x0003

	)

124 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

125 
	#FREAD
 0x0001

	)

126 
	#FWRITE
 0x0002

	)

128 
	#O_NONBLOCK
 0x0004

	)

129 
	#O_APPEND
 0x0008

	)

130 #i‚de‡
O_SYNC


131 
	#O_SYNC
 0x0080

	)

133 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

134 
	#O_SHLOCK
 0x0010

	)

135 
	#O_EXLOCK
 0x0020

	)

136 
	#O_ASYNC
 0x0040

	)

137 
	#O_FSYNC
 
O_SYNC


	)

138 
	#O_NOFOLLOW
 0x0100

	)

140 
	#O_CREAT
 0x0200

	)

141 
	#O_TRUNC
 0x0400

	)

142 
	#O_EXCL
 0x0800

	)

143 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

144 
	#O_EVTONLY
 0x8000

	)

148 
	#O_NOCTTY
 0x20000

	)

151 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

152 
	#O_DIRECTORY
 0x100000

	)

153 
	#O_SYMLINK
 0x200000

	)

156 #i‚de‡
O_DSYNC


157 
	#O_DSYNC
 0x400000

	)

161 #i‡
__DARWIN_C_LEVEL
 >= 200809L

162 
	#O_CLOEXEC
 0x1000000

	)

171 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

172 
	#FAPPEND
 
O_APPEND


	)

173 
	#FASYNC
 
O_ASYNC


	)

174 
	#FFSYNC
 
O_FSYNC


	)

175 
	#FFDSYNC
 
O_DSYNC


	)

176 
	#FNONBLOCK
 
O_NONBLOCK


	)

177 
	#FNDELAY
 
O_NONBLOCK


	)

178 
	#O_NDELAY
 
O_NONBLOCK


	)

185 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

186 
	#CPF_OVERWRITE
 1

	)

187 
	#CPF_IGNORE_MODE
 2

	)

188 
	#CPF_MASK
 (
CPF_OVERWRITE
|
CPF_IGNORE_MODE
)

	)

196 
	#F_DUPFD
 0

	)

197 
	#F_GETFD
 1

	)

198 
	#F_SETFD
 2

	)

199 
	#F_GETFL
 3

	)

200 
	#F_SETFL
 4

	)

201 
	#F_GETOWN
 5

	)

202 
	#F_SETOWN
 6

	)

203 
	#F_GETLK
 7

	)

204 
	#F_SETLK
 8

	)

205 
	#F_SETLKW
 9

	)

206 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

207 
	#F_FLUSH_DATA
 40

	)

208 
	#F_CHKCLEAN
 41

	)

209 
	#F_PREALLOCATE
 42

	)

210 
	#F_SETSIZE
 43

	)

211 
	#F_RDADVISE
 44

	)

212 
	#F_RDAHEAD
 45

	)

213 
	#F_READBOOTSTRAP
 46

	)

214 
	#F_WRITEBOOTSTRAP
 47

	)

215 
	#F_NOCACHE
 48

	)

216 
	#F_LOG2PHYS
 49

	)

217 
	#F_GETPATH
 50

	)

218 
	#F_FULLFSYNC
 51

	)

219 
	#F_PATHPKG_CHECK
 52

	)

220 
	#F_FREEZE_FS
 53

	)

221 
	#F_THAW_FS
 54

	)

222 
	#F_GLOBAL_NOCACHE
 55

	)

225 
	#F_ADDSIGS
 59

	)

227 
	#F_MARKDEPENDENCY
 60

	)

229 
	#F_ADDFILESIGS
 61

	)

231 
	#F_NODIRECT
 62

	)

234 
	#F_GETPROTECTIONCLASS
 63

	)

235 
	#F_SETPROTECTIONCLASS
 64

	)

237 
	#F_LOG2PHYS_EXT
 65

	)

239 
	#F_GETLKPID
 66

	)

242 
	#F_SETBACKINGSTORE
 70

	)

243 
	#F_GETPATH_MTMINFO
 71

	)

245 
	#F_SETNOSIGPIPE
 73

	)

246 
	#F_GETNOSIGPIPE
 74

	)

249 
	#FCNTL_FS_SPECIFIC_BASE
 0x00010000

	)

253 #i‡
__DARWIN_C_LEVEL
 >= 200809L

254 
	#F_DUPFD_CLOEXEC
 67

	)

258 
	#FD_CLOEXEC
 1

	)

261 
	#F_RDLCK
 1

	)

262 
	#F_UNLCK
 2

	)

263 
	#F_WRLCK
 3

	)

269 #i‚de‡
SEEK_SET


270 
	#SEEK_SET
 0

	)

271 
	#SEEK_CUR
 1

	)

272 
	#SEEK_END
 2

	)

279 #i‚de‡
S_IFMT


281 
	#S_IFMT
 0170000

	)

282 
	#S_IFIFO
 0010000

	)

283 
	#S_IFCHR
 0020000

	)

284 
	#S_IFDIR
 0040000

	)

285 
	#S_IFBLK
 0060000

	)

286 
	#S_IFREG
 0100000

	)

287 
	#S_IFLNK
 0120000

	)

288 
	#S_IFSOCK
 0140000

	)

289 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

290 
	#S_IFWHT
 0160000

	)

295 
	#S_IRWXU
 0000700

	)

296 
	#S_IRUSR
 0000400

	)

297 
	#S_IWUSR
 0000200

	)

298 
	#S_IXUSR
 0000100

	)

300 
	#S_IRWXG
 0000070

	)

301 
	#S_IRGRP
 0000040

	)

302 
	#S_IWGRP
 0000020

	)

303 
	#S_IXGRP
 0000010

	)

305 
	#S_IRWXO
 0000007

	)

306 
	#S_IROTH
 0000004

	)

307 
	#S_IWOTH
 0000002

	)

308 
	#S_IXOTH
 0000001

	)

310 
	#S_ISUID
 0004000

	)

311 
	#S_ISGID
 0002000

	)

312 
	#S_ISVTX
 0001000

	)

314 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

315 
	#S_ISTXT
 
S_ISVTX


	)

316 
	#S_IREAD
 
S_IRUSR


	)

317 
	#S_IWRITE
 
S_IWUSR


	)

318 
	#S_IEXEC
 
S_IXUSR


	)

322 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

325 
	#F_ALLOCATECONTIG
 0x00000002

	)

326 
	#F_ALLOCATEALL
 0x00000004

	)

330 
	#F_PEOFPOSMODE
 3

	)

332 
	#F_VOLPOSMODE
 4

	)

339 
	sÊock
 {

340 
off_t
 
	ml_°¨t
;

341 
off_t
 
	ml_Àn
;

342 
pid_t
 
	ml_pid
;

343 
	ml_ty≥
;

344 
	ml_whí˚
;

348 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

355 
	sødvis‹y
 {

356 
off_t
 
	mø_off£t
;

357 
	mø_cou¡
;

367 
	sfsig«tuªs
 {

368 
off_t
 
	mfs_fûe_°¨t
;

369 *
	mfs_blob_°¨t
;

370 
size_t
 
	mfs_blob_size
;

371 } 
	tfsig«tuªs_t
;

374 
	#LOCK_SH
 0x01

	)

375 
	#LOCK_EX
 0x02

	)

376 
	#LOCK_NB
 0x04

	)

377 
	#LOCK_UN
 0x08

	)

381 
	sf°‹e
 {

382 
	mf°_Êags
;

383 
	mf°_posmode
;

384 
off_t
 
	mf°_off£t
;

385 
off_t
 
	mf°_Àngth
;

386 
off_t
 
	mf°_byãßŒoc
;

387 } 
	tf°‹e_t
;

391 
	sfboŸ°ø±øns„r
 {

392 
off_t
 
	mfbt_off£t
;

393 
size_t
 
	mfbt_Àngth
;

394 *
	mfbt_buf„r
;

395 } 
	tfboŸ°ø±øns„r_t
;

419 #¥agm®
∑ck
(4)

421 
	slog2phys
 {

422 
	ml2p_Êags
;

423 
off_t
 
	ml2p_c⁄tigbyãs
;

426 
off_t
 
	ml2p_devoff£t
;

431 #¥agm®
∑ck
()

433 
	#O_POPUP
 0x80000000

	)

434 
	#O_ALERT
 0x20000000

	)

440 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

441 #i‚de‡
_FILESEC_T


442 
	g_fûe£c
;

443 
_fûe£c
 *
	tfûe£c_t
;

444 
	#_FILESEC_T


	)

447 
	mFILESEC_OWNER
 = 1,

448 
	mFILESEC_GROUP
 = 2,

449 
	mFILESEC_UUID
 = 3,

450 
	mFILESEC_MODE
 = 4,

451 
	mFILESEC_ACL
 = 5,

452 
	mFILESEC_GRPUUID
 = 6,

455 
	mFILESEC_ACL_RAW
 = 100,

456 
	mFILESEC_ACL_ALLOCSIZE
 = 101

457 } 
	tfûe£c_¥›îty_t
;

460 
	#FILESEC_GUID
 
FILESEC_UUID


	)

463 
__BEGIN_DECLS


464 
	$›í
(c⁄° *, , ...Ë
	`__DARWIN_ALIAS_C
(
›í
);

465 
	$¸ót
(c⁄° *, 
mode_t
Ë
	`__DARWIN_ALIAS_C
(
¸ót
);

466 
	$f˙é
(, , ...Ë
	`__DARWIN_ALIAS_C
(
f˙é
);

467 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

469 
	`›íx_≈
(c⁄° *, , 
fûe£c_t
);

470 
	`Êock
(, );

471 
fûe£c_t
 
	`fûe£c_öô
();

472 
fûe£c_t
 
	`fûe£c_dup
(filesec_t);

473 
	`fûe£c_‰ì
(
fûe£c_t
);

474 
	`fûe£c_gë_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
, *);

475 
	`fûe£c_quîy_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
, *);

476 
	`fûe£c_£t_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
, const *);

477 
	$fûe£c_un£t_¥›îty
(
fûe£c_t
, 
fûe£c_¥›îty_t
Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_6
, 
__IPHONE_3_2
);

478 
	#_FILESEC_UNSET_PROPERTY
 ((*)0)

	)

479 
	#_FILESEC_REMOVE_ACL
 ((*)1)

	)

481 
__END_DECLS


	@/usr/include/sys/select.h

63 #i‚de‡
_SYS_SELECT_H_


64 
	#_SYS_SELECT_H_


	)

66 
	~<sys/≠∂ópi›ts.h
>

67 
	~<sys/cdefs.h
>

68 
	~<sys/_ty≥s.h
>

75 
	#__√ed_fd_£t


	)

76 
	#__√ed_°ru˘_time•ec


	)

77 
	#__√ed_°ru˘_timevÆ


	)

78 
	~<sys/_°ru˘s.h
>

85 #i‚def 
_TIME_T


86 
	#_TIME_T


	)

87 
__d¨wö_time_t
 
	ttime_t
;

90 #i‚de‡
_SUSECONDS_T


91 
	#_SUSECONDS_T


	)

92 
__d¨wö_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

95 #i‚de‡
_SIGSET_T


96 
	#_SIGSET_T


	)

97 
__d¨wö_sig£t_t
 
	tsig£t_t
;

112 #i‚def 
FD_SETSIZE


113 
	#FD_SETSIZE
 
__DARWIN_FD_SETSIZE


	)

115 #i‚de‡
FD_SET


116 
	#FD_SET
(
n
, 
p
Ë
	`__DARWIN_FD_SET
“,Ö)

	)

118 #i‚de‡
FD_CLR


119 
	#FD_CLR
(
n
, 
p
Ë
	`__DARWIN_FD_CLR
“,Ö)

	)

121 #i‚de‡
FD_ISSET


122 
	#FD_ISSET
(
n
, 
p
Ë
	`__DARWIN_FD_ISSET
“,Ö)

	)

124 #i‚de‡
FD_ZERO


125 
	#FD_ZERO
(
p
Ë
	`__DARWIN_FD_ZERO
’)

	)

127 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

128 #i‚de‡
FD_COPY


129 
	#FD_COPY
(
f
, 
t
Ë
	`__DARWIN_FD_COPY
(f,Å)

	)

134 
	g__BEGIN_DECLS


136 #i‚de‡ 
__MWERKS__


137 
	$p£À˘
(, 
fd_£t
 * 
__ª°ri˘
, fd_set * __restrict,

138 
fd_£t
 * 
__ª°ri˘
, c⁄° 
time•ec
 * __restrict,

139 c⁄° 
sig£t_t
 * 
__ª°ri˘
)

140 #i‡
	`deföed
(
_DARWIN_C_SOURCE
Ë|| deföed(
_DARWIN_UNLIMITED_SELECT
)

141 
	$__DARWIN_EXTSN_C
(
p£À˘
)

143 #i‡
	`deföed
(
__LP64__
Ë&& !
__DARWIN_NON_CANCELABLE


144 
	$__DARWIN_1050
(
p£À˘
)

146 
	$__DARWIN_ALIAS_C
(
p£À˘
)

152 
	~<sys/_£À˘.h
>

154 
__END_DECLS


	@/usr/include/sys/syslimits.h

65 #i‚de‡
_SYS_SYSLIMITS_H_


66 
	#_SYS_SYSLIMITS_H_


	)

68 
	~<sys/cdefs.h
>

70 #i‡!
deföed
(
_ANSI_SOURCE
)

75 
	#ARG_MAX
 (256 * 1024Ë

	)

76 
	#CHILD_MAX
 266

	)

77 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

78 
	#GID_MAX
 2147483647U

	)

80 
	#LINK_MAX
 32767

	)

81 
	#MAX_CANON
 1024

	)

82 
	#MAX_INPUT
 1024

	)

83 
	#NAME_MAX
 255

	)

84 
	#NGROUPS_MAX
 16

	)

85 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

86 
	#UID_MAX
 2147483647U

	)

88 
	#OPEN_MAX
 10240

	)

91 
	#PATH_MAX
 1024

	)

92 
	#PIPE_BUF
 512

	)

94 
	#BC_BASE_MAX
 99

	)

95 
	#BC_DIM_MAX
 2048

	)

96 
	#BC_SCALE_MAX
 99

	)

97 
	#BC_STRING_MAX
 1000

	)

98 
	#CHARCLASS_NAME_MAX
 14

	)

99 
	#COLL_WEIGHTS_MAX
 2

	)

100 
	#EQUIV_CLASS_MAX
 2

	)

101 
	#EXPR_NEST_MAX
 32

	)

102 
	#LINE_MAX
 2048

	)

103 
	#RE_DUP_MAX
 255

	)

105 #i‡
__DARWIN_UNIX03


106 
	#NZERO
 20

	)

111 
	#NZERO
 0

	)

	@/usr/include/sys/unistd.h

64 #i‚de‡
_SYS_UNISTD_H_


65 
	#_SYS_UNISTD_H_


	)

67 
	~<sys/cdefs.h
>

75 #ifdef 
_NOT_AVAILABLE


76 
	#_POSIX_SAVED_IDS


	)

79 
	#_POSIX_VERSION
 200112L

	)

80 
	#_POSIX2_VERSION
 200112L

	)

84 #i‚de‡
_POSIX_VDISABLE


85 
	#_POSIX_VDISABLE
 (()'\377')

	)

88 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

91 
	#F_OK
 0

	)

92 
	#X_OK
 (1<<0Ë

	)

93 
	#W_OK
 (1<<1Ë

	)

94 
	#R_OK
 (1<<2Ë

	)

96 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

102 
	#_READ_OK
 (1<<9Ë

	)

103 
	#_WRITE_OK
 (1<<10Ë

	)

104 
	#_EXECUTE_OK
 (1<<11Ë

	)

105 
	#_DELETE_OK
 (1<<12Ë

	)

106 
	#_APPEND_OK
 (1<<13Ë

	)

107 
	#_RMFILE_OK
 (1<<14Ë

	)

108 
	#_RATTR_OK
 (1<<15Ë

	)

109 
	#_WATTR_OK
 (1<<16Ë

	)

110 
	#_REXT_OK
 (1<<17Ë

	)

111 
	#_WEXT_OK
 (1<<18Ë

	)

112 
	#_RPERM_OK
 (1<<19Ë

	)

113 
	#_WPERM_OK
 (1<<20Ë

	)

114 
	#_CHOWN_OK
 (1<<21Ë

	)

116 
	#_ACCESS_EXTENDED_MASK
 (
_READ_OK
 | 
_WRITE_OK
 | 
_EXECUTE_OK
 | \

117 
_DELETE_OK
 | 
_APPEND_OK
 | \

118 
_RMFILE_OK
 | 
_REXT_OK
 | \

119 
_WEXT_OK
 | 
_RATTR_OK
 | 
_WATTR_OK
 | 
_RPERM_OK
 | \

120 
_WPERM_OK
 | 
_CHOWN_OK
)

	)

124 #i‚de‡
SEEK_SET


125 
	#SEEK_SET
 0

	)

126 
	#SEEK_CUR
 1

	)

127 
	#SEEK_END
 2

	)

130 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

132 
	#L_SET
 
SEEK_SET


	)

133 
	#L_INCR
 
SEEK_CUR


	)

134 
	#L_XTND
 
SEEK_END


	)

137 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

138 
	sac˚ssx_des¸ùt‹
 {

139 
	mad_«me_off£t
;

140 
	mad_Êags
;

141 
	mad_∑d
[2];

143 
	#ACCESSX_MAX_DESCRIPTORS
 100

	)

144 
	#ACCESSX_MAX_TABLESIZE
 (16 * 1024)

	)

148 
	#_PC_LINK_MAX
 1

	)

149 
	#_PC_MAX_CANON
 2

	)

150 
	#_PC_MAX_INPUT
 3

	)

151 
	#_PC_NAME_MAX
 4

	)

152 
	#_PC_PATH_MAX
 5

	)

153 
	#_PC_PIPE_BUF
 6

	)

154 
	#_PC_CHOWN_RESTRICTED
 7

	)

155 
	#_PC_NO_TRUNC
 8

	)

156 
	#_PC_VDISABLE
 9

	)

158 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

159 
	#_PC_NAME_CHARS_MAX
 10

	)

160 
	#_PC_CASE_SENSITIVE
 11

	)

161 
	#_PC_CASE_PRESERVING
 12

	)

162 
	#_PC_EXTENDED_SECURITY_NP
 13

	)

163 
	#_PC_AUTH_OPAQUE_NP
 14

	)

166 
	#_PC_2_SYMLINKS
 15

	)

167 
	#_PC_ALLOC_SIZE_MIN
 16

	)

168 
	#_PC_ASYNC_IO
 17

	)

169 
	#_PC_FILESIZEBITS
 18

	)

170 
	#_PC_PRIO_IO
 19

	)

171 
	#_PC_REC_INCR_XFER_SIZE
 20

	)

172 
	#_PC_REC_MAX_XFER_SIZE
 21

	)

173 
	#_PC_REC_MIN_XFER_SIZE
 22

	)

174 
	#_PC_REC_XFER_ALIGN
 23

	)

175 
	#_PC_SYMLINK_MAX
 24

	)

176 
	#_PC_SYNC_IO
 25

	)

177 
	#_PC_XATTR_SIZE_BITS
 26

	)

180 
	#_CS_PATH
 1

	)

	@/usr/include/sys/wait.h

64 #i‚de‡
_SYS_WAIT_H_


65 
	#_SYS_WAIT_H_


	)

67 
	~<sys/cdefs.h
>

68 
	~<sys/_ty≥s.h
>

80 
	mP_ALL
,

81 
	mP_PID
,

82 
	mP_PGID


83 } 
	tidty≥_t
;

89 #i‚de‡
_PID_T


90 
__d¨wö_pid_t
 
	tpid_t
;

91 
	#_PID_T


	)

94 #i‚de‡
_ID_T


95 
__d¨wö_id_t
 
	tid_t
;

96 
	#_ID_T


	)

116 
	~<sys/sig«l.h
>

117 
	~<sys/ªsour˚.h
>

128 
	#WNOHANG
 0x00000001

	)

129 
	#WUNTRACED
 0x00000002

	)

135 #i‡
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_DARWIN_C_SOURCE
)

136 
	#_W_INT
(
i
Ë(i)

	)

138 
	#_W_INT
(
w
Ë(*(*)&(w)Ë

	)

139 
	#WCOREFLAG
 0200

	)

143 
	#_WSTATUS
(
x
Ë(
	`_W_INT
(xË& 0177)

	)

144 
	#_WSTOPPED
 0177

	)

150 #i‡
__DARWIN_UNIX03


151 
	#WEXITSTATUS
(
x
Ë((
	`_W_INT
(xË>> 8Ë& 0x000000ff)

	)

153 
	#WEXITSTATUS
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

156 
	#WSTOPSIG
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

157 
	#WIFCONTINUED
(
x
Ë(
	`_WSTATUS
(xË=
_WSTOPPED
 && 
	`WSTOPSIG
(xË=0x13)

	)

158 
	#WIFSTOPPED
(
x
Ë(
	`_WSTATUS
(xË=
_WSTOPPED
 && 
	`WSTOPSIG
(xË!0x13)

	)

159 
	#WIFEXITED
(
x
Ë(
	`_WSTATUS
(xË=0)

	)

160 
	#WIFSIGNALED
(
x
Ë(
	`_WSTATUS
(xË!
_WSTOPPED
 && _WSTATUS(xË!0)

	)

161 
	#WTERMSIG
(
x
Ë(
	`_WSTATUS
(x))

	)

162 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

163 
	#WCOREDUMP
(
x
Ë(
	`_W_INT
(xË& 
WCOREFLAG
)

	)

165 
	#W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

166 
	#W_STOPCODE
(
sig
Ë((sigË<< 8 | 
_WSTOPPED
)

	)

175 
	#WEXITED
 0x00000004

	)

176 #i‡
__DARWIN_UNIX03


178 
	#WSTOPPED
 0x00000008

	)

180 
	#WCONTINUED
 0x00000010

	)

181 
	#WNOWAIT
 0x00000020

	)

184 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

190 
	#WAIT_ANY
 (-1Ë

	)

191 
	#WAIT_MYPGRP
 0

	)

193 
	~<machöe/ídün.h
>

201 
	uwaô
 {

202 
	mw_°©us
;

207 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_LITTLE_ENDIAN


208 
	mw_Tîmsig
:7,

209 
	mw_C‹edump
:1,

210 
	mw_Rëcode
:8,

211 
	mw_FûÀr
:16;

213 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_BIG_ENDIAN


214 
	mw_FûÀr
:16,

215 
	mw_Rëcode
:8,

216 
	mw_C‹edump
:1,

217 
	mw_Tîmsig
:7;

219 } 
	mw_T
;

226 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_LITTLE_ENDIAN


227 
	mw_St›vÆ
:8,

228 
	mw_St›sig
:8,

229 
	mw_FûÀr
:16;

231 #i‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_BIG_ENDIAN


232 
	mw_FûÀr
:16,

233 
	mw_St›sig
:8,

234 
	mw_St›vÆ
:8;

236 } 
	mw_S
;

238 
	#w_ãrmsig
 
w_T
.
w_Tîmsig


	)

239 
	#w_c‹edump
 
w_T
.
w_C‹edump


	)

240 
	#w_ªtcode
 
w_T
.
w_Rëcode


	)

241 
	#w_°›vÆ
 
w_S
.
w_St›vÆ


	)

242 
	#w_°›sig
 
w_S
.
w_St›sig


	)

246 #i‡!(
__DARWIN_UNIX03
 - 0)

251 
	#WSTOPPED
 
_WSTOPPED


	)

254 
__BEGIN_DECLS


255 
pid_t
 
	$waô
(*Ë
	`__DARWIN_ALIAS_C
(
waô
);

256 
pid_t
 
	$waôpid
(
pid_t
, *, Ë
	`__DARWIN_ALIAS_C
(
waôpid
);

257 #i‚de‡
_ANSI_SOURCE


258 
	$waôid
(
idty≥_t
, 
id_t
, 
sigöfo_t
 *, Ë
	`__DARWIN_ALIAS_C
(
waôid
);

260 #i‡ (!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

261 
pid_t
 
	`waô3
(*, , 
rußge
 *);

262 
pid_t
 
	`waô4
’id_t, *, , 
rußge
 *);

264 
__END_DECLS


	@/usr/include/xlocale/_stdio.h

24 #i‚de‡
_XLOCALE__STDIO_H_


25 
	#_XLOCALE__STDIO_H_


	)

27 
__BEGIN_DECLS


29 
	$Ârötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

30 
	$__DARWIN_LDBL_COMPAT2
(
Ârötf_l
Ë
	`__¥ötÊike
(3, 4);

31 
	$fsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

32 
	$__DARWIN_LDBL_COMPAT2
(
fsˇnf_l
Ë
	`__sˇnÊike
(3, 4);

33 
	$¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...)

34 
	$__DARWIN_LDBL_COMPAT2
(
¥ötf_l
Ë
	`__¥ötÊike
(2, 3);

35 
	$sˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...)

36 
	$__DARWIN_LDBL_COMPAT2
(
sˇnf_l
Ë
	`__sˇnÊike
(2, 3);

37 
	$•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

38 
	$__DARWIN_LDBL_COMPAT2
(
•rötf_l
Ë
	`__¥ötÊike
(3, 4);

39 
	$ssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

40 
	$__DARWIN_LDBL_COMPAT2
(
ssˇnf_l
Ë
	`__sˇnÊike
(3, 4);

41 
	$vÂrötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, c⁄° * __ª°ri˘, 
va_li°
)

42 
	$__DARWIN_LDBL_COMPAT2
(
vÂrötf_l
Ë
	`__¥ötÊike
(3, 0);

43 
	$v¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
va_li°
)

44 
	$__DARWIN_LDBL_COMPAT2
(
v¥ötf_l
Ë
	`__¥ötÊike
(2, 0);

45 
	$v•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, c⁄° * __ª°ri˘, 
va_li°
)

46 
	$__DARWIN_LDBL_COMPAT2
(
v•rötf_l
Ë
	`__¥ötÊike
(3, 0);

48 #i‡
__DARWIN_C_LEVEL
 >= 200112L

49 
	$¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
, const * __restrict, ...)

50 
	$__DARWIN_LDBL_COMPAT2
(
¢¥ötf_l
Ë
	`__¥ötÊike
(4, 5);

51 
	$vfsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, c⁄° * __ª°ri˘, 
va_li°
)

52 
	$__DARWIN_LDBL_COMPAT2
(
vfsˇnf_l
Ë
	`__sˇnÊike
(3, 0);

53 
	$vsˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
va_li°
)

54 
	$__DARWIN_LDBL_COMPAT2
(
vsˇnf_l
Ë
	`__sˇnÊike
(2, 0);

55 
	$v¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
, c⁄° * __ª°ri˘, 
va_li°
)

56 
	$__DARWIN_LDBL_COMPAT2
(
v¢¥ötf_l
Ë
	`__¥ötÊike
(4, 0);

57 
	$vssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, c⁄° * __ª°ri˘, 
va_li°
)

58 
	$__DARWIN_LDBL_COMPAT2
(
vssˇnf_l
Ë
	`__sˇnÊike
(3, 0);

61 #i‡
__DARWIN_C_LEVEL
 >= 200809L

62 
	$d¥ötf_l
(, 
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...)

63 
	$__DARWIN_LDBL_COMPAT2
(
d¥ötf_l
Ë
	$__¥ötÊike
(3, 4Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

64 
	$vd¥ötf_l
(, 
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
va_li°
)

65 
	$__DARWIN_LDBL_COMPAT2
(
vd¥ötf_l
Ë
	$__¥ötÊike
(3, 0Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_7
, 
__IPHONE_4_3
);

69 #i‡
__DARWIN_C_LEVEL
 >
__DARWIN_C_FULL


70 
	$a•rötf_l
(**, 
loˇÀ_t
, const *, ...)

71 
	$__DARWIN_LDBL_COMPAT2
(
a•rötf_l
Ë
	`__¥ötÊike
(3, 4);

72 
	$va•rötf_l
(**, 
loˇÀ_t
, c⁄° *, 
va_li°
)

73 
	$__DARWIN_LDBL_COMPAT2
(
va•rötf_l
Ë
	`__¥ötÊike
(3, 0);

76 
__END_DECLS


	@/usr/include/xlocale/_stdlib.h

24 #i‚de‡
_XLOCALE__STDLIB_H_


25 
	#_XLOCALE__STDLIB_H_


	)

27 
__BEGIN_DECLS


28 
©of_l
(c⁄° *, 
loˇÀ_t
);

29 
©oi_l
(c⁄° *, 
loˇÀ_t
);

30 
©ﬁ_l
(c⁄° *, 
loˇÀ_t
);

31 #i‡!
__DARWIN_NO_LONG_LONG


33 
©ﬁl_l
(c⁄° *, 
loˇÀ_t
);

35 
mbÀn_l
(c⁄° *, 
size_t
, 
loˇÀ_t
);

36 
size_t
 
mb°owcs_l
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t,

37 
loˇÀ_t
);

38 
mbtowc_l
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
,

39 
loˇÀ_t
);

40 
	$°πod_l
(c⁄° *, **, 
loˇÀ_t
Ë
	`__DARWIN_ALIAS
(
°πod_l
);

41 
	$°πof_l
(c⁄° *, **, 
loˇÀ_t
Ë
	`__DARWIN_ALIAS
(
°πof_l
);

42 
	`°πﬁ_l
(c⁄° *, **, , 
loˇÀ_t
);

44 
	$°πﬁd_l
(c⁄° *, **, 
loˇÀ_t
)

45 
	`__DARWIN_LDBL_COMPAT2
(
°πﬁd_l
);

47 
	`°πﬁl_l
(c⁄° *, **, , 
loˇÀ_t
);

48 #i‡!
__DARWIN_NO_LONG_LONG


50 
	`°πoq_l
(c⁄° *, **, , 
loˇÀ_t
);

53 
	`°πoul_l
(c⁄° *, **, , 
loˇÀ_t
);

55 
	`°πouŒ_l
(c⁄° *, **, , 
loˇÀ_t
);

56 #i‡!
__DARWIN_NO_LONG_LONG


58 
	`°πouq_l
(c⁄° *, **, , 
loˇÀ_t
);

60 
size_t
 
	`wc°ombs_l
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t,

61 
loˇÀ_t
);

62 
	`w˘omb_l
(*, 
wch¨_t
, 
loˇÀ_t
);

65 #i‡!
	`deföed
(
__˝lu•lus
Ë&& deföed(
__WCHAR_MAX__
) && __WCHAR_MAX__ <= 0xffffU

66 #¥agm®
GCC
 
pois⁄
 
mb°owcs_l
 
mbtowc_l
 
wc°ombs_l
 
w˘omb_l


68 
__END_DECLS


	@/usr/include/xlocale/_string.h

24 #i‚de‡
_XLOCALE__STRING_H_


25 
	#_XLOCALE__STRING_H_


	)

27 
__BEGIN_DECLS


28 
°rcﬁl_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

29 
size_t
 
°rx‰m_l
(*, c⁄° *, size_t, 
loˇÀ_t
);

30 
°rˇ£cmp_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

31 *
°rˇ£°r_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

32 
°∫ˇ£cmp_l
(c⁄° *, c⁄° *, 
size_t
, 
loˇÀ_t
);

33 
	g__END_DECLS


	@/usr/include/AvailabilityInternal.h

30 #i‚de‡
__AVAILABILITY_INTERNAL__


31 
	#__AVAILABILITY_INTERNAL__


	)

35 #i‚de‡
__IPHONE_OS_VERSION_MIN_REQUIRED


36 #ifde‡
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__


38 
	#__IPHONE_OS_VERSION_MIN_REQUIRED
 
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__


	)

42 #ifde‡
__IPHONE_OS_VERSION_MIN_REQUIRED


44 
	#__AVAILABILITY_INTERNAL_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

45 
	#__AVAILABILITY_INTERNAL_UNAVAILABLE
 
	`__©åibuã__
((
u«vaûabÀ
))

	)

46 
	#__AVAILABILITY_INTERNAL_WEAK_IMPORT
 
	`__©åibuã__
((
wók_imp‹t
))

	)

47 
	#__AVAILABILITY_INTERNAL_REGULAR


	)

49 
	#__AVAILABILITY_INTERNAL_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
,
	`visibûôy
("deÁu…")))

	)

50 
	#__AVAILABILITY_INTERNAL_UNAVAILABLE
 
	`__©åibuã__
((
u«vaûabÀ
,
	`visibûôy
("deÁu…")))

	)

51 
	#__AVAILABILITY_INTERNAL_WEAK_IMPORT
 
	`__©åibuã__
((
wók_imp‹t
,
	`visibûôy
("deÁu…")))

	)

52 
	#__AVAILABILITY_INTERNAL_REGULAR
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

55 #ifde‡
__IPHONE_OS_VERSION_MIN_REQUIRED


57 #i‚de‡
__IPHONE_OS_VERSION_MAX_ALLOWED


58 
	#__IPHONE_OS_VERSION_MAX_ALLOWED
 
__IPHONE_4_3


	)

61 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_0


62 #unde‡
__IPHONE_OS_VERSION_MIN_REQUIRED


63 
	#__IPHONE_OS_VERSION_MIN_REQUIRED
 
__IPHONE_2_0


	)

67 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_2_0


68 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

69 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_0


70 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

72 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

74 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_2_0


	)

75 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

77 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_2_1


78 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

79 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


80 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

82 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

84 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

85 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


86 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

87 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

89 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

90 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

93 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_2_2


94 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

95 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


96 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

98 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

100 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

101 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


102 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

103 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

104 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

105 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


106 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

107 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

108 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

110 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

111 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

112 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_2_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

115 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_3_0


116 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

117 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


118 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

120 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

122 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

123 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


124 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

125 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

126 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

127 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

128 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


129 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

130 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

131 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

132 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

133 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


134 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

135 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

136 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

137 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

139 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

140 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

141 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

142 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

145 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_3_1


146 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

147 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_1


148 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

150 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

152 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

153 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


154 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

155 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

156 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

157 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

158 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

159 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


160 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

161 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

162 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

163 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

164 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

165 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


166 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

167 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

168 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

169 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

170 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

171 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_1


172 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

173 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

174 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

175 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

176 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

178 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

179 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

180 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

181 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

182 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

185 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_3_2


186 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

187 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_2


188 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

190 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

192 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

193 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


194 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

195 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

196 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

197 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

198 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

199 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

200 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


201 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

202 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

203 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

204 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

205 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

206 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

207 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


208 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

209 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

210 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

211 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

212 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

213 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

214 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_1


215 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

216 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

217 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

218 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

219 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

220 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

221 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_2


222 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

223 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

224 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

225 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

226 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

227 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

229 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

230 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

231 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

232 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

233 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

234 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_3_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

237 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_4_0


238 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

239 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_0


240 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

242 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

244 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

245 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


246 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

247 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

248 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

249 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

250 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

251 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

252 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

253 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


254 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

255 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

256 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

257 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

258 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

259 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

260 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

261 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


262 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

263 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

264 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

265 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

266 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

267 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

268 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

269 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_1


270 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

271 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

272 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

273 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

274 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

275 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

276 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

277 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_2


278 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

279 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

280 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

281 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

282 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

283 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

284 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

285 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_0


286 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

287 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

288 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

289 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

290 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

291 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

292 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

294 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

295 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

296 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

297 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

298 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

299 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

300 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_0
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

303 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_4_1


304 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

305 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_1


306 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

308 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

310 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_4_1


	)

311 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


312 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

313 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

314 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

315 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

316 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

317 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

318 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

319 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

320 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


321 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

322 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

323 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

324 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

325 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

326 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

327 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

328 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

329 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


330 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

331 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

332 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

333 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

334 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

335 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

336 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

337 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

338 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_1


339 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

340 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

341 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

342 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

343 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

344 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

345 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

346 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

347 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_2


348 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

349 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

350 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

351 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

352 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

353 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

354 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

355 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

356 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_0


357 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

358 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

359 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

360 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

361 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

362 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

363 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

364 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

365 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_1


366 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

367 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

368 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

369 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

370 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

371 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

372 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

373 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL__IPHONE_4_1


	)

375 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

376 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

377 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

378 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

379 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

380 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

381 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

382 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

385 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_4_2


386 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

387 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_2


388 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

390 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

392 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_4_2


	)

393 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


394 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

395 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

396 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

397 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

398 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

399 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

400 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

401 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

402 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

403 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


404 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

405 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

406 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

407 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

408 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

409 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

410 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

411 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

412 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

413 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


414 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

415 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

416 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

417 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

418 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

419 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

420 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

421 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

422 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

423 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_1


424 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

425 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

426 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

427 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

428 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

429 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

430 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

431 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

432 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

433 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_2


434 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

435 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

436 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

437 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

438 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

439 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

440 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

441 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

442 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

443 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_0


444 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

445 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

446 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

447 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

448 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

449 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

450 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

451 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

452 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

453 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_1


454 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

455 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

456 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

457 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

458 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

459 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

460 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

461 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_4_1


	)

462 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_4_1


	)

463 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_2


464 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

465 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

466 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

467 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

468 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

469 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

470 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

471 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

472 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL__IPHONE_4_2


	)

474 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

475 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

476 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

477 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

478 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

479 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

480 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

481 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

482 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

485 #i‡
__IPHONE_OS_VERSION_MAX_ALLOWED
 < 
__IPHONE_4_3


486 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

487 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_3


488 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

490 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

492 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL__IPHONE_4_3


	)

493 #i‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_1


494 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

495 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

496 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

497 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

498 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

499 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

500 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

501 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

502 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

503 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_1


	)

504 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_2_2


505 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

506 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

507 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

508 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

509 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

510 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

511 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

512 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

513 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

514 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_2_2


	)

515 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_0


516 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

517 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

518 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

519 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

520 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

521 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

522 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

523 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

524 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

525 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_0


	)

526 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_1


527 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

528 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

529 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

530 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

531 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

532 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

533 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

534 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

535 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

536 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_1


	)

537 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_3_2


538 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

539 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

540 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

541 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

542 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

543 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

544 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

545 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

546 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

547 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_3_2


	)

548 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_0


549 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

550 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

551 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

552 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

553 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

554 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

555 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

556 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

557 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

558 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_0


	)

559 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_1


560 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

561 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

562 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

563 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

564 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

565 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

566 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

567 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_1


	)

568 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_1


	)

569 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_1


	)

570 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_2


571 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

572 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

573 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

574 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

575 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

576 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

577 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

578 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

579 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_2


	)

580 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_2


	)

581 #ñi‡
__IPHONE_OS_VERSION_MIN_REQUIRED
 < 
__IPHONE_4_3


582 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

583 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

584 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

585 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

586 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

587 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

588 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

589 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

590 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

591 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL__IPHONE_4_3


	)

593 
	#__AVAILABILITY_INTERNAL__IPHONE_2_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

594 
	#__AVAILABILITY_INTERNAL__IPHONE_2_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

595 
	#__AVAILABILITY_INTERNAL__IPHONE_2_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

596 
	#__AVAILABILITY_INTERNAL__IPHONE_3_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

597 
	#__AVAILABILITY_INTERNAL__IPHONE_3_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

598 
	#__AVAILABILITY_INTERNAL__IPHONE_3_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

599 
	#__AVAILABILITY_INTERNAL__IPHONE_4_0_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

600 
	#__AVAILABILITY_INTERNAL__IPHONE_4_1_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

601 
	#__AVAILABILITY_INTERNAL__IPHONE_4_2_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

602 
	#__AVAILABILITY_INTERNAL__IPHONE_4_3_DEP__IPHONE_4_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

605 
	#__AVAILABILITY_INTERNAL__IPHONE_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

606 
	#__AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

608 #ñi‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
)

610 
	#__MAC_OS_X_VERSION_MIN_REQUIRED
 
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__


	)

612 #i‚de‡
__MAC_OS_X_VERSION_MAX_ALLOWED


613 
	#__MAC_OS_X_VERSION_MAX_ALLOWED
 
__MAC_10_7


	)

616 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_7


617 
	#__AVAILABILITY_INTERNAL__MAC_10_7
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

618 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_7


619 
	#__AVAILABILITY_INTERNAL__MAC_10_7
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

621 
	#__AVAILABILITY_INTERNAL__MAC_10_7
 
__AVAILABILITY_INTERNAL_REGULAR


	)

623 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_6


624 
	#__AVAILABILITY_INTERNAL__MAC_10_6
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

625 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_6


626 
	#__AVAILABILITY_INTERNAL__MAC_10_6
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

628 
	#__AVAILABILITY_INTERNAL__MAC_10_6
 
__AVAILABILITY_INTERNAL_REGULAR


	)

630 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_5


631 
	#__AVAILABILITY_INTERNAL__MAC_10_5
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

632 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_5


633 
	#__AVAILABILITY_INTERNAL__MAC_10_5
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

635 
	#__AVAILABILITY_INTERNAL__MAC_10_5
 
__AVAILABILITY_INTERNAL_REGULAR


	)

637 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_4


638 
	#__AVAILABILITY_INTERNAL__MAC_10_4
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

639 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_4


640 
	#__AVAILABILITY_INTERNAL__MAC_10_4
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

642 
	#__AVAILABILITY_INTERNAL__MAC_10_4
 
__AVAILABILITY_INTERNAL_REGULAR


	)

644 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_3


645 
	#__AVAILABILITY_INTERNAL__MAC_10_3
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

646 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_3


647 
	#__AVAILABILITY_INTERNAL__MAC_10_3
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

649 
	#__AVAILABILITY_INTERNAL__MAC_10_3
 
__AVAILABILITY_INTERNAL_REGULAR


	)

651 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_2


652 
	#__AVAILABILITY_INTERNAL__MAC_10_2
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

653 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_2


654 
	#__AVAILABILITY_INTERNAL__MAC_10_2
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

656 
	#__AVAILABILITY_INTERNAL__MAC_10_2
 
__AVAILABILITY_INTERNAL_REGULAR


	)

658 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_1


659 
	#__AVAILABILITY_INTERNAL__MAC_10_1
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

660 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_1


661 
	#__AVAILABILITY_INTERNAL__MAC_10_1
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

663 
	#__AVAILABILITY_INTERNAL__MAC_10_1
 
__AVAILABILITY_INTERNAL_REGULAR


	)

665 #i‡
__MAC_OS_X_VERSION_MAX_ALLOWED
 < 
__MAC_10_0


666 
	#__AVAILABILITY_INTERNAL__MAC_10_0
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

667 #ñi‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 < 
__MAC_10_0


668 
	#__AVAILABILITY_INTERNAL__MAC_10_0
 
__AVAILABILITY_INTERNAL_WEAK_IMPORT


	)

670 
	#__AVAILABILITY_INTERNAL__MAC_10_0
 
__AVAILABILITY_INTERNAL_REGULAR


	)

672 
	#__AVAILABILITY_INTERNAL__MAC_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

673 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_1


674 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

676 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

678 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_2


679 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

680 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

682 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

683 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

685 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_3


686 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

687 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

688 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

690 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

691 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

692 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

694 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_4


695 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

696 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

697 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

698 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

700 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

701 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

702 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

703 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

705 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_5


706 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

707 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

708 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

709 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

710 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

712 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

713 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

714 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

715 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

716 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5
 
__AVAILABILITY_INTERNAL__MAC_10_4


	)

718 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_6


719 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

720 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

721 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

722 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

723 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

724 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

726 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

727 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

728 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

729 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

730 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_4


	)

731 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6
 
__AVAILABILITY_INTERNAL__MAC_10_5


	)

733 #i‡
__MAC_OS_X_VERSION_MIN_REQUIRED
 >
__MAC_10_7


734 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

735 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

736 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

737 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

738 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

739 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

740 
	#__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL_DEPRECATED


	)

742 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

743 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

744 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

745 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

746 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL__MAC_10_4


	)

747 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL__MAC_10_5


	)

748 
	#__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7
 
__AVAILABILITY_INTERNAL__MAC_10_6


	)

750 
	#__AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_0


	)

751 
	#__AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_1


	)

752 
	#__AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_2


	)

753 
	#__AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_3


	)

754 
	#__AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_4


	)

755 
	#__AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_5


	)

756 
	#__AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_6


	)

757 
	#__AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL__MAC_10_7


	)

758 
	#__AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA
 
__AVAILABILITY_INTERNAL_UNAVAILABLE


	)

	@/usr/include/i386/endian.h

66 #i‚de‡
_I386__ENDIAN_H_


67 
	#_I386__ENDIAN_H_


	)

69 
	~<sys/cdefs.h
>

78 
	#_QUAD_HIGHWORD
 1

	)

79 
	#_QUAD_LOWWORD
 0

	)

85 
	#__DARWIN_LITTLE_ENDIAN
 1234

	)

86 
	#__DARWIN_BIG_ENDIAN
 4321

	)

87 
	#__DARWIN_PDP_ENDIAN
 3412

	)

89 
	#__DARWIN_BYTE_ORDER
 
__DARWIN_LITTLE_ENDIAN


	)

91 #if 
deföed
(
KERNEL
Ë|| (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

93 
	#LITTLE_ENDIAN
 
__DARWIN_LITTLE_ENDIAN


	)

94 
	#BIG_ENDIAN
 
__DARWIN_BIG_ENDIAN


	)

95 
	#PDP_ENDIAN
 
__DARWIN_PDP_ENDIAN


	)

97 
	#BYTE_ORDER
 
__DARWIN_BYTE_ORDER


	)

99 
	~<sys/_ídün.h
>

	@/usr/include/i386/limits.h

36 #i‚de‡
_I386_LIMITS_H_


37 
	#_I386_LIMITS_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<i386/_limôs.h
>

42 
	#CHAR_BIT
 8

	)

43 
	#MB_LEN_MAX
 6

	)

45 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

46 
	#CLK_TCK
 
__DARWIN_CLK_TCK


	)

59 
	#SCHAR_MAX
 127

	)

60 
	#SCHAR_MIN
 (-128Ë

	)

62 
	#UCHAR_MAX
 255

	)

63 
	#CHAR_MAX
 127

	)

64 
	#CHAR_MIN
 (-128Ë

	)

66 
	#USHRT_MAX
 65535

	)

67 
	#SHRT_MAX
 32767

	)

68 
	#SHRT_MIN
 (-32768Ë

	)

70 
	#UINT_MAX
 0xfffffff‡

	)

71 
	#INT_MAX
 2147483647

	)

72 
	#INT_MIN
 (-2147483647-1Ë

	)

74 #ifde‡
__LP64__


75 
	#ULONG_MAX
 0xffffffffffffffffUL

	)

76 
	#LONG_MAX
 0x7fffffffffffffffL

	)

77 
	#LONG_MIN
 (-0x7fffffffffffffffL-1Ë

	)

79 
	#ULONG_MAX
 0xffffffffUL

	)

80 
	#LONG_MAX
 2147483647L

	)

81 
	#LONG_MIN
 (-2147483647L-1Ë

	)

84 
	#ULLONG_MAX
 0xffffffffffffffffULL

	)

85 
	#LLONG_MAX
 0x7fffffffffffffffLL

	)

86 
	#LLONG_MIN
 (-0x7fffffffffffffffLL-1Ë

	)

88 #i‡!
deföed
(
_ANSI_SOURCE
)

89 #ifde‡
__LP64__


90 
	#LONG_BIT
 64

	)

92 
	#LONG_BIT
 32

	)

94 
	#SSIZE_MAX
 
LONG_MAX


	)

95 
	#WORD_BIT
 32

	)

97 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)Ë|| deföed(
_DARWIN_C_SOURCE
)

98 
	#SIZE_T_MAX
 
ULONG_MAX


	)

100 
	#UQUAD_MAX
 
ULLONG_MAX


	)

101 
	#QUAD_MAX
 
LLONG_MAX


	)

102 
	#QUAD_MIN
 
LLONG_MIN


	)

	@/usr/include/i386/types.h

66 #i‚def 
_MACHTYPES_H_


67 
	#_MACHTYPES_H_


	)

69 #i‚de‡
__ASSEMBLER__


70 
	~<i386/_ty≥s.h
>

71 
	~<sys/cdefs.h
>

76 #i‚de‡
_INT8_T


77 
	#_INT8_T


	)

78 
__sig√d
 
	töt8_t
;

80 
	tu_öt8_t
;

81 #i‚de‡
_INT16_T


82 
	#_INT16_T


	)

83 
	töt16_t
;

85 
	tu_öt16_t
;

86 #i‚de‡
_INT32_T


87 
	#_INT32_T


	)

88 
	töt32_t
;

90 
	tu_öt32_t
;

91 #i‚de‡
_INT64_T


92 
	#_INT64_T


	)

93 
	töt64_t
;

95 
	tu_öt64_t
;

97 #i‡
__LP64__


98 
öt64_t
 
	tªgi°î_t
;

100 
öt32_t
 
	tªgi°î_t
;

103 #i‚de‡
_INTPTR_T


104 
	#_INTPTR_T


	)

105 
__d¨wö_öçå_t
 
	töçå_t
;

107 #i‚de‡
_UINTPTR_T


108 
	#_UINTPTR_T


	)

109 
	tuöçå_t
;

112 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

114 
u_öt64_t
 
	tu£r_addr_t
;

115 
u_öt64_t
 
	tu£r_size_t
;

116 
öt64_t
 
	tu£r_ssize_t
;

117 
öt64_t
 
	tu£r_l⁄g_t
;

118 
u_öt64_t
 
	tu£r_ul⁄g_t
;

119 
öt64_t
 
	tu£r_time_t
;

120 
öt64_t
 
	tu£r_off_t
;

121 
	#USER_ADDR_NULL
 ((
u£r_addr_t
Ë0)

	)

122 
	#CAST_USER_ADDR_T
(
a_±r
Ë((
u£r_addr_t
)((
uöçå_t
)◊_±r)))

	)

128 
u_öt64_t
 
	tsysˇŒ_¨g_t
;

130 #i‚de‡
__off£tof


131 
	#__off£tof
(
ty≥
, 
fõld
Ë((
size_t
)(&(—y≥ *)0)->fõld))

	)

	@/usr/include/machine/_structs.h

28 #i‡
deföed
 (
__i386__
Ë|| deföed (
__x86_64__
)

29 
	~"i386/_°ru˘s.h
"

30 #ñi‡
deföed
 (
__¨m__
)

31 
	~"¨m/_°ru˘s.h
"

33 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/machine/_types.h

28 #i‚de‡
_BSD_MACHINE__TYPES_H_


29 
	#_BSD_MACHINE__TYPES_H_


	)

31 #i‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

32 
	~"i386/_ty≥s.h
"

33 #ñi‡
deföed
 (
__¨m__
)

34 
	~"¨m/_ty≥s.h
"

36 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/secure/_common.h

24 #i‚de‡
_SECURE__COMMON_H_


25 
	#_SECURE__COMMON_H_


	)

27 #unde‡
_USE_FORTIFY_LEVEL


28 #i‡
deföed
(
_FORTIFY_SOURCE
) && _FORTIFY_SOURCE > 0

29 #i‡
_FORTIFY_SOURCE
 > 1

30 
	#_USE_FORTIFY_LEVEL
 2

	)

32 
	#_USE_FORTIFY_LEVEL
 1

	)

35 
	#_USE_FORTIFY_LEVEL
 0

	)

38 
	#__d¨wö_obsz0
(
obje˘
Ë
	`__buûtö_obje˘_size
 (obje˘, 0)

	)

39 
	#__d¨wö_obsz
(
obje˘
Ë
	`__buûtö_obje˘_size
 (obje˘, 
_USE_FORTIFY_LEVEL
 > 1)

	)

	@/usr/include/sys/_posix_availability.h

28 #i‚de‡
_CDEFS_H_


32 #i‡!
deföed
(
_DARWIN_C_SOURCE
Ë&& deföed(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE >= 198808L

33 
	#___POSIX_C_DEPRECATED_STARTING_198808L
 
__dïªˇãd


	)

35 
	#___POSIX_C_DEPRECATED_STARTING_198808L


	)

38 #i‡!
deföed
(
_DARWIN_C_SOURCE
Ë&& deföed(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE >= 199009L

39 
	#___POSIX_C_DEPRECATED_STARTING_199009L
 
__dïªˇãd


	)

41 
	#___POSIX_C_DEPRECATED_STARTING_199009L


	)

44 #i‡!
deföed
(
_DARWIN_C_SOURCE
Ë&& deföed(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE >= 199209L

45 
	#___POSIX_C_DEPRECATED_STARTING_199209L
 
__dïªˇãd


	)

47 
	#___POSIX_C_DEPRECATED_STARTING_199209L


	)

50 #i‡!
deföed
(
_DARWIN_C_SOURCE
Ë&& deföed(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE >= 199309L

51 
	#___POSIX_C_DEPRECATED_STARTING_199309L
 
__dïªˇãd


	)

53 
	#___POSIX_C_DEPRECATED_STARTING_199309L


	)

56 #i‡!
deföed
(
_DARWIN_C_SOURCE
Ë&& deföed(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE >= 199506L

57 
	#___POSIX_C_DEPRECATED_STARTING_199506L
 
__dïªˇãd


	)

59 
	#___POSIX_C_DEPRECATED_STARTING_199506L


	)

62 #i‡!
deföed
(
_DARWIN_C_SOURCE
Ë&& deföed(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE >= 200112L

63 
	#___POSIX_C_DEPRECATED_STARTING_200112L
 
__dïªˇãd


	)

65 
	#___POSIX_C_DEPRECATED_STARTING_200112L


	)

68 #i‡!
deföed
(
_DARWIN_C_SOURCE
Ë&& deföed(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE >= 200809L

69 
	#___POSIX_C_DEPRECATED_STARTING_200809L
 
__dïªˇãd


	)

71 
	#___POSIX_C_DEPRECATED_STARTING_200809L


	)

	@/usr/include/sys/_select.h

36 #i‚de‡
_SYS__SELECT_H_


37 
	#_SYS__SELECT_H_


	)

39 
	$£À˘
(, 
fd_£t
 * 
__ª°ri˘
, fd_set * __restrict,

40 
fd_£t
 * 
__ª°ri˘
, 
timevÆ
 * __restrict)

41 #i‡
	`deföed
(
_DARWIN_C_SOURCE
Ë|| deföed(
_DARWIN_UNLIMITED_SELECT
)

42 
	$__DARWIN_EXTSN_C
(
£À˘
)

44 #i‡
	`deföed
(
__LP64__
Ë&& !
__DARWIN_NON_CANCELABLE


45 
	$__DARWIN_1050
(
£À˘
)

47 
	$__DARWIN_ALIAS_C
(
£À˘
)

	@/usr/include/sys/_symbol_aliasing.h

28 #i‚de‡
_CDEFS_H_


32 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 20000

33 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0
(
x
Ë
	)
x

35 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0
(
x
)

	)

38 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 20100

39 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1
(
x
Ë
	)
x

41 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1
(
x
)

	)

44 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 20200

45 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2
(
x
Ë
	)
x

47 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2
(
x
)

	)

50 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 30000

51 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0
(
x
Ë
	)
x

53 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0
(
x
)

	)

56 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 30100

57 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1
(
x
Ë
	)
x

59 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1
(
x
)

	)

62 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 30200

63 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2
(
x
Ë
	)
x

65 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2
(
x
)

	)

68 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 40000

69 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0
(
x
Ë
	)
x

71 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0
(
x
)

	)

74 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 40100

75 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1
(
x
Ë
	)
x

77 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1
(
x
)

	)

80 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 40200

81 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2
(
x
Ë
	)
x

83 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2
(
x
)

	)

86 #i‡
deföed
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__ >= 40300

87 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3
(
x
Ë
	)
x

89 
	#__DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3
(
x
)

	)

92 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1000

93 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_0
(
x
Ë
	)
x

95 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_0
(
x
)

	)

98 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1010

99 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_1
(
x
Ë
	)
x

101 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_1
(
x
)

	)

104 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1020

105 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_2
(
x
Ë
	)
x

107 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_2
(
x
)

	)

110 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1030

111 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_3
(
x
Ë
	)
x

113 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_3
(
x
)

	)

116 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1040

117 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_4
(
x
Ë
	)
x

119 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_4
(
x
)

	)

122 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1050

123 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_5
(
x
Ë
	)
x

125 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_5
(
x
)

	)

128 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1060

129 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_6
(
x
Ë
	)
x

131 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_6
(
x
)

	)

134 #i‡
deföed
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1070

135 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_7
(
x
Ë
	)
x

137 
	#__DARWIN_ALIAS_STARTING_MAC___MAC_10_7
(
x
)

	)

	@/usr/include/sys/resource.h

64 #i‚de‡
_SYS_RESOURCE_H_


65 
	#_SYS_RESOURCE_H_


	)

67 
	~<sys/≠∂ópi›ts.h
>

68 
	~<sys/cdefs.h
>

69 
	~<sys/_ty≥s.h
>

71 
	~<Avaûabûôy.h
>

76 
	#__√ed_°ru˘_timevÆ


	)

77 
	~<sys/_°ru˘s.h
>

80 #i‚de‡
_ID_T


81 
	#_ID_T


	)

82 
__d¨wö_id_t
 
	tid_t
;

89 
__uöt64_t
 
	tæim_t
;

100 
	#PRIO_PROCESS
 0

	)

101 
	#PRIO_PGRP
 1

	)

102 
	#PRIO_USER
 2

	)

104 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

105 
	#PRIO_DARWIN_THREAD
 3

	)

106 
	#PRIO_DARWIN_PROCESS
 4

	)

111 
	#PRIO_MIN
 -20

	)

112 
	#PRIO_MAX
 20

	)

119 
	#PRIO_DARWIN_BG
 0x1000

	)

125 
	#PRIO_DARWIN_NONUI
 0x1001

	)

139 
	#RUSAGE_SELF
 0

	)

140 
	#RUSAGE_CHILDREN
 -1

	)

151 
	srußge
 {

152 
timevÆ
 
	mru_utime
;

153 
timevÆ
 
	mru_°ime
;

154 #i‡
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_DARWIN_C_SOURCE
)

155 
	mru_›aque
[14];

162 
	mru_maxrss
;

163 
	#ru_fú°
 
ru_ixrss


	)

164 
	mru_ixrss
;

165 
	mru_idrss
;

166 
	mru_i§ss
;

167 
	mru_möÊt
;

168 
	mru_majÊt
;

169 
	mru_nsw≠
;

170 
	mru_öblock
;

171 
	mru_oublock
;

172 
	mru_msg¢d
;

173 
	mru_msgrcv
;

174 
	mru_nsig«ls
;

175 
	mru_nvcsw
;

176 
	mru_nivcsw
;

177 
	#ru_œ°
 
ru_nivcsw


	)

193 
	#RLIM_INFINITY
 (((
__uöt64_t
)1 << 63Ë- 1Ë

	)

194 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

195 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

201 
	#RLIMIT_CPU
 0

	)

202 
	#RLIMIT_FSIZE
 1

	)

203 
	#RLIMIT_DATA
 2

	)

204 
	#RLIMIT_STACK
 3

	)

205 
	#RLIMIT_CORE
 4

	)

206 
	#RLIMIT_AS
 5

	)

207 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

208 
	#RLIMIT_RSS
 
RLIMIT_AS


	)

209 
	#RLIMIT_MEMLOCK
 6

	)

210 
	#RLIMIT_NPROC
 7

	)

212 
	#RLIMIT_NOFILE
 8

	)

213 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

214 
	#RLIM_NLIMITS
 9

	)

216 
	#_RLIMIT_POSIX_FLAG
 0x1000

	)

222 
	sæimô
 {

223 
æim_t
 
	mæim_cur
;

224 
æim_t
 
	mæim_max
;

227 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

229 
	#IOPOL_TYPE_DISK
 0

	)

232 
	#IOPOL_SCOPE_PROCESS
 0

	)

233 
	#IOPOL_SCOPE_THREAD
 1

	)

236 
	#IOPOL_DEFAULT
 0

	)

237 
	#IOPOL_NORMAL
 1

	)

238 
	#IOPOL_PASSIVE
 2

	)

239 
	#IOPOL_THROTTLE
 3

	)

244 
__BEGIN_DECLS


245 
gë¥i‹ôy
(, 
id_t
);

246 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

247 
	$gëi›ﬁicy_≈
(, Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

249 
	$gëæimô
(, 
æimô
 *Ë
	`__DARWIN_ALIAS
(
gëæimô
);

250 
	`gërußge
(, 
rußge
 *);

251 
	`£çri‹ôy
(, 
id_t
, );

252 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

253 
	$£ti›ﬁicy_≈
(, , Ë
	`__OSX_AVAILABLE_STARTING
(
__MAC_10_5
, 
__IPHONE_2_0
);

255 
	$£ålimô
(, c⁄° 
æimô
 *Ë
	`__DARWIN_ALIAS
(
£ålimô
);

256 
__END_DECLS


	@/usr/include/sys/signal.h

69 #i‚def 
_SYS_SIGNAL_H_


70 
	#_SYS_SIGNAL_H_


	)

72 
	~<sys/cdefs.h
>

73 
	~<sys/≠∂ópi›ts.h
>

75 
	#__DARWIN_NSIG
 32

	)

77 #i‡!
deföed
(
_ANSI_SOURCE
Ë&& (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

78 
	#NSIG
 
__DARWIN_NSIG


	)

81 
	~<machöe/sig«l.h
>

83 
	#SIGHUP
 1

	)

84 
	#SIGINT
 2

	)

85 
	#SIGQUIT
 3

	)

86 
	#SIGILL
 4

	)

87 
	#SIGTRAP
 5

	)

88 
	#SIGABRT
 6

	)

89 #i‡ (
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_DARWIN_C_SOURCE
))

90 
	#SIGPOLL
 7

	)

92 
	#SIGIOT
 
SIGABRT


	)

93 
	#SIGEMT
 7

	)

95 
	#SIGFPE
 8

	)

96 
	#SIGKILL
 9

	)

97 
	#SIGBUS
 10

	)

98 
	#SIGSEGV
 11

	)

99 
	#SIGSYS
 12

	)

100 
	#SIGPIPE
 13

	)

101 
	#SIGALRM
 14

	)

102 
	#SIGTERM
 15

	)

103 
	#SIGURG
 16

	)

104 
	#SIGSTOP
 17

	)

105 
	#SIGTSTP
 18

	)

106 
	#SIGCONT
 19

	)

107 
	#SIGCHLD
 20

	)

108 
	#SIGTTIN
 21

	)

109 
	#SIGTTOU
 22

	)

110 #i‡ (!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

111 
	#SIGIO
 23

	)

113 
	#SIGXCPU
 24

	)

114 
	#SIGXFSZ
 25

	)

115 
	#SIGVTALRM
 26

	)

116 
	#SIGPROF
 27

	)

117 #i‡ (!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

118 
	#SIGWINCH
 28

	)

119 
	#SIGINFO
 29

	)

121 
	#SIGUSR1
 30

	)

122 
	#SIGUSR2
 31

	)

124 #i‡
deföed
(
_ANSI_SOURCE
Ë|| 
__DARWIN_UNIX03
 || deföed(
__˝lu•lus
)

130 
	#SIG_DFL
 ((*)())0

	)

131 
	#SIG_IGN
 ((*)())1

	)

132 
	#SIG_HOLD
 ((*)())5

	)

133 
	#SIG_ERR
 (((*)())-1)

	)

136 
	#SIG_DFL
 ((*)–))0

	)

137 
	#SIG_IGN
 ((*)–))1

	)

138 
	#SIG_HOLD
 ((*)–))5

	)

139 
	#SIG_ERR
 (((*)–))-1)

	)

142 #i‚de‡
_ANSI_SOURCE


143 
	~<sys/_ty≥s.h
>

145 
	#__√ed_mc⁄ãxt_t


	)

146 
	#__√ed_°ack_t


	)

147 
	#__√ed_uc⁄ãxt_t


	)

148 
	~<sys/_°ru˘s.h
>

150 #i‚de‡
_PID_T


151 
	#_PID_T


	)

152 
__d¨wö_pid_t
 
	tpid_t
;

155 #i‚de‡
_PTHREAD_ATTR_T


156 
	#_PTHREAD_ATTR_T


	)

157 
__d¨wö_±hªad_©å_t
 
	t±hªad_©å_t
;

160 #i‚de‡
_SIGSET_T


161 
	#_SIGSET_T


	)

162 
__d¨wö_sig£t_t
 
	tsig£t_t
;

165 #i‚def 
_SIZE_T


166 
	#_SIZE_T


	)

167 
__d¨wö_size_t
 
	tsize_t
;

170 #i‚de‡
_UID_T


171 
	#_UID_T


	)

172 
__d¨wö_uid_t
 
	tuid_t
;

175 
	usigvÆ
 {

177 
	msivÆ_öt
;

178 *
	msivÆ_±r
;

181 
	#SIGEV_NONE
 0

	)

182 
	#SIGEV_SIGNAL
 1

	)

183 
	#SIGEV_THREAD
 3

	)

185 
	ssigevít
 {

186 
	msigev_nŸify
;

187 
	msigev_signo
;

188 
sigvÆ
 
	msigev_vÆue
;

189 (*
	msigev_nŸify_fun˘i⁄
)(
	msigvÆ
);

190 
±hªad_©å_t
 *
	msigev_nŸify_©åibuãs
;

194 
	s__sigöfo
 {

195 
	msi_signo
;

196 
	msi_î∫o
;

197 
	msi_code
;

198 
pid_t
 
	msi_pid
;

199 
uid_t
 
	msi_uid
;

200 
	msi_°©us
;

201 *
	msi_addr
;

202 
sigvÆ
 
	msi_vÆue
;

203 
	msi_b™d
;

204 
	m__∑d
[7];

205 } 
	tsigöfo_t
;

222 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

223 
	#ILL_NOOP
 0

	)

225 
	#ILL_ILLOPC
 1

	)

226 
	#ILL_ILLTRP
 2

	)

227 
	#ILL_PRVOPC
 3

	)

228 
	#ILL_ILLOPN
 4

	)

229 
	#ILL_ILLADR
 5

	)

230 
	#ILL_PRVREG
 6

	)

231 
	#ILL_COPROC
 7

	)

232 
	#ILL_BADSTK
 8

	)

235 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

236 
	#FPE_NOOP
 0

	)

238 
	#FPE_FLTDIV
 1

	)

239 
	#FPE_FLTOVF
 2

	)

240 
	#FPE_FLTUND
 3

	)

241 
	#FPE_FLTRES
 4

	)

242 
	#FPE_FLTINV
 5

	)

243 
	#FPE_FLTSUB
 6

	)

244 
	#FPE_INTDIV
 7

	)

245 
	#FPE_INTOVF
 8

	)

248 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

249 
	#SEGV_NOOP
 0

	)

251 
	#SEGV_MAPERR
 1

	)

252 
	#SEGV_ACCERR
 2

	)

255 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

256 
	#BUS_NOOP
 0

	)

258 
	#BUS_ADRALN
 1

	)

259 
	#BUS_ADRERR
 2

	)

260 
	#BUS_OBJERR
 3

	)

263 
	#TRAP_BRKPT
 1

	)

264 
	#TRAP_TRACE
 2

	)

267 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

268 
	#CLD_NOOP
 0

	)

270 
	#CLD_EXITED
 1

	)

271 
	#CLD_KILLED
 2

	)

272 
	#CLD_DUMPED
 3

	)

273 
	#CLD_TRAPPED
 4

	)

274 
	#CLD_STOPPED
 5

	)

275 
	#CLD_CONTINUED
 6

	)

278 
	#POLL_IN
 1

	)

279 
	#POLL_OUT
 2

	)

280 
	#POLL_MSG
 3

	)

281 
	#POLL_ERR
 4

	)

282 
	#POLL_PRI
 5

	)

283 
	#POLL_HUP
 6

	)

286 
	u__siga˘i⁄_u
 {

287 (*
	m__ß_h™dÀr
)();

288 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *,

293 
	s__siga˘i⁄
 {

294 
__siga˘i⁄_u
 
	m__siga˘i⁄_u
;

295 (*
	mß_åamp
)(*, , , 
	msigöfo_t
 *, *);

296 
sig£t_t
 
	mß_mask
;

297 
	mß_Êags
;

303 
	ssiga˘i⁄
 {

304 
__siga˘i⁄_u
 
	m__siga˘i⁄_u
;

305 
sig£t_t
 
	mß_mask
;

306 
	mß_Êags
;

312 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

313 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

315 
	#SA_ONSTACK
 0x0001

	)

316 
	#SA_RESTART
 0x0002

	)

317 
	#SA_RESETHAND
 0x0004

	)

318 
	#SA_NOCLDSTOP
 0x0008

	)

319 
	#SA_NODEFER
 0x0010

	)

320 
	#SA_NOCLDWAIT
 0x0020

	)

321 
	#SA_SIGINFO
 0x0040

	)

322 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

323 
	#SA_USERTRAMP
 0x0100

	)

325 
	#SA_64REGSET
 0x0200

	)

331 
	#SA_USERSPACE_MASK
 (
SA_ONSTACK
 | 
SA_RESTART
 | 
SA_RESETHAND
 | 
SA_NOCLDSTOP
 | 
SA_NODEFER
 | 
SA_NOCLDWAIT
 | 
SA_SIGINFO
)

	)

336 
	#SIG_BLOCK
 1

	)

337 
	#SIG_UNBLOCK
 2

	)

338 
	#SIG_SETMASK
 3

	)

341 
	#SI_USER
 0x10001

	)

342 
	#SI_QUEUE
 0x10002

	)

343 
	#SI_TIMER
 0x10003

	)

344 
	#SI_ASYNCIO
 0x10004

	)

345 
	#SI_MESGQ
 0x10005

	)

347 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

348 (*
	tsig_t
)();

355 
	#SS_ONSTACK
 0x0001

	)

356 
	#SS_DISABLE
 0x0004

	)

357 
	#MINSIGSTKSZ
 32768

	)

358 
	#SIGSTKSZ
 131072

	)

360 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

365 
	ssigvec
 {

366 (*
sv_h™dÀr
)();

367 
sv_mask
;

368 
sv_Êags
;

371 
	#SV_ONSTACK
 
SA_ONSTACK


	)

372 
	#SV_INTERRUPT
 
SA_RESTART


	)

373 
	#SV_RESETHAND
 
SA_RESETHAND


	)

374 
	#SV_NODEFER
 
SA_NODEFER


	)

375 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

376 
	#SV_SIGINFO
 
SA_SIGINFO


	)

378 
	#sv_⁄°ack
 
sv_Êags


	)

384 
	ssig°ack
 {

385 *
ss_•
;

386 
ss_⁄°ack
;

389 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

394 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

397 
	#BADSIG
 
SIG_ERR


	)

406 
__BEGIN_DECLS


407 (*
	`sig«l
(, (*)()))();

408 
__END_DECLS


	@/usr/include/i386/_limits.h

22 #i‚def 
_I386__LIMITS_H_


23 
	#_I386__LIMITS_H_


	)

25 
	#__DARWIN_CLK_TCK
 100

	)

	@/usr/include/i386/_structs.h

29 
	~<sys/≠∂ópi›ts.h
>

31 #ifde‡
__√ed_mc⁄ãxt_t


32 #i‚de‡
__√ed_°ru˘_mc⁄ãxt


33 
	#__√ed_°ru˘_mc⁄ãxt


	)

37 #i‡
deföed
(
__√ed_°ru˘_mc⁄ãxt
)

38 
	~<mach/i386/_°ru˘s.h
>

42 #ifde‡
__√ed_°ru˘_mc⁄ãxt


43 #unde‡
__√ed_°ru˘_mc⁄ãxt


45 #i‚de‡
_STRUCT_MCONTEXT32


46 #i‡
__DARWIN_UNIX03


47 
	#_STRUCT_MCONTEXT32
 
__d¨wö_mc⁄ãxt32


	)

48 
	g_STRUCT_MCONTEXT32


50 
_STRUCT_X86_EXCEPTION_STATE32
 
	g__es
;

51 
_STRUCT_X86_THREAD_STATE32
 
	g__ss
;

52 
_STRUCT_X86_FLOAT_STATE32
 
	g__fs
;

55 
	#_STRUCT_MCONTEXT_AVX32
 
__d¨wö_mc⁄ãxt_avx32


	)

56 
	g_STRUCT_MCONTEXT_AVX32


58 
_STRUCT_X86_EXCEPTION_STATE32
 
	g__es
;

59 
_STRUCT_X86_THREAD_STATE32
 
	g__ss
;

60 
_STRUCT_X86_AVX_STATE32
 
	g__fs
;

64 
	#_STRUCT_MCONTEXT32
 
mc⁄ãxt32


	)

65 
	g_STRUCT_MCONTEXT32


67 
_STRUCT_X86_EXCEPTION_STATE32
 
	ges
;

68 
_STRUCT_X86_THREAD_STATE32
 
	gss
;

69 
_STRUCT_X86_FLOAT_STATE32
 
	gfs
;

72 
	#_STRUCT_MCONTEXT_AVX32
 
mc⁄ãxt_avx32


	)

73 
	g_STRUCT_MCONTEXT_AVX32


75 
_STRUCT_X86_EXCEPTION_STATE32
 
	ges
;

76 
_STRUCT_X86_THREAD_STATE32
 
	gss
;

77 
_STRUCT_X86_AVX_STATE32
 
	gfs
;

83 #i‚de‡
_STRUCT_MCONTEXT64


84 #i‡
__DARWIN_UNIX03


85 
	#_STRUCT_MCONTEXT64
 
__d¨wö_mc⁄ãxt64


	)

86 
	g_STRUCT_MCONTEXT64


88 
_STRUCT_X86_EXCEPTION_STATE64
 
	g__es
;

89 
_STRUCT_X86_THREAD_STATE64
 
	g__ss
;

90 
_STRUCT_X86_FLOAT_STATE64
 
	g__fs
;

93 
	#_STRUCT_MCONTEXT_AVX64
 
__d¨wö_mc⁄ãxt_avx64


	)

94 
	g_STRUCT_MCONTEXT_AVX64


96 
_STRUCT_X86_EXCEPTION_STATE64
 
	g__es
;

97 
_STRUCT_X86_THREAD_STATE64
 
	g__ss
;

98 
_STRUCT_X86_AVX_STATE64
 
	g__fs
;

102 
	#_STRUCT_MCONTEXT64
 
mc⁄ãxt64


	)

103 
	g_STRUCT_MCONTEXT64


105 
_STRUCT_X86_EXCEPTION_STATE64
 
	ges
;

106 
_STRUCT_X86_THREAD_STATE64
 
	gss
;

107 
_STRUCT_X86_FLOAT_STATE64
 
	gfs
;

110 
	#_STRUCT_MCONTEXT_AVX64
 
mc⁄ãxt_avx64


	)

111 
	g_STRUCT_MCONTEXT_AVX64


113 
_STRUCT_X86_EXCEPTION_STATE64
 
	ges
;

114 
_STRUCT_X86_THREAD_STATE64
 
	gss
;

115 
_STRUCT_X86_AVX_STATE64
 
	gfs
;

122 #ifde‡
__√ed_mc⁄ãxt_t


123 #unde‡
__√ed_mc⁄ãxt_t


124 #i‚de‡
_MCONTEXT_T


125 
	#_MCONTEXT_T


	)

126 #i‡
deföed
(
__LP64__
)

127 
_STRUCT_MCONTEXT64
 *
	tmc⁄ãxt_t
;

128 
	#_STRUCT_MCONTEXT
 
_STRUCT_MCONTEXT64


	)

130 
_STRUCT_MCONTEXT32
 *
	tmc⁄ãxt_t
;

131 
	#_STRUCT_MCONTEXT
 
_STRUCT_MCONTEXT32


	)

136 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

137 #i‚de‡
I386_MCONTEXT_SIZE


138 
	#I386_MCONTEXT_SIZE
 (
mc⁄ãxt
)

	)

	@/usr/include/i386/_types.h

28 #i‚def 
_BSD_I386__TYPES_H_


29 
	#_BSD_I386__TYPES_H_


	)

36 #ifde‡
__GNUC__


37 
__sig√d
 
	t__öt8_t
;

39 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 
	t__öt64_t
;

47 
	t__uöt64_t
;

49 
	t__d¨wö_öçå_t
;

50 
	t__d¨wö_«tuøl_t
;

70 
	t__d¨wö_˘_ru√_t
;

77 
	m__mb°©e8
[128];

78 
	m_mb°©eL
;

79 } 
	t__mb°©e_t
;

81 
__mb°©e_t
 
	t__d¨wö_mb°©e_t
;

83 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__PTRDIFF_TYPE__
)

84 
__PTRDIFF_TYPE__
 
	t__d¨wö_±rdiff_t
;

86 
	t__d¨wö_±rdiff_t
;

89 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__SIZE_TYPE__
)

90 
__SIZE_TYPE__
 
	t__d¨wö_size_t
;

92 
	t__d¨wö_size_t
;

95 #i‡(
__GNUC__
 > 2)

96 
__buûtö_va_li°
 
	t__d¨wö_va_li°
;

98 * 
	t__d¨wö_va_li°
;

101 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__WCHAR_TYPE__
)

102 
__WCHAR_TYPE__
 
	t__d¨wö_wch¨_t
;

104 
__d¨wö_˘_ru√_t
 
	t__d¨wö_wch¨_t
;

107 
__d¨wö_wch¨_t
 
	t__d¨wö_ru√_t
;

109 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__WINT_TYPE__
)

110 
__WINT_TYPE__
 
	t__d¨wö_wöt_t
;

112 
__d¨wö_˘_ru√_t
 
	t__d¨wö_wöt_t
;

115 
	t__d¨wö_˛ock_t
;

116 
__uöt32_t
 
	t__d¨wö_sockÀn_t
;

117 
	t__d¨wö_ssize_t
;

118 
	t__d¨wö_time_t
;

	@/usr/include/machine/signal.h

28 #i‚de‡
_BSD_MACHINE_SIGNAL_H_


29 
	#_BSD_MACHINE_SIGNAL_H_


	)

31 #i‡
deföed
 (
__i386__
Ë|| deföed(
__x86_64__
)

32 
	~"i386/sig«l.h
"

33 #ñi‡
deföed
 (
__¨m__
)

34 
	~"¨m/sig«l.h
"

36 #îr‹ 
¨chôe˘uª
 
nŸ
 
suµ‹ãd


	@/usr/include/sys/_endian.h

90 #i‚de‡
_SYS__ENDIAN_H_


91 
	#_SYS__ENDIAN_H_


	)

93 
	~<sys/cdefs.h
>

99 #i‡
deföed
(
löt
)

101 
__BEGIN_DECLS


102 
__uöt16_t
 
¡ohs
(__uint16_t);

103 
__uöt16_t
 
ht⁄s
(__uint16_t);

104 
__uöt32_t
 
¡ohl
(__uint32_t);

105 
__uöt32_t
 
ht⁄l
(__uint32_t);

106 
	g__END_DECLS


108 #ñi‡
__DARWIN_BYTE_ORDER
 =
__DARWIN_BIG_ENDIAN


110 
	#¡ohl
(
x
Ë((
__uöt32_t
)(x))

	)

111 
	#¡ohs
(
x
Ë((
__uöt16_t
)(x))

	)

112 
	#ht⁄l
(
x
Ë((
__uöt32_t
)(x))

	)

113 
	#ht⁄s
(
x
Ë((
__uöt16_t
)(x))

	)

115 #i‡ 
deföed
(
KERNEL
Ë|| (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

116 
	#NTOHL
(
x
Ë(x)

	)

117 
	#NTOHS
(
x
Ë(x)

	)

118 
	#HTONL
(
x
Ë(x)

	)

119 
	#HTONS
(
x
Ë(x)

	)

124 
	~<libkîn/_OSByãOrdî.h
>

126 
	#¡ohs
(
x
Ë
	`__DARWIN_OSSw≠I¡16
(x)

	)

127 
	#ht⁄s
(
x
Ë
	`__DARWIN_OSSw≠I¡16
(x)

	)

129 
	#¡ohl
(
x
Ë
	`__DARWIN_OSSw≠I¡32
(x)

	)

130 
	#ht⁄l
(
x
Ë
	`__DARWIN_OSSw≠I¡32
(x)

	)

132 #if 
deföed
(
KERNEL
Ë|| (!deföed(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
))

133 
	#NTOHL
(
x
Ë(xË
	`¡ohl
((
__uöt32_t
)x)

	)

134 
	#NTOHS
(
x
Ë(xË
	`¡ohs
((
__uöt16_t
)x)

	)

135 
	#HTONL
(
x
Ë(xË
	`ht⁄l
((
__uöt32_t
)x)

	)

136 
	#HTONS
(
x
Ë(xË
	`ht⁄s
((
__uöt16_t
)x)

	)

	@/usr/include/i386/signal.h

33 #i‚def 
_I386_SIGNAL_H_


34 
	#_I386_SIGNAL_H_
 1

	)

36 
	~<sys/cdefs.h
>

38 #i‚de‡
_ANSI_SOURCE


39 
	tsig_©omic_t
;

41 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

43 
	~<sys/≠∂ópi›ts.h
>

45 #ifde‡
__APPLE_API_OBSOLETE


54 
	#__√ed_°ru˘_sigc⁄ãxt


	)

55 
	~<i386/_°ru˘s.h
>

	@/usr/include/libkern/_OSByteOrder.h

29 #i‚de‡
_OS__OSBYTEORDER_H


30 
	#_OS__OSBYTEORDER_H


	)

40 
	~<sys/_ty≥s.h
>

43 
	#__DARWIN_OSSw≠C⁄°I¡16
(
x
) \

44 ((
__uöt16_t
)((((__uöt16_t)(
x
) & 0xff00) >> 8) | \

45 (((
__uöt16_t
)(
x
Ë& 0x00ffË<< 8)))

	)

47 
	#__DARWIN_OSSw≠C⁄°I¡32
(
x
) \

48 ((
__uöt32_t
)((((__uöt32_t)(
x
) & 0xff000000) >> 24) | \

49 (((
__uöt32_t
)(
x
) & 0x00ff0000) >> 8) | \

50 (((
__uöt32_t
)(
x
) & 0x0000ff00) << 8) | \

51 (((
__uöt32_t
)(
x
Ë& 0x000000ffË<< 24)))

	)

53 
	#__DARWIN_OSSw≠C⁄°I¡64
(
x
) \

54 ((
__uöt64_t
)((((__uöt64_t)(
x
) & 0xff00000000000000ULL) >> 56) | \

55 (((
__uöt64_t
)(
x
) & 0x00ff000000000000ULL) >> 40) | \

56 (((
__uöt64_t
)(
x
) & 0x0000ff0000000000ULL) >> 24) | \

57 (((
__uöt64_t
)(
x
) & 0x000000ff00000000ULL) >> 8) | \

58 (((
__uöt64_t
)(
x
) & 0x00000000ff000000ULL) << 8) | \

59 (((
__uöt64_t
)(
x
) & 0x0000000000ff0000ULL) << 24) | \

60 (((
__uöt64_t
)(
x
) & 0x000000000000ff00ULL) << 40) | \

61 (((
__uöt64_t
)(
x
Ë& 0x00000000000000ffULLË<< 56)))

	)

63 #i‡
deföed
(
__GNUC__
)

65 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

66 
	~<libkîn/i386/_OSByãOrdî.h
>

69 #i‡
deföed
(
__¨m__
)

70 
	~<libkîn/¨m/OSByãOrdî.h
>

74 
	#__DARWIN_OSSw≠I¡16
(
x
) \

75 ((
__uöt16_t
)(
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__DARWIN_OSSw≠C⁄°I¡16
(xË: 
	`_OSSw≠I¡16
(x)))

	)

77 
	#__DARWIN_OSSw≠I¡32
(
x
) \

78 (
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__DARWIN_OSSw≠C⁄°I¡32
(xË: 
	`_OSSw≠I¡32
(x))

	)

80 
	#__DARWIN_OSSw≠I¡64
(
x
) \

81 (
	`__buûtö_c⁄°™t_p
(
x
Ë? 
	`__DARWIN_OSSw≠C⁄°I¡64
(xË: 
	`_OSSw≠I¡64
(x))

	)

85 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

87 #i‡!
deföed
(
__DARWIN_OS_INLINE
)

88 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

89 
	#__DARWIN_OS_INLINE
 
ölöe


	)

90 #ñi‡
deföed
(
__MWERKS__
Ë|| deföed(
__˝lu•lus
)

91 
	#__DARWIN_OS_INLINE
 
ölöe


	)

93 
	#__DARWIN_OS_INLINE
 
__ölöe__


	)

97 
__DARWIN_OS_INLINE


98 
uöt16_t


99 
	$_OSSw≠I¡16
(

100 
uöt16_t
 
d©a


103  
	`__DARWIN_OSSw≠C⁄°I¡16
(
d©a
);

104 
	}
}

106 
__DARWIN_OS_INLINE


107 
uöt32_t


108 
	$_OSSw≠I¡32
(

109 
uöt32_t
 
d©a


112  
	`__DARWIN_OSSw≠C⁄°I¡32
(
d©a
);

113 
	}
}

115 
__DARWIN_OS_INLINE


116 
uöt64_t


117 
	$_OSSw≠I¡64
(

118 
uöt64_t
 
d©a


121  
	`__DARWIN_OSSw≠C⁄°I¡64
(
d©a
);

122 
	}
}

125 
	#__DARWIN_OSSw≠I¡16
(
x
Ë
	`_OSSw≠I¡16
(x)

	)

127 
	#__DARWIN_OSSw≠I¡32
(
x
Ë
	`_OSSw≠I¡32
(x)

	)

129 
	#__DARWIN_OSSw≠I¡64
(
x
Ë
	`_OSSw≠I¡64
(x)

	)

	@/usr/include/mach/i386/_structs.h

32 #i‚def 
_MACH_I386__STRUCTS_H_


33 
	#_MACH_I386__STRUCTS_H_


	)

41 #i‡
__DARWIN_UNIX03


42 
	#_STRUCT_X86_THREAD_STATE32
 
__d¨wö_i386_thªad_°©e


	)

43 
	g_STRUCT_X86_THREAD_STATE32


45 
	g__óx
;

46 
	g__ebx
;

47 
	g__ecx
;

48 
	g__edx
;

49 
	g__edi
;

50 
	g__esi
;

51 
	g__ebp
;

52 
	g__e•
;

53 
	g__ss
;

54 
	g__eÊags
;

55 
	g__eù
;

56 
	g__cs
;

57 
	g__ds
;

58 
	g__es
;

59 
	g__fs
;

60 
	g__gs
;

63 
	#_STRUCT_X86_THREAD_STATE32
 
i386_thªad_°©e


	)

64 
	g_STRUCT_X86_THREAD_STATE32


66 
	góx
;

67 
	gebx
;

68 
	gecx
;

69 
	gedx
;

70 
	gedi
;

71 
	gesi
;

72 
	gebp
;

73 
	ge•
;

74 
	gss
;

75 
	geÊags
;

76 
	geù
;

77 
	gcs
;

78 
	gds
;

79 
	ges
;

80 
	gfs
;

81 
	ggs
;

87 #i‡
__DARWIN_UNIX03


88 
	#_STRUCT_FP_CONTROL
 
__d¨wö_Â_c⁄åﬁ


	)

89 
	g_STRUCT_FP_CONTROL


91 
	g__övÆid
 :1,

92 
	g__dí‹m
 :1,

93 
	g__zdiv
 :1,

94 
	g__ovrÊ
 :1,

95 
	g__undÊ
 :1,

96 
	g__¥ecis
 :1,

98 
	g__pc
 :2,

99 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

100 
	#FP_PREC_24B
 0

	)

101 
	#FP_PREC_53B
 2

	)

102 
	#FP_PREC_64B
 3

	)

104 
	g__rc
 :2,

105 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

106 
	#FP_RND_NEAR
 0

	)

107 
	#FP_RND_DOWN
 1

	)

108 
	#FP_RND_UP
 2

	)

109 
	#FP_CHOP
 3

	)

114 
_STRUCT_FP_CONTROL
 
	t__d¨wö_Â_c⁄åﬁ_t
;

116 
	#_STRUCT_FP_CONTROL
 
Â_c⁄åﬁ


	)

117 
	g_STRUCT_FP_CONTROL


119 
	gövÆid
 :1,

120 
	gdí‹m
 :1,

121 
	gzdiv
 :1,

122 
	govrÊ
 :1,

123 
	gundÊ
 :1,

124 
	g¥ecis
 :1,

126 
	gpc
 :2,

127 
	#FP_PREC_24B
 0

	)

128 
	#FP_PREC_53B
 2

	)

129 
	#FP_PREC_64B
 3

	)

130 
	grc
 :2,

131 
	#FP_RND_NEAR
 0

	)

132 
	#FP_RND_DOWN
 1

	)

133 
	#FP_RND_UP
 2

	)

134 
	#FP_CHOP
 3

	)

138 
_STRUCT_FP_CONTROL
 
	tÂ_c⁄åﬁ_t
;

145 #i‡
__DARWIN_UNIX03


146 
	#_STRUCT_FP_STATUS
 
__d¨wö_Â_°©us


	)

147 
	g_STRUCT_FP_STATUS


149 
	g__övÆid
 :1,

150 
	g__dí‹m
 :1,

151 
	g__zdiv
 :1,

152 
	g__ovrÊ
 :1,

153 
	g__undÊ
 :1,

154 
	g__¥ecis
 :1,

155 
	g__°kÊt
 :1,

156 
	g__îrsumm
 :1,

157 
	g__c0
 :1,

158 
	g__c1
 :1,

159 
	g__c2
 :1,

160 
	g__tos
 :3,

161 
	g__c3
 :1,

162 
	g__busy
 :1;

164 
_STRUCT_FP_STATUS
 
	t__d¨wö_Â_°©us_t
;

166 
	#_STRUCT_FP_STATUS
 
Â_°©us


	)

167 
	g_STRUCT_FP_STATUS


169 
	gövÆid
 :1,

170 
	gdí‹m
 :1,

171 
	gzdiv
 :1,

172 
	govrÊ
 :1,

173 
	gundÊ
 :1,

174 
	g¥ecis
 :1,

175 
	g°kÊt
 :1,

176 
	gîrsumm
 :1,

177 
	gc0
 :1,

178 
	gc1
 :1,

179 
	gc2
 :1,

180 
	gtos
 :3,

181 
	gc3
 :1,

182 
	gbusy
 :1;

184 
_STRUCT_FP_STATUS
 
	tÂ_°©us_t
;

189 #i‡
__DARWIN_UNIX03


190 
	#_STRUCT_MMST_REG
 
__d¨wö_mm°_ªg


	)

191 
	g_STRUCT_MMST_REG


193 
	g__mm°_ªg
[10];

194 
	g__mm°_r§v
[6];

197 
	#_STRUCT_MMST_REG
 
mm°_ªg


	)

198 
	g_STRUCT_MMST_REG


200 
	gmm°_ªg
[10];

201 
	gmm°_r§v
[6];

208 #i‡
__DARWIN_UNIX03


209 
	#_STRUCT_XMM_REG
 
__d¨wö_xmm_ªg


	)

210 
	g_STRUCT_XMM_REG


212 
	g__xmm_ªg
[16];

215 
	#_STRUCT_XMM_REG
 
xmm_ªg


	)

216 
	g_STRUCT_XMM_REG


218 
	gxmm_ªg
[16];

226 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_DARWIN_C_SOURCE
)

227 
	#FP_STATE_BYTES
 512

	)

230 #i‡
__DARWIN_UNIX03


231 
	#_STRUCT_X86_FLOAT_STATE32
 
__d¨wö_i386_Êﬂt_°©e


	)

232 
	g_STRUCT_X86_FLOAT_STATE32


234 
	g__Âu_ª£rved
[2];

235 
_STRUCT_FP_CONTROL
 
	g__Âu_fcw
;

236 
_STRUCT_FP_STATUS
 
	g__Âu_fsw
;

237 
__uöt8_t
 
	g__Âu_·w
;

238 
__uöt8_t
 
	g__Âu_r§v1
;

239 
__uöt16_t
 
	g__Âu_f›
;

240 
__uöt32_t
 
	g__Âu_ù
;

241 
__uöt16_t
 
	g__Âu_cs
;

242 
__uöt16_t
 
	g__Âu_r§v2
;

243 
__uöt32_t
 
	g__Âu_dp
;

244 
__uöt16_t
 
	g__Âu_ds
;

245 
__uöt16_t
 
	g__Âu_r§v3
;

246 
__uöt32_t
 
	g__Âu_mxc§
;

247 
__uöt32_t
 
	g__Âu_mxc§mask
;

248 
_STRUCT_MMST_REG
 
	g__Âu_°mm0
;

249 
_STRUCT_MMST_REG
 
	g__Âu_°mm1
;

250 
_STRUCT_MMST_REG
 
	g__Âu_°mm2
;

251 
_STRUCT_MMST_REG
 
	g__Âu_°mm3
;

252 
_STRUCT_MMST_REG
 
	g__Âu_°mm4
;

253 
_STRUCT_MMST_REG
 
	g__Âu_°mm5
;

254 
_STRUCT_MMST_REG
 
	g__Âu_°mm6
;

255 
_STRUCT_MMST_REG
 
	g__Âu_°mm7
;

256 
_STRUCT_XMM_REG
 
	g__Âu_xmm0
;

257 
_STRUCT_XMM_REG
 
	g__Âu_xmm1
;

258 
_STRUCT_XMM_REG
 
	g__Âu_xmm2
;

259 
_STRUCT_XMM_REG
 
	g__Âu_xmm3
;

260 
_STRUCT_XMM_REG
 
	g__Âu_xmm4
;

261 
_STRUCT_XMM_REG
 
	g__Âu_xmm5
;

262 
_STRUCT_XMM_REG
 
	g__Âu_xmm6
;

263 
_STRUCT_XMM_REG
 
	g__Âu_xmm7
;

264 
	g__Âu_r§v4
[14*16];

265 
	g__Âu_ª£rved1
;

268 
	#_STRUCT_X86_AVX_STATE32
 
__d¨wö_i386_avx_°©e


	)

269 
	g_STRUCT_X86_AVX_STATE32


271 
	g__Âu_ª£rved
[2];

272 
_STRUCT_FP_CONTROL
 
	g__Âu_fcw
;

273 
_STRUCT_FP_STATUS
 
	g__Âu_fsw
;

274 
__uöt8_t
 
	g__Âu_·w
;

275 
__uöt8_t
 
	g__Âu_r§v1
;

276 
__uöt16_t
 
	g__Âu_f›
;

277 
__uöt32_t
 
	g__Âu_ù
;

278 
__uöt16_t
 
	g__Âu_cs
;

279 
__uöt16_t
 
	g__Âu_r§v2
;

280 
__uöt32_t
 
	g__Âu_dp
;

281 
__uöt16_t
 
	g__Âu_ds
;

282 
__uöt16_t
 
	g__Âu_r§v3
;

283 
__uöt32_t
 
	g__Âu_mxc§
;

284 
__uöt32_t
 
	g__Âu_mxc§mask
;

285 
_STRUCT_MMST_REG
 
	g__Âu_°mm0
;

286 
_STRUCT_MMST_REG
 
	g__Âu_°mm1
;

287 
_STRUCT_MMST_REG
 
	g__Âu_°mm2
;

288 
_STRUCT_MMST_REG
 
	g__Âu_°mm3
;

289 
_STRUCT_MMST_REG
 
	g__Âu_°mm4
;

290 
_STRUCT_MMST_REG
 
	g__Âu_°mm5
;

291 
_STRUCT_MMST_REG
 
	g__Âu_°mm6
;

292 
_STRUCT_MMST_REG
 
	g__Âu_°mm7
;

293 
_STRUCT_XMM_REG
 
	g__Âu_xmm0
;

294 
_STRUCT_XMM_REG
 
	g__Âu_xmm1
;

295 
_STRUCT_XMM_REG
 
	g__Âu_xmm2
;

296 
_STRUCT_XMM_REG
 
	g__Âu_xmm3
;

297 
_STRUCT_XMM_REG
 
	g__Âu_xmm4
;

298 
_STRUCT_XMM_REG
 
	g__Âu_xmm5
;

299 
_STRUCT_XMM_REG
 
	g__Âu_xmm6
;

300 
_STRUCT_XMM_REG
 
	g__Âu_xmm7
;

301 
	g__Âu_r§v4
[14*16];

302 
	g__Âu_ª£rved1
;

303 
	g__avx_ª£rved1
[64];

304 
_STRUCT_XMM_REG
 
	g__Âu_ymmh0
;

305 
_STRUCT_XMM_REG
 
	g__Âu_ymmh1
;

306 
_STRUCT_XMM_REG
 
	g__Âu_ymmh2
;

307 
_STRUCT_XMM_REG
 
	g__Âu_ymmh3
;

308 
_STRUCT_XMM_REG
 
	g__Âu_ymmh4
;

309 
_STRUCT_XMM_REG
 
	g__Âu_ymmh5
;

310 
_STRUCT_XMM_REG
 
	g__Âu_ymmh6
;

311 
_STRUCT_XMM_REG
 
	g__Âu_ymmh7
;

315 
	#_STRUCT_X86_FLOAT_STATE32
 
i386_Êﬂt_°©e


	)

316 
	g_STRUCT_X86_FLOAT_STATE32


318 
	gÂu_ª£rved
[2];

319 
_STRUCT_FP_CONTROL
 
	gÂu_fcw
;

320 
_STRUCT_FP_STATUS
 
	gÂu_fsw
;

321 
__uöt8_t
 
	gÂu_·w
;

322 
__uöt8_t
 
	gÂu_r§v1
;

323 
__uöt16_t
 
	gÂu_f›
;

324 
__uöt32_t
 
	gÂu_ù
;

325 
__uöt16_t
 
	gÂu_cs
;

326 
__uöt16_t
 
	gÂu_r§v2
;

327 
__uöt32_t
 
	gÂu_dp
;

328 
__uöt16_t
 
	gÂu_ds
;

329 
__uöt16_t
 
	gÂu_r§v3
;

330 
__uöt32_t
 
	gÂu_mxc§
;

331 
__uöt32_t
 
	gÂu_mxc§mask
;

332 
_STRUCT_MMST_REG
 
	gÂu_°mm0
;

333 
_STRUCT_MMST_REG
 
	gÂu_°mm1
;

334 
_STRUCT_MMST_REG
 
	gÂu_°mm2
;

335 
_STRUCT_MMST_REG
 
	gÂu_°mm3
;

336 
_STRUCT_MMST_REG
 
	gÂu_°mm4
;

337 
_STRUCT_MMST_REG
 
	gÂu_°mm5
;

338 
_STRUCT_MMST_REG
 
	gÂu_°mm6
;

339 
_STRUCT_MMST_REG
 
	gÂu_°mm7
;

340 
_STRUCT_XMM_REG
 
	gÂu_xmm0
;

341 
_STRUCT_XMM_REG
 
	gÂu_xmm1
;

342 
_STRUCT_XMM_REG
 
	gÂu_xmm2
;

343 
_STRUCT_XMM_REG
 
	gÂu_xmm3
;

344 
_STRUCT_XMM_REG
 
	gÂu_xmm4
;

345 
_STRUCT_XMM_REG
 
	gÂu_xmm5
;

346 
_STRUCT_XMM_REG
 
	gÂu_xmm6
;

347 
_STRUCT_XMM_REG
 
	gÂu_xmm7
;

348 
	gÂu_r§v4
[14*16];

349 
	gÂu_ª£rved1
;

352 
	#_STRUCT_X86_AVX_STATE32
 
i386_avx_°©e


	)

353 
	g_STRUCT_X86_AVX_STATE32


355 
	gÂu_ª£rved
[2];

356 
_STRUCT_FP_CONTROL
 
	gÂu_fcw
;

357 
_STRUCT_FP_STATUS
 
	gÂu_fsw
;

358 
__uöt8_t
 
	gÂu_·w
;

359 
__uöt8_t
 
	gÂu_r§v1
;

360 
__uöt16_t
 
	gÂu_f›
;

361 
__uöt32_t
 
	gÂu_ù
;

362 
__uöt16_t
 
	gÂu_cs
;

363 
__uöt16_t
 
	gÂu_r§v2
;

364 
__uöt32_t
 
	gÂu_dp
;

365 
__uöt16_t
 
	gÂu_ds
;

366 
__uöt16_t
 
	gÂu_r§v3
;

367 
__uöt32_t
 
	gÂu_mxc§
;

368 
__uöt32_t
 
	gÂu_mxc§mask
;

369 
_STRUCT_MMST_REG
 
	gÂu_°mm0
;

370 
_STRUCT_MMST_REG
 
	gÂu_°mm1
;

371 
_STRUCT_MMST_REG
 
	gÂu_°mm2
;

372 
_STRUCT_MMST_REG
 
	gÂu_°mm3
;

373 
_STRUCT_MMST_REG
 
	gÂu_°mm4
;

374 
_STRUCT_MMST_REG
 
	gÂu_°mm5
;

375 
_STRUCT_MMST_REG
 
	gÂu_°mm6
;

376 
_STRUCT_MMST_REG
 
	gÂu_°mm7
;

377 
_STRUCT_XMM_REG
 
	gÂu_xmm0
;

378 
_STRUCT_XMM_REG
 
	gÂu_xmm1
;

379 
_STRUCT_XMM_REG
 
	gÂu_xmm2
;

380 
_STRUCT_XMM_REG
 
	gÂu_xmm3
;

381 
_STRUCT_XMM_REG
 
	gÂu_xmm4
;

382 
_STRUCT_XMM_REG
 
	gÂu_xmm5
;

383 
_STRUCT_XMM_REG
 
	gÂu_xmm6
;

384 
_STRUCT_XMM_REG
 
	gÂu_xmm7
;

385 
	gÂu_r§v4
[14*16];

386 
	gÂu_ª£rved1
;

387 
	g__avx_ª£rved1
[64];

388 
_STRUCT_XMM_REG
 
	g__Âu_ymmh0
;

389 
_STRUCT_XMM_REG
 
	g__Âu_ymmh1
;

390 
_STRUCT_XMM_REG
 
	g__Âu_ymmh2
;

391 
_STRUCT_XMM_REG
 
	g__Âu_ymmh3
;

392 
_STRUCT_XMM_REG
 
	g__Âu_ymmh4
;

393 
_STRUCT_XMM_REG
 
	g__Âu_ymmh5
;

394 
_STRUCT_XMM_REG
 
	g__Âu_ymmh6
;

395 
_STRUCT_XMM_REG
 
	g__Âu_ymmh7
;

400 #i‡
__DARWIN_UNIX03


401 
	#_STRUCT_X86_EXCEPTION_STATE32
 
__d¨wö_i386_ex˚±i⁄_°©e


	)

402 
	g_STRUCT_X86_EXCEPTION_STATE32


404 
__uöt16_t
 
	g__å≠no
;

405 
__uöt16_t
 
	g__˝u
;

406 
__uöt32_t
 
	g__îr
;

407 
__uöt32_t
 
	g__Áu…vaddr
;

410 
	#_STRUCT_X86_EXCEPTION_STATE32
 
i386_ex˚±i⁄_°©e


	)

411 
	g_STRUCT_X86_EXCEPTION_STATE32


413 
__uöt16_t
 
	gå≠no
;

414 
__uöt16_t
 
	g˝u
;

415 
__uöt32_t
 
	gîr
;

416 
__uöt32_t
 
	gÁu…vaddr
;

420 #i‡
__DARWIN_UNIX03


421 
	#_STRUCT_X86_DEBUG_STATE32
 
__d¨wö_x86_debug_°©e32


	)

422 
	g_STRUCT_X86_DEBUG_STATE32


424 
	g__dr0
;

425 
	g__dr1
;

426 
	g__dr2
;

427 
	g__dr3
;

428 
	g__dr4
;

429 
	g__dr5
;

430 
	g__dr6
;

431 
	g__dr7
;

434 
	#_STRUCT_X86_DEBUG_STATE32
 
x86_debug_°©e32


	)

435 
	g_STRUCT_X86_DEBUG_STATE32


437 
	gdr0
;

438 
	gdr1
;

439 
	gdr2
;

440 
	gdr3
;

441 
	gdr4
;

442 
	gdr5
;

443 
	gdr6
;

444 
	gdr7
;

452 #i‡
__DARWIN_UNIX03


453 
	#_STRUCT_X86_THREAD_STATE64
 
__d¨wö_x86_thªad_°©e64


	)

454 
	g_STRUCT_X86_THREAD_STATE64


456 
__uöt64_t
 
	g__øx
;

457 
__uöt64_t
 
	g__rbx
;

458 
__uöt64_t
 
	g__rcx
;

459 
__uöt64_t
 
	g__rdx
;

460 
__uöt64_t
 
	g__rdi
;

461 
__uöt64_t
 
	g__rsi
;

462 
__uöt64_t
 
	g__rbp
;

463 
__uöt64_t
 
	g__r•
;

464 
__uöt64_t
 
	g__r8
;

465 
__uöt64_t
 
	g__r9
;

466 
__uöt64_t
 
	g__r10
;

467 
__uöt64_t
 
	g__r11
;

468 
__uöt64_t
 
	g__r12
;

469 
__uöt64_t
 
	g__r13
;

470 
__uöt64_t
 
	g__r14
;

471 
__uöt64_t
 
	g__r15
;

472 
__uöt64_t
 
	g__rù
;

473 
__uöt64_t
 
	g__rÊags
;

474 
__uöt64_t
 
	g__cs
;

475 
__uöt64_t
 
	g__fs
;

476 
__uöt64_t
 
	g__gs
;

479 
	#_STRUCT_X86_THREAD_STATE64
 
x86_thªad_°©e64


	)

480 
	g_STRUCT_X86_THREAD_STATE64


482 
__uöt64_t
 
	gøx
;

483 
__uöt64_t
 
	grbx
;

484 
__uöt64_t
 
	grcx
;

485 
__uöt64_t
 
	grdx
;

486 
__uöt64_t
 
	grdi
;

487 
__uöt64_t
 
	grsi
;

488 
__uöt64_t
 
	grbp
;

489 
__uöt64_t
 
	gr•
;

490 
__uöt64_t
 
	gr8
;

491 
__uöt64_t
 
	gr9
;

492 
__uöt64_t
 
	gr10
;

493 
__uöt64_t
 
	gr11
;

494 
__uöt64_t
 
	gr12
;

495 
__uöt64_t
 
	gr13
;

496 
__uöt64_t
 
	gr14
;

497 
__uöt64_t
 
	gr15
;

498 
__uöt64_t
 
	grù
;

499 
__uöt64_t
 
	grÊags
;

500 
__uöt64_t
 
	gcs
;

501 
__uöt64_t
 
	gfs
;

502 
__uöt64_t
 
	ggs
;

507 #i‡
__DARWIN_UNIX03


508 
	#_STRUCT_X86_FLOAT_STATE64
 
__d¨wö_x86_Êﬂt_°©e64


	)

509 
	g_STRUCT_X86_FLOAT_STATE64


511 
	g__Âu_ª£rved
[2];

512 
_STRUCT_FP_CONTROL
 
	g__Âu_fcw
;

513 
_STRUCT_FP_STATUS
 
	g__Âu_fsw
;

514 
__uöt8_t
 
	g__Âu_·w
;

515 
__uöt8_t
 
	g__Âu_r§v1
;

516 
__uöt16_t
 
	g__Âu_f›
;

519 
__uöt32_t
 
	g__Âu_ù
;

520 
__uöt16_t
 
	g__Âu_cs
;

522 
__uöt16_t
 
	g__Âu_r§v2
;

525 
__uöt32_t
 
	g__Âu_dp
;

526 
__uöt16_t
 
	g__Âu_ds
;

528 
__uöt16_t
 
	g__Âu_r§v3
;

529 
__uöt32_t
 
	g__Âu_mxc§
;

530 
__uöt32_t
 
	g__Âu_mxc§mask
;

531 
_STRUCT_MMST_REG
 
	g__Âu_°mm0
;

532 
_STRUCT_MMST_REG
 
	g__Âu_°mm1
;

533 
_STRUCT_MMST_REG
 
	g__Âu_°mm2
;

534 
_STRUCT_MMST_REG
 
	g__Âu_°mm3
;

535 
_STRUCT_MMST_REG
 
	g__Âu_°mm4
;

536 
_STRUCT_MMST_REG
 
	g__Âu_°mm5
;

537 
_STRUCT_MMST_REG
 
	g__Âu_°mm6
;

538 
_STRUCT_MMST_REG
 
	g__Âu_°mm7
;

539 
_STRUCT_XMM_REG
 
	g__Âu_xmm0
;

540 
_STRUCT_XMM_REG
 
	g__Âu_xmm1
;

541 
_STRUCT_XMM_REG
 
	g__Âu_xmm2
;

542 
_STRUCT_XMM_REG
 
	g__Âu_xmm3
;

543 
_STRUCT_XMM_REG
 
	g__Âu_xmm4
;

544 
_STRUCT_XMM_REG
 
	g__Âu_xmm5
;

545 
_STRUCT_XMM_REG
 
	g__Âu_xmm6
;

546 
_STRUCT_XMM_REG
 
	g__Âu_xmm7
;

547 
_STRUCT_XMM_REG
 
	g__Âu_xmm8
;

548 
_STRUCT_XMM_REG
 
	g__Âu_xmm9
;

549 
_STRUCT_XMM_REG
 
	g__Âu_xmm10
;

550 
_STRUCT_XMM_REG
 
	g__Âu_xmm11
;

551 
_STRUCT_XMM_REG
 
	g__Âu_xmm12
;

552 
_STRUCT_XMM_REG
 
	g__Âu_xmm13
;

553 
_STRUCT_XMM_REG
 
	g__Âu_xmm14
;

554 
_STRUCT_XMM_REG
 
	g__Âu_xmm15
;

555 
	g__Âu_r§v4
[6*16];

556 
	g__Âu_ª£rved1
;

559 
	#_STRUCT_X86_AVX_STATE64
 
__d¨wö_x86_avx_°©e64


	)

560 
	g_STRUCT_X86_AVX_STATE64


562 
	g__Âu_ª£rved
[2];

563 
_STRUCT_FP_CONTROL
 
	g__Âu_fcw
;

564 
_STRUCT_FP_STATUS
 
	g__Âu_fsw
;

565 
__uöt8_t
 
	g__Âu_·w
;

566 
__uöt8_t
 
	g__Âu_r§v1
;

567 
__uöt16_t
 
	g__Âu_f›
;

570 
__uöt32_t
 
	g__Âu_ù
;

571 
__uöt16_t
 
	g__Âu_cs
;

573 
__uöt16_t
 
	g__Âu_r§v2
;

576 
__uöt32_t
 
	g__Âu_dp
;

577 
__uöt16_t
 
	g__Âu_ds
;

579 
__uöt16_t
 
	g__Âu_r§v3
;

580 
__uöt32_t
 
	g__Âu_mxc§
;

581 
__uöt32_t
 
	g__Âu_mxc§mask
;

582 
_STRUCT_MMST_REG
 
	g__Âu_°mm0
;

583 
_STRUCT_MMST_REG
 
	g__Âu_°mm1
;

584 
_STRUCT_MMST_REG
 
	g__Âu_°mm2
;

585 
_STRUCT_MMST_REG
 
	g__Âu_°mm3
;

586 
_STRUCT_MMST_REG
 
	g__Âu_°mm4
;

587 
_STRUCT_MMST_REG
 
	g__Âu_°mm5
;

588 
_STRUCT_MMST_REG
 
	g__Âu_°mm6
;

589 
_STRUCT_MMST_REG
 
	g__Âu_°mm7
;

590 
_STRUCT_XMM_REG
 
	g__Âu_xmm0
;

591 
_STRUCT_XMM_REG
 
	g__Âu_xmm1
;

592 
_STRUCT_XMM_REG
 
	g__Âu_xmm2
;

593 
_STRUCT_XMM_REG
 
	g__Âu_xmm3
;

594 
_STRUCT_XMM_REG
 
	g__Âu_xmm4
;

595 
_STRUCT_XMM_REG
 
	g__Âu_xmm5
;

596 
_STRUCT_XMM_REG
 
	g__Âu_xmm6
;

597 
_STRUCT_XMM_REG
 
	g__Âu_xmm7
;

598 
_STRUCT_XMM_REG
 
	g__Âu_xmm8
;

599 
_STRUCT_XMM_REG
 
	g__Âu_xmm9
;

600 
_STRUCT_XMM_REG
 
	g__Âu_xmm10
;

601 
_STRUCT_XMM_REG
 
	g__Âu_xmm11
;

602 
_STRUCT_XMM_REG
 
	g__Âu_xmm12
;

603 
_STRUCT_XMM_REG
 
	g__Âu_xmm13
;

604 
_STRUCT_XMM_REG
 
	g__Âu_xmm14
;

605 
_STRUCT_XMM_REG
 
	g__Âu_xmm15
;

606 
	g__Âu_r§v4
[6*16];

607 
	g__Âu_ª£rved1
;

608 
	g__avx_ª£rved1
[64];

609 
_STRUCT_XMM_REG
 
	g__Âu_ymmh0
;

610 
_STRUCT_XMM_REG
 
	g__Âu_ymmh1
;

611 
_STRUCT_XMM_REG
 
	g__Âu_ymmh2
;

612 
_STRUCT_XMM_REG
 
	g__Âu_ymmh3
;

613 
_STRUCT_XMM_REG
 
	g__Âu_ymmh4
;

614 
_STRUCT_XMM_REG
 
	g__Âu_ymmh5
;

615 
_STRUCT_XMM_REG
 
	g__Âu_ymmh6
;

616 
_STRUCT_XMM_REG
 
	g__Âu_ymmh7
;

617 
_STRUCT_XMM_REG
 
	g__Âu_ymmh8
;

618 
_STRUCT_XMM_REG
 
	g__Âu_ymmh9
;

619 
_STRUCT_XMM_REG
 
	g__Âu_ymmh10
;

620 
_STRUCT_XMM_REG
 
	g__Âu_ymmh11
;

621 
_STRUCT_XMM_REG
 
	g__Âu_ymmh12
;

622 
_STRUCT_XMM_REG
 
	g__Âu_ymmh13
;

623 
_STRUCT_XMM_REG
 
	g__Âu_ymmh14
;

624 
_STRUCT_XMM_REG
 
	g__Âu_ymmh15
;

628 
	#_STRUCT_X86_FLOAT_STATE64
 
x86_Êﬂt_°©e64


	)

629 
	g_STRUCT_X86_FLOAT_STATE64


631 
	gÂu_ª£rved
[2];

632 
_STRUCT_FP_CONTROL
 
	gÂu_fcw
;

633 
_STRUCT_FP_STATUS
 
	gÂu_fsw
;

634 
__uöt8_t
 
	gÂu_·w
;

635 
__uöt8_t
 
	gÂu_r§v1
;

636 
__uöt16_t
 
	gÂu_f›
;

639 
__uöt32_t
 
	gÂu_ù
;

640 
__uöt16_t
 
	gÂu_cs
;

642 
__uöt16_t
 
	gÂu_r§v2
;

645 
__uöt32_t
 
	gÂu_dp
;

646 
__uöt16_t
 
	gÂu_ds
;

648 
__uöt16_t
 
	gÂu_r§v3
;

649 
__uöt32_t
 
	gÂu_mxc§
;

650 
__uöt32_t
 
	gÂu_mxc§mask
;

651 
_STRUCT_MMST_REG
 
	gÂu_°mm0
;

652 
_STRUCT_MMST_REG
 
	gÂu_°mm1
;

653 
_STRUCT_MMST_REG
 
	gÂu_°mm2
;

654 
_STRUCT_MMST_REG
 
	gÂu_°mm3
;

655 
_STRUCT_MMST_REG
 
	gÂu_°mm4
;

656 
_STRUCT_MMST_REG
 
	gÂu_°mm5
;

657 
_STRUCT_MMST_REG
 
	gÂu_°mm6
;

658 
_STRUCT_MMST_REG
 
	gÂu_°mm7
;

659 
_STRUCT_XMM_REG
 
	gÂu_xmm0
;

660 
_STRUCT_XMM_REG
 
	gÂu_xmm1
;

661 
_STRUCT_XMM_REG
 
	gÂu_xmm2
;

662 
_STRUCT_XMM_REG
 
	gÂu_xmm3
;

663 
_STRUCT_XMM_REG
 
	gÂu_xmm4
;

664 
_STRUCT_XMM_REG
 
	gÂu_xmm5
;

665 
_STRUCT_XMM_REG
 
	gÂu_xmm6
;

666 
_STRUCT_XMM_REG
 
	gÂu_xmm7
;

667 
_STRUCT_XMM_REG
 
	gÂu_xmm8
;

668 
_STRUCT_XMM_REG
 
	gÂu_xmm9
;

669 
_STRUCT_XMM_REG
 
	gÂu_xmm10
;

670 
_STRUCT_XMM_REG
 
	gÂu_xmm11
;

671 
_STRUCT_XMM_REG
 
	gÂu_xmm12
;

672 
_STRUCT_XMM_REG
 
	gÂu_xmm13
;

673 
_STRUCT_XMM_REG
 
	gÂu_xmm14
;

674 
_STRUCT_XMM_REG
 
	gÂu_xmm15
;

675 
	gÂu_r§v4
[6*16];

676 
	gÂu_ª£rved1
;

679 
	#_STRUCT_X86_AVX_STATE64
 
x86_avx_°©e64


	)

680 
	g_STRUCT_X86_AVX_STATE64


682 
	gÂu_ª£rved
[2];

683 
_STRUCT_FP_CONTROL
 
	gÂu_fcw
;

684 
_STRUCT_FP_STATUS
 
	gÂu_fsw
;

685 
__uöt8_t
 
	gÂu_·w
;

686 
__uöt8_t
 
	gÂu_r§v1
;

687 
__uöt16_t
 
	gÂu_f›
;

690 
__uöt32_t
 
	gÂu_ù
;

691 
__uöt16_t
 
	gÂu_cs
;

693 
__uöt16_t
 
	gÂu_r§v2
;

696 
__uöt32_t
 
	gÂu_dp
;

697 
__uöt16_t
 
	gÂu_ds
;

699 
__uöt16_t
 
	gÂu_r§v3
;

700 
__uöt32_t
 
	gÂu_mxc§
;

701 
__uöt32_t
 
	gÂu_mxc§mask
;

702 
_STRUCT_MMST_REG
 
	gÂu_°mm0
;

703 
_STRUCT_MMST_REG
 
	gÂu_°mm1
;

704 
_STRUCT_MMST_REG
 
	gÂu_°mm2
;

705 
_STRUCT_MMST_REG
 
	gÂu_°mm3
;

706 
_STRUCT_MMST_REG
 
	gÂu_°mm4
;

707 
_STRUCT_MMST_REG
 
	gÂu_°mm5
;

708 
_STRUCT_MMST_REG
 
	gÂu_°mm6
;

709 
_STRUCT_MMST_REG
 
	gÂu_°mm7
;

710 
_STRUCT_XMM_REG
 
	gÂu_xmm0
;

711 
_STRUCT_XMM_REG
 
	gÂu_xmm1
;

712 
_STRUCT_XMM_REG
 
	gÂu_xmm2
;

713 
_STRUCT_XMM_REG
 
	gÂu_xmm3
;

714 
_STRUCT_XMM_REG
 
	gÂu_xmm4
;

715 
_STRUCT_XMM_REG
 
	gÂu_xmm5
;

716 
_STRUCT_XMM_REG
 
	gÂu_xmm6
;

717 
_STRUCT_XMM_REG
 
	gÂu_xmm7
;

718 
_STRUCT_XMM_REG
 
	gÂu_xmm8
;

719 
_STRUCT_XMM_REG
 
	gÂu_xmm9
;

720 
_STRUCT_XMM_REG
 
	gÂu_xmm10
;

721 
_STRUCT_XMM_REG
 
	gÂu_xmm11
;

722 
_STRUCT_XMM_REG
 
	gÂu_xmm12
;

723 
_STRUCT_XMM_REG
 
	gÂu_xmm13
;

724 
_STRUCT_XMM_REG
 
	gÂu_xmm14
;

725 
_STRUCT_XMM_REG
 
	gÂu_xmm15
;

726 
	gÂu_r§v4
[6*16];

727 
	gÂu_ª£rved1
;

728 
	g__avx_ª£rved1
[64];

729 
_STRUCT_XMM_REG
 
	g__Âu_ymmh0
;

730 
_STRUCT_XMM_REG
 
	g__Âu_ymmh1
;

731 
_STRUCT_XMM_REG
 
	g__Âu_ymmh2
;

732 
_STRUCT_XMM_REG
 
	g__Âu_ymmh3
;

733 
_STRUCT_XMM_REG
 
	g__Âu_ymmh4
;

734 
_STRUCT_XMM_REG
 
	g__Âu_ymmh5
;

735 
_STRUCT_XMM_REG
 
	g__Âu_ymmh6
;

736 
_STRUCT_XMM_REG
 
	g__Âu_ymmh7
;

737 
_STRUCT_XMM_REG
 
	g__Âu_ymmh8
;

738 
_STRUCT_XMM_REG
 
	g__Âu_ymmh9
;

739 
_STRUCT_XMM_REG
 
	g__Âu_ymmh10
;

740 
_STRUCT_XMM_REG
 
	g__Âu_ymmh11
;

741 
_STRUCT_XMM_REG
 
	g__Âu_ymmh12
;

742 
_STRUCT_XMM_REG
 
	g__Âu_ymmh13
;

743 
_STRUCT_XMM_REG
 
	g__Âu_ymmh14
;

744 
_STRUCT_XMM_REG
 
	g__Âu_ymmh15
;

749 #i‡
__DARWIN_UNIX03


750 
	#_STRUCT_X86_EXCEPTION_STATE64
 
__d¨wö_x86_ex˚±i⁄_°©e64


	)

751 
	g_STRUCT_X86_EXCEPTION_STATE64


753 
__uöt16_t
 
	g__å≠no
;

754 
__uöt16_t
 
	g__˝u
;

755 
__uöt32_t
 
	g__îr
;

756 
__uöt64_t
 
	g__Áu…vaddr
;

759 
	#_STRUCT_X86_EXCEPTION_STATE64
 
x86_ex˚±i⁄_°©e64


	)

760 
	g_STRUCT_X86_EXCEPTION_STATE64


762 
__uöt16_t
 
	gå≠no
;

763 
__uöt16_t
 
	g˝u
;

764 
__uöt32_t
 
	gîr
;

765 
__uöt64_t
 
	gÁu…vaddr
;

769 #i‡
__DARWIN_UNIX03


770 
	#_STRUCT_X86_DEBUG_STATE64
 
__d¨wö_x86_debug_°©e64


	)

771 
	g_STRUCT_X86_DEBUG_STATE64


773 
__uöt64_t
 
	g__dr0
;

774 
__uöt64_t
 
	g__dr1
;

775 
__uöt64_t
 
	g__dr2
;

776 
__uöt64_t
 
	g__dr3
;

777 
__uöt64_t
 
	g__dr4
;

778 
__uöt64_t
 
	g__dr5
;

779 
__uöt64_t
 
	g__dr6
;

780 
__uöt64_t
 
	g__dr7
;

783 
	#_STRUCT_X86_DEBUG_STATE64
 
x86_debug_°©e64


	)

784 
	g_STRUCT_X86_DEBUG_STATE64


786 
__uöt64_t
 
	gdr0
;

787 
__uöt64_t
 
	gdr1
;

788 
__uöt64_t
 
	gdr2
;

789 
__uöt64_t
 
	gdr3
;

790 
__uöt64_t
 
	gdr4
;

791 
__uöt64_t
 
	gdr5
;

792 
__uöt64_t
 
	gdr6
;

793 
__uöt64_t
 
	gdr7
;

	@/usr/include/libkern/i386/_OSByteOrder.h

29 #i‚de‡
_OS__OSBYTEORDERI386_H


30 
	#_OS__OSBYTEORDERI386_H


	)

32 #i‡!
deföed
(
__DARWIN_OS_INLINE
)

33 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

34 
	#__DARWIN_OS_INLINE
 
ölöe


	)

35 #ñi‡
deföed
(
__MWERKS__
Ë|| deföed(
__˝lu•lus
)

36 
	#__DARWIN_OS_INLINE
 
ölöe


	)

38 
	#__DARWIN_OS_INLINE
 
__ölöe__


	)

44 
__DARWIN_OS_INLINE


45 
__uöt16_t


46 
	$_OSSw≠I¡16
(

47 
__uöt16_t
 
_d©a


50  ((
_d©a
 << 8) | (_data >> 8));

51 
	}
}

53 
__DARWIN_OS_INLINE


54 
__uöt32_t


55 
	$_OSSw≠I¡32
(

56 
__uöt32_t
 
_d©a


59 #i‡
	`deföed
(
__Œvm__
)

60  
	`__buûtö_bsw≠32
(
_d©a
);

62 
	`__asm__
 ("bsw≠ %0" : "+r" (
_d©a
));

63  
_d©a
;

65 
	}
}

67 #i‡
deföed
(
__Œvm__
)

68 
__DARWIN_OS_INLINE


69 
__uöt64_t


70 
	$_OSSw≠I¡64
(

71 
__uöt64_t
 
_d©a


74  
	`__buûtö_bsw≠64
(
_d©a
);

75 
	}
}

77 #ñi‡
deföed
(
__i386__
)

78 
__DARWIN_OS_INLINE


79 
__uöt64_t


80 
	$_OSSw≠I¡64
(

81 
__uöt64_t
 
_d©a


84 
	`__asm__
 ("bswap %%eax\n\t"

87 : "+A" (
_d©a
));

88  
_d©a
;

89 
	}
}

90 #ñi‡
deföed
(
__x86_64__
)

91 
__DARWIN_OS_INLINE


92 
__uöt64_t


93 
	$_OSSw≠I¡64
(

94 
__uöt64_t
 
_d©a


97 
	`__asm__
 ("bsw≠ %0" : "+r" (
_d©a
));

98  
_d©a
;

99 
	}
}

101 #îr‹ 
Unknown
 
¨chôe˘uª


	@
1
.
1
/usr/include
625
19072
bootloader/arch/i386/asm.h
bootloader/arch/i386/bootmain.c
bootloader/arch/i386/x86.h
bootloader/arch/or32/board.h
bootloader/arch/or32/bootmain.c
bootloader/arch/or32/gpio.h
bootloader/arch/or32/or32.h
bootloader/arch/or32/or32/or32_func.h
bootloader/arch/or32/or32/spr_defs.h
bootloader/arch/or32/spi.h
bootloader/arch/um/boot.h
bootloader/arch/um/bootloader.c
bootloader/arch/x86_64/asm.h
bootloader/arch/x86_64/bootmain.c
bootloader/arch/x86_64/x86.h
bootloader/elf.h
bootloader/types.h
glue-kern/arch/i386/glue_intr.h
glue-kern/arch/i386/glue_kio.h
glue-kern/arch/i386/glue_memlayout.h
glue-kern/arch/i386/glue_mp.h
glue-kern/arch/i386/glue_pgmap.h
glue-kern/arch/i386/mmu.h
glue-kern/arch/or32/glue_intr.h
glue-kern/arch/or32/glue_kio.h
glue-kern/arch/or32/glue_memlayout.h
glue-kern/arch/or32/glue_mp.h
glue-kern/arch/or32/glue_pgmap.h
glue-kern/arch/or32/mmu.h
glue-kern/arch/um/glue_intr.h
glue-kern/arch/um/glue_kio.h
glue-kern/arch/um/glue_memlayout.h
glue-kern/arch/um/glue_mp.h
glue-kern/arch/um/glue_pgmap.h
glue-kern/arch/um/mmu.h
glue-kern/arch/x86_64/glue_context.h
glue-kern/arch/x86_64/glue_dos.h
glue-kern/arch/x86_64/glue_intr.h
glue-kern/arch/x86_64/glue_kern.h
glue-kern/arch/x86_64/glue_kio.h
glue-kern/arch/x86_64/glue_memlayout.h
glue-kern/arch/x86_64/glue_mmu.h
glue-kern/arch/x86_64/glue_mp.h
glue-kern/arch/x86_64/glue_pgmap.h
glue-kern/arch/x86_64/glue_pmm.h
glue-kern/arch/x86_64/glue_tick.h
ht-mkram/or32/e820.h
ht-mkram/or32/mkram.c
ht-mksfs/mksfs.c
ht-mksfs/mksfs_be.c
ht-sign/i386/sign.c
ht-sign/or32/sign.c
ht-sign/x86_64/sign.c
kern-module/mod-add/mod_main.c
kern-module/mod-mul/mod_main.c
kern-river/debug/io.c
kern-river/debug/io.h
kern-river/drivers/hpet.c
kern-river/drivers/hpet.h
kern-river/drivers/pci.c
kern-river/drivers/pci.h
kern-river/drivers/pcireg.h
kern-river/drivers/rand.c
kern-river/drivers/rand.h
kern-river/drivers/timer.c
kern-river/drivers/timer.h
kern-river/init.c
kern-river/init.h
kern-river/libs/crh.c
kern-river/libs/crh.h
kern-river/libs/printfmt.c
kern-river/libs/printfmt.h
kern-river/libs/stdarg.h
kern-river/libs/string.c
kern-river/libs/string.h
kern-river/libs/types.h
kern-river/libs/x86.h
kern-river/libs/x86/atom.h
kern-river/libs/x86/bitsearch.h
kern-river/libs/x86/rdtsc.h
kern-river/libs/x86/spinlock.h
kern-river/mm/kmm.c
kern-river/mm/kmm.h
kern-river/mp/mp.c
kern-river/mp/mp.h
kern-river/object/object.h
kern-river/object/ref.h
kern-river/proc/dos.c
kern-river/proc/dos.h
kern-river/proc/eproc.c
kern-river/proc/eproc.h
kern-river/proc/event.c
kern-river/proc/event.h
kern-river/proc/ipe.c
kern-river/proc/ipe.h
kern-river/proc/proc.c
kern-river/proc/proc.h
kern-river/proc/sched.c
kern-river/proc/sched.h
kern-river/trap/trap.c
kern-river/trap/trap.h
kern-ucore/arch/i386/debug/kdebug.c
kern-ucore/arch/i386/debug/kdebug.h
kern-ucore/arch/i386/debug/monitor.c
kern-ucore/arch/i386/debug/monitor.h
kern-ucore/arch/i386/debug/panic.c
kern-ucore/arch/i386/debug/stab.h
kern-ucore/arch/i386/driver/clock.c
kern-ucore/arch/i386/driver/clock.h
kern-ucore/arch/i386/driver/console.c
kern-ucore/arch/i386/driver/console.h
kern-ucore/arch/i386/driver/ide.c
kern-ucore/arch/i386/driver/ide.h
kern-ucore/arch/i386/driver/intr.c
kern-ucore/arch/i386/driver/intr.h
kern-ucore/arch/i386/driver/kbdreg.h
kern-ucore/arch/i386/driver/picirq.c
kern-ucore/arch/i386/driver/picirq.h
kern-ucore/arch/i386/glue-ucore/kio.c
kern-ucore/arch/i386/glue-ucore/libs/arch.h
kern-ucore/arch/i386/glue-ucore/libs/asm.h
kern-ucore/arch/i386/glue-ucore/libs/atomic.h
kern-ucore/arch/i386/glue-ucore/libs/spinlock.h
kern-ucore/arch/i386/glue-ucore/mp.c
kern-ucore/arch/i386/glue-ucore/pmm.c
kern-ucore/arch/i386/glue-ucore/pmm.h
kern-ucore/arch/i386/glue-ucore/trap.c
kern-ucore/arch/i386/glue-ucore/trap.h
kern-ucore/arch/i386/init/init.c
kern-ucore/arch/i386/mm/buddy_pmm.c
kern-ucore/arch/i386/mm/buddy_pmm.h
kern-ucore/arch/i386/mm/memlayout.h
kern-ucore/arch/i386/mm/pmm.c
kern-ucore/arch/i386/mm/swap.c
kern-ucore/arch/i386/mm/vmm.c
kern-ucore/arch/i386/process/arch_proc.h
kern-ucore/arch/i386/process/proc.c
kern-ucore/arch/i386/sync/sync.h
kern-ucore/arch/i386/syscall/syscall.c
kern-ucore/arch/i386/syscall/syscall.h
kern-ucore/arch/or32/debug/panic.c
kern-ucore/arch/or32/driver/board.h
kern-ucore/arch/or32/driver/clock.c
kern-ucore/arch/or32/driver/clock.h
kern-ucore/arch/or32/driver/console.c
kern-ucore/arch/or32/driver/console.h
kern-ucore/arch/or32/driver/gpio.h
kern-ucore/arch/or32/driver/ide.c
kern-ucore/arch/or32/driver/ide.h
kern-ucore/arch/or32/driver/intr.c
kern-ucore/arch/or32/driver/intr.h
kern-ucore/arch/or32/driver/picirq.c
kern-ucore/arch/or32/driver/picirq.h
kern-ucore/arch/or32/driver/spi.h
kern-ucore/arch/or32/driver/uart.c
kern-ucore/arch/or32/driver/uart.h
kern-ucore/arch/or32/glue-ucore/kio.c
kern-ucore/arch/or32/glue-ucore/libs/arch.h
kern-ucore/arch/or32/glue-ucore/libs/atomic.h
kern-ucore/arch/or32/glue-ucore/libs/div64.c
kern-ucore/arch/or32/glue-ucore/libs/or32/or32_func.h
kern-ucore/arch/or32/glue-ucore/libs/or32/spr_defs.h
kern-ucore/arch/or32/glue-ucore/libs/spinlock.h
kern-ucore/arch/or32/glue-ucore/mp.c
kern-ucore/arch/or32/glue-ucore/pmm.c
kern-ucore/arch/or32/glue-ucore/pmm.h
kern-ucore/arch/or32/glue-ucore/trap.c
kern-ucore/arch/or32/glue-ucore/trap.h
kern-ucore/arch/or32/init/init.c
kern-ucore/arch/or32/mm/buddy_pmm.c
kern-ucore/arch/or32/mm/buddy_pmm.h
kern-ucore/arch/or32/mm/memlayout.h
kern-ucore/arch/or32/mm/pmm.c
kern-ucore/arch/or32/mm/swap.c
kern-ucore/arch/or32/mm/vmm.c
kern-ucore/arch/or32/process/arch_proc.h
kern-ucore/arch/or32/process/proc.c
kern-ucore/arch/or32/sync/sync.h
kern-ucore/arch/or32/syscall/syscall.c
kern-ucore/arch/or32/syscall/syscall.h
kern-ucore/arch/um/debug/panic.c
kern-ucore/arch/um/driver/console.c
kern-ucore/arch/um/driver/console.h
kern-ucore/arch/um/driver/ide.c
kern-ucore/arch/um/driver/ide.h
kern-ucore/arch/um/driver/intr.c
kern-ucore/arch/um/driver/intr.h
kern-ucore/arch/um/driver/umclock.c
kern-ucore/arch/um/driver/umclock.h
kern-ucore/arch/um/glue-ucore/kio.c
kern-ucore/arch/um/glue-ucore/libs/arch.h
kern-ucore/arch/um/glue-ucore/libs/atomic.h
kern-ucore/arch/um/glue-ucore/libs/host_signal.h
kern-ucore/arch/um/glue-ucore/libs/host_syscall.h
kern-ucore/arch/um/glue-ucore/libs/linux/fcntl.h
kern-ucore/arch/um/glue-ucore/libs/linux/ioctl.h
kern-ucore/arch/um/glue-ucore/libs/linux/mmap.h
kern-ucore/arch/um/glue-ucore/libs/linux/process.h
kern-ucore/arch/um/glue-ucore/libs/linux/ptrace.h
kern-ucore/arch/um/glue-ucore/libs/linux/setjmp.h
kern-ucore/arch/um/glue-ucore/libs/linux/signal.h
kern-ucore/arch/um/glue-ucore/libs/linux/syscall.h
kern-ucore/arch/um/glue-ucore/libs/linux/time.h
kern-ucore/arch/um/glue-ucore/libs/linux/wait.h
kern-ucore/arch/um/glue-ucore/libs/signal.c
kern-ucore/arch/um/glue-ucore/libs/spinlock.h
kern-ucore/arch/um/glue-ucore/libs/stub.h
kern-ucore/arch/um/glue-ucore/mp.c
kern-ucore/arch/um/glue-ucore/pmm.c
kern-ucore/arch/um/glue-ucore/pmm.h
kern-ucore/arch/um/glue-ucore/trap.c
kern-ucore/arch/um/glue-ucore/trap.h
kern-ucore/arch/um/init/host_signal.c
kern-ucore/arch/um/init/host_syscall.c
kern-ucore/arch/um/init/main.c
kern-ucore/arch/um/mm/buddy_pmm.c
kern-ucore/arch/um/mm/buddy_pmm.h
kern-ucore/arch/um/mm/memlayout.h
kern-ucore/arch/um/mm/pmm.c
kern-ucore/arch/um/mm/swap.c
kern-ucore/arch/um/mm/vmm.c
kern-ucore/arch/um/process/arch_proc.h
kern-ucore/arch/um/process/proc.c
kern-ucore/arch/um/process/process.c
kern-ucore/arch/um/process/stub.c
kern-ucore/arch/um/sync/sync.h
kern-ucore/arch/um/syscall/syscall.c
kern-ucore/arch/um/syscall/syscall.h
kern-ucore/arch/x86_64/debug/kdebug.c
kern-ucore/arch/x86_64/debug/kdebug.h
kern-ucore/arch/x86_64/debug/monitor.c
kern-ucore/arch/x86_64/debug/monitor.h
kern-ucore/arch/x86_64/debug/panic.c
kern-ucore/arch/x86_64/driver/ide.c
kern-ucore/arch/x86_64/driver/ide.h
kern-ucore/arch/x86_64/driver/intr.c
kern-ucore/arch/x86_64/driver/intr.h
kern-ucore/arch/x86_64/driver/kbdreg.h
kern-ucore/arch/x86_64/glue-ucore/clock.c
kern-ucore/arch/x86_64/glue-ucore/entry.c
kern-ucore/arch/x86_64/glue-ucore/kio.c
kern-ucore/arch/x86_64/glue-ucore/libs/arch.h
kern-ucore/arch/x86_64/glue-ucore/libs/atom.h
kern-ucore/arch/x86_64/glue-ucore/libs/atomic.h
kern-ucore/arch/x86_64/glue-ucore/libs/bitsearch.h
kern-ucore/arch/x86_64/glue-ucore/libs/spinlock.h
kern-ucore/arch/x86_64/glue-ucore/memlayout.h
kern-ucore/arch/x86_64/glue-ucore/mmu.h
kern-ucore/arch/x86_64/glue-ucore/mp.c
kern-ucore/arch/x86_64/glue-ucore/pmm.c
kern-ucore/arch/x86_64/glue-ucore/pmm.h
kern-ucore/arch/x86_64/glue-ucore/trap.c
kern-ucore/arch/x86_64/glue-ucore/trap.h
kern-ucore/arch/x86_64/mm/pmm.c
kern-ucore/arch/x86_64/mm/swap.c
kern-ucore/arch/x86_64/mm/vmm.c
kern-ucore/arch/x86_64/process/arch_proc.h
kern-ucore/arch/x86_64/process/proc.c
kern-ucore/arch/x86_64/sync/sync.h
kern-ucore/arch/x86_64/syscall/syscall.c
kern-ucore/arch/x86_64/syscall/syscall.h
kern-ucore/fs/devs/dev.c
kern-ucore/fs/devs/dev.h
kern-ucore/fs/devs/dev_disk0.c
kern-ucore/fs/devs/dev_null.c
kern-ucore/fs/devs/dev_stdin.c
kern-ucore/fs/devs/dev_stdout.c
kern-ucore/fs/file.c
kern-ucore/fs/file.h
kern-ucore/fs/fs.c
kern-ucore/fs/fs.h
kern-ucore/fs/iobuf.c
kern-ucore/fs/iobuf.h
kern-ucore/fs/pipe/pipe.c
kern-ucore/fs/pipe/pipe.h
kern-ucore/fs/pipe/pipe_inode.c
kern-ucore/fs/pipe/pipe_root.c
kern-ucore/fs/pipe/pipe_state.c
kern-ucore/fs/pipe/pipe_state.h
kern-ucore/fs/sfs/bitmap.c
kern-ucore/fs/sfs/bitmap.h
kern-ucore/fs/sfs/sfs.c
kern-ucore/fs/sfs/sfs.h
kern-ucore/fs/sfs/sfs_fs.c
kern-ucore/fs/sfs/sfs_inode.c
kern-ucore/fs/sfs/sfs_io.c
kern-ucore/fs/sfs/sfs_lock.c
kern-ucore/fs/swap/swapfs.c
kern-ucore/fs/swap/swapfs.h
kern-ucore/fs/sysfile.c
kern-ucore/fs/sysfile.h
kern-ucore/fs/vfs/inode.c
kern-ucore/fs/vfs/inode.h
kern-ucore/fs/vfs/vfs.c
kern-ucore/fs/vfs/vfs.h
kern-ucore/fs/vfs/vfsdev.c
kern-ucore/fs/vfs/vfsfile.c
kern-ucore/fs/vfs/vfslookup.c
kern-ucore/fs/vfs/vfspath.c
kern-ucore/glue-ucore/clock.h
kern-ucore/glue-ucore/entry.h
kern-ucore/glue-ucore/kio.h
kern-ucore/glue-ucore/libs/assert.h
kern-ucore/glue-ucore/libs/dirent.h
kern-ucore/glue-ucore/libs/elf.h
kern-ucore/glue-ucore/libs/error.h
kern-ucore/glue-ucore/libs/hash.c
kern-ucore/glue-ucore/libs/list.h
kern-ucore/glue-ucore/libs/mboxbuf.h
kern-ucore/glue-ucore/libs/printfmt.c
kern-ucore/glue-ucore/libs/rand.c
kern-ucore/glue-ucore/libs/stat.h
kern-ucore/glue-ucore/libs/stdarg.h
kern-ucore/glue-ucore/libs/stdio.h
kern-ucore/glue-ucore/libs/stdlib.h
kern-ucore/glue-ucore/libs/string.c
kern-ucore/glue-ucore/libs/string.h
kern-ucore/glue-ucore/libs/types.h
kern-ucore/glue-ucore/libs/unistd.h
kern-ucore/glue-ucore/mp.h
kern-ucore/glue-ucore/pmm.c
kern-ucore/libs/rb_tree.c
kern-ucore/libs/rb_tree.h
kern-ucore/libs/readline.c
kern-ucore/libs/string.c
kern-ucore/mm/shmem.c
kern-ucore/mm/shmem.h
kern-ucore/mm/slab.c
kern-ucore/mm/slab.h
kern-ucore/mm/swap.c
kern-ucore/mm/swap.h
kern-ucore/mm/vmm.c
kern-ucore/mm/vmm.h
kern-ucore/module/mod.c
kern-ucore/module/mod.h
kern-ucore/module/mod_loader.c
kern-ucore/module/mod_loader.h
kern-ucore/module/mod_manager.c
kern-ucore/module/mod_manager.h
kern-ucore/process/proc.c
kern-ucore/process/proc.h
kern-ucore/schedule/sched.c
kern-ucore/schedule/sched.h
kern-ucore/schedule/sched_MLFQ.c
kern-ucore/schedule/sched_MLFQ.h
kern-ucore/schedule/sched_RR.c
kern-ucore/schedule/sched_RR.h
kern-ucore/sync/event.c
kern-ucore/sync/event.h
kern-ucore/sync/ipc.h
kern-ucore/sync/mbox.c
kern-ucore/sync/mbox.h
kern-ucore/sync/sem.c
kern-ucore/sync/sem.h
kern-ucore/sync/sync.c
kern-ucore/sync/wait.c
kern-ucore/sync/wait.h
libs-user-ucore/arch/i386/arch.h
libs-user-ucore/arch/i386/atomic.h
libs-user-ucore/arch/i386/syscall.c
libs-user-ucore/arch/or32/arch.h
libs-user-ucore/arch/or32/atomic.h
libs-user-ucore/arch/or32/div64.c
libs-user-ucore/arch/or32/intr.c
libs-user-ucore/arch/or32/intr.h
libs-user-ucore/arch/or32/or32/or32_func.h
libs-user-ucore/arch/or32/or32/spr_defs.h
libs-user-ucore/arch/or32/sync.h
libs-user-ucore/arch/or32/syscall.c
libs-user-ucore/arch/um/arch.h
libs-user-ucore/arch/um/atomic.h
libs-user-ucore/arch/um/syscall.c
libs-user-ucore/arch/x86_64/arch.h
libs-user-ucore/arch/x86_64/atomic.h
libs-user-ucore/arch/x86_64/syscall.c
libs-user-ucore/common/dirent.h
libs-user-ucore/common/elf.h
libs-user-ucore/common/error.h
libs-user-ucore/common/hash.c
libs-user-ucore/common/list.h
libs-user-ucore/common/mboxbuf.h
libs-user-ucore/common/printfmt.c
libs-user-ucore/common/rand.c
libs-user-ucore/common/stat.h
libs-user-ucore/common/stdarg.h
libs-user-ucore/common/stdio.h
libs-user-ucore/common/stdlib.h
libs-user-ucore/common/string.c
libs-user-ucore/common/string.h
libs-user-ucore/common/types.h
libs-user-ucore/common/unistd.h
libs-user-ucore/dir.c
libs-user-ucore/dir.h
libs-user-ucore/file.c
libs-user-ucore/file.h
libs-user-ucore/lock.h
libs-user-ucore/malloc.c
libs-user-ucore/malloc.h
libs-user-ucore/mod.c
libs-user-ucore/mod.h
libs-user-ucore/panic.c
libs-user-ucore/spipe.c
libs-user-ucore/spipe.h
libs-user-ucore/stdio.c
libs-user-ucore/string.c
libs-user-ucore/syscall.c
libs-user-ucore/syscall.h
libs-user-ucore/thread.c
libs-user-ucore/thread.h
libs-user-ucore/ulib.c
libs-user-ucore/ulib.h
libs-user-ucore/umain.c
linux-dos-module/dosm-init.c
linux-dos-module/dosm-init.h
linux-dos-module/dosm-packet.c
linux-dos-module/dosm-packet.h
supervisor/arch/x86_64/context/context.c
supervisor/arch/x86_64/context/context.h
supervisor/arch/x86_64/debug/kdebug.c
supervisor/arch/x86_64/debug/kdebug.h
supervisor/arch/x86_64/debug/monitor.c
supervisor/arch/x86_64/debug/monitor.h
supervisor/arch/x86_64/debug/panic.c
supervisor/arch/x86_64/driver/acpi_conf.c
supervisor/arch/x86_64/driver/acpi_conf.h
supervisor/arch/x86_64/driver/clock.c
supervisor/arch/x86_64/driver/clock.h
supervisor/arch/x86_64/driver/console.c
supervisor/arch/x86_64/driver/console.h
supervisor/arch/x86_64/driver/driver_os.c
supervisor/arch/x86_64/driver/driver_os.h
supervisor/arch/x86_64/driver/ide.c
supervisor/arch/x86_64/driver/ide.h
supervisor/arch/x86_64/driver/intr.c
supervisor/arch/x86_64/driver/intr.h
supervisor/arch/x86_64/driver/ioapic.c
supervisor/arch/x86_64/driver/ioapic.h
supervisor/arch/x86_64/driver/kbdreg.h
supervisor/arch/x86_64/driver/lapic.c
supervisor/arch/x86_64/driver/lapic.h
supervisor/arch/x86_64/driver/picirq.c
supervisor/arch/x86_64/driver/picirq.h
supervisor/arch/x86_64/driver/sysconf.c
supervisor/arch/x86_64/driver/sysconf.h
supervisor/arch/x86_64/init/init.c
supervisor/arch/x86_64/init/kern.c
supervisor/arch/x86_64/init/kern.h
supervisor/arch/x86_64/libs/arch.h
supervisor/arch/x86_64/libs/atom.h
supervisor/arch/x86_64/libs/atomic.h
supervisor/arch/x86_64/libs/cpuid.h
supervisor/arch/x86_64/libs/spinlock.h
supervisor/arch/x86_64/mm/boot_alloc.c
supervisor/arch/x86_64/mm/boot_alloc.h
supervisor/arch/x86_64/mm/memlayout.h
supervisor/arch/x86_64/mm/memmap.c
supervisor/arch/x86_64/mm/memmap.h
supervisor/arch/x86_64/mm/mmu.h
supervisor/arch/x86_64/mm/pmm.c
supervisor/arch/x86_64/mm/pmm.h
supervisor/arch/x86_64/mp/boot_ap.S.h
supervisor/arch/x86_64/mp/lcpu.c
supervisor/arch/x86_64/mp/lcpu.h
supervisor/arch/x86_64/mp/mp.c
supervisor/arch/x86_64/mp/mp.h
supervisor/arch/x86_64/sync/sync.h
supervisor/arch/x86_64/trap/trap.c
supervisor/arch/x86_64/trap/trap.h
supervisor/libs/assert.h
supervisor/libs/elf.h
supervisor/libs/error.h
supervisor/libs/list.h
supervisor/libs/printfmt.c
supervisor/libs/readline.c
supervisor/libs/stdarg.h
supervisor/libs/stdio.c
supervisor/libs/stdio.h
supervisor/libs/string.c
supervisor/libs/string.h
supervisor/libs/types.h
supervisor/mm/buddy_pmm.c
supervisor/mm/buddy_pmm.h
supervisor/mm/pmm.c
user-ucore/archive/badsegment.c
user-ucore/archive/softint.c
user-ucore/badarg.c
user-ucore/badbrktest.c
user-ucore/brkfreetest.c
user-ucore/brktest.c
user-ucore/buggy_event.c
user-ucore/buggy_wait.c
user-ucore/buggy_wait2.c
user-ucore/cat.c
user-ucore/cowtest.c
user-ucore/divzero.c
user-ucore/echo.c
user-ucore/eventtest.c
user-ucore/exit.c
user-ucore/faultread.c
user-ucore/faultreadkernel.c
user-ucore/forktest.c
user-ucore/forktree.c
user-ucore/fread_test.c
user-ucore/fread_test2.c
user-ucore/fwrite_test.c
user-ucore/hello.c
user-ucore/hello2.c
user-ucore/insmod.c
user-ucore/link.c
user-ucore/ls.c
user-ucore/lsmod.c
user-ucore/matrix.c
user-ucore/mboxmap.c
user-ucore/mboxtest.c
user-ucore/mkdir.c
user-ucore/mmaptest.c
user-ucore/nulldevfs_test.c
user-ucore/pgdir.c
user-ucore/pipetest.c
user-ucore/pipetest2.c
user-ucore/primer.c
user-ucore/primer2.c
user-ucore/primer3.c
user-ucore/pwd.c
user-ucore/rename.c
user-ucore/rmmod.c
user-ucore/robot.c
user-ucore/sem_rf.c
user-ucore/sem_wf.c
user-ucore/semtest.c
user-ucore/semtest2.c
user-ucore/semtest3.c
user-ucore/semtest4.c
user-ucore/sfs_dirtest1.c
user-ucore/sfs_dirtest2.c
user-ucore/sfs_dirtest3.c
user-ucore/sfs_exectest1.c
user-ucore/sfs_exectest2.c
user-ucore/sfs_filetest1.c
user-ucore/sfs_filetest2.c
user-ucore/sfs_filetest3.c
user-ucore/sh.c
user-ucore/shmemtest.c
user-ucore/sleep.c
user-ucore/sleepkill.c
user-ucore/spin.c
user-ucore/spipetest.c
user-ucore/spipetest2.c
user-ucore/swaptest.c
user-ucore/test_mod_add.c
user-ucore/test_mod_mul.c
user-ucore/testbss.c
user-ucore/threadbench1.c
user-ucore/threadfork.c
user-ucore/threadgroup1.c
user-ucore/threadgroup2.c
user-ucore/threadtest.c
user-ucore/threadwork.c
user-ucore/time.c
user-ucore/unlink.c
user-ucore/waitkill.c
user-ucore/yield.c
/usr/include/assert.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/limits.h
/usr/include/monitor.h
/usr/include/sched.h
/usr/include/stab.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/Availability.h
/usr/include/_types.h
/usr/include/_xlocale.h
/usr/include/alloca.h
/usr/include/machine/endian.h
/usr/include/machine/limits.h
/usr/include/machine/types.h
/usr/include/pthread_impl.h
/usr/include/secure/_stdio.h
/usr/include/secure/_string.h
/usr/include/strings.h
/usr/include/sys/_structs.h
/usr/include/sys/_types.h
/usr/include/sys/appleapiopts.h
/usr/include/sys/cdefs.h
/usr/include/sys/dirent.h
/usr/include/sys/errno.h
/usr/include/sys/fcntl.h
/usr/include/sys/select.h
/usr/include/sys/syslimits.h
/usr/include/sys/unistd.h
/usr/include/sys/wait.h
/usr/include/xlocale/_stdio.h
/usr/include/xlocale/_stdlib.h
/usr/include/xlocale/_string.h
/usr/include/AvailabilityInternal.h
/usr/include/i386/endian.h
/usr/include/i386/limits.h
/usr/include/i386/types.h
/usr/include/machine/_structs.h
/usr/include/machine/_types.h
/usr/include/secure/_common.h
/usr/include/sys/_posix_availability.h
/usr/include/sys/_select.h
/usr/include/sys/_symbol_aliasing.h
/usr/include/sys/resource.h
/usr/include/sys/signal.h
/usr/include/i386/_limits.h
/usr/include/i386/_structs.h
/usr/include/i386/_types.h
/usr/include/machine/signal.h
/usr/include/sys/_endian.h
/usr/include/i386/signal.h
/usr/include/libkern/_OSByteOrder.h
/usr/include/mach/i386/_structs.h
/usr/include/libkern/i386/_OSByteOrder.h
